/*  CREATE DATABASE 'pcp.fdb' DEFAULT CHARACTER SET NONE  */

/*   External Function declarations  */
DECLARE EXTERNAL FUNCTION ABS
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_abs' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION ACOS
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_acos' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION ADDDAY
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addDay' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ADDHOUR
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addHour' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ADDMILLISECOND
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addMilliSecond' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ADDMINUTE
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addMinute' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ADDMONTH
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addMonth' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ADDSECOND
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addSecond' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ADDWEEK
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addWeek' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ADDYEAR
TIMESTAMP, INTEGER
RETURNS TIMESTAMP 
ENTRY_POINT 'addYear' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION ASCII_CHAR
INTEGER
RETURNS CSTRING(1) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_ascii_char' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION ASCII_VAL
CHAR(1) CHARACTER SET NONE
RETURNS INTEGER BY VALUE 
ENTRY_POINT 'IB_UDF_ascii_val' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION ASIN
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_asin' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION ATAN
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_atan' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION ATAN2
DOUBLE PRECISION, DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_atan2' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION BIN_AND
INTEGER, INTEGER
RETURNS INTEGER BY VALUE 
ENTRY_POINT 'IB_UDF_bin_and' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION BIN_OR
INTEGER, INTEGER
RETURNS INTEGER BY VALUE 
ENTRY_POINT 'IB_UDF_bin_or' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION BIN_XOR
INTEGER, INTEGER
RETURNS INTEGER BY VALUE 
ENTRY_POINT 'IB_UDF_bin_xor' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION CEILING
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_ceiling' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION COS
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_cos' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION COSH
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_cosh' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION COT
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_cot' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION DIV
INTEGER, INTEGER
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_div' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION DNULLIF
DOUBLE PRECISION BY DESCRIPTOR, DOUBLE PRECISION BY DESCRIPTOR
RETURNS DOUBLE PRECISION BY DESCRIPTOR 
ENTRY_POINT 'dNullIf' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION DNVL
DOUBLE PRECISION BY DESCRIPTOR, DOUBLE PRECISION BY DESCRIPTOR
RETURNS DOUBLE PRECISION BY DESCRIPTOR 
ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION DOW
TIMESTAMP, VARCHAR(15) CHARACTER SET NONE
RETURNS PARAMETER 2
ENTRY_POINT 'DOW' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION DPOWER
DOUBLE PRECISION BY DESCRIPTOR, DOUBLE PRECISION BY DESCRIPTOR, DOUBLE PRECISION BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'power' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION FLOOR
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_floor' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION GETEXACTTIMESTAMP
TIMESTAMP
RETURNS PARAMETER 1
ENTRY_POINT 'getExactTimestamp' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION I64NULLIF
NUMERIC(15, 4) BY DESCRIPTOR, NUMERIC(15, 4) BY DESCRIPTOR
RETURNS NUMERIC(15, 4) BY DESCRIPTOR 
ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION I64NVL
DOUBLE PRECISION BY DESCRIPTOR, DOUBLE PRECISION BY DESCRIPTOR
RETURNS DOUBLE PRECISION BY DESCRIPTOR 
ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION I64ROUND
NUMERIC(15, 4) BY DESCRIPTOR, NUMERIC(15, 4) BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION I64TRUNCATE
DOUBLE PRECISION BY DESCRIPTOR, DOUBLE PRECISION BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION INULLIF
INTEGER BY DESCRIPTOR, INTEGER BY DESCRIPTOR
RETURNS INTEGER BY DESCRIPTOR 
ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION INVL
INTEGER BY DESCRIPTOR, INTEGER BY DESCRIPTOR
RETURNS INTEGER BY DESCRIPTOR 
ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION LN
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_ln' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION LOG
DOUBLE PRECISION, DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_log' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION LOG10
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_log10' MODULE_NAME 'ib_udf';

/* DECLARE EXTERNAL FUNCTION LOWER
CSTRING(80) CHARACTER SET NONE
RETURNS CSTRING(80) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_lower' MODULE_NAME 'ib_udf';
 */
DECLARE EXTERNAL FUNCTION LPAD
CSTRING(80) CHARACTER SET NONE, INTEGER, CSTRING(1) CHARACTER SET NONE
RETURNS CSTRING(80) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_lpad' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION LTRIM
CSTRING(80) CHARACTER SET NONE
RETURNS CSTRING(80) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_ltrim' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION MOD
INTEGER, INTEGER
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_mod' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION PI

RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_pi' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION RAND

RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_rand' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION ROUND
INTEGER BY DESCRIPTOR, INTEGER BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION RPAD
CSTRING(80) CHARACTER SET NONE, INTEGER, CSTRING(1) CHARACTER SET NONE
RETURNS CSTRING(80) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_rpad' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION RTRIM
CSTRING(80) CHARACTER SET NONE
RETURNS CSTRING(80) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_rtrim' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION SDOW
TIMESTAMP, VARCHAR(5) CHARACTER SET NONE
RETURNS PARAMETER 2
ENTRY_POINT 'SDOW' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION SIGN
DOUBLE PRECISION
RETURNS INTEGER BY VALUE 
ENTRY_POINT 'IB_UDF_sign' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION SIN
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_sin' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION SINH
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_sinh' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION SNULLIF
VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR, VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR, VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'sNullIf' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION SNVL
VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR, VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR, VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'sNvl' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION SQRT
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_sqrt' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION SRIGHT
VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR, SMALLINT, VARCHAR(100) CHARACTER SET NONE BY DESCRIPTOR
RETURNS PARAMETER 3
ENTRY_POINT 'right' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION STRING2BLOB
VARCHAR(300) CHARACTER SET NONE BY DESCRIPTOR, BLOB
RETURNS PARAMETER 2
ENTRY_POINT 'string2blob' MODULE_NAME 'fbudf';

DECLARE EXTERNAL FUNCTION STRLEN
CSTRING(32767) CHARACTER SET NONE
RETURNS INTEGER BY VALUE 
ENTRY_POINT 'IB_UDF_strlen' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION SUBSTR
CSTRING(80) CHARACTER SET NONE, SMALLINT, SMALLINT
RETURNS CSTRING(80) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_substr' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION SUBSTRLEN
CSTRING(80) CHARACTER SET NONE, SMALLINT, SMALLINT
RETURNS CSTRING(80) CHARACTER SET NONE FREE_IT
ENTRY_POINT 'IB_UDF_substrlen' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION TAN
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_tan' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION TANH
DOUBLE PRECISION
RETURNS DOUBLE PRECISION BY VALUE 
ENTRY_POINT 'IB_UDF_tanh' MODULE_NAME 'ib_udf';

DECLARE EXTERNAL FUNCTION TRUNCATE
INTEGER BY DESCRIPTOR, INTEGER BY DESCRIPTOR
RETURNS PARAMETER 2
ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';


/*   Generators or sequences  */
CREATE GENERATOR IBE$VERSION_HISTORY_ID_GEN;

/*  Domain definitions  */
CREATE DOMAIN DOM_ENTE_POSITIVO AS INTEGER
         DEFAULT 0
         CHECK (Value >= 0) NOT NULL;
CREATE DOMAIN DOM_FECH_SISTEMA AS TIMESTAMP
         DEFAULT 'NOW' NOT NULL;
CREATE DOMAIN DOM_IMAGEN AS BLOB SUB_TYPE 0 SEGMENT SIZE 80;
CREATE DOMAIN DOM_LOGICO AS INTEGER
         DEFAULT 1
         CHECK (Value in (1,-1)) NOT NULL;
CREATE DOMAIN DOM_OBSERVACIONES AS VARCHAR(5000);
CREATE DOMAIN DOM_PORCENTAJE AS SMALLINT
         DEFAULT 0
         CHECK (Value between 0 and 100) NOT NULL;
CREATE DOMAIN DOM_REAL AS NUMERIC(15, 5);
CREATE DOMAIN DOM_REAL_POSITIVO AS NUMERIC(15, 5)
         CHECK ((Value is null) or (Value >= 0));
CREATE DOMAIN DOM_USUA_SISTEMA AS VARCHAR(20)
         DEFAULT USER NOT NULL;

/*  Table: C008$BATCH, Owner: SYSDBA  */
CREATE TABLE C008$BATCH (BATCH VARCHAR(6) NOT NULL,
        LOCATION VARCHAR(4),
        DC_CODE VARCHAR(4),
        ISD VARCHAR(6),
        QUALITY VARCHAR(1),
        FINALIZADO SMALLINT DEFAULT 0,
CONSTRAINT C08_CPSI_BATCH PRIMARY KEY (BATCH));

/*  Table: C008$CONTRACT, Owner: SYSDBA  */
CREATE TABLE C008$CONTRACT (LOCATION VARCHAR(4),
        CONTRACT VARCHAR(8),
        PRODUCT VARCHAR(10),
        TIPO VARCHAR(12),
        COD_CLIENTE VARCHAR(12));

/*  Table: C008$CONTRATOS, Owner: SYSDBA  */
CREATE TABLE C008$CONTRATOS (NUM_CONTRATO VARCHAR(12) NOT NULL,
        COD_REFERENCIA VARCHAR(12) NOT NULL,
        COD_LAVADO VARCHAR(12),
        PED_UNIDADES INTEGER,
        CAR_IMPRESOS INTEGER DEFAULT 0,
        CAR_INICIAL DOUBLE PRECISION,
        NUM_CARTONS INTEGER,
        ISD_PRIMERAS VARCHAR(12),
        ISD_SEGUNDAS VARCHAR(12),
        NUM_FACTURA VARCHAR(12),
        VAL_FACTURA DOUBLE PRECISION,
        COD_FIR_PAG_COLOMBIA INTEGER,
        GPA VARCHAR(30),
        PORT_EXPORT VARCHAR(30),
        PLANTA VARCHAR(12),
        DAT_EXPORT TIMESTAMP DEFAULT 'NOW', -- CURRENT_TIMESTAMP
        DAT_ARRIVAL TIMESTAMP DEFAULT 'NOW', -- CURRENT_TIMESTAMP
        PORT_ENTRY VARCHAR(30) DEFAULT 'MIAMI - UNITED STATES',
        QUOTA_CATEGORY VARCHAR(12) DEFAULT '347',
        FINAL_DESTINATION VARCHAR(10),
        CONSIGNEE VARCHAR(30) DEFAULT 'LEVI STRAUSS & CO.',
        PAYMENT VARCHAR(30) DEFAULT 'WIRE TRANSFER',
        AWB VARCHAR(30),
        PARA VARCHAR(50) DEFAULT 'LEVI STRAUSS EXIMCO SOUTH AMERICA',
        DES_OF_CONTENT VARCHAR(100),
        UNIT_VALUE DOUBLE PRECISION DEFAULT 0,
        LOCATION VARCHAR(12),
        DC_NUMBER VARCHAR(1),
        DC_CODE VARCHAR(12),
        COR_I VARCHAR(7),
        COR_N VARCHAR(6),
        MILL VARCHAR(3),
        RECEIVED VARCHAR(8),
        PRODUCT COMPUTED BY (cod_referencia || '-' || cod_lavado), 
        /* PRODUCT VARCHAR(30) AS (CONCAT(cod_referencia, '-', cod_lavado)), */
CONSTRAINT PK_C008$CONTRATOS PRIMARY KEY (NUM_CONTRATO));

/*  Table: C008$COR_PROD, Owner: SYSDBA  */
CREATE TABLE C008$COR_PROD (COR_I VARCHAR(7),
        PRODUCT_SEQ VARCHAR(1),
        LOCATION VARCHAR(4),
        COR_N VARCHAR(6),
        MILL VARCHAR(3),
        CONTRACT VARCHAR(8),
        PRODUCT VARCHAR(10),
        QUANTITY VARCHAR(7),
        RECEIVED VARCHAR(8));

/*  Table: C008$COR_SIZE, Owner: SYSDBA  */
CREATE TABLE C008$COR_SIZE (COR_I VARCHAR(7),
        PRODUCT_SEQ VARCHAR(1),
        SIZE_SEQ VARCHAR(3),
        WAIST VARCHAR(3),
        LENGT_ VARCHAR(3),
        QUANTITY VARCHAR(5),
        LOTE INTEGER);

/*  Table: C008$DC, Owner: SYSDBA  */
CREATE TABLE C008$DC (DC_CODE VARCHAR(4) NOT NULL,
        NAME VARCHAR(30),
        DC_NUMBER VARCHAR(1),
        SHIPSECONDS VARCHAR(4),
        ADDRESS1 VARCHAR(30),
        ADDRESS2 VARCHAR(30),
        ADDRESS3 VARCHAR(30),
        ADDRESS4 VARCHAR(30),
        ADDRESS5 VARCHAR(30),
CONSTRAINT C008$DC_PK PRIMARY KEY (DC_CODE));

/*  Table: C008$FIRMAS, Owner: SYSDBA  */
CREATE TABLE C008$FIRMAS (COD_FIRMA INTEGER NOT NULL,
        CAMPO1 VARCHAR(50) NOT NULL,
        CAMPO2 VARCHAR(50),
        CAMPO3 VARCHAR(50),
        CAMPO4 VARCHAR(50),
        EMPRESA VARCHAR(30) DEFAULT 'C.I. INDEX S.A.',
CONSTRAINT PK_C008$FIRMAS PRIMARY KEY (COD_FIRMA));

/*  Table: C008$ISD, Owner: SYSDBA  */
CREATE TABLE C008$ISD (ISD VARCHAR(6) NOT NULL,
        LOCATION VARCHAR(4),
        STATUS VARCHAR(1),
        DC_CODE VARCHAR(4),
        INVOICE VARCHAR(10),
        BOL VARCHAR(7),
        TRAILER VARCHAR(7),
        SEAL VARCHAR(7),
        WEIGTH VARCHAR(5),
        CARRIER_CODE VARCHAR(4),
        CARRIER_NAME VARCHAR(25),
        PREPARED_BY VARCHAR(20),
CONSTRAINT PK_C008$ISD PRIMARY KEY (ISD));

/*  Table: C008$ISD_CMTS, Owner: SYSDBA  */
CREATE TABLE C008$ISD_CMTS (ISD VARCHAR(6) NOT NULL,
        COMMENTS_SEQ VARCHAR(2),
        COMMENTS VARCHAR(68),
CONSTRAINT PK_C008$ISD_CMTS PRIMARY KEY (ISD));

/*  Table: C008$ISD_DTL, Owner: SYSDBA  */
CREATE TABLE C008$ISD_DTL (ISD VARCHAR(6) NOT NULL,
        CONTRACT VARCHAR(8) NOT NULL,
        PRODUCT VARCHAR(10) NOT NULL,
        QUALITY VARCHAR(1) NOT NULL,
        TAG VARCHAR(8) NOT NULL,
        TAG_SIZE_SEQ VARCHAR(1) NOT NULL,
        CSIZE VARCHAR(9) NOT NULL,
        QUANTITY INTEGER,
        BATCH VARCHAR(6),
CONSTRAINT PK_C008$ISD_DTL PRIMARY KEY (ISD, CONTRACT, PRODUCT, QUALITY, TAG, TAG_SIZE_SEQ, CSIZE));

/*  Table: C008$ISD_SUM, Owner: SYSDBA  */
CREATE TABLE C008$ISD_SUM (ISD VARCHAR(6) NOT NULL,
        CONTRACT VARCHAR(8) NOT NULL,
        PRODUCT VARCHAR(10) NOT NULL,
        QUALITY VARCHAR(1) NOT NULL,
        CARTONS INTEGER,
        QUANTITY INTEGER,
        DETAL_COMMENTS VARCHAR(35),
CONSTRAINT PK_C008$ISD_SUM PRIMARY KEY (ISD, CONTRACT, PRODUCT, QUALITY));

/*  Table: C008$NEWBATCH, Owner: SYSDBA  */
CREATE TABLE C008$NEWBATCH (BATCH FLOAT NOT NULL);

/*  Table: C008$PESOS, Owner: SYSDBA  */
CREATE TABLE C008$PESOS (LESTILOS VARCHAR(5) NOT NULL,
        LLAVADOS VARCHAR(4) NOT NULL,
        LTALLA VARCHAR(10) NOT NULL,
        LPESO FLOAT DEFAULT 0,
        GPESO FLOAT DEFAULT 0,
CONSTRAINT PK_C08_CPSI_PESOS PRIMARY KEY (LESTILOS, LLAVADOS, LTALLA));

/*  Table: C008$TAG_LEVIS, Owner: SYSDBA  */
CREATE TABLE C008$TAG_LEVIS (TAG VARCHAR(8) NOT NULL,
        TAG_SIZE_SEQ INTEGER DEFAULT 0 NOT NULL,
        QUANTITY DOUBLE PRECISION,
        TALLA VARCHAR(5),
        ENTREPIERNA VARCHAR(5),
        NUM_CONTRATO VARCHAR(12),
        REAL_QUANTITY FLOAT DEFAULT 0,
        BATCH VARCHAR(6),
        LOCATION VARCHAR(4),
        DC_CODE VARCHAR(4),
        PRODUCT VARCHAR(10),
        SCAN_SEQ VARCHAR(5) DEFAULT '00000',
        QUALITY VARCHAR(3),
        DESCARGADO INTEGER DEFAULT 0,
        ULT_LECTURA TIMESTAMP,
CONSTRAINT PK_C08_CPSI_TAG_LEVIS PRIMARY KEY (TAG, TAG_SIZE_SEQ));

/*  Table: C08_GP_INSUMOS, Owner: SYSDBA  */
CREATE TABLE C08_GP_INSUMOS (CODI_INSU_GRUPO VARCHAR(12) NOT NULL,
        CODI_INSU_SUBGRUPO VARCHAR(12) NOT NULL,
        CODI_UNI_MEDI_PLAN VARCHAR(12) NOT NULL,
        CODI_UNID_MEDIDA VARCHAR(12) NOT NULL,
        CODI_INSU_REFERENCIA VARCHAR(12) NOT NULL,
        NOMB_INSU_REFERENCIA VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        TIPO_MOVIMIENTO INTEGER NOT NULL,
        DESC_BREVE VARCHAR(20),
        RESULTADO VARCHAR(240));

/*  Table: C08_GP_MATERIALES, Owner: SYSDBA  */
CREATE TABLE C08_GP_MATERIALES (CODI_MATE_GRUPO VARCHAR(12) NOT NULL,
        CODI_MATE_SUBGRUPO VARCHAR(12) NOT NULL,
        CODI_UNID_MEDI_PLAN VARCHAR(12) NOT NULL,
        CODI_UNID_MEDIDA VARCHAR(12) NOT NULL,
        CODI_MATE_REFERENCIA VARCHAR(12) NOT NULL,
        NOMB_MATE_REFERENCIA VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        TIPO_MOVIMIENTO INTEGER NOT NULL,
        DESC_BREVE VARCHAR(20),
        RESULTADO VARCHAR(240));

/*  Table: C08_GP_PACONTRATO, Owner: SYSDBA  */
CREATE TABLE C08_GP_PACONTRATO (CUSTNMBR VARCHAR(15) NOT NULL,
        PACONTNUMBER VARCHAR(11) NOT NULL,
        PABBEGINDATE TIMESTAMP,
        PABENDDATE TIMESTAMP,
        CNTCPRSN VARCHAR(31),
        TIPO_MOVIMIENTO INTEGER NOT NULL,
        PAUD1_CONT VARCHAR(51) NOT NULL,
        PAUD2_CONT VARCHAR(51) NOT NULL,
CONSTRAINT C08_GP_PACONTRATO_PK PRIMARY KEY (PACONTNUMBER));

/*  Table: C08_GP_PACOSTCAT, Owner: SYSDBA  */
CREATE TABLE C08_GP_PACOSTCAT (PACOSTCATID VARCHAR(15) NOT NULL,
        PATU INTEGER,
CONSTRAINT C08_GP_PACOSTOSITEMS_PK PRIMARY KEY (PACOSTCATID));

/*  Table: C08_GP_PACOSTOSPROYECTO, Owner: SYSDBA  */
CREATE TABLE C08_GP_PACOSTOSPROYECTO (PAPROJNUMBER VARCHAR(15) NOT NULL,
        PACOSTCATID VARCHAR(15) NOT NULL,
        PATU INTEGER,
        PABASE_QTY FLOAT,
        PABBEGINDATE TIMESTAMP,
        PABENDDATE TIMESTAMP,
CONSTRAINT C08_GP_PACOSTOSPROYECTO_PK PRIMARY KEY (PAPROJNUMBER, PACOSTCATID));

/*  Table: C08_GP_PAITEMS, Owner: SYSDBA  */
CREATE TABLE C08_GP_PAITEMS (PAPROJNUMBER VARCHAR(15) NOT NULL,
        PACOSTCATID VARCHAR(15) NOT NULL,
        ITEMNMBR VARCHAR(31) NOT NULL,
        PABASE_QTY FLOAT,
        UOFM VARCHAR(9),
        OUMSCHDL VARCHAR(11),
CONSTRAINT C08_GP_PAITEMS_PK PRIMARY KEY (PAPROJNUMBER, PACOSTCATID, ITEMNMBR));

/*  Table: C08_GP_PAPROYECTO, Owner: SYSDBA  */
CREATE TABLE C08_GP_PAPROYECTO (CUSTNMBR VARCHAR(15) NOT NULL,
        PACONTNUMBER VARCHAR(15) NOT NULL,
        PAPROJNUMBER VARCHAR(31) NOT NULL,
        PAPROJNAME VARCHAR(31),
        PABBEGINDATE TIMESTAMP,
        PABENDDATE TIMESTAMP,
        PABQUANTITY FLOAT,
CONSTRAINT C08_GP_PAPROYECTO_PK PRIMARY KEY (PAPROJNUMBER));

/*  Table: C08_GP_PROYECTOS, Owner: SYSDBA  */
CREATE TABLE C08_GP_PROYECTOS (PAPROJNUMBER VARCHAR(31) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        TIPO_MOVIMIENTO INTEGER NOT NULL,
        EJECUTADO DOM_LOGICO  DEFAULT -1,
        OBSERVACIONES VARCHAR(245));

/*  Table: C08_MIDA_EQUI_CENT_COSTOS, Owner: SYSDBA  */
CREATE TABLE C08_MIDA_EQUI_CENT_COSTOS (CONS_LINE_SECCION INTEGER NOT NULL,
        TIPO_CENT_COSTOS VARCHAR(3) NOT NULL,
        CODI_CENT_COSTOS VARCHAR(12) NOT NULL,
CONSTRAINT PK_C08_MIDA_EQUI_CENT_COSTOS PRIMARY KEY (CONS_LINE_SECCION));

/*  Table: C08_MIDA_NVD_PCP, Owner: SYSDBA  */
CREATE TABLE C08_MIDA_NVD_PCP (CONS_MIDA_NVD_PCP INTEGER NOT NULL,
        EMPLEADO VARCHAR(12) NOT NULL,
        FECHA TIMESTAMP DEFAULT 'NOW' NOT NULL,
        COD_AREA VARCHAR(12),
        COD_PLANTA VARCHAR(12),
        COD_SECCION VARCHAR(12),
        COD_HORARIO VARCHAR(12),
        COD_SUBGRUPO VARCHAR(12),
        COD_CEN_COSTOS VARCHAR(12),
        EJECUTADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_C08_MIDA_NVD_PCP PRIMARY KEY (CONS_MIDA_NVD_PCP));

/*  Table: C08_MIDA_PERSONAL, Owner: SYSDBA  */
CREATE TABLE C08_MIDA_PERSONAL (CODI_PERSONAL VARCHAR(12) NOT NULL,
        TIPO_MOVIMIENTO INTEGER NOT NULL,
        FECH_MOVIMIENTO TIMESTAMP NOT NULL,
        PRIM_APELLIDO VARCHAR(30) NOT NULL,
        SEGU_APELLIDO VARCHAR(30) NOT NULL,
        NOMBRES VARCHAR(40) NOT NULL,
        VIVI_CODI_PAIS VARCHAR(12) NOT NULL,
        VIVI_CODI_DEPARTAMENTO VARCHAR(12) NOT NULL,
        VIVI_CODI_CIUDAD VARCHAR(12) NOT NULL,
        VIVI_DIRECCION VARCHAR(60) NOT NULL,
        VIVI_TELEFONO VARCHAR(12) NOT NULL,
        VIVI_TELEFONO2 VARCHAR(12) NOT NULL,
        NACI_FECHA TIMESTAMP NOT NULL,
        NACI_CODI_PAIS VARCHAR(12) NOT NULL,
        NACI_CODI_DEPARTAMENTO VARCHAR(12) NOT NULL,
        NACI_CODI_CIUDAD VARCHAR(12) NOT NULL,
        CODI_TIPO_DOCUMENTO VARCHAR(12) NOT NULL,
        NUME_DOCUMENTO VARCHAR(12) NOT NULL,
        FECH_EXPE_DOCUMENTO TIMESTAMP NOT NULL,
        LUGA_EXPE_DOCUMENTO VARCHAR(60) NOT NULL,
        NUME_LIBR_MILITAR VARCHAR(12),
        FECH_EXPE_LIBR_MILITAR TIMESTAMP,
        NUME_HIJOS INTEGER NOT NULL,
        CODI_SEXO VARCHAR(12) NOT NULL,
        CODI_ESTA_CIVIL VARCHAR(12) NOT NULL,
        CODI_TIPO_CONTRATO VARCHAR(12) NOT NULL,
        CODI_NIVE_SALARIAL VARCHAR(12) NOT NULL,
        NUME_CONTRATO VARCHAR(12) NOT NULL,
        CODI_PERI_PAGO VARCHAR(12) NOT NULL,
        CODI_EMPRESA VARCHAR(12) NOT NULL,
        CODI_AREA VARCHAR(12) NOT NULL,
        CODI_PLANTA VARCHAR(12) NOT NULL,
        CODI_LINEA VARCHAR(12) NOT NULL,
        CODI_SECCION VARCHAR(12) NOT NULL,
        CODI_TURNO VARCHAR(12) NOT NULL,
        CODI_PERS_CARGO VARCHAR(12) NOT NULL,
        CODI_PERS_CENT_COSTOS VARCHAR(12) NOT NULL,
        EJECUTADO DOM_LOGICO  DEFAULT -1 NOT NULL);

/*  Table: C08_MIDA_PERS_NOVEDADES, Owner: SYSDBA  */
CREATE TABLE C08_MIDA_PERS_NOVEDADES (CODI_PERSONAL VARCHAR(12) NOT NULL,
        FECHA TIMESTAMP NOT NULL,
        EJECUTADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        TIPO_MOVIMIENTO INTEGER NOT NULL,
        RESULTADO VARCHAR(1000));

/*  Table: C08_MIDA_PERS_SALARIO, Owner: SYSDBA  */
CREATE TABLE C08_MIDA_PERS_SALARIO (CODI_PERSONAL VARCHAR(12) NOT NULL,
        FECH_MOVIMIENTO TIMESTAMP NOT NULL,
        VALO_SALARIO FLOAT NOT NULL);

/*  Table: GLO_ABONADOS, Owner: SYSDBA  */
CREATE TABLE GLO_ABONADOS (CONS_ABONADO INTEGER NOT NULL,
        CODI_ABONADO VARCHAR(12) NOT NULL,
        NOMB_ABONADO VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        PORCENTAJE DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        CONS_VALO_HORA INTEGER,
        VALO_HORA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_VALO_MINIMO INTEGER,
        VALO_MINIMO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        ADICIONAL_1 VARCHAR(12),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ABONADOS_PK PRIMARY KEY (CONS_ABONADO),
CONSTRAINT GLO_ABONADOS_CODIGO UNIQUE (CODI_ABONADO),
CONSTRAINT GLO_ABONADOS_NOMBRE UNIQUE (NOMB_ABONADO));

/*  Table: GLO_ACCESORIOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCESORIOS (CONS_ACCESORIO INTEGER NOT NULL,
        NUME_INVE_ACCESORIO VARCHAR(20) NOT NULL,
        CONS_ACCE_GRUPO INTEGER NOT NULL,
        CONS_ACCE_TIPO INTEGER NOT NULL,
        CONS_RECU_MARCA INTEGER NOT NULL,
        NUME_SERIE VARCHAR(20),
        PRESTAMO INTEGER DEFAULT -1,
        USO VARCHAR(240),
        MATE_RECOMENDADO VARCHAR(240),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO,
        DETA_IMAGEN DOM_IMAGEN,
        AJUS_DETA_IMAGEN DOM_LOGICO,
        DIME_ENTRADA NUMERIC(15, 2),
        DIME_SALIDA NUMERIC(15, 2),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCESORIOS_PK PRIMARY KEY (CONS_ACCESORIO));

/*  Table: GLO_ACCE_CARACTERISTICAS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_CARACTERISTICAS (CONS_ACCE_CARACTERISTICA INTEGER NOT NULL,
        CONS_ACCESORIO INTEGER NOT NULL,
        CONS_ACCE_CARA_TIPO INTEGER NOT NULL,
        VALOR VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_CARACTERISTICAS_PK PRIMARY KEY (CONS_ACCE_CARACTERISTICA));

/*  Table: GLO_ACCE_CARA_TIPOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_CARA_TIPOS (CONS_ACCE_CARA_TIPO INTEGER NOT NULL,
        CONS_ACCE_TIPO INTEGER NOT NULL,
        CONS_ACCE_TIPO_CARACTERISTICA INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_CARA_TIPOS_PK PRIMARY KEY (CONS_ACCE_CARA_TIPO));

/*  Table: GLO_ACCE_GRUPOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_GRUPOS (CONS_ACCE_GRUPO INTEGER NOT NULL,
        CODI_ACCE_GRUPO VARCHAR(12) NOT NULL,
        NOMB_ACCE_GRUPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_GRUPOS_PK PRIMARY KEY (CONS_ACCE_GRUPO));

/*  Table: GLO_ACCE_MOVIMIENTOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_MOVIMIENTOS (CONS_ACCE_MOVIMIENTO INTEGER NOT NULL,
        CONS_ACCE_TIPO_MOVIMIENTO INTEGER NOT NULL,
        CONS_ACCESORIO INTEGER NOT NULL,
        CONS_TIPO_DOCUMENTO INTEGER DEFAULT 0 NOT NULL,
        NUME_DOCUMENTO VARCHAR(20),
        CONS_SOLICITA INTEGER NOT NULL,
        CONS_ENTREGA INTEGER,
        CONS_RECIBE INTEGER,
        FECH_INICIAL TIMESTAMP NOT NULL,
        FECH_FINAL TIMESTAMP,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_ACCE_MOVIMIENTOS_PK PRIMARY KEY (CONS_ACCE_MOVIMIENTO));

/*  Table: GLO_ACCE_MOVI_ANULADOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_MOVI_ANULADOS (CONS_ACCE_MOVI_ANULADO INTEGER NOT NULL,
        CONS_ACCE_MOVIMIENTO INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_MOVI_ANULADOS_PK PRIMARY KEY (CONS_ACCE_MOVI_ANULADO));

/*  Table: GLO_ACCE_MOVI_BAJAS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_MOVI_BAJAS (CONS_ACCE_MOVIMIENTO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_ACCE_MOVI_BAJAS_PK PRIMARY KEY (CONS_ACCE_MOVIMIENTO));

/*  Table: GLO_ACCE_MOVI_TRASLADOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_MOVI_TRASLADOS (CONS_ACCE_MOVIMIENTO INTEGER NOT NULL,
        CONS_UBIC_TIPO INTEGER NOT NULL,
        CONS_EMPRESA INTEGER NOT NULL,
        CONS_AREA INTEGER NOT NULL,
        CONS_PLANTA INTEGER NOT NULL,
        CONS_PLAN_LINEA INTEGER NOT NULL,
        CONS_LINE_SECCION INTEGER NOT NULL,
        CONS_BODEGA INTEGER NOT NULL,
        OTRA_UBICACION VARCHAR(60),
        CONS_RECURSO INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_MOVI_TRASLADOS_PK PRIMARY KEY (CONS_ACCE_MOVIMIENTO));

/*  Table: GLO_ACCE_RECURSOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_RECURSOS (CONS_ACCE_RECURSO INTEGER NOT NULL,
        CONS_ACCESORIO INTEGER NOT NULL,
        CONS_RECU_GRUPO INTEGER NOT NULL,
        CONS_RECU_TIPO INTEGER NOT NULL,
        CONS_RECU_FAMILIA INTEGER NOT NULL,
        CONS_RECU_MARCA INTEGER,
        CLASE VARCHAR(60),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_ACCE_RECURSOS_PK PRIMARY KEY (CONS_ACCE_RECURSO));

/*  Table: GLO_ACCE_TIPOS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_TIPOS (CONS_ACCE_TIPO INTEGER NOT NULL,
        CONS_ACCE_GRUPO INTEGER NOT NULL,
        CODI_ACCE_TIPO VARCHAR(12) NOT NULL,
        NOMB_ACCE_TIPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_TIPOS_PK PRIMARY KEY (CONS_ACCE_TIPO),
CONSTRAINT GLO_ACCE_TIPO_UNICO UNIQUE (CONS_ACCE_TIPO, CONS_ACCE_GRUPO));

/*  Table: GLO_ACCE_TIPO_CARACTERISTICAS, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_TIPO_CARACTERISTICAS (CONS_ACCE_TIPO_CARACTERISTICA INTEGER NOT NULL,
        CODI_ACCE_TIPO_CARACTERISTICA VARCHAR(12) NOT NULL,
        NOMB_ACCE_TIPO_CARACTERISTICA VARCHAR(60) NOT NULL,
        OBSERVACIONES DOM_OBSERVACIONES,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_TIPO_CARACTERISITIC_PK PRIMARY KEY (CONS_ACCE_TIPO_CARACTERISTICA));

/*  Table: GLO_ACCE_TIPO_MOVIMIENTO, Owner: SYSDBA  */
CREATE TABLE GLO_ACCE_TIPO_MOVIMIENTO (CONS_ACCE_TIPO_MOVIMIENTO INTEGER NOT NULL,
        CONS_FAMI_MOVIMIENTO INTEGER NOT NULL,
        CODI_ACCE_TIPO_MOVIMIENTO VARCHAR(12) NOT NULL,
        NOMB_ACCE_TIPO_MOVIMIENTO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_ACCE_TIPO_MOVIMIENTO_PK PRIMARY KEY (CONS_ACCE_TIPO_MOVIMIENTO));

/*  Table: GLO_APLI_EVENTOS, Owner: SYSDBA  */
CREATE TABLE GLO_APLI_EVENTOS (NOMB_EVENTO VARCHAR(30) NOT NULL,
        RUTA_APLICACION VARCHAR(240) NOT NULL,
        PARAMETROS VARCHAR(240),
CONSTRAINT PK_GLO_APLI_EVENTOS PRIMARY KEY (NOMB_EVENTO));

/*  Table: GLO_AREAS, Owner: SYSDBA  */
CREATE TABLE GLO_AREAS (CONS_AREA INTEGER NOT NULL,
        CODI_AREA VARCHAR(12) NOT NULL,
        NOMB_AREA VARCHAR(60) NOT NULL,
        TELE_1 VARCHAR(30),
        TELE_2 VARCHAR(30),
        FAX VARCHAR(30),
        TELE_MOVIL VARCHAR(30),
        RESPONSABLE VARCHAR(60),
        DESCRIPCION VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_AREAS_PK PRIMARY KEY (CONS_AREA),
CONSTRAINT GLO_AREAS_CODIGO UNIQUE (CODI_AREA),
CONSTRAINT GLO_AREAS_NOMBRE UNIQUE (NOMB_AREA));

/*  Table: GLO_BODEGAS, Owner: SYSDBA  */
CREATE TABLE GLO_BODEGAS (CONS_BODEGA INTEGER NOT NULL,
        CONS_EMPRESA INTEGER NOT NULL,
        CODI_BODEGA VARCHAR(12) NOT NULL,
        NOMB_BODEGA VARCHAR(60) NOT NULL,
        CONS_PAIS INTEGER NOT NULL,
        CONS_DEPARTAMENTO INTEGER NOT NULL,
        CONS_CIUDAD INTEGER NOT NULL,
        DIRECCION VARCHAR(254),
        TELE_1 VARCHAR(30),
        TELE_2 VARCHAR(30),
        FAX VARCHAR(30),
        TELE_MOVIL VARCHAR(30),
        RESPONSABLE VARCHAR(60),
        DESCRIPCION VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_BODEGAS_PK PRIMARY KEY (CONS_BODEGA),
CONSTRAINT GLO_BODEGAS_CODIGO UNIQUE (CONS_EMPRESA, CODI_BODEGA),
CONSTRAINT GLO_BODEGAS_NOMBRE UNIQUE (CONS_EMPRESA, NOMB_BODEGA));

/*  Table: GLO_CIUDADES, Owner: SYSDBA  */
CREATE TABLE GLO_CIUDADES (CONS_CIUDAD INTEGER NOT NULL,
        CONS_PAIS INTEGER NOT NULL,
        CONS_DEPARTAMENTO INTEGER NOT NULL,
        CODI_CIUDAD VARCHAR(12) NOT NULL,
        NOMB_CIUDAD VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_CIUDADES_PK PRIMARY KEY (CONS_CIUDAD),
CONSTRAINT GLO_CIUDADES_CIUDAD UNIQUE (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD),
CONSTRAINT GLO_CIUDADES_CODIGO UNIQUE (CONS_PAIS, CONS_DEPARTAMENTO, CODI_CIUDAD),
CONSTRAINT GLO_CIUDADES_NOMBRE UNIQUE (CONS_PAIS, CONS_DEPARTAMENTO, NOMB_CIUDAD));

/*  Table: GLO_COLORES, Owner: SYSDBA  */
CREATE TABLE GLO_COLORES (CONS_COLOR INTEGER NOT NULL,
        CONS_COLO_GRUPO INTEGER NOT NULL,
        CONS_COLO_SUBGRUPO INTEGER NOT NULL,
        CONS_COLO_TONO INTEGER NOT NULL,
        CODI_COLOR VARCHAR(12) NOT NULL,
        NOMB_COLOR VARCHAR(60) NOT NULL,
        ROJO INTEGER,
        VERDE INTEGER,
        AZUL INTEGER,
        MUES_COLOR INTEGER,
        ES_ENTREPIERNA DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COLORES_PK PRIMARY KEY (CONS_COLOR));

/*  Table: GLO_COLO_GRUPOS, Owner: SYSDBA  */
CREATE TABLE GLO_COLO_GRUPOS (CONS_COLO_GRUPO INTEGER NOT NULL,
        CODI_COLO_GRUPO VARCHAR(12) NOT NULL,
        NOMB_COLO_GRUPO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COLO_GRUPOS_PK PRIMARY KEY (CONS_COLO_GRUPO),
CONSTRAINT GLO_COLO_GRUPOS_CODIGO UNIQUE (CODI_COLO_GRUPO),
CONSTRAINT GLO_COLO_GRUPOS_NOMBRE UNIQUE (NOMB_COLO_GRUPO));

/*  Table: GLO_COLO_SUBGRUPOS, Owner: SYSDBA  */
CREATE TABLE GLO_COLO_SUBGRUPOS (CONS_COLO_SUBGRUPO INTEGER NOT NULL,
        CONS_COLO_GRUPO INTEGER NOT NULL,
        CODI_COLO_SUBGRUPO VARCHAR(12) NOT NULL,
        NOMB_COLO_SUBGRUPO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COLO_SUBGRUPOS_PK PRIMARY KEY (CONS_COLO_SUBGRUPO),
CONSTRAINT GLO_COLO_SUBGRUPOS_CODIGO UNIQUE (CODI_COLO_SUBGRUPO),
CONSTRAINT GLO_COLO_SUBGRUPOS_NOMBRE UNIQUE (NOMB_COLO_SUBGRUPO));

/*  Table: GLO_COLO_TONOS, Owner: SYSDBA  */
CREATE TABLE GLO_COLO_TONOS (CONS_COLO_TONO INTEGER NOT NULL,
        CODI_COLO_TONO VARCHAR(12) NOT NULL,
        NOMB_COLO_TONO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COLO_TONOS_PK PRIMARY KEY (CONS_COLO_TONO),
CONSTRAINT GLO_COLO_TONOS_CODIGO UNIQUE (CODI_COLO_TONO),
CONSTRAINT GLO_COLO_TONOS_NOMBRE UNIQUE (NOMB_COLO_TONO));

/*  Table: GLO_COME_COMP_ENVIO, Owner: SYSDBA  */
CREATE TABLE GLO_COME_COMP_ENVIO (CONS_COMP_ENVIO INTEGER NOT NULL,
        CODI_COMP_ENVIO VARCHAR(12) NOT NULL,
        NOMB_COMP_ENVIO VARCHAR(60) NOT NULL,
        CONS_PAIS INTEGER,
        CONS_DEPARTAMENTO INTEGER,
        CONS_CIUDAD INTEGER,
        DIRECCION VARCHAR(240),
        TELEFONO1 VARCHAR(20),
        TELEFONO2 VARCHAR(20),
        FAX VARCHAR(20),
        CELULAR VARCHAR(20),
        CORR_ELECTRONICO VARCHAR(240),
        PAGI_WEB VARCHAR(240),
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_COMP_ENVIO_PK PRIMARY KEY (CONS_COMP_ENVIO),
CONSTRAINT GLO_COME_COMP_ENVIO_CODIGO UNIQUE (CODI_COMP_ENVIO),
CONSTRAINT GLO_COME_COMP_ENVIO_NOMBRE UNIQUE (NOMB_COMP_ENVIO));

/*  Table: GLO_COME_COMP_ENVI_CONTACTOS, Owner: SYSDBA  */
CREATE TABLE GLO_COME_COMP_ENVI_CONTACTOS (CONS_CONTACTO INTEGER NOT NULL,
        CONS_COMP_ENVIO INTEGER NOT NULL,
        NOMB_CONTACTO VARCHAR(120) NOT NULL,
        CARGO VARCHAR(120),
        TELEFONO VARCHAR(15) NOT NULL,
        FAX VARCHAR(15),
        MOVIL VARCHAR(30),
        CORR_ELECTRONICO VARCHAR(240),
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_COMP_ENVI_CONT_PK PRIMARY KEY (CONS_CONTACTO),
CONSTRAINT GLO_COME_COMP_ENVI_CONT_NOMBRE UNIQUE (CONS_COMP_ENVIO, NOMB_CONTACTO));

/*  Table: GLO_COME_COMP_ENVI_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE GLO_COME_COMP_ENVI_HISTORIAL (CONS_HISTORIAL INTEGER NOT NULL,
        CONS_COMP_ENVIO INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_COMP_ENVI_HISTORIAL_PK PRIMARY KEY (CONS_HISTORIAL));

/*  Table: GLO_COME_PRIO_PEDIDOS, Owner: SYSDBA  */
CREATE TABLE GLO_COME_PRIO_PEDIDOS (CONS_COME_PRIO_PEDIDO INTEGER NOT NULL,
        CODI_COME_PRIO_PEDIDO VARCHAR(12) NOT NULL,
        NOMB_COME_PRIO_PEDIDO VARCHAR(60) NOT NULL,
        COLOR INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_PRIO_PEDIDOS_PK PRIMARY KEY (CONS_COME_PRIO_PEDIDO),
CONSTRAINT GLO_COME_PRIO_PEDIDOS_CODIGO UNIQUE (CODI_COME_PRIO_PEDIDO),
CONSTRAINT GLO_COME_PRIO_PEDIDOS_NOMBRE UNIQUE (NOMB_COME_PRIO_PEDIDO));

/*  Table: GLO_COME_VENDEDORES, Owner: SYSDBA  */
CREATE TABLE GLO_COME_VENDEDORES (CONS_COME_VENDEDOR INTEGER NOT NULL,
        CODI_COME_VENDEDOR VARCHAR(12) NOT NULL,
        IDEN_COME_VENDEDOR VARCHAR(20),
        NOMB_COME_VENDEDOR VARCHAR(60) NOT NULL,
        CONS_PAIS INTEGER NOT NULL,
        CONS_DEPARTAMENTO INTEGER NOT NULL,
        CONS_CIUDAD INTEGER NOT NULL,
        DIRECCION VARCHAR(240),
        APAR_AEREO VARCHAR(20),
        TELEFONO1 VARCHAR(20),
        TELEFONO2 VARCHAR(20),
        TELEFONO3 VARCHAR(20),
        TELE_FAX VARCHAR(20),
        TELE_MOVIL VARCHAR(20),
        CORR_ELECTRONICO VARCHAR(120),
        PAGI_WEB VARCHAR(120),
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_VENDEDORES_PK PRIMARY KEY (CONS_COME_VENDEDOR),
CONSTRAINT GLO_COME_VENDEDORES_CODIGO UNIQUE (CODI_COME_VENDEDOR),
CONSTRAINT GLO_COME_VENDEDORES_NOMBRE UNIQUE (NOMB_COME_VENDEDOR));

/*  Table: GLO_COME_VEND_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE GLO_COME_VEND_HISTORIAL (CONS_HISTORIAL INTEGER NOT NULL,
        CONS_COME_VENDEDOR INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_VEND_HISTORIAL_PK PRIMARY KEY (CONS_HISTORIAL));

/*  Table: GLO_COME_VEND_ZONAS, Owner: SYSDBA  */
CREATE TABLE GLO_COME_VEND_ZONAS (CONS_COME_VEND_ZONA INTEGER NOT NULL,
        CONS_COME_VENDEDOR INTEGER NOT NULL,
        CONS_COME_ZONA INTEGER,
        CONS_COME_ZONA_DETALLE INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_VEND_ZONAS_PK PRIMARY KEY (CONS_COME_VEND_ZONA),
CONSTRAINT GLO_COME_VEND_ZONAS_CODIGO UNIQUE (CONS_COME_VENDEDOR, CONS_COME_ZONA, CONS_COME_ZONA_DETALLE));

/*  Table: GLO_COME_ZONAS, Owner: SYSDBA  */
CREATE TABLE GLO_COME_ZONAS (CONS_COME_ZONA INTEGER NOT NULL,
        CODI_COME_ZONA VARCHAR(12) NOT NULL,
        NOMB_COME_ZONA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_COME_ZONAS_PK PRIMARY KEY (CONS_COME_ZONA),
CONSTRAINT GLO_COME_ZONAS_CODIGO UNIQUE (CODI_COME_ZONA),
CONSTRAINT GLO_COME_ZONAS_NOMBRE UNIQUE (NOMB_COME_ZONA));

/*  Table: GLO_COME_ZONA_DETALLE, Owner: SYSDBA  */
CREATE TABLE GLO_COME_ZONA_DETALLE (CONS_COME_ZONA_DETALLE INTEGER NOT NULL,
        CONS_COME_ZONA INTEGER,
        CODI_COME_ZONA_DETALLE VARCHAR(12) NOT NULL,
        NOMB_COME_ZONA_DETALLE VARCHAR(60) NOT NULL,
        FECH_SISTEMA INTEGER,
        USUA_SISTEMA INTEGER,
CONSTRAINT GLO_COME_ZONA_DETALLE_PK PRIMARY KEY (CONS_COME_ZONA_DETALLE),
CONSTRAINT GLO_COME_ZONA_DETALLE_CODIGO UNIQUE (CODI_COME_ZONA_DETALLE),
CONSTRAINT GLO_COME_ZONA_DETALLE_NOMBRE UNIQUE (CONS_COME_ZONA, NOMB_COME_ZONA_DETALLE));

/*  Table: GLO_COST_CONC_GASTOS, Owner: SYSDBA  */
CREATE TABLE GLO_COST_CONC_GASTOS (CONS_CONC_GASTO INTEGER NOT NULL,
        CODI_CONC_GASTO VARCHAR(12) NOT NULL,
        NOMB_CONC_GASTO VARCHAR(60) NOT NULL,
        FIJO DOM_LOGICO NOT NULL,
        OBSERVACIONES VARCHAR(240),
CONSTRAINT GLO_COST_CONC_GASTOS_PK PRIMARY KEY (CONS_CONC_GASTO),
CONSTRAINT GLO_COST_CONC_GASTOS_CODIGO UNIQUE (CODI_CONC_GASTO),
CONSTRAINT GLO_COST_CONC_GASTOS_NOMBRE UNIQUE (NOMB_CONC_GASTO));

/*  Table: GLO_COST_GAST_COMERCIALES, Owner: SYSDBA  */
CREATE TABLE GLO_COST_GAST_COMERCIALES (CONS_EMPRESA INTEGER NOT NULL,
        PORC_UTILIDAD DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_GAST_VENTAS DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_COMI_VENTAS DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_COMI_ALMACEN DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_GAST_MERCADEO DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_GAST_PUBLICIDAD DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_OTRO_GAST_1 DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_OTRO_GAST_2 DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
CONSTRAINT GLO_COST_GAST_COMERCIALES_PK PRIMARY KEY (CONS_EMPRESA));

/*  Table: GLO_DEPARTAMENTOS, Owner: SYSDBA  */
CREATE TABLE GLO_DEPARTAMENTOS (CONS_DEPARTAMENTO INTEGER NOT NULL,
        CONS_PAIS INTEGER NOT NULL,
        CODI_DEPARTAMENTO VARCHAR(12) NOT NULL,
        NOMB_DEPARTAMENTO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_DEPARTAMENTOS_PK PRIMARY KEY (CONS_DEPARTAMENTO),
CONSTRAINT GLO_DEPARTAMENTOS_CODIGO UNIQUE (CONS_PAIS, CODI_DEPARTAMENTO),
CONSTRAINT GLO_DEPARTAMENTOS_DEPARTAMENTO UNIQUE (CONS_PAIS, CONS_DEPARTAMENTO),
CONSTRAINT GLO_DEPARTAMENTOS_NOMBRE UNIQUE (CONS_PAIS, NOMB_DEPARTAMENTO));

/*  Table: GLO_EMPRESAS, Owner: SYSDBA  */
CREATE TABLE GLO_EMPRESAS (CONS_EMPRESA INTEGER NOT NULL,
        CODI_EMPRESA VARCHAR(12) NOT NULL,
        NOMB_EMPRESA VARCHAR(60) NOT NULL,
        NUME_IDENTIFICACION VARCHAR(20),
        DIGI_VERI_NUME_IDENTIFICACION VARCHAR(1),
        ACTI_PRINCIPAL VARCHAR(60),
        REPR_LEGAL VARCHAR(60),
        CONS_PAIS INTEGER NOT NULL,
        CONS_DEPARTAMENTO INTEGER NOT NULL,
        CONS_CIUDAD INTEGER NOT NULL,
        DIRECCION VARCHAR(240),
        TELE_1 VARCHAR(30),
        TELE_2 VARCHAR(30),
        TELE_FAX VARCHAR(30),
        TELE_MOVIL VARCHAR(30),
        CORR_ELECTRONICO VARCHAR(60),
        PAGI_WEB VARCHAR(60),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_EMPRESAS_PK PRIMARY KEY (CONS_EMPRESA),
CONSTRAINT GLO_EMPRESAS_CODIGO UNIQUE (CODI_EMPRESA),
CONSTRAINT GLO_EMPRESAS_NOMBRE UNIQUE (NOMB_EMPRESA));

/*  Table: GLO_FIRMAS, Owner: SYSDBA  */
CREATE TABLE GLO_FIRMAS (CONS_FIRMA INTEGER NOT NULL,
        CODI_FIRMA VARCHAR(12) NOT NULL,
        NOMB_FIRMA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_FIRMAS_PK PRIMARY KEY (CONS_FIRMA),
CONSTRAINT GLO_FIRM_CODIGO UNIQUE (CODI_FIRMA),
CONSTRAINT GLO_FIRM_NOMBRE UNIQUE (NOMB_FIRMA));

/*  Table: GLO_GRUP_TALLAS, Owner: SYSDBA  */
CREATE TABLE GLO_GRUP_TALLAS (CONS_GRUP_TALLAS INTEGER NOT NULL,
        CODI_GRUP_TALLAS VARCHAR(12) NOT NULL,
        NOMB_GRUP_TALLAS VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        OBSERVACIONES VARCHAR(240),
CONSTRAINT GLO_GRUP_TALLAS_PK PRIMARY KEY (CONS_GRUP_TALLAS),
CONSTRAINT GLO_GRUP_TALLAS_CODIGO UNIQUE (CODI_GRUP_TALLAS),
CONSTRAINT GLO_GRUP_TALLAS_NOMBRE UNIQUE (NOMB_GRUP_TALLAS));

/*  Table: GLO_GRUP_TALL_DETALLE, Owner: SYSDBA  */
CREATE TABLE GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE INTEGER NOT NULL,
        CONS_GRUP_TALLAS INTEGER NOT NULL,
        SECU_TALLA INTEGER NOT NULL,
        TALLA VARCHAR(12) NOT NULL,
        TALL_ALTERNATIVA VARCHAR(12),
CONSTRAINT GLO_GRUP_TALL_DETALLE_PK PRIMARY KEY (CONS_GRUP_TALL_DETALLE),
CONSTRAINT GLO_GRUP_TALL_DETALLE_SECU_TALL UNIQUE (CONS_GRUP_TALLAS, SECU_TALLA),
CONSTRAINT GLO_GRUP_TALL_DETALLE_TALLA UNIQUE (CONS_GRUP_TALLAS, TALLA));

/*  Table: GLO_HERR_IMAGENES, Owner: SYSDBA  */
CREATE TABLE GLO_HERR_IMAGENES (CONS_HERR_IMAGEN INTEGER NOT NULL,
        CONS_HERR_IMAG_CATEGORIA INTEGER NOT NULL,
        CONS_HERR_IMAG_VISTA INTEGER NOT NULL,
        NOMB_HERR_IMAGEN VARCHAR(60) NOT NULL,
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_REFE_ESTILO INTEGER DEFAULT 0 NOT NULL,
        CONS_REFE_MARCA INTEGER DEFAULT 0 NOT NULL,
        CONS_REFE_TEMPORADA INTEGER DEFAULT 0 NOT NULL,
        OBSERVACIONES VARCHAR(5000),
        PALA_CLAVES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_GLO_HERR_IMAGENES PRIMARY KEY (CONS_HERR_IMAGEN));

/*  Table: GLO_HERR_IMAG_CATALOGOS, Owner: SYSDBA  */
CREATE TABLE GLO_HERR_IMAG_CATALOGOS (CONS_HERR_IMAG_CATALOGO INTEGER NOT NULL,
        NOMB_HERR_IMAG_CATALOGO VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_GLO_HERR_IMAG_CATALOGOS PRIMARY KEY (CONS_HERR_IMAG_CATALOGO),
CONSTRAINT GLO_HERR_IMAG_CATA_UNQ_NOMBRE UNIQUE (NOMB_HERR_IMAG_CATALOGO));

/*  Table: GLO_HERR_IMAG_CATEGORIAS, Owner: SYSDBA  */
CREATE TABLE GLO_HERR_IMAG_CATEGORIAS (CONS_HERR_IMAG_CATEGORIA INTEGER NOT NULL,
        CONS_HERR_IMAG_CATALOGO INTEGER NOT NULL,
        NOMB_HERR_IMAG_CATEGORIA VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        ANCHO DOM_ENTE_POSITIVO  DEFAULT 50 NOT NULL,
        FACT_ALTO DOM_REAL_POSITIVO  DEFAULT 1 NOT NULL,
        ALTO DOM_ENTE_POSITIVO  DEFAULT 50 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_GLO_HERR_IMAG_CATEGORIAS PRIMARY KEY (CONS_HERR_IMAG_CATEGORIA),
CONSTRAINT GLO_HERR_IMAG_CATE_UNQ_NOMBRE UNIQUE (CONS_HERR_IMAG_CATALOGO, NOMB_HERR_IMAG_CATEGORIA));

/*  Table: GLO_HORA_EXTRAS, Owner: SYSDBA  */
CREATE TABLE GLO_HORA_EXTRAS (CONS_HORA_EXTRA INTEGER NOT NULL,
        CODI_HORA_EXTRA VARCHAR(12) NOT NULL,
        NOMB_HORA_EXTRA VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        PORCENTAJE DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        ADIC_1 VARCHAR(12),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_HORA_EXTRAS_PK PRIMARY KEY (CONS_HORA_EXTRA),
CONSTRAINT GLO_HORA_EXTRAS_CODIGO UNIQUE (CODI_HORA_EXTRA),
CONSTRAINT GLO_HORA_EXTRAS_NOMBRE UNIQUE (NOMB_HORA_EXTRA));

/*  Table: GLO_HORA_EXTR_RANGOS, Owner: SYSDBA  */
CREATE TABLE GLO_HORA_EXTR_RANGOS (SELE_DIARIAS DOM_LOGICO  DEFAULT -1 NOT NULL,
        SELE_SEMANALES DOM_LOGICO  DEFAULT 1 NOT NULL,
        SELE_DOMINGOS DOM_LOGICO  DEFAULT -1 NOT NULL,
        SELE_FESTIVOS DOM_LOGICO  DEFAULT -1 NOT NULL,
        DIAR_DESD_1 DOM_REAL_POSITIVO,
        DIAR_HAST_1 DOM_REAL_POSITIVO,
        DIAR_PORC_1 DOM_REAL_POSITIVO,
        DIAR_DESD_2 DOM_REAL_POSITIVO,
        DIAR_HAST_2 DOM_REAL_POSITIVO,
        DIAR_PORC_2 DOM_REAL_POSITIVO,
        SEMA_DESD_1 DOM_REAL_POSITIVO,
        SEMA_HAST_1 DOM_REAL_POSITIVO,
        SEMA_PORC_1 DOM_REAL_POSITIVO,
        SEMA_DESD_2 DOM_REAL_POSITIVO,
        SEMA_HAST_2 DOM_REAL_POSITIVO,
        SEMA_PORC_2 DOM_REAL_POSITIVO,
        SABA_DESD_1 DOM_REAL_POSITIVO,
        SABA_HAST_1 DOM_REAL_POSITIVO,
        SABA_PORC_1 DOM_REAL_POSITIVO,
        SABA_DESD_2 DOM_REAL_POSITIVO,
        SABA_HAST_2 DOM_REAL_POSITIVO,
        SABA_PORC_2 DOM_REAL_POSITIVO,
        DOMI_DESD_1 DOM_REAL_POSITIVO,
        DOMI_HAST_1 DOM_REAL_POSITIVO,
        DOMI_PORC_1 DOM_REAL_POSITIVO,
        DOMI_DESD_2 DOM_REAL_POSITIVO,
        DOMI_HAST_2 DOM_REAL_POSITIVO,
        DOMI_PORC_2 DOM_REAL_POSITIVO,
        FEST_DESD_1 DOM_REAL_POSITIVO,
        FEST_HAST_1 DOM_REAL_POSITIVO,
        FEST_PORC_1 DOM_REAL_POSITIVO,
        FEST_DESD_2 DOM_REAL_POSITIVO,
        FEST_HAST_2 DOM_REAL_POSITIVO,
        FEST_PORC_2 DOM_REAL_POSITIVO);

/*  Table: GLO_IMPRODUCTIVOS, Owner: SYSDBA  */
CREATE TABLE GLO_IMPRODUCTIVOS (CONS_IMPRODUCTIVO INTEGER NOT NULL,
        CODI_IMPRODUCTIVO VARCHAR(12) NOT NULL,
        CONS_IMPR_FAMILIA INTEGER NOT NULL,
        NOMB_IMPRODUCTIVO VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT -1 NOT NULL,
        DESC_INCENTIVOS DOM_LOGICO  DEFAULT -1 NOT NULL,
        DESC_EFICIENCIA DOM_LOGICO  DEFAULT -1 NOT NULL,
        APLI_IMPRODUCTIVO VARCHAR(240),
        PORCENTAJE DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        CONS_VALO_HORA INTEGER,
        VALO_HORA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_VALO_MINIMO INTEGER,
        VALO_MINIMO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        ADICIONAL_1 VARCHAR(12),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_IMPRODUCTIVOS_PK PRIMARY KEY (CONS_IMPRODUCTIVO),
CONSTRAINT GLO_IMPRODUCTIVOS_CODIGO UNIQUE (CODI_IMPRODUCTIVO),
CONSTRAINT GLO_IMPRODUCTIVOS_NOMBRE UNIQUE (NOMB_IMPRODUCTIVO));

/*  Table: GLO_INVE_UNIDADES, Owner: SYSDBA  */
CREATE TABLE GLO_INVE_UNIDADES (CONS_UNID_MEDIDA INTEGER NOT NULL,
        CONS_TIPO_UNID_MEDIDA INTEGER NOT NULL,
        CODI_UNID_MEDIDA VARCHAR(12) NOT NULL,
        NOMB_UNID_MEDIDA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_INVE_UNIDADES_PK PRIMARY KEY (CONS_UNID_MEDIDA),
CONSTRAINT GLO_INVE_UNIDADES_CODIGO UNIQUE (CODI_UNID_MEDIDA),
CONSTRAINT GLO_INVE_UNIDADES_NOMBRE UNIQUE (CONS_TIPO_UNID_MEDIDA, NOMB_UNID_MEDIDA));

/*  Table: GLO_LINEAS, Owner: SYSDBA  */
CREATE TABLE GLO_LINEAS (CONS_LINEA INTEGER NOT NULL,
        CODI_LINEA VARCHAR(12) NOT NULL,
        NOMB_LINEA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_LINEAS_PK PRIMARY KEY (CONS_LINEA),
CONSTRAINT GLO_LINEAS_CODIGO UNIQUE (CODI_LINEA),
CONSTRAINT GLO_LINEAS_NOMBRE UNIQUE (NOMB_LINEA));

/*  Table: GLO_LINE_SECCIONES, Owner: SYSDBA  */
CREATE TABLE GLO_LINE_SECCIONES (CONS_LINE_SECCION INTEGER NOT NULL,
        CONS_SECCION INTEGER NOT NULL,
        CONS_PLAN_LINEA INTEGER NOT NULL,
        SUPERVISOR VARCHAR(60),
        RESPONSABLE VARCHAR(60),
        TIPO_SECCION INTEGER DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_LINE_SECCIONES_PK PRIMARY KEY (CONS_LINE_SECCION),
CONSTRAINT GLO_LINE_SECC_SECC_LINEA UNIQUE (CONS_SECCION, CONS_PLAN_LINEA));

/*  Table: GLO_MONEDAS, Owner: SYSDBA  */
CREATE TABLE GLO_MONEDAS (CONS_MONEDA INTEGER NOT NULL,
        SIMB_MONEDA VARCHAR(12) NOT NULL,
        NOMB_MONEDA VARCHAR(60) NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
CONSTRAINT GLO_MONEDAS_PK PRIMARY KEY (CONS_MONEDA),
CONSTRAINT GLO_MONEDAS_NOMBRE UNIQUE (NOMB_MONEDA),
CONSTRAINT GLO_MONEDAS_SIMBOLO UNIQUE (SIMB_MONEDA));

/*  Table: GLO_MONE_TRM, Owner: SYSDBA  */
CREATE TABLE GLO_MONE_TRM (CONS_MONEDA INTEGER NOT NULL,
        FECHA TIMESTAMP NOT NULL,
        TRM DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_MONE_TRM_PK PRIMARY KEY (CONS_MONEDA, FECHA));

/*  Table: GLO_OPCIONES, Owner: SYSDBA  */
CREATE TABLE GLO_OPCIONES (IMAGEN DOM_IMAGEN,
        TAMANO INTEGER NOT NULL,
        ESLOGAN VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL);

/*  Table: GLO_PAISES, Owner: SYSDBA  */
CREATE TABLE GLO_PAISES (CONS_PAIS INTEGER NOT NULL,
        CODI_PAIS VARCHAR(12) NOT NULL,
        NOMB_PAIS VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PAISES_PK PRIMARY KEY (CONS_PAIS),
CONSTRAINT GLO_PAISES_CODIGO UNIQUE (CODI_PAIS),
CONSTRAINT GLO_PAISES_NOMBRE UNIQUE (NOMB_PAIS));

/*  Table: GLO_PERSONAL, Owner: SYSDBA  */
CREATE TABLE GLO_PERSONAL (CONS_PERSONAL INTEGER NOT NULL,
        CODI_PERSONAL VARCHAR(12) NOT NULL,
        PRIM_APELLIDO VARCHAR(30) NOT NULL,
        SEGU_APELLIDO VARCHAR(30) NOT NULL,
        NOMBRES VARCHAR(40) NOT NULL,
        NOMB_COMPLETO COMPUTED BY (((PRIM_APELLIDO || ' ' || SEGU_APELLIDO || ' ' || NOMBRES))),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERSONAL_PK PRIMARY KEY (CONS_PERSONAL),
CONSTRAINT GLO_PERSONAL_CODIGO UNIQUE (CODI_PERSONAL));

/*  Table: GLO_PERS_CARGOS, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_CARGOS (CONS_PERS_CARGO INTEGER NOT NULL,
        CODI_PERS_CARGO VARCHAR(12) NOT NULL,
        NOMB_PERS_CARGO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_CARGOS_PK PRIMARY KEY (CONS_PERS_CARGO),
CONSTRAINT GLO_PERS_CARGOS_CODIGO UNIQUE (CODI_PERS_CARGO),
CONSTRAINT GLO_PERS_CARGOS_NOMBRE UNIQUE (NOMB_PERS_CARGO));

/*  Table: GLO_PERS_CENT_COSTOS, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_CENT_COSTOS (CONS_PERS_CENT_COSTO INTEGER NOT NULL,
        CODI_PERS_CENT_COSTO VARCHAR(12) NOT NULL,
        NOMB_PERS_CENT_COSTO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_CENT_COSTOS_PK PRIMARY KEY (CONS_PERS_CENT_COSTO),
CONSTRAINT GLO_PERS_CENT_COSTOS_CODIGO UNIQUE (CODI_PERS_CENT_COSTO),
CONSTRAINT GLO_PERS_CENT_COSTOS_NOMBRE UNIQUE (NOMB_PERS_CENT_COSTO));

/*  Table: GLO_PERS_FAMILIAR, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_FAMILIAR (CONS_PERS_FAMILIAR INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        CONS_PERS_TIPO_DOCUMENTO INTEGER,
        NUME_DOCUMENTO VARCHAR(20),
        PRIM_APELLIDO VARCHAR(30) NOT NULL,
        SEGU_APELLIDO VARCHAR(30) NOT NULL,
        NOMBRES VARCHAR(39) NOT NULL,
        CONS_SEXO INTEGER NOT NULL,
        CONS_PARENTESCO INTEGER NOT NULL,
        FECH_NACIMIENTO TIMESTAMP,
        CONS_PAIS INTEGER,
        CONS_DEPARTAMENTO INTEGER,
        CONS_CIUDAD INTEGER,
        DIRECCION VARCHAR(240),
        TELE_RESIDENCIA VARCHAR(20),
        TELE_OTRO VARCHAR(20),
        TELE_MOVIL VARCHAR(20),
        OCUPACION VARCHAR(60),
        NOMB_EMPRESA VARCHAR(60),
        DIRE_EMPRESA VARCHAR(240),
        TELE_EMPRESA VARCHAR(20),
        CORR_ELECTRONICO VARCHAR(120),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_PERS_FAMILIAR_PK PRIMARY KEY (CONS_PERS_FAMILIAR));

/*  Table: GLO_PERS_FORM_IDENTIFICACION, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_FORM_IDENTIFICACION (CONS_PERS_FORM_IDENTIFICACION INTEGER NOT NULL,
        CODI_PERS_FORM_IDENTIFICACION VARCHAR(12) NOT NULL,
        NOMB_PERS_FORM_IDENTIFICACION VARCHAR(60) NOT NULL,
        DESC_PERS_FORM_IDENTIFICACIN VARCHAR(240),
        FORMATO BLOB SUB_TYPE TEXT SEGMENT SIZE 80,
        DATOS BLOB SUB_TYPE TEXT SEGMENT SIZE 80,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_GLO_PERS_FORM_IDENTIFICACION PRIMARY KEY (CONS_PERS_FORM_IDENTIFICACION),
CONSTRAINT GLO_PERS_FORM_IDEN_CODIGO UNIQUE (CODI_PERS_FORM_IDENTIFICACION),
CONSTRAINT GLO_PERS_FORM_IDEN_NOMBRE UNIQUE (NOMB_PERS_FORM_IDENTIFICACION));

/*  Table: GLO_PERS_GENERAL, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_GENERAL (CONS_PERSONAL INTEGER NOT NULL,
        CONS_PAIS INTEGER NOT NULL,
        CONS_DEPARTAMENTO INTEGER NOT NULL,
        CONS_CIUDAD INTEGER NOT NULL,
        DIRECCION VARCHAR(60),
        TELE_RESIDENCIA VARCHAR(30),
        TELE_OTRO VARCHAR(30),
        TELE_MOVIL VARCHAR(30),
        FECH_NACIMIENTO TIMESTAMP NOT NULL,
        CONS_PAIS_NACIMIENTO INTEGER NOT NULL,
        CONS_DEPA_NACIMIENTO INTEGER NOT NULL,
        CONS_CIUD_NACIMIENTO INTEGER NOT NULL,
        CONS_PERS_TIPO_DOCUMENTO INTEGER NOT NULL,
        NUME_DOCUMENTO VARCHAR(12) NOT NULL,
        FECH_EXPE_DOCUMENTO TIMESTAMP,
        LUGA_EXPE_DOCUMENTO VARCHAR(30) NOT NULL,
        NUME_PASAPORTE VARCHAR(12),
        FECH_EXPE_PASAPORTE TIMESTAMP,
        FECH_VENC_PASAPORTE TIMESTAMP,
        LUGA_EXPE_PASAPORTE VARCHAR(30),
        NUME_LIBR_MILITAR VARCHAR(12),
        FECH_EXPE_LIBR_MILITAR TIMESTAMP,
        NUME_CONDUCCION VARCHAR(12),
        FECH_EXPE_CONDUCCION TIMESTAMP,
        FECH_VENC_CONDUCCION TIMESTAMP,
        CATE_CONDUCCION VARCHAR(12),
        LUGA_EXPE_CONDUCCION VARCHAR(30),
        NUME_SEGU_SOCIAL VARCHAR(12),
        NUME_HIJOS INTEGER NOT NULL,
        CONS_SEXO INTEGER NOT NULL,
        CONS_ESTA_CIVIL INTEGER NOT NULL,
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_GENERAL_PK PRIMARY KEY (CONS_PERSONAL));

/*  Table: GLO_PERS_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_HISTORIAL (CONS_PERS_HISTORIAL INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_HISTORIAL_PK PRIMARY KEY (CONS_PERS_HISTORIAL));

/*  Table: GLO_PERS_MAQU_UTILIZADAS, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_MAQU_UTILIZADAS (CONS_PERS_MAQU_UTILIZADA INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        CONS_RECU_TIPO INTEGER NOT NULL,
        CONS_RECU_GRUPO INTEGER NOT NULL,
        CONS_RECU_FAMILIA INTEGER NOT NULL,
        CONS_GRAD_HABILIDAD INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_MAQU_UTILIZADAS_PK PRIMARY KEY (CONS_PERS_MAQU_UTILIZADA));

/*  Table: GLO_PERS_MOVIMIENTOS, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_MOVIMIENTOS (CONS_PERS_MOVIMIENTO INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        CONS_PERS_TIPO_MOVIMIENTO INTEGER NOT NULL,
        FECH_INICIAL TIMESTAMP NOT NULL,
        FECH_FINAL TIMESTAMP,
        CONS_PERS_MOVI_TIPO_DOCUMENTO INTEGER NOT NULL,
        NUME_DOCUMENTO VARCHAR(12),
        CONS_SOLICITA INTEGER,
        CONS_APROBO INTEGER,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_PERS_MOVIMIENTOS_PK PRIMARY KEY (CONS_PERS_MOVIMIENTO));

/*  Table: GLO_PERS_MOVI_ANULADOS, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_MOVI_ANULADOS (CONS_PERS_MOVI_ANULADO INTEGER NOT NULL,
        CONS_PERS_MOVIMIENTO INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_MOVI_ANULADOS_PK PRIMARY KEY (CONS_PERS_MOVI_ANULADO));

/*  Table: GLO_PERS_MOVI_CONFIDENCIAL, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_MOVI_CONFIDENCIAL (CONS_PERS_MOVIMIENTO INTEGER NOT NULL,
        CONS_PERS_NIVE_SALARIAL INTEGER NOT NULL,
        CONS_PERS_TIPO_CONTRATO INTEGER NOT NULL,
        NUME_CONTRATO VARCHAR(20),
        CONS_PERI_PAGO INTEGER NOT NULL,
        VALO_SALARIO DOM_ENTE_POSITIVO NOT NULL,
        AUXI_TRANSPORTE DOM_REAL_POSITIVO NOT NULL,
        AUXI_SALARIAL DOM_REAL_POSITIVO NOT NULL,
        DIAS_VENC_CONTRATO INTEGER DEFAULT 0 NOT NULL,
        APLI_INCENTIVO DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_CONFIDENCIAL_PK PRIMARY KEY (CONS_PERS_MOVIMIENTO));

/*  Table: GLO_PERS_MOVI_TIPO_DOCUMENTO, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_MOVI_TIPO_DOCUMENTO (CONS_PERS_MOVI_TIPO_DOCUMENTO INTEGER NOT NULL,
        CODI_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(12) NOT NULL,
        NOMB_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(60) NOT NULL,
        USO VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_PERS_MOVI_TIPO_DOCUMENTO_PK PRIMARY KEY (CONS_PERS_MOVI_TIPO_DOCUMENTO),
CONSTRAINT GLO_PERS_MOVI_TIPO_DOCU_CODIGO UNIQUE (CODI_PERS_MOVI_TIPO_DOCUMENTO),
CONSTRAINT GLO_PERS_MOVI_TIPO_DOCU_NOMBRE UNIQUE (NOMB_PERS_MOVI_TIPO_DOCUMENTO));

/*  Table: GLO_PERS_MOVI_TRASLADOS, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_MOVI_TRASLADOS (CONS_PERS_MOVIMIENTO INTEGER NOT NULL,
        CONS_UBIC_TIPO INTEGER NOT NULL,
        CONS_EMPRESA INTEGER NOT NULL,
        CONS_AREA INTEGER NOT NULL,
        CONS_PLANTA INTEGER NOT NULL,
        CONS_PLAN_LINEA INTEGER NOT NULL,
        CONS_LINE_SECCION INTEGER NOT NULL,
        CONS_BODEGA INTEGER NOT NULL,
        OTRA_UBICACION VARCHAR(60),
        CONS_TURNO INTEGER NOT NULL,
        CONS_PERS_CARGO INTEGER NOT NULL,
        CONS_PERS_CENT_COSTO INTEGER NOT NULL,
        CONS_COST_GRUPO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_PERS_MOVI_TRASLADOS_PK PRIMARY KEY (CONS_PERS_MOVIMIENTO));

/*  Table: GLO_PERS_NIVE_SALARIALES, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_NIVE_SALARIALES (CONS_PERS_NIVE_SALARIAL INTEGER NOT NULL,
        CODI_PERS_NIVE_SALARIAL VARCHAR(12) NOT NULL,
        NOMB_PERS_NIVE_SALARIAL VARCHAR(60) NOT NULL,
        VALO_MINIMO INTEGER DEFAULT 0 NOT NULL,
        VALO_MAXIMO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_NIVE_SALARIALES_PK PRIMARY KEY (CONS_PERS_NIVE_SALARIAL),
CONSTRAINT GLO_NIVE_SALARIALES_CODIGO UNIQUE (CODI_PERS_NIVE_SALARIAL),
CONSTRAINT GLO_NIVE_SALARIALES_NOMBRE UNIQUE (NOMB_PERS_NIVE_SALARIAL));

/*  Table: GLO_PERS_OPER_EJECUTADAS, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_OPER_EJECUTADAS (CONS_PERS_OPER_EJECUTADA INTEGER NOT NULL,
        CONS_PERS_MAQU_UTILIZADA INTEGER NOT NULL,
        CONS_OPER_COST_TIPO INTEGER NOT NULL,
        CONS_RANG_EFICIENCIA INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_OPER_EJECUTADAS_PK PRIMARY KEY (CONS_PERS_OPER_EJECUTADA));

/*  Table: GLO_PERS_PRESTACIONES, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_PRESTACIONES (SALU_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        SALU_EMPLEADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PENS_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PENS_EMPLEADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CAJA_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TOTA_PARAFISCALES DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PRIMA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PRIM_EXTRA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VACACIONES DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CESANTIAS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        INTE_CESANTIAS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        OTROS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TOTA_PRESTACIONES DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        SENA_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        ARP_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        ICBF_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL);

/*  Table: GLO_PERS_PRES_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_PRES_HISTORIAL (CONS_PERS_PRES_HISTORIAL INTEGER NOT NULL,
        SALU_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        SALU_EMPLEADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PENS_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PENS_EMPLEADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CAJA_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TOTA_PARAFISCALES DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PRIMA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PRIM_EXTRA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VACACIONES DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CESANTIAS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        INTE_CESANTIAS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        OTROS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TOTA_PRESTACIONES DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        SENA_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        ARP_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        ICBF_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_PRES_HISTORIAL_PK PRIMARY KEY (CONS_PERS_PRES_HISTORIAL));

/*  Table: GLO_PERS_SISTEMA, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_SISTEMA (CONS_PERSONAL INTEGER NOT NULL,
        USUA_PERSONAL VARCHAR(20),
        PERS_MOVI_SOLICITAR DOM_LOGICO  DEFAULT -1 NOT NULL,
        PERS_MOVI_APROBAR DOM_LOGICO  DEFAULT -1 NOT NULL,
        PERS_AVIS_VENC_CONTRATOS DOM_LOGICO  DEFAULT -1 NOT NULL,
CONSTRAINT PK_GLO_PERS_SISTEMA PRIMARY KEY (CONS_PERSONAL));

/*  Table: GLO_PERS_TIPO_CONTRATO, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_TIPO_CONTRATO (CONS_PERS_TIPO_CONTRATO INTEGER NOT NULL,
        CODI_PERS_TIPO_CONTRATO VARCHAR(12) NOT NULL,
        NOMB_PERS_TIPO_CONTRATO VARCHAR(60) NOT NULL,
        DURACION DOM_REAL_POSITIVO NOT NULL,
        CONS_UNID_MEDI_TIEMPO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_TIPO_CONTRATO_PK PRIMARY KEY (CONS_PERS_TIPO_CONTRATO),
CONSTRAINT GLO_PERS_TIPO_CONTRATO_CODIGO UNIQUE (CODI_PERS_TIPO_CONTRATO),
CONSTRAINT GLO_PERS_TIPO_CONTRATO_NOMBRE UNIQUE (NOMB_PERS_TIPO_CONTRATO));

/*  Table: GLO_PERS_TIPO_MOVIMIENTO, Owner: SYSDBA  */
CREATE TABLE GLO_PERS_TIPO_MOVIMIENTO (CONS_PERS_TIPO_MOVIMIENTO INTEGER NOT NULL,
        CONS_FAMI_MOVIMIENTO INTEGER NOT NULL,
        CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) NOT NULL,
        NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PERS_TIPO_MOVIMIENTO_PK PRIMARY KEY (CONS_PERS_TIPO_MOVIMIENTO),
CONSTRAINT GLO_PERS_TIPO_MOVIMIENTO_CODIGO UNIQUE (CODI_PERS_TIPO_MOVIMIENTO),
CONSTRAINT GLO_PERS_TIPO_MOVIMIENTO_NOMBRE UNIQUE (NOMB_PERS_TIPO_MOVIMIENTO));

/*  Table: GLO_PLANTAS, Owner: SYSDBA  */
CREATE TABLE GLO_PLANTAS (CONS_PLANTA INTEGER NOT NULL,
        CONS_EMPRESA INTEGER NOT NULL,
        CODI_PLANTA VARCHAR(12) NOT NULL,
        NOMB_PLANTA VARCHAR(60) NOT NULL,
        CONS_PAIS INTEGER NOT NULL,
        CONS_DEPARTAMENTO INTEGER NOT NULL,
        CONS_CIUDAD INTEGER NOT NULL,
        DIRECCION VARCHAR(240),
        TELE_1 VARCHAR(30),
        TELE_2 VARCHAR(30),
        TELE_FAX VARCHAR(30),
        TELE_MOVIL VARCHAR(30),
        NOMB_RESPONSABLE VARCHAR(60),
        NOMB_SUPERVISOR VARCHAR(60),
        TIPO_PLANTA INTEGER DEFAULT 0 NOT NULL,
        DESCRIPCION VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PLANTAS_PK PRIMARY KEY (CONS_PLANTA),
CONSTRAINT GLO_PLANTAS_CODIGO UNIQUE (CONS_EMPRESA, CODI_PLANTA),
CONSTRAINT GLO_PLANTAS_NOMBRE UNIQUE (CONS_EMPRESA, NOMB_PLANTA));

/*  Table: GLO_PLAN_LINEAS, Owner: SYSDBA  */
CREATE TABLE GLO_PLAN_LINEAS (CONS_PLAN_LINEA INTEGER NOT NULL,
        CONS_PLANTA INTEGER NOT NULL,
        CONS_LINEA INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PLAN_LINEAS_PK PRIMARY KEY (CONS_PLAN_LINEA),
CONSTRAINT GLO_PLAN_LINEAS_PLAN_LINEA UNIQUE (CONS_PLANTA, CONS_LINEA));

/*  Table: GLO_PRIORIDADES, Owner: SYSDBA  */
CREATE TABLE GLO_PRIORIDADES (CONS_PRIORIDAD INTEGER NOT NULL,
        CODI_PRIORIDAD VARCHAR(12) NOT NULL,
        NOMB_PRIORIDAD VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PRIORIDADES_PK PRIMARY KEY (CONS_PRIORIDAD),
CONSTRAINT GLO_PRIO_CODIGO UNIQUE (CODI_PRIORIDAD),
CONSTRAINT GLO_PRIO_NOMBRE UNIQUE (NOMB_PRIORIDAD));

/*  Table: GLO_RECURSOS, Owner: SYSDBA  */
CREATE TABLE GLO_RECURSOS (CONS_RECURSO INTEGER NOT NULL,
        CODI_RECURSO VARCHAR(12) NOT NULL,
        CODI_INTE_RECURSO VARCHAR(20),
        CONS_RECU_GRUPO INTEGER NOT NULL,
        CONS_RECU_TIPO INTEGER NOT NULL,
        CONS_RECU_FAMILIA INTEGER NOT NULL,
        CONS_RECU_MARCA INTEGER NOT NULL,
        PRESTAMO INTEGER DEFAULT -1,
        CLASE VARCHAR(60),
        NUME_SERIE VARCHAR(20),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1,
        DETA_IMAGEN DOM_IMAGEN,
        AJUS_DETA_IMAGEN DOM_LOGICO,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECURSOS_PK PRIMARY KEY (CONS_RECURSO),
CONSTRAINT GLO_RECURSOS_CODIGO UNIQUE (CODI_RECURSO));

/*  Table: GLO_RECU_CARACTERISTICAS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_CARACTERISTICAS (CONS_RECU_CARACTERISTICA INTEGER NOT NULL,
        CONS_RECURSO INTEGER NOT NULL,
        CONS_RECU_TIPO_CARACTERISTICA INTEGER NOT NULL,
        VALOR VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_RECU_CARACTERISTICAS_PK PRIMARY KEY (CONS_RECU_CARACTERISTICA),
CONSTRAINT GLO_RECU_CARA_TIPO_CARACTERISTI UNIQUE (CONS_RECURSO, CONS_RECU_TIPO_CARACTERISTICA));

/*  Table: GLO_RECU_CORTE, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_CORTE (CONS_RECURSO INTEGER NOT NULL,
        CONS_ACCI_CORTE INTEGER,
        CONS_CUCHILLA INTEGER,
        DIMENSION NUMERIC(15, 2),
        VELO_MAXI_CORTE NUMERIC(15, 2),
        VELO_MINI_CORTE NUMERIC(15, 2),
        VELO_PROM_CORTE NUMERIC(15, 2),
        ALTU_MAX_CORTE NUMERIC(15, 2),
        ALTU_MINI_CORTE NUMERIC(15, 2),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_CORTE_PK PRIMARY KEY (CONS_RECURSO));

/*  Table: GLO_RECU_COSTURA, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_COSTURA (CONS_RECURSO INTEGER NOT NULL,
        TRANSPORTE VARCHAR(30),
        ARRASTRE VARCHAR(30),
        AJUSTE VARCHAR(12),
        NUME_AGUJAS INTEGER,
        SEPA_AGUJAS NUMERIC(15, 2),
        ALTU_PRENSATELAS NUMERIC(15, 2),
        LARG_PUNT_MAXIMO NUMERIC(15, 2),
        LARG_PUNT_MINIMO NUMERIC(15, 2),
        ANCH_COST_MAXIMO NUMERIC(15, 2),
        ANCH_COST_MINIMO NUMERIC(15, 2),
        CONS_RECU_TIPO_PUNTADA INTEGER,
        VELOCIDAD NUMERIC(15, 2),
        RPM INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_COSTURA_PK PRIMARY KEY (CONS_RECURSO));

/*  Table: GLO_RECU_EXTENDIDO, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_EXTENDIDO (CONS_RECURSO INTEGER NOT NULL,
        CONS_ACCIONAMIENTO INTEGER,
        CONS_TIPO_EXTENDIDO INTEGER,
        CONS_PRES_TEJIDO INTEGER,
        ANCH_MAXIMO NUMERIC(15, 2),
        ANCH_MINIMO NUMERIC(15, 2),
        VELO_EXTENDIDO NUMERIC(15, 2),
        ALTU_EXTE_MAXIMO NUMERIC(15, 2),
        ALTU_EXTE_MINIMO NUMERIC(15, 2),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_EXTENDIDO_PK PRIMARY KEY (CONS_RECURSO));

/*  Table: GLO_RECU_FAMILIAS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_FAMILIAS (CONS_RECU_FAMILIA INTEGER NOT NULL,
        CONS_RECU_TIPO INTEGER NOT NULL,
        CONS_RECU_GRUPO INTEGER NOT NULL,
        CODI_RECU_FAMILIA VARCHAR(12) NOT NULL,
        NOMB_RECU_FAMILIA VARCHAR(60) NOT NULL,
        CARACTERISTICAS VARCHAR(240),
        PORC_SUPLEMENTO DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_FAMILIAS_PK PRIMARY KEY (CONS_RECU_FAMILIA),
CONSTRAINT GLO_RECU_FAMILIAS_CODIGO UNIQUE (CONS_RECU_TIPO, CODI_RECU_FAMILIA),
CONSTRAINT GLO_RECU_FAMILIAS_NOMBRE UNIQUE (CONS_RECU_TIPO, NOMB_RECU_FAMILIA),
CONSTRAINT GLO_RECU_FAMI_UNICO UNIQUE (CONS_RECU_GRUPO, CONS_RECU_TIPO, CONS_RECU_FAMILIA));

/*  Table: GLO_RECU_FUSIONADO, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_FUSIONADO (CONS_RECURSO INTEGER NOT NULL,
        CONS_TIPO_FUSIONADO INTEGER,
        CANTIDAD INTEGER,
        DIME_PLAT_ANCHO NUMERIC(15, 2),
        DIME_PLAT_LARGO NUMERIC(15, 2),
        DIME_PLAT_AREA NUMERIC(15, 2),
        CONS_ACCI_FUSIONADO INTEGER,
        CONS_SIST_PRESION INTEGER,
        VELOCIDAD NUMERIC(15, 2),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_FUSIONADO_PK PRIMARY KEY (CONS_RECURSO));

/*  Table: GLO_RECU_GRUPOS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_GRUPOS (CONS_RECU_GRUPO INTEGER NOT NULL,
        CODI_RECU_GRUPO VARCHAR(12) NOT NULL,
        NOMB_RECU_GRUPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_GRUPOS_PK PRIMARY KEY (CONS_RECU_GRUPO),
CONSTRAINT GLO_RECU_GRUPOS_CODIGO UNIQUE (CODI_RECU_GRUPO),
CONSTRAINT GLO_RECU_GRUPOS_NOMBRE UNIQUE (NOMB_RECU_GRUPO));

/*  Table: GLO_RECU_MARCAS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_MARCAS (CONS_RECU_MARCA INTEGER NOT NULL,
        CODI_RECU_MARCA VARCHAR(12) NOT NULL,
        NOMB_RECU_MARCA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_MARCAS_PK PRIMARY KEY (CONS_RECU_MARCA),
CONSTRAINT GLO_RECU_MARCAS_CODIGO UNIQUE (CODI_RECU_MARCA),
CONSTRAINT GLO_RECU_MARCAS_NOMBRE UNIQUE (NOMB_RECU_MARCA));

/*  Table: GLO_RECU_MOVIMIENTOS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_MOVIMIENTOS (CONS_RECU_MOVIMIENTO INTEGER NOT NULL,
        CONS_RECU_TIPO_MOVIMIENTO INTEGER NOT NULL,
        CONS_RECURSO INTEGER NOT NULL,
        CONS_TIPO_DOCUMENTO INTEGER DEFAULT 0 NOT NULL,
        NUME_DOCUMENTO VARCHAR(20),
        CONS_SOLICITA INTEGER NOT NULL,
        CONS_ENTREGA INTEGER,
        CONS_RECIBE INTEGER,
        FECH_INICIAL TIMESTAMP NOT NULL,
        FECH_FINAL TIMESTAMP,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_RECU_MOVIMIENTOS_PK PRIMARY KEY (CONS_RECU_MOVIMIENTO));

/*  Table: GLO_RECU_MOVI_ANULADOS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_MOVI_ANULADOS (CONS_RECU_MOVI_ANULADO INTEGER NOT NULL,
        CONS_RECU_MOVIMIENTO INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_MOVI_ANULADOS_PK PRIMARY KEY (CONS_RECU_MOVI_ANULADO));

/*  Table: GLO_RECU_MOVI_BAJAS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_MOVI_BAJAS (CONS_RECU_MOVIMIENTO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_RECU_MOVI_BAJAS_PK PRIMARY KEY (CONS_RECU_MOVIMIENTO));

/*  Table: GLO_RECU_MOVI_TRASLADOS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_MOVI_TRASLADOS (CONS_RECU_MOVIMIENTO INTEGER NOT NULL,
        CONS_UBIC_TIPO INTEGER NOT NULL,
        CONS_EMPRESA INTEGER NOT NULL,
        CONS_AREA INTEGER NOT NULL,
        CONS_PLANTA INTEGER NOT NULL,
        CONS_PLAN_LINEA INTEGER NOT NULL,
        CONS_LINE_SECCION INTEGER NOT NULL,
        CONS_BODEGA INTEGER NOT NULL,
        OTRA_UBICACION VARCHAR(60),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_MOVI_TRASLADOS_PK PRIMARY KEY (CONS_RECU_MOVIMIENTO));

/*  Table: GLO_RECU_PLANCHADO, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_PLANCHADO (CONS_RECURSO INTEGER NOT NULL,
        PLANCHA DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_TIPO_PLANCHADO INTEGER,
        MESA DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_SIST_PLANCHADO INTEGER,
        UTIL_MESA VARCHAR(30),
        BRAZO DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_TIPO_BRAZO INTEGER,
        CONS_SIST_PLAN_BRAZO INTEGER,
        PRENSA DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_TIPO_PRENSA INTEGER,
        UTIL_PRENSA VARCHAR(30),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_PLANCHADO_PK PRIMARY KEY (CONS_RECURSO));

/*  Table: GLO_RECU_TIPOS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_TIPOS (CONS_RECU_TIPO INTEGER NOT NULL,
        CONS_RECU_GRUPO INTEGER NOT NULL,
        CODI_RECU_TIPO VARCHAR(12) NOT NULL,
        NOMB_RECU_TIPO VARCHAR(60) NOT NULL,
        CARACTERISTICAS VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_RECU_TIPOS_PK PRIMARY KEY (CONS_RECU_TIPO),
CONSTRAINT GLO_RECU_TIPOS_CODIGO UNIQUE (CONS_RECU_GRUPO, CODI_RECU_TIPO),
CONSTRAINT GLO_RECU_TIPOS_NOMBRE UNIQUE (CONS_RECU_GRUPO, NOMB_RECU_TIPO),
CONSTRAINT GLO_RECU_TIPOS_UNICO UNIQUE (CONS_RECU_TIPO, CONS_RECU_GRUPO));

/*  Table: GLO_RECU_TIPO_CARACTERISTICAS, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_TIPO_CARACTERISTICAS (CONS_RECU_TIPO_CARACTERISTICA INTEGER NOT NULL,
        CONS_RECU_FAMILIA INTEGER NOT NULL,
        CONS_TIPO_CARACTERISTICA INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_RECU_TIPO_CARACTERISTICA_PK PRIMARY KEY (CONS_RECU_TIPO_CARACTERISTICA),
CONSTRAINT GLO_RECU_TIPO_CARA_TIPO_CARACTE UNIQUE (CONS_RECU_FAMILIA, CONS_TIPO_CARACTERISTICA));

/*  Table: GLO_RECU_TIPO_MOVIMIENTO, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_TIPO_MOVIMIENTO (CONS_RECU_TIPO_MOVIMIENTO INTEGER NOT NULL,
        CONS_FAMI_MOVIMIENTO INTEGER NOT NULL,
        CODI_RECU_TIPO_MOVIMIENTO VARCHAR(12) NOT NULL,
        NOMB_RECU_TIPO_MOVIMIENTO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_TIPO_MOVIMIENTO_PK PRIMARY KEY (CONS_RECU_TIPO_MOVIMIENTO),
CONSTRAINT GLO_RECU_TIPO_MOVIMIENTO_CODIGO UNIQUE (CODI_RECU_TIPO_MOVIMIENTO),
CONSTRAINT GLO_RECU_TIPO_MOVIMIENTO_NOMBRE UNIQUE (CONS_FAMI_MOVIMIENTO, NOMB_RECU_TIPO_MOVIMIENTO));

/*  Table: GLO_RECU_TIPO_PUNTADA, Owner: SYSDBA  */
CREATE TABLE GLO_RECU_TIPO_PUNTADA (CONS_RECU_TIPO_PUNTADA INTEGER NOT NULL,
        CODI_RECU_TIPO_PUNTADA VARCHAR(12) NOT NULL,
        CARACTERISTICAS VARCHAR(240),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
        FORMULA VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_RECU_TIPO_PUNTADA_PK PRIMARY KEY (CONS_RECU_TIPO_PUNTADA));

/*  Table: GLO_REFERENCIAS, Owner: SYSDBA  */
CREATE TABLE GLO_REFERENCIAS (CONS_REFERENCIA INTEGER NOT NULL,
        CODI_REFERENCIA VARCHAR(12) NOT NULL,
        ES_PROTOTIPO DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_REFE_TEMPORADA INTEGER NOT NULL,
        MOLDE VARCHAR(12),
        CODI_INTE_REFERENCIA VARCHAR(12),
        NOMB_REFERENCIA VARCHAR(60) NOT NULL,
        CODI_BARRAS VARCHAR(30),
        CONS_REFE_MARCA INTEGER NOT NULL,
        CONS_REFE_LINEA INTEGER NOT NULL,
        CONS_REFE_EDAD INTEGER NOT NULL,
        CONS_REFE_ESTILO INTEGER NOT NULL,
        CONS_REFE_GRUPO INTEGER NOT NULL,
        CONS_REFE_SEXO INTEGER NOT NULL,
        CONS_REFE_LAVADO INTEGER NOT NULL,
        CONS_REFE_BORDADO INTEGER NOT NULL,
        CONS_REFE_ESTAMPADO INTEGER NOT NULL,
        CONS_REFE_GRUP_TALLAS INTEGER NOT NULL,
        CONS_REFE_ESTADO INTEGER DEFAULT 0 NOT NULL,
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN INTEGER DEFAULT -1 NOT NULL,
        IMAG_SMALL DOM_IMAGEN,
        DESCRIPCION VARCHAR(240),
        CON_ENTREPIERNAS DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA  DEFAULT 'NOW' NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA  DEFAULT USER NOT NULL,
CONSTRAINT GLO_REFERENCIAS_PK PRIMARY KEY (CONS_REFERENCIA),
CONSTRAINT GLO_REFERENCIAS_CODIGO UNIQUE (CODI_REFERENCIA, ES_PROTOTIPO));

/*  Table: GLO_REFE_BORDADOS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_BORDADOS (CONS_REFE_BORDADO INTEGER NOT NULL,
        CODI_REFE_BORDADO VARCHAR(12) NOT NULL,
        NOMB_REFE_BORDADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
        OBSERVACIONES VARCHAR(240),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
CONSTRAINT GLO_REFE_BORDADOS_PK PRIMARY KEY (CONS_REFE_BORDADO),
CONSTRAINT GLO_REFE_BORDADOS_CODIGO UNIQUE (CODI_REFE_BORDADO),
CONSTRAINT GLO_REFE_BORDADOS_NOMBRE UNIQUE (NOMB_REFE_BORDADO));

/*  Table: GLO_REFE_CAMB_ESTADO, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_CAMB_ESTADO (CONS_REFE_CAMB_ESTADO INTEGER NOT NULL,
        CONS_REFERENCIA INTEGER NOT NULL,
        CONS_ESTA_ANTERIOR INTEGER NOT NULL,
        CONS_ESTA_NUEVO INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(240),
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
CONSTRAINT GLO_REFE_CAMB_ESTADO_PK PRIMARY KEY (CONS_REFE_CAMB_ESTADO));

/*  Table: GLO_REFE_COLORES, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_COLORES (CONS_REFE_COLOR INTEGER NOT NULL,
        CONS_REFERENCIA INTEGER NOT NULL,
        SECU_COLOR INTEGER NOT NULL,
        CONS_COLOR INTEGER NOT NULL,
        NUME_COLOR VARCHAR(6),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_REFE_COLORES_PK PRIMARY KEY (CONS_REFE_COLOR),
CONSTRAINT GLO_REFE_COLORES_SECUENCIA UNIQUE (CONS_REFERENCIA, SECU_COLOR));

/*  Table: GLO_REFE_EDADES, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_EDADES (CONS_REFE_EDAD INTEGER NOT NULL,
        CODI_REFE_EDAD VARCHAR(12) NOT NULL,
        NOMB_REFE_EDAD VARCHAR(60) NOT NULL,
        RANGO VARCHAR(60),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_REFE_EDADES_PK PRIMARY KEY (CONS_REFE_EDAD),
CONSTRAINT GLO_REFE_EDADES_CODIGO UNIQUE (CODI_REFE_EDAD),
CONSTRAINT GLO_REFE_EDADES_NOMBRE UNIQUE (NOMB_REFE_EDAD));

/*  Table: GLO_REFE_ESTADOS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_ESTADOS (CONS_REFE_ESTADO INTEGER NOT NULL,
        CODI_REFE_ESTADO VARCHAR(12) NOT NULL,
        NOMB_REFE_ESTADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
        EDIT_MAESTRO DOM_LOGICO,
        MOST_METODOS DOM_LOGICO,
        MOST_ORDE_TRABAJO DOM_LOGICO,
        MOST_INVE_MATERIALES DOM_LOGICO,
CONSTRAINT GLO_REFE_ESTADOS_PK PRIMARY KEY (CONS_REFE_ESTADO),
CONSTRAINT GLO_REFE_ESTADOS_CODIGO UNIQUE (CODI_REFE_ESTADO),
CONSTRAINT GLO_REFE_ESTADOS_NOMBRE UNIQUE (NOMB_REFE_ESTADO));

/*  Table: GLO_REFE_ESTAMPADOS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_ESTAMPADOS (CONS_REFE_ESTAMPADO INTEGER NOT NULL,
        CODI_REFE_ESTAMPADO VARCHAR(12) NOT NULL,
        NOMB_REFE_ESTAMPADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
        OBSERVACIONES VARCHAR(240),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
CONSTRAINT GLO_REFE_ESTAMPADOS_PK PRIMARY KEY (CONS_REFE_ESTAMPADO),
CONSTRAINT GLO_REFE_ESTAMPADOS_CODIGO UNIQUE (CODI_REFE_ESTAMPADO),
CONSTRAINT GLO_REFE_ESTAMPADOS_NOMBRE UNIQUE (NOMB_REFE_ESTAMPADO));

/*  Table: GLO_REFE_ESTILOS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_ESTILOS (CONS_REFE_ESTILO INTEGER NOT NULL,
        CODI_REFE_ESTILO VARCHAR(12) NOT NULL,
        NOMB_REFE_ESTILO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_REFE_ESTILOS_PK PRIMARY KEY (CONS_REFE_ESTILO),
CONSTRAINT GLO_REFE_ESTILOS_CODIGO UNIQUE (CODI_REFE_ESTILO),
CONSTRAINT GLO_REFE_ESTILOS_NOMBRE UNIQUE (NOMB_REFE_ESTILO));

/*  Table: GLO_REFE_GRUPOS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_GRUPOS (CONS_REFE_GRUPO INTEGER NOT NULL,
        CODI_REFE_GRUPO VARCHAR(12) NOT NULL,
        NOMB_REFE_GRUPO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_REFE_GRUPOS_PK PRIMARY KEY (CONS_REFE_GRUPO),
CONSTRAINT GLO_REFE_GRUPOS_CODIGO UNIQUE (CODI_REFE_GRUPO),
CONSTRAINT GLO_REFE_GRUPOS_NOMBRE UNIQUE (NOMB_REFE_GRUPO));

/*  Table: GLO_REFE_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_HISTORIAL (CONS_ANOTACION INTEGER NOT NULL,
        CONS_REFERENCIA INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(250),
        FECH_SISTEMA DOM_FECH_SISTEMA  DEFAULT 'NOW' NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA  DEFAULT USER NOT NULL,
CONSTRAINT GLO_REFE_HISTORIAL_PK PRIMARY KEY (CONS_ANOTACION));

/*  Table: GLO_REFE_LAVADOS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_LAVADOS (CONS_REFE_LAVADO INTEGER NOT NULL,
        CODI_REFE_LAVADO VARCHAR(12) NOT NULL,
        NOMB_REFE_LAVADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        OBSERVACIONES VARCHAR(240),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
CONSTRAINT GLO_REFE_LAVADOS_PK PRIMARY KEY (CONS_REFE_LAVADO),
CONSTRAINT GLO_REFE_LAVADOS_CODIGO UNIQUE (CODI_REFE_LAVADO),
CONSTRAINT GLO_REFE_LAVADOS_NOMBRE UNIQUE (NOMB_REFE_LAVADO));

/*  Table: GLO_REFE_LINEAS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_LINEAS (CONS_REFE_LINEA INTEGER NOT NULL,
        CODI_REFE_LINEA VARCHAR(12) NOT NULL,
        NOMB_REFE_LINEA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_REFE_LINEAS_PK PRIMARY KEY (CONS_REFE_LINEA),
CONSTRAINT GLO_REFE_LINEAS_CODIGO UNIQUE (CODI_REFE_LINEA),
CONSTRAINT GLO_REFE_LINEAS_NOMBRE UNIQUE (NOMB_REFE_LINEA));

/*  Table: GLO_REFE_MARCAS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_MARCAS (CONS_REFE_MARCA INTEGER NOT NULL,
        CODI_REFE_MARCA VARCHAR(12) NOT NULL,
        NOMB_REFE_MARCA VARCHAR(60) NOT NULL,
        FECH_CREA_MARCA TIMESTAMP DEFAULT 'NOW' NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_REFE_MARCAS_PK PRIMARY KEY (CONS_REFE_MARCA),
CONSTRAINT GLO_REFE_MARCAS_CODIGO UNIQUE (CODI_REFE_MARCA),
CONSTRAINT GLO_REFE_MARCAS_NOMBRE UNIQUE (NOMB_REFE_MARCA));

/*  Table: GLO_REFE_TEMPORADAS, Owner: SYSDBA  */
CREATE TABLE GLO_REFE_TEMPORADAS (CONS_REFE_TEMPORADA INTEGER NOT NULL,
        CODI_REFE_TEMPORADA VARCHAR(12) NOT NULL,
        NOMB_REFE_TEMPORADA VARCHAR(60) NOT NULL,
        FECH_INICIAL TIMESTAMP,
        FECH_FINAL TIMESTAMP,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_REFE_TEMPORADAS_PK PRIMARY KEY (CONS_REFE_TEMPORADA),
CONSTRAINT GLO_REFE_TEMPORADAS_CODIGO UNIQUE (CODI_REFE_TEMPORADA),
CONSTRAINT GRO_REFE_TEMPORADAS_NOMBRE UNIQUE (NOMB_REFE_TEMPORADA));

/*  Table: GLO_SECCIONES, Owner: SYSDBA  */
CREATE TABLE GLO_SECCIONES (CONS_SECCION INTEGER NOT NULL,
        CODI_SECCION VARCHAR(12) NOT NULL,
        NOMB_SECCION VARCHAR(60) NOT NULL,
        DESCRIPCION VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_SECCIONES_PK PRIMARY KEY (CONS_SECCION),
CONSTRAINT GLO_SECCIONES_CODIGO UNIQUE (CODI_SECCION),
CONSTRAINT GLO_SECCIONES_NOMBRE UNIQUE (NOMB_SECCION));

/*  Table: GLO_SUB_IMPRODUCTIVOS, Owner: SYSDBA  */
CREATE TABLE GLO_SUB_IMPRODUCTIVOS (CONS_SUB_IMPRODUCTIVO INTEGER NOT NULL,
        CONS_IMPRODUCTIVO INTEGER NOT NULL,
        CODI_SUB_IMPRODUCTIVO VARCHAR(12) NOT NULL,
        NOMB_SUB_IMPRODUCTIVO VARCHAR(60) NOT NULL,
        DESCRIPCION VARCHAR(240),
        DESC_INCENTIVOS DOM_LOGICO  DEFAULT 1 NOT NULL,
        DESC_EFICIENCIA DOM_LOGICO  DEFAULT 1 NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        APLI_SUB_IMPRODUCTIVO VARCHAR(240),
        PORCENTAJE DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        ADICIONAL_1 VARCHAR(12),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_SUB_IMPRODUCTIVO_PK PRIMARY KEY (CONS_SUB_IMPRODUCTIVO),
CONSTRAINT GLO_SUB_IMPRODUCTIVO_CODIGO UNIQUE (CONS_IMPRODUCTIVO, CODI_SUB_IMPRODUCTIVO),
CONSTRAINT GLO_SUB_IMPRODUCTIVO_NOMBRE UNIQUE (CONS_IMPRODUCTIVO, NOMB_SUB_IMPRODUCTIVO));

/*  Table: GLO_TERCEROS, Owner: SYSDBA  */
CREATE TABLE GLO_TERCEROS (CONS_TERCERO INTEGER NOT NULL,
        CODI_TERCERO VARCHAR(12) NOT NULL,
        IDEN_TERCERO VARCHAR(30) NOT NULL,
        NOMB_TERCERO VARCHAR(120) NOT NULL,
        DIGI_VERIFICACION VARCHAR(1),
        CONS_ORIGEN INTEGER DEFAULT 0 NOT NULL,
        DIRE_TERCERO VARCHAR(240),
        CONS_PAIS INTEGER NOT NULL,
        CONS_DEPARTAMENTO INTEGER NOT NULL,
        CONS_CIUDAD INTEGER NOT NULL,
        CODI_POSTAL VARCHAR(15),
        TELEFONO1 VARCHAR(15),
        TELEFONO2 VARCHAR(15),
        TELEFONO3 VARCHAR(15),
        FAX1 VARCHAR(15),
        FAX2 VARCHAR(15),
        CELULAR VARCHAR(15),
        CORR_ELECTRONICO VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_TERCEROS_PK PRIMARY KEY (CONS_TERCERO),
CONSTRAINT GLO_TERC_CODI_TERCERO UNIQUE (CODI_TERCERO),
CONSTRAINT GLO_TERC_NOMB_TERCERO UNIQUE (NOMB_TERCERO));

/*  Table: GLO_TERC_CONTACTOS, Owner: SYSDBA  */
CREATE TABLE GLO_TERC_CONTACTOS (CONS_CONTACTO INTEGER NOT NULL,
        CONS_TERCERO INTEGER NOT NULL,
        NOMB_CONTACTO VARCHAR(120) NOT NULL,
        CARGO VARCHAR(120),
        TELEFONO VARCHAR(15) NOT NULL,
        FAX VARCHAR(15),
        MOVIL VARCHAR(30),
        CORR_ELECTRONICO VARCHAR(240),
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_TERC_CONTACTOS_PK PRIMARY KEY (CONS_CONTACTO),
CONSTRAINT UK_GLO_TERC_CONTACTOS_NOMBRE UNIQUE (CONS_TERCERO, NOMB_CONTACTO));

/*  Table: GLO_TERC_DESPACHAR_A, Owner: SYSDBA  */
CREATE TABLE GLO_TERC_DESPACHAR_A (CONS_DESPACHAR_A INTEGER NOT NULL,
        CONS_TERCERO INTEGER NOT NULL,
        CODI_DESPACHAR_A VARCHAR(12) NOT NULL,
        IDEN_DESPACHAR_A VARCHAR(30) NOT NULL,
        DIGI_VERIFICACION VARCHAR(1),
        NOMB_DESPACHAR_A VARCHAR(120) NOT NULL,
        CONTACTO1 VARCHAR(60) NOT NULL,
        CONTACTO2 VARCHAR(60),
        DIRECCION VARCHAR(240) NOT NULL,
        CONS_PAIS INTEGER DEFAULT 0 NOT NULL,
        CONS_DEPARTAMENTO INTEGER DEFAULT 0 NOT NULL,
        CONS_CIUDAD INTEGER DEFAULT 0 NOT NULL,
        CODI_POSTAL VARCHAR(15),
        TELEFONO1 VARCHAR(15),
        TELEFONO2 VARCHAR(15),
        TELEFONO3 VARCHAR(15),
        FAX1 VARCHAR(15),
        FAX2 VARCHAR(15),
        CELULAR VARCHAR(15),
        CORR_ELECTRONICO VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_TERC_DESPACHAR_A_PK PRIMARY KEY (CONS_DESPACHAR_A),
CONSTRAINT UK_GLO_DESPACHAR_A_IDEN_DESPACH UNIQUE (CONS_TERCERO, IDEN_DESPACHAR_A));

/*  Table: GLO_TERC_FACTURAR_A, Owner: SYSDBA  */
CREATE TABLE GLO_TERC_FACTURAR_A (CONS_FACTURAR_A INTEGER NOT NULL,
        CONS_TERCERO INTEGER NOT NULL,
        CODI_FACTURAR_A VARCHAR(12) NOT NULL,
        IDEN_FACTURAR_A VARCHAR(30) NOT NULL,
        DIGI_VERIFICACION VARCHAR(1),
        NOMB_FACTURAR_A VARCHAR(120) NOT NULL,
        CONTACTO1 VARCHAR(60) NOT NULL,
        CONTACTO2 VARCHAR(60),
        DIRECCION VARCHAR(240) NOT NULL,
        CONS_PAIS INTEGER DEFAULT 0 NOT NULL,
        CONS_DEPARTAMENTO INTEGER DEFAULT 0 NOT NULL,
        CONS_CIUDAD INTEGER DEFAULT 0 NOT NULL,
        CODI_POSTAL VARCHAR(15),
        TELEFONO1 VARCHAR(15),
        TELEFONO2 VARCHAR(15),
        TELEFONO3 VARCHAR(15),
        FAX1 VARCHAR(15),
        FAX2 VARCHAR(15),
        CELULAR VARCHAR(15),
        CORR_ELECTRONICO VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_FACTURAR_A_PK PRIMARY KEY (CONS_FACTURAR_A),
CONSTRAINT UK_FACTURAR_A_IDEN_FACTURAR_A UNIQUE (CONS_TERCERO, IDEN_FACTURAR_A));

/*  Table: GLO_TERC_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE GLO_TERC_HISTORIAL (CONS_HISTORIAL INTEGER NOT NULL,
        CONS_TERCERO INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_PROV_HISTORIAL_PK PRIMARY KEY (CONS_HISTORIAL));

/*  Table: GLO_TIPO_CARACTERISTICAS, Owner: SYSDBA  */
CREATE TABLE GLO_TIPO_CARACTERISTICAS (CONS_TIPO_CARACTERISTICA INTEGER NOT NULL,
        CODI_TIPO_CARACTERISTICA VARCHAR(12) NOT NULL,
        NOMB_TIPO_CARACTERISTICA VARCHAR(60) NOT NULL,
        OBSERVACIONES DOM_OBSERVACIONES,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT GLO_TIPO_CARACTERISTICA_PK PRIMARY KEY (CONS_TIPO_CARACTERISTICA),
CONSTRAINT GLO_TIPO_CARACTERISTICA_CODIGO UNIQUE (CODI_TIPO_CARACTERISTICA),
CONSTRAINT GLO_TIPO_CARACTERISTICA_NOMBRE UNIQUE (NOMB_TIPO_CARACTERISTICA));

/*  Table: GLO_TIPO_DOCUMENTO, Owner: SYSDBA  */
CREATE TABLE GLO_TIPO_DOCUMENTO (CONS_TIPO_DOCUMENTO INTEGER NOT NULL,
        CODI_TIPO_DOCUMENTO VARCHAR(12) NOT NULL,
        NOMB_TIPO_DOCUMENTO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_TIPO_DOCUMENTO_PK PRIMARY KEY (CONS_TIPO_DOCUMENTO),
CONSTRAINT GLO_TIPO_DOCUMENTO_CODIGO UNIQUE (CODI_TIPO_DOCUMENTO),
CONSTRAINT GLO_TIPO_DOCUMENTO_NOMBRE UNIQUE (NOMB_TIPO_DOCUMENTO));

/*  Table: GLO_TURNOS, Owner: SYSDBA  */
CREATE TABLE GLO_TURNOS (CONS_TURNO INTEGER NOT NULL,
        CODI_TURNO VARCHAR(12) NOT NULL,
        TIPO_TURNO INTEGER DEFAULT 0 NOT NULL,
        DESCRIPCION VARCHAR(240),
        LUNE_DESD_1 TIMESTAMP,
        LUNE_HAST_1 TIMESTAMP,
        LUNE_DESD_2 TIMESTAMP,
        LUNE_HAST_2 TIMESTAMP,
        LUNE_MINUTOS INTEGER DEFAULT 0,
        MART_DESD_1 TIMESTAMP,
        MART_HAST_1 TIMESTAMP,
        MART_DESD_2 TIMESTAMP,
        MART_HAST_2 TIMESTAMP,
        MART_MINUTOS INTEGER DEFAULT 0,
        MIER_DESD_1 TIMESTAMP,
        MIER_HAST_1 TIMESTAMP,
        MIER_DESD_2 TIMESTAMP,
        MIER_HAST_2 TIMESTAMP,
        MIER_MINUTOS INTEGER DEFAULT 0,
        JUEV_DESD_1 TIMESTAMP,
        JUEV_HAST_1 TIMESTAMP,
        JUEV_DESD_2 TIMESTAMP,
        JUEV_HAST_2 TIMESTAMP,
        JUEV_MINUTOS INTEGER DEFAULT 0,
        VIER_DESD_1 TIMESTAMP,
        VIER_HAST_1 TIMESTAMP,
        VIER_DESD_2 TIMESTAMP,
        VIER_HAST_2 TIMESTAMP,
        VIER_MINUTOS INTEGER DEFAULT 0,
        SABA_DESD_1 TIMESTAMP,
        SABA_HAST_1 TIMESTAMP,
        SABA_DESD_2 TIMESTAMP,
        SABA_HAST_2 TIMESTAMP,
        SABA_MINUTOS INTEGER DEFAULT 0,
        DOMI_DESD_1 TIMESTAMP,
        DOMI_HAST_1 TIMESTAMP,
        DOMI_DESD_2 TIMESTAMP,
        DOMI_HAST_2 TIMESTAMP,
        DOMI_MINUTOS INTEGER DEFAULT 0,
        PRIM_DESCANSO INTEGER DEFAULT 0,
        SEGU_DESCANSO INTEGER DEFAULT 0,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT GLO_TURNOS_PK PRIMARY KEY (CONS_TURNO),
CONSTRAINT GLO_TURNOS_CODIGO UNIQUE (CODI_TURNO));

/*  Table: IBE$PARAMS_HISTORY, Owner: SYSDBA  */
CREATE TABLE IBE$PARAMS_HISTORY (IBE$PH_PROCEDURE_NAME VARCHAR(67) CHARACTER SET UNICODE_FSS NOT NULL,
        IBE$PH_PARAMS BLOB SUB_TYPE 0 SEGMENT SIZE 80,
PRIMARY KEY (IBE$PH_PROCEDURE_NAME));

/*  Table: IBE$VERSION_HISTORY, Owner: SYSDBA  */
CREATE TABLE IBE$VERSION_HISTORY (IBE$VH_ID INTEGER NOT NULL,
        IBE$VH_MODIFY_DATE TIMESTAMP NOT NULL,
        IBE$VH_USER_NAME VARCHAR(67),
        IBE$VH_OBJECT_TYPE SMALLINT NOT NULL,
        IBE$VH_OBJECT_NAME VARCHAR(67) NOT NULL,
        IBE$VH_HEADER VARCHAR(32000),
        IBE$VH_BODY BLOB SUB_TYPE 0 SEGMENT SIZE 80,
        IBE$VH_DESCRIPTION BLOB SUB_TYPE TEXT SEGMENT SIZE 80,
PRIMARY KEY (IBE$VH_ID));

/*  Table: PCP$ACCE_DIRE_ICONOS, Owner: SYSDBA  */
CREATE TABLE PCP$ACCE_DIRE_ICONOS (USUARIO VARCHAR(20) NOT NULL,
        TITU_PAGINA VARCHAR(60) NOT NULL,
        INDE_ICONO INTEGER NOT NULL,
        NOMB_OBJETO VARCHAR(60) NOT NULL,
        TITU_ICONO VARCHAR(60) NOT NULL,
CONSTRAINT PK_PCP$ACCE_DIRE_ICONOS PRIMARY KEY (USUARIO, TITU_PAGINA, INDE_ICONO));

/*  Table: PCP$ACCE_DIRE_PAGINAS, Owner: SYSDBA  */
CREATE TABLE PCP$ACCE_DIRE_PAGINAS (USUARIO VARCHAR(20) NOT NULL,
        INDE_PAGINA INTEGER NOT NULL,
        TITU_PAGINA VARCHAR(60) NOT NULL,
CONSTRAINT PCP$ACCE_DIRE_PAGINAS_PK PRIMARY KEY (USUARIO, INDE_PAGINA, TITU_PAGINA));

/*  Table: PCP$FILT_USUARIO, Owner: SYSDBA  */
CREATE TABLE PCP$FILT_USUARIO (USUARIO DOM_USUA_SISTEMA  DEFAULT USER NOT NULL,
        TAG_FILTRO INTEGER DEFAULT 0 NOT NULL,
        INTE_FILTRO INTEGER,
        VARC_FILTRO VARCHAR(12));

/*  Table: PCP$PERMISOS, Owner: SYSDBA  */
CREATE TABLE PCP$PERMISOS (USUARIO VARCHAR(20) NOT NULL,
        MENU VARCHAR(50) NOT NULL,
        GRANTOR DOM_USUA_SISTEMA  DEFAULT user NOT NULL,
        ESCRITURA DOM_LOGICO  DEFAULT -1 NOT NULL,
CONSTRAINT PK_PCP$PERMISOS PRIMARY KEY (USUARIO, MENU));

/*  Table: PCP_CALI_DEFECTOS, Owner: SYSDBA  */
CREATE TABLE PCP_CALI_DEFECTOS (CONS_CALI_DEFECTO INTEGER NOT NULL,
        CODI_CALI_DEFECTO VARCHAR(12) NOT NULL,
        NOMB_CALI_DEFECTO VARCHAR(60) NOT NULL,
        ESTA_ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        ES_IMPUTABLE DOM_LOGICO  DEFAULT 1 NOT NULL,
        TIEMPO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VALOR DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_CALI_DEFECTOS PRIMARY KEY (CONS_CALI_DEFECTO),
CONSTRAINT PCP_CALI_DEFECTOS_CODIGO UNIQUE (CODI_CALI_DEFECTO),
CONSTRAINT PCP_CALI_DEFECTOS_NOMBRE UNIQUE (NOMB_CALI_DEFECTO));

/*  Table: PCP_COME_COTIZACIONES_1, Owner: SYSDBA  */
CREATE TABLE PCP_COME_COTIZACIONES_1 (CONS_COTIZACION INTEGER NOT NULL,
        NUME_COTIZACION INTEGER,
        FECH_COTIZACION INTEGER,
        CONS_TERCERO INTEGER,
        CONS_REFERENCIA INTEGER,
CONSTRAINT PCP_COME_COTIZACIONES_PK PRIMARY KEY (CONS_COTIZACION));

/*  Table: PCP_COMP_GRUPOS, Owner: SYSDBA  */
CREATE TABLE PCP_COMP_GRUPOS (CONS_COMP_GRUPO INTEGER NOT NULL,
        CODI_COMP_GRUPO VARCHAR(12) NOT NULL,
        NOMB_COMP_GRUPO VARCHAR(60) NOT NULL,
        ALTO DOM_ENTE_POSITIVO  DEFAULT 200 NOT NULL,
        ANCHO DOM_ENTE_POSITIVO  DEFAULT 200 NOT NULL,
        OBSERVACIONES DOM_OBSERVACIONES,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_COMP_GRUPOS_PK PRIMARY KEY (CONS_COMP_GRUPO),
CONSTRAINT PCP_COMP_GRUPOS_CODIGO UNIQUE (CODI_COMP_GRUPO),
CONSTRAINT PCP_COMP_GRUPOS_NOMBRE UNIQUE (NOMB_COMP_GRUPO));

/*  Table: PCP_COMP_LIST_OPER_COSTURA, Owner: SYSDBA  */
CREATE TABLE PCP_COMP_LIST_OPER_COSTURA (CONS_COMP_VARIACION INTEGER NOT NULL,
        SECU_OPER_VARI_COMPONENTE INTEGER NOT NULL,
        CODI_OPER_COSTURA VARCHAR(12) NOT NULL,
        NOMB_OPER_COSTURA VARCHAR(30) NOT NULL,
        TIEMPO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FRECUENCIA DOM_REAL_POSITIVO  DEFAULT 1 NOT NULL,
        ES_TITULO DOM_LOGICO  DEFAULT -1 NOT NULL,
        COST_OPERACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_COMP_LIST_OPER_COSTURA_PK PRIMARY KEY (CONS_COMP_VARIACION, SECU_OPER_VARI_COMPONENTE));

/*  Table: PCP_COMP_VARIACIONES, Owner: SYSDBA  */
CREATE TABLE PCP_COMP_VARIACIONES (CONS_COMP_VARIACION INTEGER NOT NULL,
        CONS_COMP_GRUPO INTEGER NOT NULL,
        CODI_COMP_VARIACION VARCHAR(12) NOT NULL,
        NOMB_COMP_VARIACION VARCHAR(60) NOT NULL,
        DESCRIPCION CHAR(250),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
        IMAG_ESQU_COSTURA DOM_IMAGEN,
        AJUS_IMAG_ESQU_COSTURA DOM_LOGICO  DEFAULT -1,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_COMP_TIPOS_PK PRIMARY KEY (CONS_COMP_VARIACION),
CONSTRAINT PCP_COMP_TIPOS_CODIGO UNIQUE (CODI_COMP_VARIACION),
CONSTRAINT PCP_COMP_TIPOS_NOMBRE UNIQUE (CONS_COMP_GRUPO, NOMB_COMP_VARIACION));

/*  Table: PCP_CONF_MENU_ADICIONALES, Owner: SYSDBA  */
CREATE TABLE PCP_CONF_MENU_ADICIONALES (CONS_CONF_MENU_ADICIONAL INTEGER NOT NULL,
        NOMB_CONF_MENU_ADICIONAL VARCHAR(60) NOT NULL,
        TEXT_CONF_MENU_ADICIONAL VARCHAR(60) NOT NULL,
        PADR_CONF_MENU_ADICIONAL VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        TIPO_ADICIONAL INTEGER NOT NULL,
        FORMATO BLOB SUB_TYPE TEXT SEGMENT SIZE 80,
        NOMB_APLICACION VARCHAR(240),
        PARA_APLICACION VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_CONF_MENU_ADICIONALES PRIMARY KEY (CONS_CONF_MENU_ADICIONAL),
CONSTRAINT PCP_CONF_MENU_ADIC_NOMBRE UNIQUE (NOMB_CONF_MENU_ADICIONAL));

/*  Table: PCP_CONF_OBJETOS, Owner: SYSDBA  */
CREATE TABLE PCP_CONF_OBJETOS (CONS_CONF_OBJETO INTEGER NOT NULL,
        TIPO INTEGER DEFAULT 1 NOT NULL,
        NOMB_OBJETO VARCHAR(60) NOT NULL,
        DESC_OBJETO VARCHAR(3000),
        MENU_PADRE VARCHAR(240) NOT NULL,
        ESTA_ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        BASE_DATOS VARCHAR(60),
        TEXT_SQL VARCHAR(1000),
        NOMB_MENU_PADRE VARCHAR(240) DEFAULT 'menu_sin_clasificacion' NOT NULL,
        FECH_MODIFICACION DOM_FECH_SISTEMA NOT NULL,
        USUA_MODIFICACION DOM_USUA_SISTEMA NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_CONF_CONSULTAS PRIMARY KEY (CONS_CONF_OBJETO),
CONSTRAINT PCP_CONF_CONS_UNQ_NOMBRE UNIQUE (TIPO, NOMB_OBJETO));

/*  Table: PCP_CONF_OBJE_CAMPOS, Owner: SYSDBA  */
CREATE TABLE PCP_CONF_OBJE_CAMPOS (CONS_CONF_OBJE_CAMPO INTEGER NOT NULL,
        CONS_CONF_OBJETO INTEGER NOT NULL,
        NOMB_CAMPO VARCHAR(60) NOT NULL,
        TEXT_CAMPO VARCHAR(60) NOT NULL,
        VISIBLE DOM_LOGICO NOT NULL,
        FORMATO VARCHAR(60),
CONSTRAINT PK_PCP_CONF_OBJE_CAMPOS PRIMARY KEY (CONS_CONF_OBJE_CAMPO),
CONSTRAINT PCP_CONF_OBJE_CAMPOS_UNQ_NOMBRE UNIQUE (CONS_CONF_OBJETO, NOMB_CAMPO),
CONSTRAINT PCP_CONF_OBJE_CAMPOS_UNQ_TEXTO UNIQUE (CONS_CONF_OBJETO, TEXT_CAMPO));

/*  Table: PCP_CONF_OBJE_PARAMETROS, Owner: SYSDBA  */
CREATE TABLE PCP_CONF_OBJE_PARAMETROS (CONS_CONF_OBJE_PARAMETRO INTEGER NOT NULL,
        CONS_CONF_OBJETO INTEGER NOT NULL,
        NOMB_PARAMETRO VARCHAR(60) NOT NULL,
        TEXT_PARAMETRO VARCHAR(60) NOT NULL,
        TIPO_PARAMETRO VARCHAR(60) NOT NULL,
        LIST_DATOS VARCHAR(1000),
        LIST_CONSULTA VARCHAR(1000),
        LIST_CAMP_LLAVE VARCHAR(60),
        LIST_CAMP_MOSTRAR VARCHAR(60),
        REQUERIDO DOM_LOGICO  DEFAULT -1 NOT NULL,
CONSTRAINT PK_PCP_CONF_OBJE_PARAMETROS PRIMARY KEY (CONS_CONF_OBJE_PARAMETRO),
CONSTRAINT PCP_CONF_OBJE_PARA_UNQ_NOMBRE UNIQUE (CONS_CONF_OBJETO, NOMB_PARAMETRO));

/*  Table: PCP_CONT_NOVE_ABONADOS, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_ABONADOS (CONS_CONT_NOVE_ABONADO INTEGER NOT NULL,
        CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        CONS_ABONADO INTEGER NOT NULL,
        CONS_PROD_ORDEN INTEGER,
        MINU_TRABAJADOS DOM_ENTE_POSITIVO NOT NULL,
        MINU_ABONADOS DOM_REAL_POSITIVO NOT NULL,
        MINU_REAL_ABONADOS DOM_REAL_POSITIVO NOT NULL,
        TIQUETES DOM_LOGICO  DEFAULT -1 NOT NULL,
        VALO_HORA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VALO_MINIMO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_CONT_NOVE_ABONADOS_PK PRIMARY KEY (CONS_CONT_NOVE_ABONADO));

/*  Table: PCP_CONT_NOVE_CURVA, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_CURVA (CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        MINU_CURVA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        CURV_ESTANDAR DOM_LOGICO  DEFAULT 1,
CONSTRAINT PK_PCP_CONT_NOVE_CURVA PRIMARY KEY (CONS_CONT_NOVE_DIARIA));

/*  Table: PCP_CONT_NOVE_DEFE_FABRICACION, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_DEFE_FABRICACION (CONS_CONT_NOVE_DEFE_FABRICACION INTEGER NOT NULL,
        CONS_CALI_DEFECTO INTEGER NOT NULL,
        CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        CONS_PROD_PAQU_TIPO INTEGER NOT NULL,
        NUME_PAQUETE INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        FECH_DEFECTO TIMESTAMP NOT NULL,
        CONS_CONT_NOVE_DIARIA INTEGER,
        CONS_PERS_ASIGNADO INTEGER,
        CANT_UNID_DEFECTUOSAS DOM_ENTE_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_CONT_NOVE_DEFE_FABR PRIMARY KEY (CONS_CONT_NOVE_DEFE_FABRICACION));

/*  Table: PCP_CONT_NOVE_DIARIAS, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        FECH_LECTURA DOM_FECH_SISTEMA NOT NULL,
        NUME_LECTURA INTEGER DEFAULT 0 NOT NULL,
        CONS_EMPRESA INTEGER,
        CONS_PLANTA INTEGER,
        CONS_PLAN_LINEA INTEGER,
        CONS_LINE_SECCION INTEGER,
        CONS_TURNO INTEGER,
        HORA_INICIO TIMESTAMP NOT NULL,
        HORA_FINAL TIMESTAMP NOT NULL,
        MINU_CONTRATADOS DOM_ENTE_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_CONT_NOVE_DIARIAS_PK PRIMARY KEY (CONS_CONT_NOVE_DIARIA),
CONSTRAINT PCP_CONT_NOVE_DIAR_UNIQUE UNIQUE (CONS_PERSONAL, FECH_LECTURA, NUME_LECTURA));

/*  Table: PCP_CONT_NOVE_HORA_EXTRAS, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_HORA_EXTRAS (CONS_CONT_NOVE_HORA_EXTRA INTEGER NOT NULL,
        CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        CONS_HORA_EXTRA INTEGER NOT NULL,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        MINU_EXTRAS INTEGER NOT NULL,
        ESTANDAR DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_CONT_NOVE_HORA_EXTRAS_PK PRIMARY KEY (CONS_CONT_NOVE_HORA_EXTRA));

/*  Table: PCP_CONT_NOVE_IMPRODUCTIVOS, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_IMPRODUCTIVOS (CONS_CONT_NOVE_IMPRODUCTIVO INTEGER NOT NULL,
        CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        CONS_IMPRODUCTIVO INTEGER NOT NULL,
        CONS_SUB_IMPRODUCTIVO INTEGER,
        CONS_RECURSO INTEGER,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        MINU_IMPRODUCTIVOS DOM_ENTE_POSITIVO NOT NULL,
        VALO_HORA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        VALO_MINIMO DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        ESTANDAR DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_CONT_NOVE_IMPRODUCTIVOS_PK PRIMARY KEY (CONS_CONT_NOVE_IMPRODUCTIVO));

/*  Table: PCP_CONT_NOVE_PAGO, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_PAGO (CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        CONS_FORM_PAGO INTEGER NOT NULL,
        CODI_FORM_PAGO VARCHAR(12),
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_MINI_GARANTIZADO DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_PAGO_MINIMO DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_MINI_GARA_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_MINI_GARA_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_GANA_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_GANA_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_AJUS_AL_MINI_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_AJUS_AL_MINI_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_BONO_HORA_EXTRAS DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_BONO_PRODUCCION DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_BONO_CURVA DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_TOTA_DEVENGADO DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_TRAB_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_TRAB_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_TRAB_CURVA DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_EXTR_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_EXTR_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_AUSE_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_AUSE_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_IMPR_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_IMPR_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_PROD_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_PROD_CORTE DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_PROD_FABRICACION DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_PROD_NO_ESTANDAR DOM_REAL_POSITIVO  DEFAULT 0,
        MINU_PROD_CURVA DOM_REAL_POSITIVO  DEFAULT 0,
        CURV_ESTANDAR DOM_LOGICO  DEFAULT -1,
CONSTRAINT PK_PCP_CONT_NOVE_PAGO PRIMARY KEY (CONS_CONT_NOVE_DIARIA));

/*  Table: PCP_CONT_NOVE_RESUMEN, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_RESUMEN (CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        MINU_PROD_CORTE DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_PROD_FABRICACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_PROD_NOESTANDAR DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_PROD_CURVA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_AUSENTISMOS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_IMPRODUCTIVOS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_EXTRA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
CONSTRAINT PCP_CONT_NOVE_RESUMEN_PK PRIMARY KEY (CONS_CONT_NOVE_DIARIA));

/*  Table: PCP_CONT_NOVE_TIQU_CORTE, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_TIQU_CORTE (CONS_CONT_NOVE_TIQU_CORTE INTEGER NOT NULL,
        CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        CODI_BARRAS VARCHAR(15) NOT NULL,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_REFE_MATERIAL INTEGER NOT NULL,
        CONS_TIQU_CONTROL INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        NUME_PAQUETE INTEGER NOT NULL,
        TIEM_OPERACION DOM_REAL_POSITIVO NOT NULL,
        CANT_UNIDADES DOM_ENTE_POSITIVO NOT NULL,
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO  DEFAULT 0,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_CONT_NOVE_TIQU_CORTE_PK PRIMARY KEY (CONS_CONT_NOVE_TIQU_CORTE),
CONSTRAINT PCP_CONT_NOVE_TIQU_CORT_CODI_BA UNIQUE (CODI_BARRAS));

/*  Table: PCP_CONT_NOVE_TIQU_FABRICACION, Owner: SYSDBA  */
CREATE TABLE PCP_CONT_NOVE_TIQU_FABRICACION (CONS_CONT_NOVE_TIQU_FABRICACION INTEGER NOT NULL,
        CONS_CONT_NOVE_DIARIA INTEGER NOT NULL,
        CODI_BARRAS VARCHAR(15) NOT NULL,
        CONS_PROD_PAQU_TIPO INTEGER NOT NULL,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_PROCESO INTEGER,
        NUME_PAQUETE INTEGER NOT NULL,
        CONS_GRUP_TALL_DETALLE INTEGER NOT NULL,
        CONS_REFE_COLOR INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        TIEM_OPERACION DOM_REAL_POSITIVO NOT NULL,
        CANT_UNIDADES INTEGER NOT NULL,
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO  DEFAULT 0,
        CONS_CONT_NOVE_ABONADO INTEGER,
        CONS_FORM_PAGO_CURVA INTEGER,
        CONS_PUNT_CONTROL INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_CONT_NOVE_TIQUETES_PK PRIMARY KEY (CONS_CONT_NOVE_TIQU_FABRICACION));

/*  Table: PCP_ELEM_CST, Owner: SYSDBA  */
CREATE TABLE PCP_ELEM_CST (CODI_ELEM_CST VARCHAR(12) NOT NULL,
        NOMB_ELEM_CST VARCHAR(60) NOT NULL,
        CONS_CST_DIFICULTAD INTEGER DEFAULT 0 NOT NULL,
        CONS_CST_DISTANCIA INTEGER DEFAULT 0 NOT NULL,
        CONS_CST_POSICIONAMIENTO INTEGER DEFAULT 0 NOT NULL,
        CONS_CST_PESO INTEGER DEFAULT 0 NOT NULL,
        TIEM_CST DOM_REAL_POSITIVO NOT NULL,
        SOFTCONF DOM_LOGICO  DEFAULT -1 NOT NULL,
        NOMB_ANALISTA VARCHAR(60) NOT NULL,
        DESCRIPCION VARCHAR(240),
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_MODIFICACION DOM_FECH_SISTEMA NOT NULL,
        USUA_MODIFICACION DOM_USUA_SISTEMA NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_ELEM_CST_PK PRIMARY KEY (CODI_ELEM_CST));

/*  Table: PCP_ELEM_CST_GESTOS, Owner: SYSDBA  */
CREATE TABLE PCP_ELEM_CST_GESTOS (CODI_ELEM_CST VARCHAR(12) NOT NULL,
        SECU_MOVIMIENTO INTEGER NOT NULL,
        CODI_MANO_DERECHA VARCHAR(12),
        NOMB_MANO_DERECHA VARCHAR(60),
        CODI_MANO_IZQUIERDA VARCHAR(12),
        NOMB_MANO_IZQUIERDA VARCHAR(60),
        TIEM_MOVIMIENTO DOM_REAL_POSITIVO NOT NULL,
        TIEM_MANO_DERECHA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TIEM_MANO_IZQUIERDA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
CONSTRAINT PCP_ELEM_CST_GESTOS_PK PRIMARY KEY (CODI_ELEM_CST, SECU_MOVIMIENTO));

/*  Table: PCP_ELEM_CST_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE PCP_ELEM_CST_HISTORIAL (CONS_ANOTACION INTEGER NOT NULL,
        CODI_ELEM_CST VARCHAR(12) NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_ELEM_CST_HISTORIAL_PK PRIMARY KEY (CONS_ANOTACION));

/*  Table: PCP_FORM_PAGO, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO (CONS_FORM_PAGO INTEGER NOT NULL,
        CONS_EMPRESA INTEGER,
        CONS_PLANTA INTEGER,
        CONS_PLAN_LINEA INTEGER,
        CONS_LINE_SECCION INTEGER,
        CONS_TURNO INTEGER,
        CONS_SIS_FORM_PAGO INTEGER NOT NULL,
        CONS_PERI_PAGO INTEGER DEFAULT 0 NOT NULL,
        SPLI_BONIFICACION DOM_LOGICO,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_FORM_PAGO PRIMARY KEY (CONS_FORM_PAGO));

/*  Table: PCP_FORM_PAGO_APRENDIZAJE, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_APRENDIZAJE (CONS_FORM_PAGO_APRENDIZAJE INTEGER NOT NULL,
        CODI_FORM_PAGO_APRENDIZAJE VARCHAR(12) NOT NULL,
        NOMB_FORM_PAGO_APRENDIZAJE VARCHAR(60) NOT NULL,
        ES_PORCENTUAL DOM_LOGICO  DEFAULT 1 NOT NULL,
        ESTA_ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        HORA_DIARIAS DOM_ENTE_POSITIVO NOT NULL,
        HORA_SEMANALES DOM_ENTE_POSITIVO NOT NULL,
        NUME_SEMANAS DOM_ENTE_POSITIVO NOT NULL,
        NUME_DIAS_SEMANA DOM_ENTE_POSITIVO NOT NULL,
        EFIC_INICIAL DOM_REAL_POSITIVO NOT NULL,
        EFIC_FINAL DOM_REAL_POSITIVO NOT NULL,
        EFIC_PRIM_DIA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VALO_BONO_INICIAL DOM_REAL_POSITIVO NOT NULL,
        VALO_BONO_FINAL DOM_REAL_POSITIVO NOT NULL,
        VALO_BONO_PRIM_DIA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PAGO_DIARIO DOM_LOGICO  DEFAULT 1 NOT NULL,
        HORA_MINI_PERIODO DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        TOLE_INFERIOR DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TOLE_SUPERIOR DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_FORM_PAGO_APRENDIZAJE PRIMARY KEY (CONS_FORM_PAGO_APRENDIZAJE),
CONSTRAINT PCP_FORM_PAGO_APRE_CODIGO UNIQUE (CODI_FORM_PAGO_APRENDIZAJE),
CONSTRAINT PCP_FORM_PAGO_APRE_NOMBRE UNIQUE (NOMB_FORM_PAGO_APRENDIZAJE));

/*  Table: PCP_FORM_PAGO_APRE_DETALLE, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_APRE_DETALLE (CONS_FORM_PAGO_APRENDIZAJE INTEGER NOT NULL,
        NUME_SEMANA INTEGER NOT NULL,
        EFIC_LIMITE DOM_REAL_POSITIVO NOT NULL,
        VALO_PAGO DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_APRE_DETALLE PRIMARY KEY (CONS_FORM_PAGO_APRENDIZAJE, NUME_SEMANA));

/*  Table: PCP_FORM_PAGO_BONOS, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_BONOS (CONS_FORM_PAGO_BONO INTEGER NOT NULL,
        CODI_FORM_PAGO_BONO VARCHAR(12) NOT NULL,
        NOMB_FORM_PAGO_BONO VARCHAR(60) NOT NULL,
        INDICADOR INTEGER DEFAULT 1 NOT NULL,
        CONS_PERI_PAGO INTEGER NOT NULL,
        ES_PORCENTUAL DOM_LOGICO  DEFAULT -1 NOT NULL,
        VALO_BONIFICACION DOM_REAL_POSITIVO NOT NULL,
        META_EFICIENCIA DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_BONOS PRIMARY KEY (CONS_FORM_PAGO_BONO),
CONSTRAINT PCP_FORM_PAGO_BONO_UNQ_CODIGO UNIQUE (CODI_FORM_PAGO_BONO),
CONSTRAINT PCP_FORM_PAGO_BONO_UNQ_NOMBRE UNIQUE (NOMB_FORM_PAGO_BONO));

/*  Table: PCP_FORM_PAGO_BONO_PERSONAL, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_BONO_PERSONAL (CONS_FORM_PAGO_BONO_PERSONAL INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        FECH_INICIAL TIMESTAMP NOT NULL,
        CONS_FORM_PAGO_BONO INTEGER NOT NULL,
        INDICADOR INTEGER NOT NULL,
        ES_PORCENTUAL DOM_LOGICO NOT NULL,
        VALO_BONIFICACION DOM_REAL_POSITIVO NOT NULL,
        META_EFICIENCIA DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_BONO_PERSONAL PRIMARY KEY (CONS_FORM_PAGO_BONO_PERSONAL),
CONSTRAINT PCP_FORM_PAGO_BO_UNQ_PERS_FECHA UNIQUE (CONS_PERSONAL, FECH_INICIAL));

/*  Table: PCP_FORM_PAGO_DIFERENCIAL, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_DIFERENCIAL (CONS_FORM_PAGO_DIFERENCIAL INTEGER NOT NULL,
        CODI_FORM_PAGO_DIFERENCIAL VARCHAR(12) NOT NULL,
        NOMB_FORM_PAGO_DIFERENCIAL VARCHAR(60),
        ESTA_ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_DIFERENCIAL PRIMARY KEY (CONS_FORM_PAGO_DIFERENCIAL),
CONSTRAINT PCP_FORM_PAGO_DIFE_CODIGO UNIQUE (CODI_FORM_PAGO_DIFERENCIAL));

/*  Table: PCP_FORM_PAGO_DIFE_DETALLE, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_DIFE_DETALLE (CONS_FORM_PAGO_DIFERENCIAL INTEGER NOT NULL,
        RANG_INICIAL DOM_REAL_POSITIVO NOT NULL,
        RANG_FINAL DOM_REAL_POSITIVO NOT NULL,
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_FORM_PAGO_DIFE_DETALLE PRIMARY KEY (CONS_FORM_PAGO_DIFERENCIAL, RANG_INICIAL));

/*  Table: PCP_FORM_PAGO_DIVIDIDO, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_DIVIDIDO (CONS_FORM_PAGO_DIVIDIDO INTEGER NOT NULL,
        CODI_FORM_PAGO_DIVIDIDO VARCHAR(12) NOT NULL,
        NOMB_FORM_PAGO_DIVIDIDO VARCHAR(60),
        ESTA_ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        CONS_FACT_1 INTEGER,
        VALO_FACT_1 DOM_REAL_POSITIVO,
        PORC_FACT_1 DOM_REAL_POSITIVO,
        CONS_FACT_2 INTEGER,
        VALO_FACT_2 DOM_REAL_POSITIVO,
        PORC_FACT_2 DOM_REAL_POSITIVO,
        CONS_FACT_3 INTEGER,
        VALO_FACT_3 DOM_REAL_POSITIVO,
        PORC_FACT_3 DOM_REAL_POSITIVO,
        CONS_FACT_4 INTEGER,
        VALO_FACT_4 DOM_REAL_POSITIVO,
        PORC_FACT_4 DOM_REAL_POSITIVO,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_DIVIDIDO PRIMARY KEY (CONS_FORM_PAGO_DIVIDIDO),
CONSTRAINT PCP_FORM_PAGO_DIVI_CODIGO UNIQUE (CODI_FORM_PAGO_DIVIDIDO));

/*  Table: PCP_FORM_PAGO_HABILIDAD, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_HABILIDAD (CONS_FORM_PAGO_HABILIDAD INTEGER NOT NULL,
        CODI_FORM_PAGO_HABILIDAD VARCHAR(12) NOT NULL,
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_VALO_HABILIDAD PRIMARY KEY (CONS_FORM_PAGO_HABILIDAD),
CONSTRAINT PCP_FORM_PAGO_HABILIDAD_CODIGO UNIQUE (CODI_FORM_PAGO_HABILIDAD));

/*  Table: PCP_FORM_PAGO_MIXTO, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_MIXTO (VALO_HORA_MINI_GARANTIZADO DOM_REAL_POSITIVO  DEFAULT 0,
        RANG_INFE_1 DOM_REAL_POSITIVO  DEFAULT 0,
        RANG_SUPE_1 DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_HORA_PROD_1 DOM_REAL_POSITIVO  DEFAULT 0,
        RANG_INFE_2 DOM_REAL_POSITIVO  DEFAULT 0,
        RANG_SUPE_2 DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_HORA_PROD_2 DOM_REAL_POSITIVO  DEFAULT 0,
        VALO_HORA_PROD_3 DOM_REAL_POSITIVO  DEFAULT 0,
        PORC_INICIAL DOM_REAL_POSITIVO  DEFAULT 0,
        HORA_POR_DIA DOM_REAL_POSITIVO  DEFAULT 0,
        HORA_POR_SEMANA DOM_REAL_POSITIVO  DEFAULT 0,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA);

/*  Table: PCP_FORM_PAGO_PARAMETROS, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_PARAMETROS (VALO_HORA_MINI_GARANTIZADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_SIS_FORM_PAGO INTEGER,
        CONS_PERI_PAGO INTEGER DEFAULT 0 NOT NULL,
        VALO_HORA_MINI_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VALO_HORA_MEDI_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VALO_HORA_MAXI_EMPRESA DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VALO_HORA_PERSONALIZADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        DIAS_CALC_PROMEDIOS INTEGER DEFAULT 30 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL);

/*  Table: PCP_FORM_PAGO_PERSONAL, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_PERSONAL (CONS_FORM_PAGO_PERSONAL INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        FECH_INICIAL TIMESTAMP NOT NULL,
        VALO_HORA_MINI_GARANTIZADO DOM_REAL_POSITIVO,
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO,
        CONS_SIS_FORM_PAGO INTEGER NOT NULL,
        PARA_1 VARCHAR(60),
        PARA_2 VARCHAR(60),
        PARA_3 VARCHAR(60),
        CONS_FORM_PAGO_APRENDIZAJE INTEGER,
        FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
        EFIC_INIC_APRENDIZAJE DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_OPER_COSTURA INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_FORM_PAGO_PERSONAL PRIMARY KEY (CONS_FORM_PAGO_PERSONAL),
CONSTRAINT UNQ1_PCP_FORM_PAGO_PERSONAL UNIQUE (CONS_PERSONAL, FECH_INICIAL));

/*  Table: PCP_FORM_PAGO_VALORES, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_VALORES (CONS_FORM_PAGO INTEGER NOT NULL,
        SECU_PARAMETRO INTEGER NOT NULL,
        CONS_TABL_AUXI_DETALLE INTEGER NOT NULL,
        VALO_PARAMETRO DOM_REAL_POSITIVO NOT NULL,
        PORC_PARAMETRO DOM_PORCENTAJE,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_PARAMETROS PRIMARY KEY (CONS_FORM_PAGO, SECU_PARAMETRO));

/*  Table: PCP_FORM_PAGO_VALO_HORA, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_VALO_HORA (CONS_FORM_PAGO_VALO_HORA INTEGER NOT NULL,
        NOMB_FORM_PAGO_VALO_HORA VARCHAR(60) NOT NULL,
        VALO_HORA_PRODUCCION DOM_REAL_POSITIVO NOT NULL,
        CALCULADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_VALO_HORA PRIMARY KEY (CONS_FORM_PAGO_VALO_HORA),
CONSTRAINT PCP_FORM_PAGO_VALO_HORA_UNQ_NOM UNIQUE (NOMB_FORM_PAGO_VALO_HORA));

/*  Table: PCP_FORM_PAGO_VALO_MINIMO, Owner: SYSDBA  */
CREATE TABLE PCP_FORM_PAGO_VALO_MINIMO (CONS_FORM_PAGO_VALO_MINIMO INTEGER NOT NULL,
        NOMB_FORM_PAGO_VALO_MINIMO VARCHAR(60) NOT NULL,
        VALO_HORA_MINIMO DOM_REAL_POSITIVO NOT NULL,
        CALCULADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PK_PCP_FORM_PAGO_VALO_MINIMO PRIMARY KEY (CONS_FORM_PAGO_VALO_MINIMO),
CONSTRAINT PCP_FORM_PAGO_VALO_MINI_UNQ_NOM UNIQUE (NOMB_FORM_PAGO_VALO_MINIMO));

/*  Table: PCP_INSU_GRUPOS, Owner: SYSDBA  */
CREATE TABLE PCP_INSU_GRUPOS (CONS_INSU_GRUPO INTEGER NOT NULL,
        CODI_INSU_GRUPO VARCHAR(12) NOT NULL,
        NOMB_INSU_GRUPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INSU_GRUPOS_PK PRIMARY KEY (CONS_INSU_GRUPO),
CONSTRAINT PCP_INSU_GRUPOS_CODIGO UNIQUE (CODI_INSU_GRUPO),
CONSTRAINT PCP_INSU_GRUPOS_NOMBRE UNIQUE (NOMB_INSU_GRUPO));

/*  Table: PCP_INSU_REFERENCIAS, Owner: SYSDBA  */
CREATE TABLE PCP_INSU_REFERENCIAS (CONS_INSU_REFERENCIA INTEGER NOT NULL,
        CONS_INSU_GRUPO INTEGER NOT NULL,
        CONS_INSU_SUBGRUPO INTEGER NOT NULL,
        CODI_INSU_REFERENCIA VARCHAR(12) NOT NULL,
        NOMB_INSU_REFERENCIA VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        CONS_UNID_MEDIDA INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        ADIC_C08_GP_PLAN_UNID_MEDIDA VARCHAR(12),
        ADIC_C08_GP_DESC_BREVE VARCHAR(20),
CONSTRAINT PCP_INSU_REFERENCIAS_PK PRIMARY KEY (CONS_INSU_REFERENCIA),
CONSTRAINT PCP_INSU_REFERENCIAS_CODIGO UNIQUE (CODI_INSU_REFERENCIA),
CONSTRAINT PCP_INSU_REFERENCIAS_NOMBRE UNIQUE (CONS_INSU_SUBGRUPO, NOMB_INSU_REFERENCIA),
CONSTRAINT PCP_INSU_REFE_UNIQUE UNIQUE (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO, CONS_INSU_REFERENCIA));

/*  Table: PCP_INSU_SUBGRUPOS, Owner: SYSDBA  */
CREATE TABLE PCP_INSU_SUBGRUPOS (CONS_INSU_SUBGRUPO INTEGER NOT NULL,
        CONS_INSU_GRUPO INTEGER NOT NULL,
        CODI_INSU_SUBGRUPO VARCHAR(12) NOT NULL,
        NOMB_INSU_SUBGRUPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INSU_SUBGRUPOS_PK PRIMARY KEY (CONS_INSU_SUBGRUPO),
CONSTRAINT PCP_INSU_SUBGRUPO_CODIGO UNIQUE (CONS_INSU_GRUPO, CODI_INSU_SUBGRUPO),
CONSTRAINT PCP_INSU_SUBGRUPO_NOMBRE UNIQUE (CONS_INSU_GRUPO, NOMB_INSU_SUBGRUPO),
CONSTRAINT PCP_INSU_SUBG_UNIQUE UNIQUE (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO));

/*  Table: PCP_INVE_GRUPOS, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_GRUPOS (CONS_INVE_GRUPO INTEGER NOT NULL,
        CODI_INVE_GRUPO VARCHAR(10) NOT NULL,
        NOMB_INVE_GRUPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INVE_GRUPOS_PK PRIMARY KEY (CONS_INVE_GRUPO),
CONSTRAINT PCP_INVE_GRUPOS_CODIGO UNIQUE (CODI_INVE_GRUPO),
CONSTRAINT PCP_INVE_GRUPOS_NOMBRE UNIQUE (NOMB_INVE_GRUPO));

/*  Table: PCP_INVE_INSU_ENTRADA, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_INSU_ENTRADA (CONS_INVE_INSU_ENTRADA INTEGER NOT NULL,
        CONS_TIPO_DOCUMENTO INTEGER NOT NULL,
        NUME_DOCUMENTO VARCHAR(12) NOT NULL,
        FECH_DOCUMENTO TIMESTAMP DEFAULT 'NOW' NOT NULL,
        CONS_TIPO_DOCU_ALTERNATIVO INTEGER,
        NUME_DOCU_ALTERNATIVO VARCHAR(12),
        CONS_TERCERO INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INVE_INSU_ENTRADA_PK PRIMARY KEY (CONS_INVE_INSU_ENTRADA));

/*  Table: PCP_INVE_INSU_ENTR_ITEMS, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_INSU_ENTR_ITEMS (CONS_INVE_INSU_ENTR_ITEM INTEGER NOT NULL,
        CONS_INVE_INSU_ENTRADA INTEGER NOT NULL,
        FECH_ENTRADA TIMESTAMP DEFAULT 'NOW' NOT NULL,
        CONS_INSU_GRUPO INTEGER NOT NULL,
        CONS_INSU_SUBGRUPO INTEGER NOT NULL,
        CONS_INSU_REFERENCIA INTEGER NOT NULL,
        CONS_INVE_GRUPO INTEGER NOT NULL,
        COMPOSICION VARCHAR(120),
        CONS_UNID_MEDI_ENTRADA INTEGER NOT NULL,
        CONS_UNID_MEDI_ALMACENAMIENTO INTEGER NOT NULL,
        FACT_CONVERSION DOM_REAL_POSITIVO NOT NULL,
        CANT_UNID_MEDI_ENTRADA DOM_REAL_POSITIVO NOT NULL,
        VALO_UNID_MEDI_ENTRADA DOM_REAL_POSITIVO NOT NULL,
        PORC_DESCUENTO DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_IVA DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_ICA DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INVE_INSU_ENTR_ITEMS_PK PRIMARY KEY (CONS_INVE_INSU_ENTR_ITEM));

/*  Table: PCP_INVE_INVE_ENTR_PIEZAS, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_INVE_ENTR_PIEZAS (CONS_INVE_INSU_ENTR_PIEZA INTEGER NOT NULL,
        CONS_INVE_INSU_ENTR_ITEM INTEGER NOT NULL,
        FECH_ENTRADA TIMESTAMP DEFAULT 'NOW' NOT NULL,
        CALIDAD VARCHAR(1) DEFAULT 'A' NOT NULL,
        CONS_COLOR INTEGER NOT NULL,
        NUME_COLOR VARCHAR(6) NOT NULL,
        CANT_UNID_MEDI_ENTRADA DOM_REAL_POSITIVO NOT NULL,
        CANT_UNID_CONSUMO DOM_REAL_POSITIVO NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA INTEGER NOT NULL,
        USUA_SISTEMA INTEGER NOT NULL,
CONSTRAINT PCP_INVE_INSU_ENTR_PIEZAS_PK PRIMARY KEY (CONS_INVE_INSU_ENTR_PIEZA));

/*  Table: PCP_INVE_MATE_ENTRADA, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_MATE_ENTRADA (CONS_INVE_MATE_ENTRADA INTEGER NOT NULL,
        CONS_TIPO_DOCUMENTO INTEGER NOT NULL,
        NUME_DOCUMENTO VARCHAR(12) NOT NULL,
        FECH_DOCUMENTO TIMESTAMP DEFAULT 'NOW' NOT NULL,
        CONS_TIPO_DOCU_ALTERNATIVO INTEGER,
        NUME_DOCU_ALTERNATIVO VARCHAR(12),
        CONS_TERCERO INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INVE_MATE_ENTRADA_PK PRIMARY KEY (CONS_INVE_MATE_ENTRADA));

/*  Table: PCP_INVE_MATE_ENTR_ITEMS, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_MATE_ENTR_ITEMS (CONS_INVE_MATE_ENTR_ITEM INTEGER NOT NULL,
        CONS_INVE_MATE_ENTRADA INTEGER NOT NULL,
        FECH_ENTRADA TIMESTAMP DEFAULT 'NOW' NOT NULL,
        CONS_MATE_GRUPO INTEGER NOT NULL,
        CONS_MATE_SUBGRUPO INTEGER NOT NULL,
        CONS_MATE_REFERENCIA INTEGER NOT NULL,
        CONS_INVE_GRUPO INTEGER NOT NULL,
        COMPOSICION VARCHAR(120),
        CONS_UNID_MEDI_ENTRADA INTEGER NOT NULL,
        CONS_UNID_MEDI_ALMACENAMIENTO INTEGER NOT NULL,
        FACT_CONVERSION DOM_REAL_POSITIVO NOT NULL,
        CANT_UNID_MEDI_ENTRADA DOM_REAL_POSITIVO NOT NULL,
        VALO_UNID_MEDI_ENTRADA DOM_REAL_POSITIVO NOT NULL,
        PORC_DESCUENTO DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_IVA DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        PORC_ICA DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INVE_MATE_ENTR_ITEMS_PK PRIMARY KEY (CONS_INVE_MATE_ENTR_ITEM));

/*  Table: PCP_INVE_MATE_ENTR_PIEZAS, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_MATE_ENTR_PIEZAS (CONS_INVE_MATE_ENTR_PIEZA INTEGER NOT NULL,
        CONS_INVE_MATE_ENTR_ITEM INTEGER NOT NULL,
        FECH_ENTRADA TIMESTAMP DEFAULT 'NOW' NOT NULL,
        CALIDAD VARCHAR(1) DEFAULT 'A' NOT NULL,
        CONS_COLOR INTEGER NOT NULL,
        NUME_COLOR VARCHAR(6) NOT NULL,
        CANT_UNID_MEDI_ENTRADA DOM_REAL_POSITIVO NOT NULL,
        CANT_UNID_CONSUMO DOM_REAL_POSITIVO NOT NULL,
        ANCHO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        DIAMETRO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA INTEGER NOT NULL,
        USUA_SISTEMA INTEGER NOT NULL,
CONSTRAINT PCP_INVE_MATE_ENTR_PIEZAS_PK PRIMARY KEY (CONS_INVE_MATE_ENTR_PIEZA));

/*  Table: PCP_INVE_TIPO_BLOQUEO, Owner: SYSDBA  */
CREATE TABLE PCP_INVE_TIPO_BLOQUEO (CONS_INVE_TIPO_BLOQUEO INTEGER NOT NULL,
        CODI_INVE_TIPO_BLOQUEO VARCHAR(12) NOT NULL,
        NOMB_INVE_TIPO_BLOQUEO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_INVE_TIPO_BLOQUEO_PK PRIMARY KEY (CONS_INVE_TIPO_BLOQUEO),
CONSTRAINT PCP_INVE_TIPO_BLOQUEO_CODIGO UNIQUE (CODI_INVE_TIPO_BLOQUEO),
CONSTRAINT PCP_INVE_TIPO_BLOQUEO_NOMBRE UNIQUE (NOMB_INVE_TIPO_BLOQUEO));

/*  Table: PCP_MATE_COMPROMETIDO, Owner: SYSDBA  */
CREATE TABLE PCP_MATE_COMPROMETIDO (CONS_MATE_COMPROMETIDO INTEGER NOT NULL,
        CONS_INVE_MATE_ENTR_PIEZA INTEGER NOT NULL,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        CANTIDAD INTEGER NOT NULL,
        OBSERVACIONES INTEGER,
        UTILIZADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA INTEGER NOT NULL,
        USUA_SISTEMA INTEGER NOT NULL,
CONSTRAINT PCP_MATE_COMPROMETIDO_PK PRIMARY KEY (CONS_MATE_COMPROMETIDO));

/*  Table: PCP_MATE_GRUPOS, Owner: SYSDBA  */
CREATE TABLE PCP_MATE_GRUPOS (CONS_MATE_GRUPO INTEGER NOT NULL,
        CODI_MATE_GRUPO VARCHAR(12) NOT NULL,
        NOMB_MATE_GRUPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_MATE_GRUPOS_PK PRIMARY KEY (CONS_MATE_GRUPO),
CONSTRAINT PCP_MATE_GRUPOS_CODIGO UNIQUE (CODI_MATE_GRUPO),
CONSTRAINT PCP_MATE_GRUPOS_NOMBRE UNIQUE (NOMB_MATE_GRUPO));

/*  Table: PCP_MATE_REFERENCIAS, Owner: SYSDBA  */
CREATE TABLE PCP_MATE_REFERENCIAS (CONS_MATE_REFERENCIA INTEGER NOT NULL,
        CONS_MATE_GRUPO INTEGER NOT NULL,
        CONS_MATE_SUBGRUPO INTEGER NOT NULL,
        CODI_MATE_REFERENCIA VARCHAR(12) NOT NULL,
        NOMB_MATE_REFERENCIA VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        CONS_UNID_MEDIDA INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        ADIC_C08_GP_PLAN_UNID_MEDIDA VARCHAR(12),
        ADIC_C08_GP_DESC_BREVE VARCHAR(20),
CONSTRAINT PCP_MATE_REFERENCIAS_PK PRIMARY KEY (CONS_MATE_REFERENCIA),
CONSTRAINT PCP_MATE_PROD_REFE_UNIQUE UNIQUE (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO, CONS_MATE_REFERENCIA),
CONSTRAINT PCP_MATE_REFERENCIAS_CODIGO UNIQUE (CODI_MATE_REFERENCIA),
CONSTRAINT PCP_MATE_REFERENCIAS_NOMBRE UNIQUE (CONS_MATE_SUBGRUPO, NOMB_MATE_REFERENCIA));

/*  Table: PCP_MATE_SUBGRUPOS, Owner: SYSDBA  */
CREATE TABLE PCP_MATE_SUBGRUPOS (CONS_MATE_SUBGRUPO INTEGER NOT NULL,
        CONS_MATE_GRUPO INTEGER NOT NULL,
        CODI_MATE_SUBGRUPO VARCHAR(12) NOT NULL,
        NOMB_MATE_SUBGRUPO VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_MATE_SUBGRUPOS_PK PRIMARY KEY (CONS_MATE_SUBGRUPO),
CONSTRAINT PCP_MATE_SUBGRUPOS_CODIGO UNIQUE (CONS_MATE_GRUPO, CODI_MATE_SUBGRUPO),
CONSTRAINT PCP_MATE_SUBGRUPOS_NOMBRE UNIQUE (CONS_MATE_GRUPO, NOMB_MATE_SUBGRUPO),
CONSTRAINT PCP_MATE_SUBG_UNIQUE UNIQUE (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO));

/*  Table: PCP_METO_TIEM_CICLO, Owner: SYSDBA  */
CREATE TABLE PCP_METO_TIEM_CICLO (CONS_METO_TIEM_CICLO INTEGER NOT NULL,
        CODI_METO_TIEM_CICLO VARCHAR(12) NOT NULL,
        NOMB_METO_TIEM_CICLO VARCHAR(60) NOT NULL,
        CONS_RECU_GRUPO INTEGER NOT NULL,
        CONS_RECU_TIPO INTEGER NOT NULL,
        CONS_RECU_FAMILIA INTEGER NOT NULL,
        CARACTERISTICAS VARCHAR(240),
        TIEM_ASIGNADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TIEM_CST DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_METO_TIEM_CICLO PRIMARY KEY (CONS_METO_TIEM_CICLO),
CONSTRAINT PCP_METO_TIEM_CICLO_UNQ_CODIGO UNIQUE (CODI_METO_TIEM_CICLO),
CONSTRAINT PCP_METO_TIEM_CICLO_UNQ_NOMBRE UNIQUE (NOMB_METO_TIEM_CICLO));

/*  Table: PCP_MTM, Owner: SYSDBA  */
CREATE TABLE PCP_MTM (TIPO_MOVIMIENTO INTEGER NOT NULL,
        CODI_MOVIMIENTO VARCHAR(12) NOT NULL,
        NOMB_MOVIMIENTO VARCHAR(60) NOT NULL,
        TIEM_MOVIMIENTO DOM_REAL_POSITIVO NOT NULL,
CONSTRAINT PCP_MTM_PK PRIMARY KEY (TIPO_MOVIMIENTO, CODI_MOVIMIENTO));

/*  Table: PCP_OPCIONES, Owner: SYSDBA  */
CREATE TABLE PCP_OPCIONES (CONS_OPCION INTEGER DEFAULT 0 NOT NULL,
        PERS_AVIS_VENC_CONTRATO DOM_ENTE_POSITIVO  DEFAULT 30 NOT NULL,
        PERS_DEFE_PAIS INTEGER,
        PERS_DEFE_DEPARTAMENTO INTEGER,
        PERS_DEFE_CIUDAD INTEGER,
        INGE_METO_TIPO_ACTIVIDAD INTEGER DEFAULT 0 NOT NULL,
        INGE_METO_UNID_MEDIDA INTEGER DEFAULT 0 NOT NULL,
        INGE_METO_NUME_DECIMALES DOM_ENTE_POSITIVO  DEFAULT 3 NOT NULL,
        INGE_METO_COLO_MANUAL INTEGER DEFAULT 15712159 NOT NULL,
        INGE_METO_COLO_MAQUINA INTEGER DEFAULT 8304107 NOT NULL,
        INGE_METO_COLO_REPEAT INTEGER DEFAULT 9934847 NOT NULL,
        MOTO_FORM_FECHA VARCHAR(20) DEFAULT 'mm/dd/yyyy' NOT NULL,
        GENE_NOMB_SERVIDOR VARCHAR(20) DEFAULT 'localhost' NOT NULL,
        CONT_PROD_HORA_EXTR_DETALLADA DOM_LOGICO  DEFAULT 1 NOT NULL,
        TIQU_INIC_LINEA VARCHAR(240),
        TIQU_SALT_LINEA VARCHAR(240),
        TIQU_CORT_TIQUETE VARCHAR(240),
        TIQU_MARG_IZQUIERDO INTEGER,
        TIQU_DIST_TIQUETES DOM_ENTE_POSITIVO,
        TIQU_PRODUCCION VARCHAR(5000),
        TIQU_CORTE VARCHAR(5000),
        CONT_PROD_NOMB_INDI_1 VARCHAR(60) DEFAULT '% A.H.C.' NOT NULL,
        CONT_PROD_NOMB_INDI_2 VARCHAR(60) DEFAULT '% A.H.P.' NOT NULL,
        CONT_PROD_NOMB_INDI_3 VARCHAR(60) DEFAULT '% Eficiencia' NOT NULL,
        CONT_PROD_DIAS_EFIC_PROMEDIO INTEGER DEFAULT 30 NOT NULL,
CONSTRAINT PCP_OPCIONES_PK PRIMARY KEY (CONS_OPCION));

/*  Table: PCP_OPER_COSTURA, Owner: SYSDBA  */
CREATE TABLE PCP_OPER_COSTURA (CONS_OPER_COSTURA INTEGER NOT NULL,
        CODI_OPER_COSTURA VARCHAR(12) NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        CONS_OPER_COST_TIPO INTEGER NOT NULL,
        CONS_COMP_GRUPO INTEGER NOT NULL,
        NOMB_OPER_COSTURA VARCHAR(30) NOT NULL,
        DESCRIPCION DOM_OBSERVACIONES,
        IMAGEN DOM_IMAGEN,
        AJUSTE VARCHAR(12),
        PUNT_POR_CENTIMETRO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        SUPL_CONSTANTE DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        SUPL_VARIABLE DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        LARG_COSTURA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        COMP_LARG_COSTURA VARCHAR(60),
        CONS_RECU_GRUPO INTEGER DEFAULT 0 NOT NULL,
        CONS_RECU_TIPO INTEGER DEFAULT 0 NOT NULL,
        CONS_RECU_FAMILIA INTEGER DEFAULT 0 NOT NULL,
        CONS_RECU_MARCA INTEGER DEFAULT 0 NOT NULL,
        CLAS_RECURSO VARCHAR(60),
        CONS_RECU_TIPO_PUNTADA INTEGER DEFAULT 0 NOT NULL,
        REVO_POR_MINUTO DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        SUPL_MAQUINA DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        CONS_ACCE_FAMILIA INTEGER,
        IMAG_PUES_TRABAJO DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO  DEFAULT -1 NOT NULL,
        AJUS_IMAG_PUES_TRABAJO DOM_LOGICO,
        MODI_PUES_TRABAJO DOM_OBSERVACIONES,
        IMAG_DIST_PUES_TRABAJO DOM_IMAGEN,
        AJUS_IMAG_DIST_PUES_TRABAJO DOM_LOGICO,
        SECU_MOVIMIENTOS DOM_OBSERVACIONES,
        TIEM_CRONOMETRO DOM_LOGICO  DEFAULT -1 NOT NULL,
        TIEM_ASIGNADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TIEM_CRON_ASIGNADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        COST_OPERACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_FORM_PAGO_HABILIDAD INTEGER,
        FECH_MODIFICACION DOM_FECH_SISTEMA NOT NULL,
        USUA_MODIFICACION DOM_USUA_SISTEMA NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_OPER_COSTURA_PK PRIMARY KEY (CONS_OPER_COSTURA),
CONSTRAINT PCP_OPER_COSTURA_CODIGO UNIQUE (CODI_OPER_COSTURA));

/*  Table: PCP_OPER_COST_ELEMENTOS, Owner: SYSDBA  */
CREATE TABLE PCP_OPER_COST_ELEMENTOS (CONS_OPER_COST_ELEMENTO INTEGER NOT NULL,
        CONS_OPER_COSTURA INTEGER NOT NULL,
        SECU_OPER_COST_ELEMENTO INTEGER NOT NULL,
        CODI_ELEM_CST VARCHAR(12) NOT NULL,
        NOMB_ELEM_CST VARCHAR(120),
        FRECUENCIA DOM_REAL_POSITIVO NOT NULL,
        TIEM_CST DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        VAR_1 FLOAT DEFAULT 0 NOT NULL,
        VAR_2 FLOAT DEFAULT 0 NOT NULL,
        VAR_3 FLOAT DEFAULT 0 NOT NULL,
        VAR_4 FLOAT DEFAULT 0 NOT NULL,
        VAR_5 FLOAT DEFAULT 0 NOT NULL,
        VAR_6 FLOAT DEFAULT 0 NOT NULL,
        VAR_7 FLOAT DEFAULT 0 NOT NULL,
        VAR_8 FLOAT DEFAULT 0 NOT NULL,
        VAR_9 FLOAT DEFAULT 0 NOT NULL,
        VAR_10 FLOAT DEFAULT 0 NOT NULL,
CONSTRAINT PCP_OPER_COST_ELEMENTOS_PK PRIMARY KEY (CONS_OPER_COST_ELEMENTO),
CONSTRAINT PCP_OPER_COST_ELEMENTOS_SECUENC UNIQUE (CONS_OPER_COSTURA, SECU_OPER_COST_ELEMENTO));

/*  Table: PCP_OPER_COST_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE PCP_OPER_COST_HISTORIAL (CONS_ANOTACION INTEGER NOT NULL,
        CONS_OPER_COSTURA INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(250) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_OPER_COST_HISTORIAL_PK PRIMARY KEY (CONS_ANOTACION));

/*  Table: PCP_OPER_COST_TIPOS, Owner: SYSDBA  */
CREATE TABLE PCP_OPER_COST_TIPOS (CONS_OPER_COST_TIPO INTEGER NOT NULL,
        CODI_OPER_COST_TIPO VARCHAR(12) NOT NULL,
        NOMB_OPER_COST_TIPO VARCHAR(60) NOT NULL,
        DESCRIPCION VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_OPER_COST_TIPOS_PK PRIMARY KEY (CONS_OPER_COST_TIPO),
CONSTRAINT PCP_OPER_COST_TIPOS_CODIGO UNIQUE (CODI_OPER_COST_TIPO),
CONSTRAINT PCP_OPER_COST_TIPOS_NOMBRE UNIQUE (NOMB_OPER_COST_TIPO));

/*  Table: PCP_OPER_REPROCESOS, Owner: SYSDBA  */
CREATE TABLE PCP_OPER_REPROCESOS (CONS_OPER_REPROCESO INTEGER NOT NULL,
        CODI_OPER_REPROCESO VARCHAR(12) NOT NULL,
        NOMB_OPER_REPROCESO VARCHAR(60) NOT NULL,
        DESCRIPCION VARCHAR(240) NOT NULL,
        CONS_RECU_FAMILIA INTEGER NOT NULL,
        TIEM_OPERACION DOM_REAL_POSITIVO NOT NULL,
        COST_OPERACION DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_OPER_REPROCESOS_PK PRIMARY KEY (CONS_OPER_REPROCESO),
CONSTRAINT PCP_OPER_REPROCESOS_CODIGO UNIQUE (CODI_OPER_REPROCESO),
CONSTRAINT PCP_OPER_REPROCESOS_NOMBRE UNIQUE (NOMB_OPER_REPROCESO));

/*  Table: PCP_PEDIDOS, Owner: SYSDBA  */
CREATE TABLE PCP_PEDIDOS (CONS_PEDIDO INTEGER NOT NULL,
        NUME_PEDIDO VARCHAR(20) NOT NULL,
        CONS_REFE_TEMPORADA INTEGER NOT NULL,
        CONS_TERCERO INTEGER NOT NULL,
        FECH_PEDIDO TIMESTAMP NOT NULL,
        FECH_ENTREGA TIMESTAMP NOT NULL,
        OBSERVACIONES VARCHAR(240),
        CONS_COME_VENDEDOR INTEGER NOT NULL,
        CONS_COME_PRIO_PEDIDO INTEGER NOT NULL,
        CONS_DESPACHAR_A INTEGER,
        CONS_FACTURAR_A INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PEDIDOS_PK PRIMARY KEY (CONS_PEDIDO),
CONSTRAINT PCP_PEDIDOS_NUME_PEDIDO UNIQUE (NUME_PEDIDO));

/*  Table: PCP_PEDI_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE PCP_PEDI_HISTORIAL (CONS_ANOTACION INTEGER NOT NULL,
        CONS_PEDIDO INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PEDI_HISTORIAL_PK PRIMARY KEY (CONS_ANOTACION));

/*  Table: PCP_PEDI_PLANEACION, Owner: SYSDBA  */
CREATE TABLE PCP_PEDI_PLANEACION (CONS_PEDI_PLANEACION INTEGER NOT NULL,
        CONS_PEDI_UNIDADES INTEGER NOT NULL,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PEDI_PLANEACION_PK PRIMARY KEY (CONS_PEDI_PLANEACION),
CONSTRAINT PCP_PEDI_PLANEACION_PEDI_UNIDAD UNIQUE (CONS_PEDI_UNIDADES));

/*  Table: PCP_PEDI_REFERENCIAS, Owner: SYSDBA  */
CREATE TABLE PCP_PEDI_REFERENCIAS (CONS_PEDI_REFERENCIA INTEGER NOT NULL,
        CONS_PEDIDO INTEGER NOT NULL,
        CONS_REFERENCIA INTEGER NOT NULL,
        CONS_REFE_VARIACION INTEGER NOT NULL,
        ORDE_COMPRA VARCHAR(20),
        CONS_REFE_LAVADO INTEGER DEFAULT 0 NOT NULL,
        TOLE_INFERIOR DOM_PORCENTAJE  DEFAULT 0,
        TOLE_SUPERIOR DOM_PORCENTAJE  DEFAULT 0,
        FECH_SISTEMA INTEGER,
        USUA_SISTEMA INTEGER,
CONSTRAINT PCP_PEDI_REFERENCIAS_PK PRIMARY KEY (CONS_PEDI_REFERENCIA));

/*  Table: PCP_PEDI_UNIDADES, Owner: SYSDBA  */
CREATE TABLE PCP_PEDI_UNIDADES (CONS_PEDI_UNIDADES INTEGER NOT NULL,
        CONS_PEDI_REFERENCIA INTEGER NOT NULL,
        SECU_TALLA DOM_ENTE_POSITIVO NOT NULL,
        CONS_GRUP_TALL_DETALLE INTEGER NOT NULL,
        SECU_COLOR DOM_ENTE_POSITIVO NOT NULL,
        CONS_REFE_COLOR INTEGER NOT NULL,
        UNIDADES DOM_ENTE_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PEDI_UNIDADES_PK PRIMARY KEY (CONS_PEDI_UNIDADES),
CONSTRAINT PCP_PEDI_UNIDADES_TALLA_COLOR UNIQUE (CONS_PEDI_UNIDADES, SECU_TALLA, SECU_COLOR));

/*  Table: PCP_PERS_MATR_POLI_OPERACIONES, Owner: SYSDBA  */
CREATE TABLE PCP_PERS_MATR_POLI_OPERACIONES (CONS_PERS_MATR_POLI_OPERACION INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        CONS_OPER_COSTURA INTEGER NOT NULL,
        CALIFICACION DOM_ENTE_POSITIVO  DEFAULT 1 NOT NULL,
CONSTRAINT PCP_PERS_MATR_POLI_OPER_PK PRIMARY KEY (CONS_PERS_MATR_POLI_OPERACION),
CONSTRAINT PCP_PERS_MATR_POLI_OPER_UNIQ UNIQUE (CONS_PERSONAL, CONS_OPER_COSTURA));

/*  Table: PCP_PERS_MATR_POLI_RECURSOS, Owner: SYSDBA  */
CREATE TABLE PCP_PERS_MATR_POLI_RECURSOS (CONS_PERS_MATR_POLI_RECURSO INTEGER NOT NULL,
        CONS_PERSONAL INTEGER NOT NULL,
        CONS_RECU_FAMILIA INTEGER NOT NULL,
        CALIFICACION DOM_ENTE_POSITIVO  DEFAULT 2 NOT NULL,
CONSTRAINT PCP_PERS_MATR_POLI_RECURSOS_PK PRIMARY KEY (CONS_PERS_MATR_POLI_RECURSO),
CONSTRAINT PCP_PERS_MATR_POLI_RECU_UNIQUE UNIQUE (CONS_PERSONAL, CONS_RECU_FAMILIA));

/*  Table: PCP_PLAN_CALENDARIO, Owner: SYSDBA  */
CREATE TABLE PCP_PLAN_CALENDARIO (CONS_EMPRESA INTEGER DEFAULT 0 NOT NULL,
        CONS_PLANTA INTEGER DEFAULT 0 NOT NULL,
        CONS_LINEA INTEGER DEFAULT 0 NOT NULL,
        CONS_SECCION INTEGER DEFAULT 0 NOT NULL,
        FECHA TIMESTAMP NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_PLAN_CALENDARIO_PK PRIMARY KEY (CONS_EMPRESA, CONS_PLANTA, CONS_LINEA, CONS_SECCION, FECHA));

/*  Table: PCP_PLAN_CAPACIDAD, Owner: SYSDBA  */
CREATE TABLE PCP_PLAN_CAPACIDAD (CONS_PLAN_CAPACIDAD INTEGER NOT NULL,
        CONS_PLAN_LINEA INTEGER NOT NULL,
        FECH_INICIAL INTEGER NOT NULL,
        FECH_FINAL INTEGER NOT NULL,
        TIPO_CAPACIDAD INTEGER NOT NULL,
        VALO_CAPACIDAD INTEGER NOT NULL,
CONSTRAINT PCP_PLAN_CAPACIDAD_PK PRIMARY KEY (CONS_PLAN_CAPACIDAD));

/*  Table: PCP_PLAN_DEPE_PROCESOS, Owner: SYSDBA  */
CREATE TABLE PCP_PLAN_DEPE_PROCESOS (CONS_PROCESO INTEGER NOT NULL,
        CONS_PROC_SIGUIENTE INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_PLAN_DEPE_PROCESOS_PK PRIMARY KEY (CONS_PROCESO, CONS_PROC_SIGUIENTE));

/*  Table: PCP_PLAN_LINE_ESPECIALIDADES, Owner: SYSDBA  */
CREATE TABLE PCP_PLAN_LINE_ESPECIALIDADES (CONS_PLAN_LINE_ESPECIALIDAD INTEGER NOT NULL,
        CONS_LINEA INTEGER NOT NULL,
        CONS_REFE_ESTILO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PLAN_LINE_ESPECIALIDADES_PK PRIMARY KEY (CONS_PLAN_LINE_ESPECIALIDAD),
CONSTRAINT PCP_PLAN_LINE_ESPE_UNIQUE UNIQUE (CONS_LINEA, CONS_REFE_ESTILO));

/*  Table: PCP_PLAN_RUTAS, Owner: SYSDBA  */
CREATE TABLE PCP_PLAN_RUTAS (CONS_PLAN_RUTA INTEGER NOT NULL,
        CODI_PLAN_RUTA VARCHAR(12) NOT NULL,
        NOMB_PLAN_RUTA VARCHAR(60) NOT NULL,
        CONS_REFE_ESTILO INTEGER NOT NULL,
        ESTA_ACTIVA DOM_LOGICO  DEFAULT 1,
        CONS_EMPRESA INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(254),
        FECH_CREACION DOM_FECH_SISTEMA,
        USUA_CREACION DOM_USUA_SISTEMA,
CONSTRAINT PCP_PLAN_RUTAS_PK PRIMARY KEY (CONS_PLAN_RUTA));

/*  Table: PCP_PLAN_RUTA_DETALLE, Owner: SYSDBA  */
CREATE TABLE PCP_PLAN_RUTA_DETALLE (CONS_PLAN_RUTA INTEGER NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        CONS_LINE_SECCION INTEGER,
CONSTRAINT PCP_PLAN_RUTA_DETALLE_PK PRIMARY KEY (CONS_PLAN_RUTA, CONS_PROCESO));

/*  Table: PCP_PLAN_SECC_PROCESOS, Owner: SYSDBA  */
CREATE TABLE PCP_PLAN_SECC_PROCESOS (CONS_PLAN_SECC_PROCESO INTEGER NOT NULL,
        CONS_SECCION INTEGER NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_PLAN_SECC_PROCESOS_PK PRIMARY KEY (CONS_PLAN_SECC_PROCESO),
CONSTRAINT PCP_PLAN_SECC_PROCESOS_UNIQUE UNIQUE (CONS_SECCION, CONS_PROCESO));

/*  Table: PCP_PROCESOS, Owner: SYSDBA  */
CREATE TABLE PCP_PROCESOS (CONS_PROCESO INTEGER NOT NULL,
        CODI_PROCESO VARCHAR(12) NOT NULL,
        NOMB_PROCESO VARCHAR(60) NOT NULL,
        REGI_SISTEMA DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_PROC_SIGUIENTE INTEGER,
        RESPONSABLE VARCHAR(20),
        ANAL_METODOS DOM_LOGICO  DEFAULT 1 NOT NULL,
        CONS_PROD_PAQU_TIPO INTEGER,
        CONT_TIQUETES DOM_LOGICO  DEFAULT 1 NOT NULL,
        PLAN_DETALLADA INTEGER DEFAULT 1 NOT NULL,
        DURA_ESTIMADA DOM_LOGICO  DEFAULT -1 NOT NULL,
        VALO_DURA_ESTIMADA INTEGER DEFAULT 0 NOT NULL,
        CONS_PUNT_CONT_INICIAL INTEGER,
        CONS_PUNT_CONT_FINAL INTEGER,
        IZQUIERDA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        ARRIBA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        OBSERVACIONES VARCHAR(250),
        SECU_NIVEL INTEGER DEFAULT 1,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        CONS_GRUP_PROCESO INTEGER NOT NULL,
CONSTRAINT PCP_PROCESOS_PK PRIMARY KEY (CONS_PROCESO),
CONSTRAINT PCP_PROCESOS_CODIGO UNIQUE (CODI_PROCESO),
CONSTRAINT PCP_PROCESOS_NOMBRE UNIQUE (NOMB_PROCESO));

/*  Table: PCP_PROD_CAPAS, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_CAPAS (CONS_PROD_ESPIGA INTEGER NOT NULL,
        CONS_REFE_COLOR INTEGER NOT NULL,
        CAPAS DOM_ENTE_POSITIVO NOT NULL,
CONSTRAINT PCP_PROD_CAPAS_PK PRIMARY KEY (CONS_PROD_ESPIGA, CONS_REFE_COLOR));

/*  Table: PCP_PROD_DIST_PAQUETES, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_DIST_PAQUETES (CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        CONS_PROD_PAQU_TIPO INTEGER NOT NULL,
        NUME_PAQUETE DOM_ENTE_POSITIVO NOT NULL,
        CONS_REFE_COLOR INTEGER NOT NULL,
        CONS_GRUP_TALL_DETALLE INTEGER NOT NULL,
        CANT_UNIDADES DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
CONSTRAINT PCP_PROD_DIST_PAQUETES_PK PRIMARY KEY (CONS_PROD_LOTE, CONS_PROCESO, CONS_PROD_PAQU_TIPO, NUME_PAQUETE));

/*  Table: PCP_PROD_ESPIGAS, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_ESPIGAS (CONS_PROD_ESPIGA INTEGER NOT NULL,
        CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_REFE_MATERIAL INTEGER NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        NUME_ESPIGA DOM_ENTE_POSITIVO NOT NULL,
        CAPA_SIMULACION DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
CONSTRAINT PCP_PROD_ESPIGAS_PK PRIMARY KEY (CONS_PROD_ESPIGA));

/*  Table: PCP_PROD_IMPR_TIQUETES, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_IMPR_TIQUETES (CONS_PROD_IMPR_TIQUETES INTEGER NOT NULL,
        CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_PROD_PAQU_TIPO INTEGER NOT NULL,
        CONS_PROCESO INTEGER DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROD_IMPR_TIQUETES_PK PRIMARY KEY (CONS_PROD_IMPR_TIQUETES));

/*  Table: PCP_PROD_LIST_OPER_CORTE, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_LIST_OPER_CORTE (CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_REFE_MATERIAL INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        CONS_PROCESO INTEGER DEFAULT 0 NOT NULL,
        CODI_OPERACION VARCHAR(12) NOT NULL,
        NOMB_OPERACION VARCHAR(60) NOT NULL,
        CONS_CORT_UNID_MEDIDA INTEGER DEFAULT 0 NOT NULL,
        PUESTOS DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        UNID_POR_TIQUETE DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        NUME_TIQUETES DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        TIEM_OPERACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TIEM_TOTAL DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
CONSTRAINT PCP_PROD_LIST_OPER_CORTE_PK PRIMARY KEY (CONS_PROD_LOTE, CONS_REFE_MATERIAL, SECU_OPERACION));

/*  Table: PCP_PROD_LIST_OPER_COSTURA, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_LIST_OPER_COSTURA (CONS_PROD_LOTE INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        CODI_OPER_COSTURA VARCHAR(12),
        NOMB_OPER_COSTURA VARCHAR(30) NOT NULL,
        TIEMPO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FRECUENCIA DOM_REAL_POSITIVO  DEFAULT 1 NOT NULL,
        ES_TITULO DOM_LOGICO  DEFAULT -1 NOT NULL,
        COST_OPERACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_PUNT_CONTROL INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROD_LIST_OPER_COSTURA_PK PRIMARY KEY (CONS_PROD_LOTE, SECU_OPERACION));

/*  Table: PCP_PROD_LOTES, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_LOTES (CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        NUME_LOTE INTEGER NOT NULL,
        FINALIZADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        CAPA_SIMULACION DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        CANT_PAQU_CORTE INTEGER DEFAULT 0 NOT NULL,
        CANT_PAQU_CORT_AGRUPAR INTEGER DEFAULT 0 NOT NULL,
        CONS_ULTI_PROC_FINALIZADO INTEGER DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROD_LOTES_PK PRIMARY KEY (CONS_PROD_LOTE),
CONSTRAINT PCP_PROD_LOTES_UNIQUE UNIQUE (CONS_PROD_ORDEN, NUME_LOTE));

/*  Table: PCP_PROD_LOTE_CORTE, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_LOTE_CORTE (CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_REFE_MATERIAL INTEGER NOT NULL,
        AGRU_PAQUETE DOM_ENTE_POSITIVO  DEFAULT 0,
        CONS_TIQU_CONTROL INTEGER NOT NULL,
CONSTRAINT PK_PCP_PROD_LOTE_CORTE PRIMARY KEY (CONS_PROD_LOTE, CONS_REFE_MATERIAL),
CONSTRAINT PCP_PROD_LOTE_CORTE_TIQU_CONT UNIQUE (CONS_TIQU_CONTROL));

/*  Table: PCP_PROD_LOTE_UNIDADES, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_LOTE_UNIDADES (CONS_PROD_LOTE INTEGER NOT NULL,
        CONS_REFE_COLOR INTEGER NOT NULL,
        CONS_GRUP_TALL_DETALLE INTEGER NOT NULL,
        CANT_UNIDADES DOM_ENTE_POSITIVO NOT NULL,
CONSTRAINT PCP_PROD_LOTE_UNIDADES_PK PRIMARY KEY (CONS_PROD_LOTE, CONS_REFE_COLOR, CONS_GRUP_TALL_DETALLE));

/*  Table: PCP_PROD_ORDENES, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_ORDENES (CONS_PROD_ORDEN INTEGER NOT NULL,
        NUME_PROD_ORDEN VARCHAR(12) NOT NULL,
        CONS_REFERENCIA INTEGER NOT NULL,
        ANULADA DOM_LOGICO  DEFAULT -1 NOT NULL,
        FINALIZADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROD_ORDENES_PK PRIMARY KEY (CONS_PROD_ORDEN),
CONSTRAINT PCP_PROD_ORDE_NUME_ORDEN UNIQUE (NUME_PROD_ORDEN));

/*  Table: PCP_PROD_ORDE_HISTORIAL, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_ORDE_HISTORIAL (CONS_ANOTACION INTEGER NOT NULL,
        CONS_PROD_ORDEN INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROD_ORDE_HISTORIAL_PK PRIMARY KEY (CONS_ANOTACION));

/*  Table: PCP_PROD_ORDE_RESPONSABLES, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_ORDE_RESPONSABLES (CONS_PROD_ORDE_RESPONSABLE INTEGER NOT NULL,
        CONS_PROD_LOTE INTEGER DEFAULT 0 NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        USUA_RESPONSABLE VARCHAR(20) DEFAULT USER NOT NULL,
        FECH_ESTIMADA TIMESTAMP DEFAULT 'NOW' NOT NULL,
        HECHO DOM_LOGICO  DEFAULT -1 NOT NULL,
        PORC_AVANCE DOM_PORCENTAJE  DEFAULT 0 NOT NULL,
        OBSERVACIONES VARCHAR(1000),
        FECH_SISTEMA DOM_FECH_SISTEMA  DEFAULT 'NOW' NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_PROD_ORDE_RESPONSABLES PRIMARY KEY (CONS_PROD_ORDE_RESPONSABLE));

/*  Table: PCP_PROD_PAQU_TIPOS, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_PAQU_TIPOS (CONS_PROD_PAQU_TIPO INTEGER NOT NULL,
        CODI_PROD_PAQU_TIPO VARCHAR(12) NOT NULL,
        NOMB_PROD_PAQU_TIPO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROD_PAQU_TIPOS_PK PRIMARY KEY (CONS_PROD_PAQU_TIPO),
CONSTRAINT PCP_PROD_PAQU_TIPOS_CODIGO UNIQUE (CODI_PROD_PAQU_TIPO),
CONSTRAINT PCP_PROD_PAQU_TIPOS_NOMBRE UNIQUE (NOMB_PROD_PAQU_TIPO));

/*  Table: PCP_PROD_PUNT_CONTROL, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_PUNT_CONTROL (CONS_PROD_PUNT_CONTROL INTEGER NOT NULL,
        CONS_PROCESO INTEGER NOT NULL,
        CODI_PROD_PUNT_CONTROL VARCHAR(10) NOT NULL,
        NOMB_PROD_PUNT_CONTROL VARCHAR(10) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROD_PUNT_CONTROL_PK PRIMARY KEY (CONS_PROD_PUNT_CONTROL),
CONSTRAINT PCP_PROD_PUNT_CONTROL_CODIGO UNIQUE (CODI_PROD_PUNT_CONTROL),
CONSTRAINT PCP_PROD_PUNT_CONTROL_NOMBRE UNIQUE (NOMB_PROD_PUNT_CONTROL));

/*  Table: PCP_PROD_UNIDADES, Owner: SYSDBA  */
CREATE TABLE PCP_PROD_UNIDADES (CONS_PROD_ESPIGA INTEGER NOT NULL,
        CONS_REFE_COLOR DOM_ENTE_POSITIVO NOT NULL,
        CONS_GRUP_TALL_DETALLE DOM_ENTE_POSITIVO NOT NULL,
        CANT_TALLAS DOM_ENTE_POSITIVO NOT NULL,
        CANT_UNIDADES DOM_ENTE_POSITIVO NOT NULL,
CONSTRAINT PCP_PROD_UNIDADES_PK PRIMARY KEY (CONS_PROD_ESPIGA, CONS_REFE_COLOR, CONS_GRUP_TALL_DETALLE));

/*  Table: PCP_PROG_PRODUCCION, Owner: SYSDBA  */
CREATE TABLE PCP_PROG_PRODUCCION (CONS_PROG_PRODUCCION INTEGER NOT NULL,
        CONS_PROD_LOTE INTEGER NOT NULL,
        ESTA_PROGRAMADO DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_PROGRAMACION TIMESTAMP,
        USUA_PROGRAMACION VARCHAR(20),
        FECH_EJEC_INICIAL TIMESTAMP,
        FRAC_EJEC_INICIAL DOM_REAL_POSITIVO  DEFAULT 0,
        FECH_EJEC_FINAL TIMESTAMP,
        ES_MOVIL DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_EMPRESA INTEGER,
        CONS_PLANTA INTEGER,
        CONS_PLAN_LINEA INTEGER,
        CONS_TURNO INTEGER,
        TIPO_AGRUPACION INTEGER DEFAULT 1 NOT NULL,
        TIPO_BALANCEO INTEGER DEFAULT 1 NOT NULL,
        TIEM_UNIDAD DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        UNID_LOTE DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_REQUERIDOS COMPUTED BY (TIEM_UNIDAD*UNID_LOTE),
        MINU_CONTRATADOS DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        MINU_DESCANSO DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        PERS_DISPONIBLE DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        PORC_PRESENCIA DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        PORC_APROVECHAMIENTO DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        PORC_EFICIENCIA DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        PORC_BALANCEO COMPUTED BY (((PORC_PRESENCIA/100) * (PORC_APROVECHAMIENTO/100)*(PORC_EFICIENCIA/100))*100),
        MINU_DISPONIBLES COMPUTED BY (MINU_CONTRATADOS - MINU_DESCANSO * (PORC_BALANCEO / 100) * PERS_DISPONIBLE),
        TIEM_MEDIO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PROD_DIA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        PROD_HORA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        PAQU_POR_PUESTO DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        TAMA_PAQUETE DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        PUES_SIMULTANEOS DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        TIEM_UNID_REAL DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        RECO_PRIM_PAQU_MINUTOS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        RECO_PRIM_PAQU_DIAS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        RECO_ULTI_PAQU_MINUTOS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        RECO_ULTI_PAQU_DIAS DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        RECO_TOTA_DIAS COMPUTED BY (RECO_PRIM_PAQU_MINUTOS * RECO_ULTI_PAQU_MINUTOS),
        RECO_TOTA_MINUTOS COMPUTED BY (RECO_PRIM_PAQU_DIAS * RECO_ULTI_PAQU_DIAS),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PROG_PRODUCCION_PK PRIMARY KEY (CONS_PROG_PRODUCCION));

/*  Table: PCP_PROG_PROD_GRUPOS, Owner: SYSDBA  */
CREATE TABLE PCP_PROG_PROD_GRUPOS (CONS_PROG_PRODUCCION INTEGER NOT NULL,
        SECU_GRUP_PROGRAMACION INTEGER NOT NULL,
        NOMB_PROG_PROD_GRUPO VARCHAR(60) NOT NULL,
        NIVEL INTEGER NOT NULL,
        TIEM_NIVEL DOM_REAL_POSITIVO NOT NULL,
        NUME_PUESTOS DOM_REAL_POSITIVO NOT NULL,
        OPER_REALES DOM_ENTE_POSITIVO NOT NULL,
        TIEM_MEDIO DOM_REAL_POSITIVO NOT NULL,
        RECO_PRIM_PAQU_DIAS DOM_REAL_POSITIVO NOT NULL,
        RECO_ULTI_PAQU_DIAS DOM_REAL_POSITIVO NOT NULL,
        RECO_TOTA_DIAS DOM_REAL_POSITIVO NOT NULL,
CONSTRAINT PCP_PROG_PROD_GRUPOS_PK PRIMARY KEY (CONS_PROG_PRODUCCION, SECU_GRUP_PROGRAMACION));

/*  Table: PCP_PROG_PROD_OPERACIONES, Owner: SYSDBA  */
CREATE TABLE PCP_PROG_PROD_OPERACIONES (CONS_PROG_PRODUCCION INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        NOMB_OPERACION VARCHAR(60) NOT NULL,
        TIEM_OPERACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        PORC_EFIC_INICIAL DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        PORC_EFIC_FINAL DOM_REAL_POSITIVO  DEFAULT 100 NOT NULL,
        SECU_GRUP_PROGRAMACION INTEGER,
CONSTRAINT PCP_PROG_PROD_OPERACIONES_PK PRIMARY KEY (CONS_PROG_PRODUCCION, SECU_OPERACION));

/*  Table: PCP_PUNT_CONTROL, Owner: SYSDBA  */
CREATE TABLE PCP_PUNT_CONTROL (CONS_PUNT_CONTROL INTEGER NOT NULL,
        CODI_PUNT_CONTROL VARCHAR(12) NOT NULL,
        NOMB_PUNT_CONTROL VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_PUNT_CONTROL_PK PRIMARY KEY (CONS_PUNT_CONTROL),
CONSTRAINT PCP_PUNT_CONTROL_CODIGO UNIQUE (CODI_PUNT_CONTROL),
CONSTRAINT PCP_PUNT_CONTROL_NOMBRE UNIQUE (NOMB_PUNT_CONTROL));

/*  Table: PCP_REFE_FICH_02_HOJA_DISENO, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_02_HOJA_DISENO (CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN NOT NULL,
        IMAG_1_SMALL DOM_IMAGEN,
        OBSE_1 DOM_OBSERVACIONES,
        IMAG_2 DOM_IMAGEN,
        IMAG_2_SMALL DOM_IMAGEN,
        OBSE_2 DOM_OBSERVACIONES,
CONSTRAINT PK_PCP_REFE_FICH_02_HOJA_DISENO PRIMARY KEY (CONS_REFE_FICHA));

/*  Table: PCP_REFE_FICH_03_ESPE_DISENO, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_03_ESPE_DISENO (CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN,
        IMAG_1_SMALL DOM_IMAGEN,
CONSTRAINT PK_PCP_REFE_FICH_03_ESPE_DISENO PRIMARY KEY (CONS_REFE_FICHA));

/*  Table: PCP_REFE_FICH_04_ESPE_DISENO, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_04_ESPE_DISENO (CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN,
        IMAG_1_SMALL DOM_IMAGEN,
CONSTRAINT PK_PCP_REFE_FICH_04_ESPE_DISENO PRIMARY KEY (CONS_REFE_FICHA));

/*  Table: PCP_REFE_FICH_05_ESPE_EMPAQUE, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_05_ESPE_EMPAQUE (CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN,
        IMAG_1_SMALL DOM_IMAGEN,
CONSTRAINT PK_PCP_REFE_FICH_05_ESPE_EMPAQU PRIMARY KEY (CONS_REFE_FICHA));

/*  Table: PCP_REFE_FICH_06_ESPE_CONS, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_06_ESPE_CONS (CONS_REFE_FICH_DETALLE INTEGER NOT NULL,
        CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN,
        IMAG_1_SMALL DOM_IMAGEN,
        OBSE_1 DOM_OBSERVACIONES,
CONSTRAINT PK_PCP_REFE_FICH_06_ESPE_CONS PRIMARY KEY (CONS_REFE_FICH_DETALLE));

/*  Table: PCP_REFE_FICH_07_MEDI_ESPECIAL, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_07_MEDI_ESPECIAL (CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN,
        IMAG_1_SMALL DOM_IMAGEN,
CONSTRAINT PK_PCP_REFE_FICH_07_MEDI_ESPECI PRIMARY KEY (CONS_REFE_FICHA));

/*  Table: PCP_REFE_FICH_08_MEDI_DETA, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_08_MEDI_DETA (CONS_REFE_FICHA INTEGER NOT NULL,
        CONS_FILA DOM_ENTE_POSITIVO NOT NULL,
        CONS_COLUMNA INTEGER NOT NULL,
        TEXTO VARCHAR(60) NOT NULL,
        VALOR DOM_ENTE_POSITIVO,
CONSTRAINT PK_PCP_REFE_FICH_08_MEDI_DETA PRIMARY KEY (CONS_REFE_FICHA, CONS_FILA, CONS_COLUMNA));

/*  Table: PCP_REFE_FICH_08_MEDI_PREN, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_08_MEDI_PREN (CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN,
        IMAG_1_SMALL DOM_IMAGEN,
        COMENTARIOS DOM_OBSERVACIONES,
CONSTRAINT PK_PCP_REFE_FICH_08_MEDI_PREN PRIMARY KEY (CONS_REFE_FICHA));

/*  Table: PCP_REFE_FICH_09_ESPE_PRES, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_09_ESPE_PRES (CONS_REFE_FICH_DETALLE INTEGER NOT NULL,
        CONS_REFE_FICHA INTEGER NOT NULL,
        IMAG_1 DOM_IMAGEN,
        IMAG_1_SMALL DOM_IMAGEN,
        NOMB_IMAGEN VARCHAR(60),
CONSTRAINT PK_PCP_REFE_FICH_09_ESPE_PRES PRIMARY KEY (CONS_REFE_FICH_DETALLE));

/*  Table: PCP_REFE_FICH_TECNICAS, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA INTEGER NOT NULL,
        CONS_REFE_TIPO_FICHA INTEGER NOT NULL,
        ANULADA DOM_LOGICO  DEFAULT -1,
        PREDETERMINADA DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_REFE_VARIACION INTEGER NOT NULL,
        CODI_REFERENCIA VARCHAR(12) NOT NULL,
        CODI_INTE_REFERENCIA VARCHAR(12),
        CONS_REFE_LINEA INTEGER NOT NULL,
        CONS_REFE_EDAD INTEGER NOT NULL,
        CONS_REFE_ESTILO INTEGER NOT NULL,
        CONS_REFE_GRUPO INTEGER NOT NULL,
        CONS_REFE_TEMPORADA INTEGER NOT NULL,
        CONS_REFE_MARCA INTEGER NOT NULL,
        NOMB_REFERENCIA VARCHAR(60),
        CONS_REFE_GRUP_TALLAS INTEGER NOT NULL,
        TALLAS VARCHAR(240) NOT NULL,
        TALL_MUESTRA VARCHAR(12),
        DESCRIPCION VARCHAR(240),
        FECH_MODIFICACION DOM_FECH_SISTEMA NOT NULL,
        USUA_MODIFICACION DOM_USUA_SISTEMA NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_PCP_REFE_FICH_TECNICAS PRIMARY KEY (CONS_REFE_FICHA));

/*  Table: PCP_REFE_INSUMOS, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_INSUMOS (CONS_REFE_INSUMO INTEGER NOT NULL,
        CONS_REFE_VARIACION INTEGER NOT NULL,
        CONS_INSU_REFERENCIA INTEGER,
        ES_FABRICACION DOM_LOGICO  DEFAULT 1 NOT NULL,
        CONS_TERCERO INTEGER,
        CONSUMO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TALL_PROMEDIO VARCHAR(12),
        COST_ESTIMADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_MONEDA INTEGER DEFAULT 0 NOT NULL,
        COMBINACION DOM_LOGICO  DEFAULT -1 NOT NULL,
        TALLAJE DOM_LOGICO  DEFAULT -1 NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_INSUMOS_PK PRIMARY KEY (CONS_REFE_INSUMO));

/*  Table: PCP_REFE_INSU_COLORES, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_INSU_COLORES (CONS_REFE_INSUMO INTEGER NOT NULL,
        CONS_REFE_COLOR INTEGER NOT NULL,
        CONS_COLO_COMBINADO INTEGER,
        CONSUMO DOM_REAL NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_INSU_COLORES_PK PRIMARY KEY (CONS_REFE_INSUMO, CONS_REFE_COLOR));

/*  Table: PCP_REFE_INSU_TALLAS, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_INSU_TALLAS (CONS_REFE_INSUMO INTEGER NOT NULL,
        CONS_GRUP_TALL_DETALLE INTEGER NOT NULL,
        CONSUMO DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_INSU_TALLAS_PK PRIMARY KEY (CONS_REFE_INSUMO, CONS_GRUP_TALL_DETALLE));

/*  Table: PCP_REFE_LIST_OPER_CORTE, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_LIST_OPER_CORTE (CONS_REFE_VARIACION INTEGER NOT NULL,
        CONS_REFE_MATERIAL INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        CONS_PROCESO INTEGER,
        CODI_OPERACION VARCHAR(12),
        NOMB_OPERACION VARCHAR(60),
        CONS_CORT_UNID_MEDIDA INTEGER NOT NULL,
        TIEM_OPERACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
CONSTRAINT PCP_REFE_LIST_OPER_CORTE_PK PRIMARY KEY (CONS_REFE_VARIACION, CONS_REFE_MATERIAL, SECU_OPERACION));

/*  Table: PCP_REFE_LIST_OPER_COSTURA, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_LIST_OPER_COSTURA (CONS_REFE_VARIACION INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        CODI_OPER_COSTURA VARCHAR(12),
        NOMB_OPER_COSTURA VARCHAR(30) NOT NULL,
        TIEMPO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FRECUENCIA DOM_REAL_POSITIVO  DEFAULT 1 NOT NULL,
        ES_TITULO INTEGER DEFAULT -1 NOT NULL,
        COST_OPERACION DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_PUNT_CONTROL INTEGER,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_LIST_OPER_COSTURA_PK PRIMARY KEY (CONS_REFE_VARIACION, SECU_OPERACION));

/*  Table: PCP_REFE_LIST_OPER_COST_HIST, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_LIST_OPER_COST_HIST (CONS_ANOTACION INTEGER NOT NULL,
        CONS_REFE_VARIACION INTEGER NOT NULL,
        TEXT_ANOTACION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_LIST_OPER_COST_HIST_PK PRIMARY KEY (CONS_ANOTACION));

/*  Table: PCP_REFE_MATERIALES, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_MATERIALES (CONS_REFE_MATERIAL INTEGER NOT NULL,
        CONS_REFE_VARIACION INTEGER NOT NULL,
        CONS_MATE_REFERENCIA INTEGER NOT NULL,
        ES_PRINCIPAL DOM_LOGICO  DEFAULT 1 NOT NULL,
        ES_MATE_BASICO DOM_LOGICO  DEFAULT -1 NOT NULL,
        CONS_TERCERO INTEGER,
        CONSUMO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        TALL_PROMEDIO VARCHAR(12),
        COST_ESTIMADO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        CONS_MONEDA INTEGER DEFAULT 0 NOT NULL,
        COMBINACION DOM_LOGICO  DEFAULT 1 NOT NULL,
        TALLAJE DOM_LOGICO  DEFAULT 1 NOT NULL,
        OBSERVACIONES VARCHAR(240),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_MATERIALES_PK PRIMARY KEY (CONS_REFE_MATERIAL));

/*  Table: PCP_REFE_MATE_COLORES, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_MATE_COLORES (CONS_REFE_MATERIAL INTEGER NOT NULL,
        CONS_REFE_COLOR INTEGER NOT NULL,
        CONS_COLO_COMBINADO INTEGER,
        CONSUMO DOM_REAL_POSITIVO  DEFAULT 0 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_MATE_COLORES_PK PRIMARY KEY (CONS_REFE_MATERIAL, CONS_REFE_COLOR));

/*  Table: PCP_REFE_MATE_TALLAS, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_MATE_TALLAS (CONS_REFE_MATERIAL INTEGER NOT NULL,
        CONS_GRUP_TALL_DETALLE INTEGER NOT NULL,
        CONSUMO DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_MATE_TALLAS_PK PRIMARY KEY (CONS_REFE_MATERIAL, CONS_GRUP_TALL_DETALLE));

/*  Table: PCP_REFE_OPER_COST_ALTE, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_OPER_COST_ALTE (CONS_REFE_VARIACION INTEGER NOT NULL,
        SECU_OPERACION INTEGER NOT NULL,
        CONS_OPER_COST_ALTE INTEGER NOT NULL,
        CONS_OPER_COSTURA INTEGER,
        NOMB_OPER_COSTURA VARCHAR(30),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_OPER_COST_ALTE_PK PRIMARY KEY (CONS_REFE_VARIACION, SECU_OPERACION, CONS_OPER_COST_ALTE));

/*  Table: PCP_REFE_TIPO_VARIACIONES, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_TIPO_VARIACIONES (CONS_REFE_TIPO_VARIACION INTEGER NOT NULL,
        CODI_REFE_TIPO_VARIACION VARCHAR(12) NOT NULL,
        NOMB_REFE_TIPO_VARIACION VARCHAR(60) NOT NULL,
        OBSERVACIONES VARCHAR(250),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_REFE_TIPO_VARIACIONES_PK PRIMARY KEY (CONS_REFE_TIPO_VARIACION),
CONSTRAINT PCP_REFE_TIPO_VARI_CODIGO UNIQUE (CODI_REFE_TIPO_VARIACION),
CONSTRAINT PCP_REFE_TIPO_VARI_NOMBRE UNIQUE (NOMB_REFE_TIPO_VARIACION));

/*  Table: PCP_REFE_VARIACIONES, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_VARIACIONES (CONS_REFE_VARIACION INTEGER NOT NULL,
        CONS_REFERENCIA INTEGER NOT NULL,
        CONS_REFE_TIPO_VARIACION INTEGER NOT NULL,
        OBSERVACIONES VARCHAR(250),
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT PCP_REFE_VARIACIONES_PK PRIMARY KEY (CONS_REFE_VARIACION),
CONSTRAINT PCP_REFE_VARIACIONES_REFE_TIPO_ UNIQUE (CONS_REFERENCIA, CONS_REFE_TIPO_VARIACION));

/*  Table: PCP_REFE_VARI_COSTURA, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_VARI_COSTURA (CONS_REFE_VARI_COSTURA INTEGER NOT NULL,
        CONS_REFE_VARIACION INTEGER NOT NULL,
        TALL_MUESTRA VARCHAR(12) NOT NULL,
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO,
        DETA_IMAGEN DOM_IMAGEN,
        AJUS_DETA_IMAGEN DOM_LOGICO,
        OBSERVACIONES BLOB SUB_TYPE TEXT SEGMENT SIZE 400,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_VARI_COSTURA_PK PRIMARY KEY (CONS_REFE_VARI_COSTURA));

/*  Table: PCP_REFE_VARI_DISENO, Owner: SYSDBA  */
CREATE TABLE PCP_REFE_VARI_DISENO (CONS_REFE_VARI_DISENO INTEGER NOT NULL,
        CONS_REFE_VARIACION INTEGER NOT NULL,
        TALL_MUESTRA VARCHAR(12) NOT NULL,
        IMAGEN DOM_IMAGEN,
        AJUS_IMAGEN DOM_LOGICO,
        DETA_IMAGEN DOM_IMAGEN,
        AJUS_DETA_IMAGEN DOM_LOGICO,
        OBSERVACIONES BLOB SUB_TYPE TEXT SEGMENT SIZE 400,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_REFE_VARI_DISENO_PK PRIMARY KEY (CONS_REFE_VARI_DISENO));

/*  Table: PCP_TERCEROS, Owner: SYSDBA  */
CREATE TABLE PCP_TERCEROS (CONS_TERCERO INTEGER NOT NULL,
        CONS_TIPO_TERCERO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PCP_TERCEROS_PK PRIMARY KEY (CONS_TERCERO, CONS_TIPO_TERCERO));

/*  Table: SIS_CORT_UNID_MEDIDA, Owner: SYSDBA  */
CREATE TABLE SIS_CORT_UNID_MEDIDA (CONS_CORT_UNID_MEDIDA INTEGER NOT NULL,
        CODI_CORT_UNID_MEDIDA VARCHAR(12) NOT NULL,
        NOMB_CORT_UNID_MEDIDA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_CORT_UNID_MEDIDA_PK PRIMARY KEY (CONS_CORT_UNID_MEDIDA),
CONSTRAINT SIS_CORT_UNID_MEDIDA_CODIGO UNIQUE (CODI_CORT_UNID_MEDIDA),
CONSTRAINT SIS_CORT_UNID_MEDIDA_NOMBRE UNIQUE (NOMB_CORT_UNID_MEDIDA));

/*  Table: SIS_COST_GRUPOS, Owner: SYSDBA  */
CREATE TABLE SIS_COST_GRUPOS (CONS_COST_GRUPO INTEGER NOT NULL,
        CODI_COST_GRUPO VARCHAR(12) NOT NULL,
        NOMB_COST_GRUPO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_COST_GRUPOS_PK PRIMARY KEY (CONS_COST_GRUPO),
CONSTRAINT SIS_COST_GRUPOS_CODIGO UNIQUE (CODI_COST_GRUPO),
CONSTRAINT SIS_COST_GRUPOS_NOMBRE UNIQUE (NOMB_COST_GRUPO));

/*  Table: SIS_CST_DIFICULTADES, Owner: SYSDBA  */
CREATE TABLE SIS_CST_DIFICULTADES (CONS_CST_DIFICULTAD INTEGER NOT NULL,
        CODI_CST_DIFICULTAD VARCHAR(12) NOT NULL,
        NOMB_CST_DIFICULTAD VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_CST_DIFICULTADES_PK PRIMARY KEY (CONS_CST_DIFICULTAD),
CONSTRAINT SIS_CST_DIFICULTADES_CODIGO UNIQUE (CODI_CST_DIFICULTAD),
CONSTRAINT SIS_CST_DIFICULTADES_NOMBRE UNIQUE (NOMB_CST_DIFICULTAD));

/*  Table: SIS_CST_DISTANCIAS, Owner: SYSDBA  */
CREATE TABLE SIS_CST_DISTANCIAS (CONS_CST_DISTANCIA INTEGER NOT NULL,
        CODI_CST_DISTANCIA VARCHAR(12) NOT NULL,
        NOMB_CST_DISTANCIA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_CST_DISTANCIAS_PK PRIMARY KEY (CONS_CST_DISTANCIA),
CONSTRAINT SIS_CST_DISTANCIAS_CODIGO UNIQUE (CODI_CST_DISTANCIA),
CONSTRAINT SIS_CST_DISTANCIAS_NOMBRE UNIQUE (NOMB_CST_DISTANCIA));

/*  Table: SIS_CST_PESOS, Owner: SYSDBA  */
CREATE TABLE SIS_CST_PESOS (CONS_CST_PESO INTEGER NOT NULL,
        CODI_CST_PESO VARCHAR(12) NOT NULL,
        NOMB_CST_PESO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_SIS_CST_PESOS PRIMARY KEY (CONS_CST_PESO),
CONSTRAINT SIS_CST_PESOS_CODIGO UNIQUE (CODI_CST_PESO),
CONSTRAINT SIS_CST_PESOS_NOMBRE UNIQUE (NOMB_CST_PESO));

/*  Table: SIS_CST_POSICIONAMIENTOS, Owner: SYSDBA  */
CREATE TABLE SIS_CST_POSICIONAMIENTOS (CONS_CST_POSICIONAMIENTO INTEGER NOT NULL,
        CODI_CST_POSICIONAMIENTO VARCHAR(12) NOT NULL,
        NOMB_CST_POSICIONAMIENTO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_CST_POSICIONAMIENTOS_PK PRIMARY KEY (CONS_CST_POSICIONAMIENTO),
CONSTRAINT SIS_CST_POSICIONAMIENTOS_CODIGO UNIQUE (CODI_CST_POSICIONAMIENTO),
CONSTRAINT SIS_CST_POSICIONAMIENTOS_NOMBRE UNIQUE (NOMB_CST_POSICIONAMIENTO));

/*  Table: SIS_ESTADOS, Owner: SYSDBA  */
CREATE TABLE SIS_ESTADOS (CONS_ESTADO INTEGER NOT NULL,
        CODI_ESTADO VARCHAR(12) NOT NULL,
        NOMB_ESTADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_ESTADOS_PK PRIMARY KEY (CONS_ESTADO));

/*  Table: SIS_ESTA_CIVIL, Owner: SYSDBA  */
CREATE TABLE SIS_ESTA_CIVIL (CONS_ESTA_CIVIL INTEGER NOT NULL,
        CODI_ESTA_CIVIL VARCHAR(12) NOT NULL,
        NOMB_ESTA_CIVIL VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_ESTA_CIVIL_PK PRIMARY KEY (CONS_ESTA_CIVIL),
CONSTRAINT SIS_ESTA_CIVIL_CODIGO UNIQUE (CODI_ESTA_CIVIL),
CONSTRAINT SIS_ESTA_CIVIL_NOMBRE UNIQUE (NOMB_ESTA_CIVIL));

/*  Table: SIS_FAMI_MOVIMIENTO, Owner: SYSDBA  */
CREATE TABLE SIS_FAMI_MOVIMIENTO (CONS_FAMI_MOVIMIENTO INTEGER NOT NULL,
        CODI_FAMI_MOVIMIENTO VARCHAR(12) NOT NULL,
        NOMB_FAMI_MOVIMIENTO VARCHAR(60) NOT NULL,
        CONS_ESTADO INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_FAMI_MOVIMIENTO_PK PRIMARY KEY (CONS_FAMI_MOVIMIENTO),
CONSTRAINT SIS_FAMI_MOVIMIENTO_CODIGO UNIQUE (CODI_FAMI_MOVIMIENTO),
CONSTRAINT SIS_FAMI_MOVIMIENTO_NOMBRE UNIQUE (NOMB_FAMI_MOVIMIENTO));

/*  Table: SIS_FILT_OPCIONES, Owner: SYSDBA  */
CREATE TABLE SIS_FILT_OPCIONES (CONS_FILT_OPCION INTEGER NOT NULL,
        NOMB_FILT_OPCION VARCHAR(60) NOT NULL,
        HABI_RANGO DOM_LOGICO NOT NULL,
CONSTRAINT PK_SIS_FILT_OPCIONES PRIMARY KEY (CONS_FILT_OPCION),
CONSTRAINT SIS_FILT_OPCIONES_UNQ_NOMBRE UNIQUE (NOMB_FILT_OPCION));

/*  Table: SIS_FRASES, Owner: SYSDBA  */
CREATE TABLE SIS_FRASES (CONS_FRASE INTEGER NOT NULL,
        FRASE VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_FRASES_PK PRIMARY KEY (CONS_FRASE));

/*  Table: SIS_GRAD_HABILIDAD, Owner: SYSDBA  */
CREATE TABLE SIS_GRAD_HABILIDAD (CONS_GRAD_HABILIDAD INTEGER NOT NULL,
        CODI_GRAD_HABILIDAD VARCHAR(12) NOT NULL,
        NOMB_GRAD_HABILIDAD VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_GRAD_HABILIDAD_PK PRIMARY KEY (CONS_GRAD_HABILIDAD),
CONSTRAINT SIS_GRAD_HABI_CODIGO UNIQUE (CODI_GRAD_HABILIDAD),
CONSTRAINT SIS_GRAD_HABI_NOMBRE UNIQUE (NOMB_GRAD_HABILIDAD));

/*  Table: SIS_HERR_IMAG_VISTAS, Owner: SYSDBA  */
CREATE TABLE SIS_HERR_IMAG_VISTAS (CONS_HERR_IMAG_VISTA INTEGER NOT NULL,
        NOMB_HERR_IMAG_VISTA VARCHAR(60) NOT NULL,
        ACTIVO DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_SIS_HERR_IMAG_VISTAS PRIMARY KEY (CONS_HERR_IMAG_VISTA));

/*  Table: SIS_IMPR_FAMILIAS, Owner: SYSDBA  */
CREATE TABLE SIS_IMPR_FAMILIAS (CONS_IMPR_FAMILIA INTEGER NOT NULL,
        CODI_IMPR_FAMILIA VARCHAR(12) NOT NULL,
        NOMB_IMPR_FAMILIA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_IMPR_FAMILIAS_PK PRIMARY KEY (CONS_IMPR_FAMILIA),
CONSTRAINT SIS_IMPR_FAMILIAS_CODIGO UNIQUE (CODI_IMPR_FAMILIA),
CONSTRAINT SIS_IMPR_FAMILIAS_NOMBRE UNIQUE (NOMB_IMPR_FAMILIA));

/*  Table: SIS_MTM, Owner: SYSDBA  */
CREATE TABLE SIS_MTM (CODI_ELEMENTO VARCHAR(10) NOT NULL,
        NOMB_ELEMENTO VARCHAR(10) NOT NULL,
        TIEM_ELEMENTO DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA,
        USUA_SISTEMA DOM_USUA_SISTEMA,
CONSTRAINT SIS_MTM_PK PRIMARY KEY (CODI_ELEMENTO));

/*  Table: SIS_PARENTESCOS, Owner: SYSDBA  */
CREATE TABLE SIS_PARENTESCOS (CONS_PARENTESCO INTEGER NOT NULL,
        CODI_PARENTESCO VARCHAR(12) NOT NULL,
        NOMB_PARENTESCO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_PARENTESCOS_PK PRIMARY KEY (CONS_PARENTESCO),
CONSTRAINT SIS_PARENTESCOS_CODIGO UNIQUE (CODI_PARENTESCO),
CONSTRAINT SIS_PARENTESCOS_NOMBRE UNIQUE (NOMB_PARENTESCO));

/*  Table: SIS_PCP_FORM_PAGO, Owner: SYSDBA  */
CREATE TABLE SIS_PCP_FORM_PAGO (CONS_SIS_FORM_PAGO INTEGER NOT NULL,
        NOMB_SIS_FORM_PAGO VARCHAR(60) NOT NULL,
        ESTA_ACTIVA DOM_LOGICO  DEFAULT 1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_SIS_PCP_FORM_PAGO PRIMARY KEY (CONS_SIS_FORM_PAGO));

/*  Table: SIS_PCP_GRUP_PROCESOS, Owner: SYSDBA  */
CREATE TABLE SIS_PCP_GRUP_PROCESOS (CONS_GRUP_PROCESO INTEGER NOT NULL,
        CODI_GRUP_PROCESO VARCHAR(12) NOT NULL,
        NOMB_GRUP_PROCESO VARCHAR(60) NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
CONSTRAINT SIS_PCP_GRUP_PROCESOS_PK PRIMARY KEY (CONS_GRUP_PROCESO));

/*  Table: SIS_PCP_LOG, Owner: SYSDBA  */
CREATE TABLE SIS_PCP_LOG (CONS_PCP_LOG INTEGER NOT NULL,
        NOMB_MODU_MENSAJE VARCHAR(60) NOT NULL,
        TIPO_MENSAJE INTEGER DEFAULT 0 NOT NULL,
        TEXT_MENSAJE VARCHAR(500) NOT NULL,
        ADIC_1 VARCHAR(60),
        ADIC_2 VARCHAR(60),
        ADIC_3 VARCHAR(60),
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_SIS_PCP_LOG PRIMARY KEY (CONS_PCP_LOG));

/*  Table: SIS_PCP_ORDENAR, Owner: SYSDBA  */
CREATE TABLE SIS_PCP_ORDENAR (CONS_PCP_ORDENAR INTEGER NOT NULL,
        NOMB_MODULO VARCHAR(100) NOT NULL,
        NOMB_CAMPO VARCHAR(31) NOT NULL,
        TEXTO VARCHAR(100) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_PCP_ORDENAR_PK PRIMARY KEY (CONS_PCP_ORDENAR));

/*  Table: SIS_PCT_TERC_ORIGEN, Owner: SYSDBA  */
CREATE TABLE SIS_PCT_TERC_ORIGEN (CONS_ORIGEN INTEGER NOT NULL,
        CODI_ORIGEN VARCHAR(12) NOT NULL,
        NOMB_ORIGEN VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_PCT_TERC_ORIGEN_PK PRIMARY KEY (CONS_ORIGEN),
CONSTRAINT SIS_PCT_TERC_ORIGEN_CODIGO UNIQUE (CODI_ORIGEN),
CONSTRAINT SIS_PCT_TERC_ORIGEN_NOMBRE UNIQUE (NOMB_ORIGEN));

/*  Table: SIS_PCT_TIPO_TERCERO, Owner: SYSDBA  */
CREATE TABLE SIS_PCT_TIPO_TERCERO (CONS_TIPO_TERCERO INTEGER NOT NULL,
        CODI_TIPO_TERCERO VARCHAR(12) NOT NULL,
        NOMB_TIPO_TERCERO VARCHAR(120) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_PCT_TIPO_TERCERO_PK PRIMARY KEY (CONS_TIPO_TERCERO));

/*  Table: SIS_PERI_PAGO, Owner: SYSDBA  */
CREATE TABLE SIS_PERI_PAGO (CONS_PERI_PAGO INTEGER NOT NULL,
        CODI_PERI_PAGO VARCHAR(12) NOT NULL,
        NOMB_PERI_PAGO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_PERI_PAGO_PK PRIMARY KEY (CONS_PERI_PAGO),
CONSTRAINT SIS_PERI_PAGO_CODIGO UNIQUE (CODI_PERI_PAGO),
CONSTRAINT SIS_PERI_PAGO_NOMBRE UNIQUE (NOMB_PERI_PAGO));

/*  Table: SIS_PERS_TIPO_DOCUMENTO, Owner: SYSDBA  */
CREATE TABLE SIS_PERS_TIPO_DOCUMENTO (CONS_PERS_TIPO_DOCUMENTO INTEGER NOT NULL,
        CODI_PERS_TIPO_DOCUMENTO VARCHAR(12) NOT NULL,
        NOMB_PERS_TIPO_DOCUMENTO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_PERS_TIPO_DOCUMENTO_PK PRIMARY KEY (CONS_PERS_TIPO_DOCUMENTO),
CONSTRAINT SIS_PERS_TIPO_DOCU_CODIGO UNIQUE (CODI_PERS_TIPO_DOCUMENTO),
CONSTRAINT SIS_PERS_TIPO_DOCU_NOMBRE UNIQUE (NOMB_PERS_TIPO_DOCUMENTO));

/*  Table: SIS_RANG_EFICIENCIA, Owner: SYSDBA  */
CREATE TABLE SIS_RANG_EFICIENCIA (CONS_RANG_EFICIENCIA INTEGER NOT NULL,
        CODI_RANG_EFICIENCIA VARCHAR(12) NOT NULL,
        NOMB_RANG_EFICIENCIA CHAR(60) NOT NULL,
        RANG_DESDE INTEGER NOT NULL,
        RANG_HASTA INTEGER NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RANG_EFICIENCIA_PK PRIMARY KEY (CONS_RANG_EFICIENCIA),
CONSTRAINT SIS_RANG_EFIC_CODIGO UNIQUE (CODI_RANG_EFICIENCIA),
CONSTRAINT SIS_RANG_EFIC_NOMBRE UNIQUE (NOMB_RANG_EFICIENCIA));

/*  Table: SIS_RECU_ACCIONAMIENTO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_ACCIONAMIENTO (CONS_ACCIONAMIENTO INTEGER NOT NULL,
        CODI_ACCIONAMIENTO VARCHAR(12) NOT NULL,
        NOMB_ACCIONAMIENTO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_ACCIONAMIENTO_PK PRIMARY KEY (CONS_ACCIONAMIENTO),
CONSTRAINT SIS_RECU_ACCI_CODIGO UNIQUE (CODI_ACCIONAMIENTO),
CONSTRAINT SIS_RECU_ACCI_NOMBRE UNIQUE (NOMB_ACCIONAMIENTO));

/*  Table: SIS_RECU_ACCI_CORTE, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_ACCI_CORTE (CONS_ACCI_CORTE INTEGER NOT NULL,
        CODI_ACCI_CORTE VARCHAR(12) NOT NULL,
        NOMB_ACCI_CORTE VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_ACCI_CORTE_PK PRIMARY KEY (CONS_ACCI_CORTE));

/*  Table: SIS_RECU_ACCI_FUSIONADO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_ACCI_FUSIONADO (CONS_ACCI_FUSIONADO INTEGER NOT NULL,
        CODI_ACCI_FUSIONADO VARCHAR(12) NOT NULL,
        NOMB_ACCI_FUSIONADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_ACCI_FUSIONADO_PK PRIMARY KEY (CONS_ACCI_FUSIONADO),
CONSTRAINT SIS_RECU_ACCI_FUSI_CODIGO UNIQUE (CODI_ACCI_FUSIONADO),
CONSTRAINT SIS_RECU_ACCI_FUSI_NOMBRE UNIQUE (NOMB_ACCI_FUSIONADO));

/*  Table: SIS_RECU_CUCHILLA, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_CUCHILLA (CONS_CUCHILLA INTEGER NOT NULL,
        CODI_CUCHILLA VARCHAR(12) NOT NULL,
        NOMB_CUCHILLA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_CUCHILLA_PK PRIMARY KEY (CONS_CUCHILLA),
CONSTRAINT SIS_RECU_CUCH_CODIGO UNIQUE (CODI_CUCHILLA),
CONSTRAINT SIS_RECU_CUCH_NOMBRE UNIQUE (NOMB_CUCHILLA));

/*  Table: SIS_RECU_PRES_TEJIDO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_PRES_TEJIDO (CONS_PRES_TEJIDO INTEGER NOT NULL,
        CODI_PRES_TEJIDO VARCHAR(12) NOT NULL,
        NOMB_PRES_TEJIDO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_PRES_TEJIDO_PK PRIMARY KEY (CONS_PRES_TEJIDO),
CONSTRAINT SIS_RECU_PRES_TEJI_CODIGO UNIQUE (CODI_PRES_TEJIDO),
CONSTRAINT SIS_RECU_PRES_TEJI_NOMBRE UNIQUE (NOMB_PRES_TEJIDO));

/*  Table: SIS_RECU_SIST_PLANCHADO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_SIST_PLANCHADO (CONS_SIST_PLANCHADO INTEGER NOT NULL,
        CODI_SIST_PLANCHADO VARCHAR(12) NOT NULL,
        NOMB_SIST_PLANCHADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_SIST_PLANCHADO_PK PRIMARY KEY (CONS_SIST_PLANCHADO),
CONSTRAINT SIS_RECU_SIST_PLAN_CODIGO UNIQUE (CODI_SIST_PLANCHADO),
CONSTRAINT SIS_RECU_SIST_PLAN_NOMBRE UNIQUE (NOMB_SIST_PLANCHADO));

/*  Table: SIS_RECU_SIST_PRESION, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_SIST_PRESION (CONS_SIST_PRESION INTEGER NOT NULL,
        CODI_SIST_PRESION VARCHAR(12) NOT NULL,
        NOMB_SIST_PRESION VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_SIST_PRESION_PK PRIMARY KEY (CONS_SIST_PRESION),
CONSTRAINT SIS_RECU_SIST_PRES_CODIGO UNIQUE (CODI_SIST_PRESION),
CONSTRAINT SIS_RECU_SIST_PRES_NOMBRE UNIQUE (NOMB_SIST_PRESION));

/*  Table: SIS_RECU_TIPO_BRAZO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_TIPO_BRAZO (CONS_TIPO_BRAZO INTEGER NOT NULL,
        CODI_TIPO_BRAZO VARCHAR(12) NOT NULL,
        NOMB_TIPO_BRAZO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_TIPO_BRAZO_PK PRIMARY KEY (CONS_TIPO_BRAZO),
CONSTRAINT SIS_RECU_TIPO_BRAZ_CODIGO UNIQUE (CODI_TIPO_BRAZO),
CONSTRAINT SIS_RECU_TIPO_BRAZ_NOMBRE UNIQUE (NOMB_TIPO_BRAZO));

/*  Table: SIS_RECU_TIPO_EXTENDIDO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_TIPO_EXTENDIDO (CONS_RECU_TIPO_EXTENDIDO INTEGER NOT NULL,
        CODI_RECU_TIPO_EXTENDIDO VARCHAR(12) NOT NULL,
        NOMB_RECU_TIPO_EXTENDIDO VARCHAR(60) NOT NULL,
        FECH_CREACION DOM_FECH_SISTEMA,
        USUA_CREACION DOM_USUA_SISTEMA,
CONSTRAINT SIS_RECU_TIPO_EXTENDIDO_PK PRIMARY KEY (CONS_RECU_TIPO_EXTENDIDO),
CONSTRAINT SIS_RECU_TIPO_EXTENDIDO_CODIGO UNIQUE (CODI_RECU_TIPO_EXTENDIDO),
CONSTRAINT SIS_RECU_TIPO_EXTENDIDO_NOMBRE UNIQUE (NOMB_RECU_TIPO_EXTENDIDO));

/*  Table: SIS_RECU_TIPO_FUSIONADO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_TIPO_FUSIONADO (CONS_TIPO_FUSIONADO INTEGER NOT NULL,
        CODI_TIPO_FUSIONADO VARCHAR(12) NOT NULL,
        NOMB_TIPO_FUSIONADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_TIPO_FUSIONADO_PK PRIMARY KEY (CONS_TIPO_FUSIONADO),
CONSTRAINT SIS_RECU_TIPO_FUSI_CODIGO UNIQUE (CODI_TIPO_FUSIONADO),
CONSTRAINT SIS_RECU_TIPO_FUSI_NOMBRE UNIQUE (NOMB_TIPO_FUSIONADO));

/*  Table: SIS_RECU_TIPO_PLANCHADO, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_TIPO_PLANCHADO (CONS_TIPO_PLANCHADO INTEGER NOT NULL,
        CODI_TIPO_PLANCHADO VARCHAR(12) NOT NULL,
        NOMB_TIPO_PLANCHADO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_TIPO_PLANCHADO_PK PRIMARY KEY (CONS_TIPO_PLANCHADO),
CONSTRAINT SIS_RECU_TIPO_PLAN_CODIGO UNIQUE (CODI_TIPO_PLANCHADO),
CONSTRAINT SIS_RECU_TIPO_PLAN_NOMBRE UNIQUE (NOMB_TIPO_PLANCHADO));

/*  Table: SIS_RECU_TIPO_PRENSA, Owner: SYSDBA  */
CREATE TABLE SIS_RECU_TIPO_PRENSA (CONS_TIPO_PRENSA INTEGER NOT NULL,
        CODI_TIPO_PRENSA VARCHAR(12) NOT NULL,
        NOMB_TIPO_PRENSA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_RECU_TIPO_PRENSA_PK PRIMARY KEY (CONS_TIPO_PRENSA),
CONSTRAINT SIS_RECU_TIPO_PREN_CODIGO UNIQUE (CODI_TIPO_PRENSA),
CONSTRAINT SIS_RECU_TIPO_PREN_NOMBRE UNIQUE (NOMB_TIPO_PRENSA));

/*  Table: SIS_REFE_TIPO_FICHA, Owner: SYSDBA  */
CREATE TABLE SIS_REFE_TIPO_FICHA (CONS_REFE_TIPO_FICHA INTEGER NOT NULL,
        NOMB_REFE_TIPO_FICHA VARCHAR(60) NOT NULL,
        ANULADA DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_SIS_REFE_TIPO_FICHA PRIMARY KEY (CONS_REFE_TIPO_FICHA),
CONSTRAINT SIS_REFE_TIPO_FICHA_UNQ_NOMBRE UNIQUE (NOMB_REFE_TIPO_FICHA));

/*  Table: SIS_SEXOS, Owner: SYSDBA  */
CREATE TABLE SIS_SEXOS (CONS_SEXO INTEGER NOT NULL,
        CODI_SEXO VARCHAR(12) NOT NULL,
        NOMB_SEXO VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_SEXOS_PK PRIMARY KEY (CONS_SEXO),
CONSTRAINT SIS_SEXOS_CODIGO UNIQUE (CODI_SEXO),
CONSTRAINT SIS_SEXOS_NOMBRE UNIQUE (NOMB_SEXO));

/*  Table: SIS_TABL_AUXILIARES, Owner: SYSDBA  */
CREATE TABLE SIS_TABL_AUXILIARES (CONS_TABL_AUXILIAR INTEGER NOT NULL,
        CODI_TABL_AUXILIAR VARCHAR(12) NOT NULL,
        NOMB_TABL_AUXILIAR VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_SIS_TABL_AUXILIARES PRIMARY KEY (CONS_TABL_AUXILIAR),
CONSTRAINT SIS_TABL_AUXI_CODIGO UNIQUE (CODI_TABL_AUXILIAR),
CONSTRAINT SIS_TABL_AUXI_NOMBRE UNIQUE (NOMB_TABL_AUXILIAR));

/*  Table: SIS_TABL_AUXI_DETALLE, Owner: SYSDBA  */
CREATE TABLE SIS_TABL_AUXI_DETALLE (CONS_TABL_AUXI_DETALLE INTEGER NOT NULL,
        CONS_TABL_AUXILIAR INTEGER NOT NULL,
        TEXT_TABL_AUXI_DETALLE VARCHAR(60) NOT NULL,
        ADIC_VARC VARCHAR(60),
        ADIC_INTE INTEGER,
        ADIC_REAL DOM_REAL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT PK_SIS_TABL_AUXI_DETALLE PRIMARY KEY (CONS_TABL_AUXI_DETALLE));

/*  Table: SIS_TERC_ORIGEN, Owner: SYSDBA  */
CREATE TABLE SIS_TERC_ORIGEN (CONS_ORIGEN INTEGER NOT NULL,
        CODI_ORIGEN VARCHAR(12) NOT NULL,
        NOMB_ORIGEN VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_TERC_ORIGEN_PK PRIMARY KEY (CONS_ORIGEN),
CONSTRAINT UK_SIS_TERC_ORIG_CODIGO UNIQUE (CODI_ORIGEN),
CONSTRAINT UK_SIS_TERC_ORIG_NOMBRE UNIQUE (NOMB_ORIGEN));

/*  Table: SIS_TIPO_LENGUAJE, Owner: SYSDBA  */
CREATE TABLE SIS_TIPO_LENGUAJE (CONS_TIPO_LENGUAJE INTEGER NOT NULL,
        CODI_TIPO_LENGUAJE VARCHAR(12) NOT NULL,
        NOMB_TIPO_LENGUAJE VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_TIPO_LENGUAJE_PK PRIMARY KEY (CONS_TIPO_LENGUAJE));

/*  Table: SIS_TIPO_TERCERO, Owner: SYSDBA  */
CREATE TABLE SIS_TIPO_TERCERO (CONS_TIPO_TERCERO INTEGER NOT NULL,
        CODI_TIPO_TERCERO VARCHAR(12) NOT NULL,
        NOMB_TIPO_TERCERO VARCHAR(120) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_TIPO_TERCERO_PK PRIMARY KEY (CONS_TIPO_TERCERO),
CONSTRAINT UK_SIS_TIPO_TERC_CODIGO UNIQUE (CODI_TIPO_TERCERO),
CONSTRAINT UK_SIS_TIPO_TERC_NOMBRE UNIQUE (NOMB_TIPO_TERCERO));

/*  Table: SIS_TIPO_UNID_MEDIDA, Owner: SYSDBA  */
CREATE TABLE SIS_TIPO_UNID_MEDIDA (CONS_TIPO_UNID_MEDIDA INTEGER NOT NULL,
        CODI_TIPO_UNID_MEDIDA VARCHAR(12) NOT NULL,
        NOMB_TIPO_UNID_MEDIDA VARCHAR(60) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_TIPO_UNID_MEDIDA_PK PRIMARY KEY (CONS_TIPO_UNID_MEDIDA),
CONSTRAINT UK_SIS_TIPO_UNID_MEDI_CODIGO UNIQUE (CODI_TIPO_UNID_MEDIDA),
CONSTRAINT UK_SIS_TIPO_UNID_MEDI_NOMBRE UNIQUE (NOMB_TIPO_UNID_MEDIDA));

/*  Table: SIS_TRADUCCION, Owner: SYSDBA  */
CREATE TABLE SIS_TRADUCCION (CONS_TRADUCCION INTEGER NOT NULL,
        CONS_FRASE INTEGER NOT NULL,
        CONS_TIPO_LENGUAJE INTEGER NOT NULL,
        TRADUCCION VARCHAR(240) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_TRADUCCION_PK PRIMARY KEY (CONS_TRADUCCION));

/*  Table: SIS_UBIC_TIPOS, Owner: SYSDBA  */
CREATE TABLE SIS_UBIC_TIPOS (CONS_UBIC_TIPO INTEGER NOT NULL,
        CODI_UBIC_TIPO VARCHAR(12) NOT NULL,
        NOMB_UBIC_TIPO VARCHAR(60) NOT NULL,
        VER_EMPRESA DOM_LOGICO NOT NULL,
        VER_PLANTA DOM_LOGICO NOT NULL,
        VER_BODEGA DOM_LOGICO NOT NULL,
        VER_OTRA_UBICACION DOM_LOGICO NOT NULL,
CONSTRAINT SIS_UBIC_TIPOS_PK PRIMARY KEY (CONS_UBIC_TIPO),
CONSTRAINT SIS_UBIC_TIPOS_CODIGO UNIQUE (CODI_UBIC_TIPO),
CONSTRAINT SIS_UBIC_TIPOS_NOMBRE UNIQUE (NOMB_UBIC_TIPO));

/*  Table: SIS_UNID_MEDI_TIEMPO, Owner: SYSDBA  */
CREATE TABLE SIS_UNID_MEDI_TIEMPO (CONS_UNID_MEDI_TIEMPO INTEGER NOT NULL,
        CODI_UNID_MEDI_TIEMPO VARCHAR(12) NOT NULL,
        NOMB_UNID_MEDI_TIEMPO VARCHAR(60) NOT NULL,
        DURA_DIAS DOM_REAL_POSITIVO NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_UNID_MEDI_TIEMPO_PK PRIMARY KEY (CONS_UNID_MEDI_TIEMPO),
CONSTRAINT SIS_UNID_MEDI_TIEMPO_CODIGO UNIQUE (CODI_UNID_MEDI_TIEMPO),
CONSTRAINT SIS_UNID_MEDI_TIEMPO_DURACION UNIQUE (DURA_DIAS),
CONSTRAINT SIS_UNID_MEDI_TIEMPO_NOMBRE UNIQUE (NOMB_UNID_MEDI_TIEMPO));

/*  Table: SIS_USUA_INFORMES, Owner: SYSDBA  */
CREATE TABLE SIS_USUA_INFORMES (CONS_USUA_INFORME INTEGER NOT NULL,
        CONS_USUA_MODULO INTEGER NOT NULL,
        IDEN_VENTANA DOM_ENTE_POSITIVO  DEFAULT 0 NOT NULL,
        NOMB_USUA_INFORME VARCHAR(100) NOT NULL,
        CONTROLES BLOB SUB_TYPE TEXT SEGMENT SIZE 80 NOT NULL,
        ORDE_1 VARCHAR(60),
        ORDE_ASCE_1 DOM_LOGICO  DEFAULT 1 NOT NULL,
        ORDE_2 VARCHAR(60),
        ORDE_ASCE_2 DOM_LOGICO  DEFAULT 1 NOT NULL,
        ORDE_3 VARCHAR(60),
        ORDE_ASCE_3 DOM_LOGICO  DEFAULT 1 NOT NULL,
        ORDE_EJECUCION DOM_LOGICO  DEFAULT -1 NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_USUA_INFORMES_PK PRIMARY KEY (CONS_USUA_INFORME));

/*  Table: SIS_USUA_MODULOS, Owner: SYSDBA  */
CREATE TABLE SIS_USUA_MODULOS (CONS_USUA_MODULO INTEGER NOT NULL,
        USUARIO VARCHAR(20) NOT NULL,
        MODULO VARCHAR(100) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_USUA_MODULOS_PK PRIMARY KEY (CONS_USUA_MODULO),
CONSTRAINT SIS_USUA_MODU_UNICO UNIQUE (USUARIO, MODULO));

/*  Table: SIS_USUA_OPCIONES, Owner: SYSDBA  */
CREATE TABLE SIS_USUA_OPCIONES (CONS_USUA_OPCION INTEGER NOT NULL,
        CONS_USUA_MODULO INTEGER NOT NULL,
        OPCION VARCHAR(100) NOT NULL,
        FECH_SISTEMA DOM_FECH_SISTEMA NOT NULL,
        USUA_SISTEMA DOM_USUA_SISTEMA NOT NULL,
CONSTRAINT SIS_USUA_OPCIONES_PK PRIMARY KEY (CONS_USUA_OPCION),
CONSTRAINT SIS_USUA_OPCI_UNICO UNIQUE (CONS_USUA_MODULO, OPCION));

/*   Index definitions for all user tables  */
CREATE INDEX C08_CPSI_BATCH_IDX1 ON C008$BATCH (ISD, BATCH);
CREATE INDEX C08_CPSI_CONTRACT_IDX1 ON C008$CONTRACT (CONTRACT);
CREATE INDEX C08_CPSI_CONTRACT_IDX2 ON C008$CONTRACT (LOCATION, CONTRACT, PRODUCT);
CREATE INDEX C08_CPSI_CONTRACT_IDX3 ON C008$CONTRACT (PRODUCT);
CREATE INDEX C08_CPSI_CONTRATOS_IDX1 ON C008$CONTRATOS (COD_REFERENCIA, COD_LAVADO);
CREATE INDEX C08_CPSI_CONTRATOS_IDX2 ON C008$CONTRATOS (ISD_PRIMERAS);
CREATE INDEX C08_CPSI_CONTRATOS_IDX3 ON C008$CONTRATOS (ISD_SEGUNDAS);
CREATE INDEX C08_CPSI_COR_SIZE ON C008$COR_SIZE (COR_I, LOTE, WAIST, LENGT_);
CREATE INDEX C08_CPSI_DC_IDX1 ON C008$DC (SHIPSECONDS);
CREATE DESCENDING INDEX C08_CPSI_NEW_BATCH_IDX1 ON C008$NEWBATCH (BATCH);
CREATE INDEX C08_CPSI_PESOS_IDX1 ON C008$PESOS (LESTILOS, LLAVADOS);
CREATE INDEX C08_CPSI_TAG_LEVIS_IDX1 ON C008$TAG_LEVIS (NUM_CONTRATO, QUALITY);
CREATE INDEX C08_CPSI_TAG_LEVIS_IDX2 ON C008$TAG_LEVIS (NUM_CONTRATO, TALLA, ENTREPIERNA);
CREATE INDEX C08_CPSI_TAG_LEVIS_IDX3 ON C008$TAG_LEVIS (BATCH, TALLA, ENTREPIERNA);
CREATE INDEX C08_CPSI_TAG_LEVIS_IDX4 ON C008$TAG_LEVIS (NUM_CONTRATO, DESCARGADO);
CREATE INDEX C08_GP_PROYECTOS_IDX1 ON C08_GP_PROYECTOS (PAPROJNUMBER, FECH_SISTEMA, TIPO_MOVIMIENTO);
CREATE INDEX C08_GP_PROYECTOS_IDX2 ON C08_GP_PROYECTOS (EJECUTADO, PAPROJNUMBER);
CREATE INDEX C08_MIDA_NVD_PCP_IDX1 ON C08_MIDA_NVD_PCP (EMPLEADO, FECHA);
CREATE INDEX C08_MIDA_NVD_PCP_IDX2 ON C08_MIDA_NVD_PCP (FECHA, EMPLEADO);
CREATE INDEX C08_MIDA_NVD_PCP_IDX3 ON C08_MIDA_NVD_PCP (EJECUTADO, CONS_MIDA_NVD_PCP);
CREATE INDEX C08_MIDA_PERSONAL_IDX1 ON C08_MIDA_PERSONAL (EJECUTADO);
CREATE INDEX C08_MIDA_PERSONAL_IDX2 ON C08_MIDA_PERSONAL (FECH_MOVIMIENTO);
CREATE INDEX C08_MIDA_PERSONAL_IDX3 ON C08_MIDA_PERSONAL (CODI_PERSONAL, FECH_MOVIMIENTO);
CREATE INDEX C08_MIDA_PERSONAL_IDX4 ON C08_MIDA_PERSONAL (TIPO_MOVIMIENTO, FECH_MOVIMIENTO, CODI_PERSONAL);
CREATE INDEX C08_MIDA_PERS_NOVEDADES_IDX1 ON C08_MIDA_PERS_NOVEDADES (FECHA, CODI_PERSONAL, EJECUTADO);
CREATE INDEX C08_MIDA_PERS_NOVEDADES_IDX2 ON C08_MIDA_PERS_NOVEDADES (CODI_PERSONAL, FECHA, EJECUTADO);
CREATE DESCENDING INDEX C08_MIDA_PERS_SALARIO_IDX1 ON C08_MIDA_PERS_SALARIO (CODI_PERSONAL, FECH_MOVIMIENTO);
CREATE INDEX GLO_COLORES_IDX_ENTREPIERNA1 ON GLO_COLORES (ES_ENTREPIERNA, CONS_COLOR);
CREATE INDEX GLO_COLORES_IDX_ENTREPIERNA2 ON GLO_COLORES (ES_ENTREPIERNA, NOMB_COLOR);
CREATE INDEX GLO_COME_VENDEDORES_IDEN_VENDED ON GLO_COME_VENDEDORES (IDEN_COME_VENDEDOR);
CREATE INDEX GLO_HERR_IMAG_CATEGORIAS_IDX1 ON GLO_HERR_IMAG_CATEGORIAS (CONS_HERR_IMAG_CATALOGO, CONS_HERR_IMAG_CATEGORIA);
CREATE INDEX GLO_LINE_SECC_IDX_TIPO_SECCION ON GLO_LINE_SECCIONES (TIPO_SECCION, CONS_PLAN_LINEA, CONS_SECCION, CONS_LINE_SECCION);
CREATE INDEX GLO_PERSONAL_IDX_APELLIDOS ON GLO_PERSONAL (PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES);
CREATE INDEX GLO_PERSONAL_IDX_NOMBRES ON GLO_PERSONAL (NOMBRES, PRIM_APELLIDO, SEGU_APELLIDO);
CREATE INDEX GLO_PERS_FORM_IDENTIFICACI_IDX1 ON GLO_PERS_FORM_IDENTIFICACION (ACTIVO, CONS_PERS_FORM_IDENTIFICACION);
CREATE INDEX GLO_PERS_MOVIMIENTOS_IDX1 ON GLO_PERS_MOVIMIENTOS (CONS_PERSONAL, FECH_INICIAL, FECH_FINAL);
CREATE DESCENDING INDEX GLO_PERS_MOVIMIENTOS_IDX2 ON GLO_PERS_MOVIMIENTOS (CONS_PERS_MOVIMIENTO);
CREATE INDEX GLO_PLANTAS_IDX_TIPO_PLANTA ON GLO_PLANTAS (TIPO_PLANTA, NOMB_PLANTA);
CREATE INDEX GLO_REFERENCIAS_IDX1 ON GLO_REFERENCIAS (ES_PROTOTIPO, CONS_REFERENCIA);
CREATE INDEX GLO_REFE_CAMB_ESTADO_IDX1 ON GLO_REFE_CAMB_ESTADO (CONS_REFERENCIA, CONS_REFE_CAMB_ESTADO);
CREATE INDEX PCP_FILT_USUARIO_IDX1 ON PCP$FILT_USUARIO (USUARIO, TAG_FILTRO, INTE_FILTRO);
CREATE INDEX PCP_FILT_USUARIO_IDX2 ON PCP$FILT_USUARIO (USUARIO, TAG_FILTRO, VARC_FILTRO);
CREATE INDEX PCP_CALI_DEFECTOS_IDX1 ON PCP_CALI_DEFECTOS (ESTA_ACTIVO, NOMB_CALI_DEFECTO);
CREATE INDEX PCP_CALI_DEFECTOS_IDX2 ON PCP_CALI_DEFECTOS (ESTA_ACTIVO, CODI_CALI_DEFECTO);
CREATE INDEX PCP_CONF_MENU_ADIC_IDX1 ON PCP_CONF_MENU_ADICIONALES (ACTIVO, CONS_CONF_MENU_ADICIONAL);
CREATE INDEX PCP_CONT_NOVE_ABONADOS_IDX1 ON PCP_CONT_NOVE_ABONADOS (CONS_PROD_ORDEN, CONS_CONT_NOVE_DIARIA);
CREATE INDEX PCP_CONT_NOVE_ABONADOS_IDX2 ON PCP_CONT_NOVE_ABONADOS (CONS_ABONADO, CONS_CONT_NOVE_DIARIA, CONS_PROD_ORDEN);
CREATE INDEX PCP_CONT_NOVE_DEFE_FABR_IDX1 ON PCP_CONT_NOVE_DEFE_FABRICACION (FECH_DEFECTO);
CREATE INDEX PCP_CONT_NOVE_DIARIAS_IDX1 ON PCP_CONT_NOVE_DIARIAS (FECH_LECTURA, CONS_EMPRESA, CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION, CONS_TURNO);
CREATE INDEX PCP_CONT_NOVE_HORA_EXTR_IDX1 ON PCP_CONT_NOVE_HORA_EXTRAS (CONS_PROD_ORDEN, CONS_CONT_NOVE_DIARIA);
CREATE INDEX PCP_CONT_NOVE_HORA_EXTR_IDX2 ON PCP_CONT_NOVE_HORA_EXTRAS (CONS_HORA_EXTRA, CONS_CONT_NOVE_DIARIA);
CREATE INDEX PCP_CONT_NOVE_IMPR_IDX1 ON PCP_CONT_NOVE_IMPRODUCTIVOS (CONS_CONT_NOVE_DIARIA, CONS_IMPRODUCTIVO);
CREATE INDEX PCP_CONT_NOVE_IMPR_IDX2 ON PCP_CONT_NOVE_IMPRODUCTIVOS (CONS_PROD_ORDEN, CONS_IMPRODUCTIVO, CONS_SUB_IMPRODUCTIVO);
CREATE INDEX PCP_CONT_NOVE_IMPR_IDX3 ON PCP_CONT_NOVE_IMPRODUCTIVOS (CONS_IMPRODUCTIVO, CONS_SUB_IMPRODUCTIVO);
CREATE INDEX PCP_CONT_NOVE_TIQU_CORTE_IDX1 ON PCP_CONT_NOVE_TIQU_CORTE (CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_REFE_MATERIAL, NUME_PAQUETE, SECU_OPERACION);
CREATE INDEX PCP_CONT_NOVE_TIQU_CORTE_IDX2 ON PCP_CONT_NOVE_TIQU_CORTE (CONS_PROD_LOTE, CONS_REFE_MATERIAL, NUME_PAQUETE, SECU_OPERACION);
CREATE INDEX PCP_CONT_NOVE_TIQU_FABR_IDX1 ON PCP_CONT_NOVE_TIQU_FABRICACION (CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_PROD_PAQU_TIPO, NUME_PAQUETE, CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR);
CREATE INDEX PCP_CONT_NOVE_TIQU_FABR_IDX2 ON PCP_CONT_NOVE_TIQU_FABRICACION (CONS_PROD_LOTE, NUME_PAQUETE, CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR, SECU_OPERACION);
CREATE INDEX PCP_CONT_NOVE_TIQU_FABR_IDX3 ON PCP_CONT_NOVE_TIQU_FABRICACION (CONS_PROD_ORDEN, NUME_PAQUETE, SECU_OPERACION);
CREATE INDEX PCP_CONT_NOVE_TIQU_FABR_IDX4 ON PCP_CONT_NOVE_TIQU_FABRICACION (CODI_BARRAS);
CREATE UNIQUE DESCENDING INDEX PCP_CONT_NOVE_TIQU_FABR_IDXD ON PCP_CONT_NOVE_TIQU_FABRICACION (CONS_CONT_NOVE_TIQU_FABRICACION);
CREATE UNIQUE INDEX PCP_FORM_PAGO_IDX1 ON PCP_FORM_PAGO (CONS_EMPRESA, CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION, CONS_TURNO);
CREATE INDEX PCP_FORM_PAGO_DIFERENCIAL_IDX1 ON PCP_FORM_PAGO_DIFERENCIAL (ESTA_ACTIVO);
CREATE INDEX PCP_FORM_PAGO_DIFE_DETALLE_IDX1 ON PCP_FORM_PAGO_DIFE_DETALLE (RANG_INICIAL);
CREATE INDEX PCP_FORM_PAGO_DIVIDIDO_IDX1 ON PCP_FORM_PAGO_DIVIDIDO (ESTA_ACTIVO);
CREATE UNIQUE INDEX PCP_INSU_REFERENCIAS_UNIQUE ON PCP_INSU_REFERENCIAS (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO, CONS_INSU_REFERENCIA);
CREATE UNIQUE INDEX PCP_INVE_INSU_ENTR_ITEMS_UNIQUE ON PCP_INVE_INSU_ENTR_ITEMS (CONS_INVE_INSU_ENTRADA, CONS_INVE_INSU_ENTR_ITEM);
CREATE UNIQUE INDEX PCP_INVE_MATE_ENTR_ITEMS_UNIQUE ON PCP_INVE_MATE_ENTR_ITEMS (CONS_INVE_MATE_ENTRADA, CONS_INVE_MATE_ENTR_ITEM);
CREATE UNIQUE INDEX PCP_MATE_REFERENCIAS_UNIQUE ON PCP_MATE_REFERENCIAS (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO, CONS_MATE_REFERENCIA);
CREATE INDEX PCP_OPER_COSTURA_IDX1 ON PCP_OPER_COSTURA (CONS_PROCESO, CONS_OPER_COST_TIPO, CONS_COMP_GRUPO);
CREATE INDEX PCP_OPER_COSTURA_HISTORIAL ON PCP_OPER_COST_HISTORIAL (CONS_OPER_COSTURA, CONS_ANOTACION);
CREATE INDEX PCP_PLAN_CAPACIDAD_IDX1 ON PCP_PLAN_CAPACIDAD (CONS_PLAN_LINEA, FECH_INICIAL, FECH_FINAL);
CREATE INDEX PCP_PLAN_RUTAS_IDX1 ON PCP_PLAN_RUTAS (CONS_REFE_ESTILO, ESTA_ACTIVA);
CREATE UNIQUE INDEX PCP_PROD_ORDE_RESPONSABLES_IDX1 ON PCP_PROD_ORDE_RESPONSABLES (CONS_PROD_LOTE, CONS_PROCESO);
CREATE INDEX PCP_PROD_ORDE_RESPONSABLES_IDX2 ON PCP_PROD_ORDE_RESPONSABLES (CONS_PROD_LOTE, HECHO, FECH_SISTEMA);
CREATE INDEX PCP_PROD_ORDE_RESPONSABLES_IDX3 ON PCP_PROD_ORDE_RESPONSABLES (HECHO, CONS_PROD_LOTE);
CREATE INDEX PCP_PROG_PRODUCCION_IDX1 ON PCP_PROG_PRODUCCION (ESTA_PROGRAMADO, FECH_EJEC_INICIAL);
CREATE INDEX PCP_PROG_PRODUCCION_IDX2 ON PCP_PROG_PRODUCCION (ESTA_PROGRAMADO, ES_MOVIL);
CREATE INDEX PCP_PROG_PRODUCCION_IDX3 ON PCP_PROG_PRODUCCION (ESTA_PROGRAMADO, CONS_EMPRESA, CONS_PLANTA, CONS_PLAN_LINEA, CONS_TURNO, FECH_EJEC_INICIAL);
CREATE UNIQUE INDEX PCP_PROG_PRODUCCION_IDX4 ON PCP_PROG_PRODUCCION (CONS_PROD_LOTE);
CREATE INDEX PCP_PROG_PROD_OPERACIONES_IDX1 ON PCP_PROG_PROD_OPERACIONES (CONS_PROG_PRODUCCION, SECU_GRUP_PROGRAMACION);
CREATE INDEX PCP_REFE_INSUMOS_IDX1 ON PCP_REFE_INSUMOS (CONS_REFE_VARIACION, ES_FABRICACION, CONS_REFE_INSUMO);
CREATE INDEX PCP_REFE_MATERIALES_IDX1 ON PCP_REFE_MATERIALES (CONS_REFE_VARIACION, ES_PRINCIPAL, CONS_REFE_MATERIAL);
CREATE INDEX PCP_REFE_MATERIALES_IDX2 ON PCP_REFE_MATERIALES (CONS_REFE_MATERIAL, ES_MATE_BASICO);
CREATE INDEX SIS_PCP_FORM_PAGO_IDX1 ON SIS_PCP_FORM_PAGO (ESTA_ACTIVA);
CREATE INDEX SIS_PCP_LOG_IDX1 ON SIS_PCP_LOG (FECH_SISTEMA, NOMB_MODU_MENSAJE, TIPO_MENSAJE);
CREATE INDEX SIS_PCP_LOG_IDX2 ON SIS_PCP_LOG (NOMB_MODU_MENSAJE, FECH_SISTEMA, TIPO_MENSAJE);
CREATE INDEX SIS_PCP_LOG_IDX3 ON SIS_PCP_LOG (TIPO_MENSAJE, FECH_SISTEMA, NOMB_MODU_MENSAJE);
CREATE INDEX SIS_PCP_LOG_IDX4 ON SIS_PCP_LOG (TIPO_MENSAJE, NOMB_MODU_MENSAJE, FECH_SISTEMA);
CREATE INDEX SIS_PCP_ORDENAR_IDX1 ON SIS_PCP_ORDENAR (NOMB_MODULO, NOMB_CAMPO);
CREATE INDEX SIS_USUA_INFORMES_IDX_IDEN_VENT ON SIS_USUA_INFORMES (IDEN_VENTANA);

ALTER TABLE C008$ISD_CMTS ADD CONSTRAINT FK_C008$ISD_CMTS FOREIGN KEY (ISD) REFERENCES C008$ISD (ISD) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE C008$ISD_DTL ADD CONSTRAINT FK_C008$ISD_DTL FOREIGN KEY (ISD) REFERENCES C008$ISD (ISD) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE C008$ISD_SUM ADD CONSTRAINT FK_C008$ISD_SUM FOREIGN KEY (ISD) REFERENCES C008$ISD (ISD) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE C08_GP_PACOSTOSPROYECTO ADD CONSTRAINT C08_GP_PACOSTOSPROYECTO_PAPROYE FOREIGN KEY (PAPROJNUMBER) REFERENCES C08_GP_PAPROYECTO (PAPROJNUMBER) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE C08_GP_PACOSTOSPROYECTO ADD CONSTRAINT C08_GP_PACOSTOSPROY_PACOSTOSITE FOREIGN KEY (PACOSTCATID) REFERENCES C08_GP_PACOSTCAT (PACOSTCATID) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE C08_GP_PAITEMS ADD CONSTRAINT C08_GP_PAITEMS_PACOSTOSPROYECTO FOREIGN KEY (PAPROJNUMBER, PACOSTCATID) REFERENCES C08_GP_PACOSTOSPROYECTO (PAPROJNUMBER, PACOSTCATID) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE C08_GP_PAPROYECTO ADD CONSTRAINT C08_GP_PAPROYECTO_PACONTRATO FOREIGN KEY (PACONTNUMBER) REFERENCES C08_GP_PACONTRATO (PACONTNUMBER) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE C08_MIDA_EQUI_CENT_COSTOS ADD CONSTRAINT C08_MIDA_EQUI_CENT_COST_FK_LINE FOREIGN KEY (CONS_LINE_SECCION) REFERENCES GLO_LINE_SECCIONES (CONS_LINE_SECCION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCESORIOS ADD CONSTRAINT GLO_ACCE_MARCA FOREIGN KEY (CONS_RECU_MARCA) REFERENCES GLO_RECU_MARCAS (CONS_RECU_MARCA) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCESORIOS ADD CONSTRAINT GLO_ACCE_TIPO FOREIGN KEY (CONS_ACCE_TIPO, CONS_ACCE_GRUPO) REFERENCES GLO_ACCE_TIPOS (CONS_ACCE_TIPO, CONS_ACCE_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_CARACTERISTICAS ADD CONSTRAINT GLO_ACCE_CARA_ACCESORIO FOREIGN KEY (CONS_ACCESORIO) REFERENCES GLO_ACCESORIOS (CONS_ACCESORIO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCE_CARACTERISTICAS ADD CONSTRAINT GLO_ACCE_CARA_TIPO_CARACTERISTI FOREIGN KEY (CONS_ACCE_CARA_TIPO) REFERENCES GLO_ACCE_CARA_TIPOS (CONS_ACCE_CARA_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_CARA_TIPOS ADD CONSTRAINT GLO_ACCE_CARA_TIPO_ACCE_TIPO FOREIGN KEY (CONS_ACCE_TIPO) REFERENCES GLO_ACCE_TIPOS (CONS_ACCE_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_CARA_TIPOS ADD CONSTRAINT GLO_ACCE_CARA_TIPO_TIPO_CARACTE FOREIGN KEY (CONS_ACCE_TIPO_CARACTERISTICA) REFERENCES GLO_ACCE_TIPO_CARACTERISTICAS (CONS_ACCE_TIPO_CARACTERISTICA) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_MOVIMIENTOS ADD CONSTRAINT GLO_ACCE_MOVI_ACCESORIOS FOREIGN KEY (CONS_ACCESORIO) REFERENCES GLO_ACCESORIOS (CONS_ACCESORIO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCE_MOVIMIENTOS ADD CONSTRAINT GLO_ACCE_MOVI_ENTREGA FOREIGN KEY (CONS_ENTREGA) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_MOVIMIENTOS ADD CONSTRAINT GLO_ACCE_MOVI_RECIBE FOREIGN KEY (CONS_RECIBE) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_MOVIMIENTOS ADD CONSTRAINT GLO_ACCE_MOVI_SOLICITA FOREIGN KEY (CONS_SOLICITA) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_MOVIMIENTOS ADD CONSTRAINT GLO_ACCE_MOVI_TIPO_DOCUMENTO FOREIGN KEY (CONS_TIPO_DOCUMENTO) REFERENCES GLO_TIPO_DOCUMENTO (CONS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_MOVIMIENTOS ADD CONSTRAINT GLO_ACCE_MOVI_TIPO_MOVIMIENTO FOREIGN KEY (CONS_ACCE_TIPO_MOVIMIENTO) REFERENCES GLO_ACCE_TIPO_MOVIMIENTO (CONS_ACCE_TIPO_MOVIMIENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_MOVI_ANULADOS ADD CONSTRAINT GLO_ACCE_MOVI_ANUL_MOVIMIENTO FOREIGN KEY (CONS_ACCE_MOVIMIENTO) REFERENCES GLO_ACCE_MOVIMIENTOS (CONS_ACCE_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCE_MOVI_BAJAS ADD CONSTRAINT GLO_ACCE_MOVI_BAJA_MOVIMIENTO FOREIGN KEY (CONS_ACCE_MOVIMIENTO) REFERENCES GLO_ACCE_MOVIMIENTOS (CONS_ACCE_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCE_MOVI_TRASLADOS ADD CONSTRAINT GLO_ACCE_MOVI_TRAS_MOVIMIENTO FOREIGN KEY (CONS_ACCE_MOVIMIENTO) REFERENCES GLO_ACCE_MOVIMIENTOS (CONS_ACCE_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCE_MOVI_TRASLADOS ADD CONSTRAINT GLO_ACCE_MOVI_TRAS_RECURSO FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_MOVI_TRASLADOS ADD CONSTRAINT GLO_ACCE_MOVI_TRAS_UBICACION FOREIGN KEY (CONS_UBIC_TIPO) REFERENCES SIS_UBIC_TIPOS (CONS_UBIC_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_RECURSOS ADD CONSTRAINT GLO_ACCE_RECU_ACCESORIO FOREIGN KEY (CONS_ACCESORIO) REFERENCES GLO_ACCESORIOS (CONS_ACCESORIO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCE_RECURSOS ADD CONSTRAINT GLO_ACCE_RECU_FAMI_RECURSO FOREIGN KEY (CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_RECURSOS ADD CONSTRAINT GLO_ACCE_RECU_GRUP_RECURSO FOREIGN KEY (CONS_RECU_GRUPO) REFERENCES GLO_RECU_GRUPOS (CONS_RECU_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_RECURSOS ADD CONSTRAINT GLO_ACCE_RECU_MARC_RECURSO FOREIGN KEY (CONS_RECU_MARCA) REFERENCES GLO_RECU_MARCAS (CONS_RECU_MARCA) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_RECURSOS ADD CONSTRAINT GLO_ACCE_RECU_TIPO_RECURSO FOREIGN KEY (CONS_RECU_TIPO) REFERENCES GLO_RECU_TIPOS (CONS_RECU_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_ACCE_TIPOS ADD CONSTRAINT GLO_ACCE_TIPO_GRUPO FOREIGN KEY (CONS_ACCE_GRUPO) REFERENCES GLO_ACCE_GRUPOS (CONS_ACCE_GRUPO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_ACCE_TIPO_MOVIMIENTO ADD CONSTRAINT GLO_ACCE_TIPO_MOVI_FAMI_MOVIMIE FOREIGN KEY (CONS_FAMI_MOVIMIENTO) REFERENCES SIS_FAMI_MOVIMIENTO (CONS_FAMI_MOVIMIENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_BODEGAS ADD CONSTRAINT GLO_BODE_GLO_CIUDADES FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_BODEGAS ADD CONSTRAINT GLO_BODE_GLO_EMPRESAS FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE;

ALTER TABLE GLO_CIUDADES ADD CONSTRAINT GLO_CIUDADES_GLO_DEPARTAMENTOS FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO) REFERENCES GLO_DEPARTAMENTOS (CONS_PAIS, CONS_DEPARTAMENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_COLORES ADD CONSTRAINT GLO_COLORES_GLO_COLO_GRUPOS FOREIGN KEY (CONS_COLO_GRUPO) REFERENCES GLO_COLO_GRUPOS (CONS_COLO_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_COLORES ADD CONSTRAINT GLO_COLORES_GLO_COLO_SUBGRUPO FOREIGN KEY (CONS_COLO_SUBGRUPO) REFERENCES GLO_COLO_SUBGRUPOS (CONS_COLO_SUBGRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_COLORES ADD CONSTRAINT GLO_COLORES_GLO_COLO_TONOS FOREIGN KEY (CONS_COLO_TONO) REFERENCES GLO_COLO_TONOS (CONS_COLO_TONO);

ALTER TABLE GLO_COLO_SUBGRUPOS ADD CONSTRAINT GLO_COLO_SUBG_COLO_GRUPOS FOREIGN KEY (CONS_COLO_GRUPO) REFERENCES GLO_COLO_GRUPOS (CONS_COLO_GRUPO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_COME_COMP_ENVIO ADD CONSTRAINT GLO_COME_COMP_ENVI_CIUDAD FOREIGN KEY (CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_COME_COMP_ENVIO ADD CONSTRAINT GLO_COME_COMP_ENVI_DEPARTAMENTO FOREIGN KEY (CONS_DEPARTAMENTO) REFERENCES GLO_DEPARTAMENTOS (CONS_DEPARTAMENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_COME_COMP_ENVIO ADD CONSTRAINT GLO_COME_COMP_ENVI_PAIS FOREIGN KEY (CONS_PAIS) REFERENCES GLO_PAISES (CONS_PAIS) ON UPDATE CASCADE;

ALTER TABLE GLO_COME_COMP_ENVI_CONTACTOS ADD CONSTRAINT GLO_COME_COMP_ENVI_CONT_COMP_EN FOREIGN KEY (CONS_COMP_ENVIO) REFERENCES GLO_COME_COMP_ENVIO (CONS_COMP_ENVIO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_COME_COMP_ENVI_HISTORIAL ADD CONSTRAINT GLO_COME_COMP_ENVI_HISTO_COMP_E FOREIGN KEY (CONS_COMP_ENVIO) REFERENCES GLO_COME_COMP_ENVIO (CONS_COMP_ENVIO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_COME_VENDEDORES ADD CONSTRAINT GLO_COME_VENDEDORES_CIUDAD FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_COME_VEND_HISTORIAL ADD CONSTRAINT GLO_COME_VEND_HIST_VENDEDOR FOREIGN KEY (CONS_COME_VENDEDOR) REFERENCES GLO_COME_VENDEDORES (CONS_COME_VENDEDOR) ON UPDATE CASCADE;

ALTER TABLE GLO_COME_VEND_ZONAS ADD CONSTRAINT GLO_COME_VEND_ZONA_VENDEDOR FOREIGN KEY (CONS_COME_VENDEDOR) REFERENCES GLO_COME_VENDEDORES (CONS_COME_VENDEDOR) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_COME_VEND_ZONAS ADD CONSTRAINT GLO_COME_VEND_ZONA_ZONAS FOREIGN KEY (CONS_COME_ZONA) REFERENCES GLO_COME_ZONAS (CONS_COME_ZONA) ON UPDATE CASCADE;

ALTER TABLE GLO_COME_VEND_ZONAS ADD CONSTRAINT GLO_COME_VEND_ZONA_ZONA_DETALLE FOREIGN KEY (CONS_COME_ZONA_DETALLE) REFERENCES GLO_COME_ZONA_DETALLE (CONS_COME_ZONA_DETALLE) ON UPDATE CASCADE;

ALTER TABLE GLO_COME_ZONA_DETALLE ADD CONSTRAINT GLO_COME_ZONA_DETA_ZONA FOREIGN KEY (CONS_COME_ZONA) REFERENCES GLO_COME_ZONAS (CONS_COME_ZONA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_COST_GAST_COMERCIALES ADD CONSTRAINT GLO_COST_GAST_COMERCIALES_EMPRE FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_DEPARTAMENTOS ADD CONSTRAINT GLO_DEPARTAMENTOS_GLO_PAISES FOREIGN KEY (CONS_PAIS) REFERENCES GLO_PAISES (CONS_PAIS) ON UPDATE CASCADE;

ALTER TABLE GLO_EMPRESAS ADD CONSTRAINT GLO_EMPRESAS_GLO_CIUDADES FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_GRUP_TALL_DETALLE ADD CONSTRAINT GLO_GRUP_TALL_DETA_FK_GRUP_TALL FOREIGN KEY (CONS_GRUP_TALLAS) REFERENCES GLO_GRUP_TALLAS (CONS_GRUP_TALLAS) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_HERR_IMAGENES ADD CONSTRAINT GLO_HERR_IMAG_FK_IMAG_CATEGORIA FOREIGN KEY (CONS_HERR_IMAG_CATEGORIA) REFERENCES GLO_HERR_IMAG_CATEGORIAS (CONS_HERR_IMAG_CATEGORIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_HERR_IMAGENES ADD CONSTRAINT GLO_HERR_IMAG_FK_IMAG_VISTAS FOREIGN KEY (CONS_HERR_IMAG_VISTA) REFERENCES SIS_HERR_IMAG_VISTAS (CONS_HERR_IMAG_VISTA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_HERR_IMAGENES ADD CONSTRAINT GLO_HERR_IMAG_FK_REFE_ESTILOS FOREIGN KEY (CONS_REFE_ESTILO) REFERENCES GLO_REFE_ESTILOS (CONS_REFE_ESTILO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_HERR_IMAGENES ADD CONSTRAINT GLO_HERR_IMAG_FK_REFE_MARCAS FOREIGN KEY (CONS_REFE_MARCA) REFERENCES GLO_REFE_MARCAS (CONS_REFE_MARCA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_HERR_IMAGENES ADD CONSTRAINT GLO_HERR_IMAG_FK_REFE_TEMPORADA FOREIGN KEY (CONS_REFE_TEMPORADA) REFERENCES GLO_REFE_TEMPORADAS (CONS_REFE_TEMPORADA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_HERR_IMAG_CATEGORIAS ADD CONSTRAINT GLO_HERR_IMAG_CATE_FK_IMAG_CATA FOREIGN KEY (CONS_HERR_IMAG_CATALOGO) REFERENCES GLO_HERR_IMAG_CATALOGOS (CONS_HERR_IMAG_CATALOGO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_IMPRODUCTIVOS ADD CONSTRAINT GLO_IMPR_FAMIILIA FOREIGN KEY (CONS_IMPR_FAMILIA) REFERENCES SIS_IMPR_FAMILIAS (CONS_IMPR_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE GLO_INVE_UNIDADES ADD CONSTRAINT GLO_INV_UNIDADES_TIPO_MEDIDA FOREIGN KEY (CONS_TIPO_UNID_MEDIDA) REFERENCES SIS_TIPO_UNID_MEDIDA (CONS_TIPO_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE GLO_LINE_SECCIONES ADD CONSTRAINT GLO_LINE_SECC_PLAN_LINEA FOREIGN KEY (CONS_PLAN_LINEA) REFERENCES GLO_PLAN_LINEAS (CONS_PLAN_LINEA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_LINE_SECCIONES ADD CONSTRAINT GLO_LINE_SECC_SECCION FOREIGN KEY (CONS_SECCION) REFERENCES GLO_SECCIONES (CONS_SECCION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_MONE_TRM ADD CONSTRAINT GLO_MONE_TRM_FK FOREIGN KEY (CONS_MONEDA) REFERENCES GLO_MONEDAS (CONS_MONEDA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_FAMILIAR ADD CONSTRAINT GLO_PERS_FAMI_CIUDAD FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_FAMILIAR ADD CONSTRAINT GLO_PERS_FAMI_PARENTESCO FOREIGN KEY (CONS_PARENTESCO) REFERENCES SIS_PARENTESCOS (CONS_PARENTESCO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_FAMILIAR ADD CONSTRAINT GLO_PERS_FAMI_PERSONAL FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_FAMILIAR ADD CONSTRAINT GLO_PERS_FAMI_SEXO FOREIGN KEY (CONS_SEXO) REFERENCES SIS_SEXOS (CONS_SEXO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_FAMILIAR ADD CONSTRAINT GLO_PERS_FAMI_TIPO_DOCUMENTO FOREIGN KEY (CONS_PERS_TIPO_DOCUMENTO) REFERENCES SIS_PERS_TIPO_DOCUMENTO (CONS_PERS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_GENERAL ADD CONSTRAINT GLO_PERS_GENE_CIUD_NACIMIENTO FOREIGN KEY (CONS_PAIS_NACIMIENTO, CONS_DEPA_NACIMIENTO, CONS_CIUD_NACIMIENTO) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_GENERAL ADD CONSTRAINT GLO_PERS_GENE_CIUD_RESIDENCIA FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_GENERAL ADD CONSTRAINT GLO_PERS_GENE_ESTA_CIVIL FOREIGN KEY (CONS_ESTA_CIVIL) REFERENCES SIS_ESTA_CIVIL (CONS_ESTA_CIVIL) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_GENERAL ADD CONSTRAINT GLO_PERS_GENE_PERSONAL FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_GENERAL ADD CONSTRAINT GLO_PERS_GENE_SEXO FOREIGN KEY (CONS_SEXO) REFERENCES SIS_SEXOS (CONS_SEXO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_GENERAL ADD CONSTRAINT GLO_PERS_GENE_TIPO_DOCUMENTO FOREIGN KEY (CONS_PERS_TIPO_DOCUMENTO) REFERENCES SIS_PERS_TIPO_DOCUMENTO (CONS_PERS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_HISTORIAL ADD CONSTRAINT GLO_PERS_HIST_PERSONAL FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_MAQU_UTILIZADAS ADD CONSTRAINT GLO_PERS_MAQU_UTIL_FAMILIA FOREIGN KEY (CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MAQU_UTILIZADAS ADD CONSTRAINT GLO_PERS_MAQU_UTIL_GRAD_HABILID FOREIGN KEY (CONS_GRAD_HABILIDAD) REFERENCES SIS_GRAD_HABILIDAD (CONS_GRAD_HABILIDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MAQU_UTILIZADAS ADD CONSTRAINT GLO_PERS_MAQU_UTIL_GRUPO FOREIGN KEY (CONS_RECU_GRUPO) REFERENCES GLO_RECU_GRUPOS (CONS_RECU_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MAQU_UTILIZADAS ADD CONSTRAINT GLO_PERS_MAQU_UTIL_PERSONAL FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_MAQU_UTILIZADAS ADD CONSTRAINT GLO_PERS_MAQU_UTIL_TIPO FOREIGN KEY (CONS_RECU_TIPO) REFERENCES GLO_RECU_TIPOS (CONS_RECU_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVIMIENTOS ADD CONSTRAINT GLO_PERS_MOVI_APROBO FOREIGN KEY (CONS_APROBO) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVIMIENTOS ADD CONSTRAINT GLO_PERS_MOVI_PERSONAL FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_MOVIMIENTOS ADD CONSTRAINT GLO_PERS_MOVI_PERS_TIPO_MOVIMIE FOREIGN KEY (CONS_PERS_TIPO_MOVIMIENTO) REFERENCES GLO_PERS_TIPO_MOVIMIENTO (CONS_PERS_TIPO_MOVIMIENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVIMIENTOS ADD CONSTRAINT GLO_PERS_MOVI_SOLICITA FOREIGN KEY (CONS_SOLICITA) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVIMIENTOS ADD CONSTRAINT GLO_PERS_MOVI_TIPO_DOCUMENTO FOREIGN KEY (CONS_PERS_MOVI_TIPO_DOCUMENTO) REFERENCES GLO_PERS_MOVI_TIPO_DOCUMENTO (CONS_PERS_MOVI_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_ANULADOS ADD CONSTRAINT GLO_PERS_MOVI_ANUL_MOVIMIENTO FOREIGN KEY (CONS_PERS_MOVIMIENTO) REFERENCES GLO_PERS_MOVIMIENTOS (CONS_PERS_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_MOVI_ANULADOS ADD CONSTRAINT GLO_PERS_MOVI_ANUL_RESPONSABLE FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_CONFIDENCIAL ADD CONSTRAINT GLO_PERS_MOVI_CONF_MOVIMIENTOS FOREIGN KEY (CONS_PERS_MOVIMIENTO) REFERENCES GLO_PERS_MOVIMIENTOS (CONS_PERS_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_MOVI_CONFIDENCIAL ADD CONSTRAINT GLO_PERS_MOVI_CONF_NIVE_SALARIA FOREIGN KEY (CONS_PERS_NIVE_SALARIAL) REFERENCES GLO_PERS_NIVE_SALARIALES (CONS_PERS_NIVE_SALARIAL) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_CONFIDENCIAL ADD CONSTRAINT GLO_PERS_MOVI_CONF_PERI_PAGO FOREIGN KEY (CONS_PERI_PAGO) REFERENCES SIS_PERI_PAGO (CONS_PERI_PAGO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_CONFIDENCIAL ADD CONSTRAINT GLO_PERS_MOVI_CONF_TIPO_CONTRAT FOREIGN KEY (CONS_PERS_TIPO_CONTRATO) REFERENCES GLO_PERS_TIPO_CONTRATO (CONS_PERS_TIPO_CONTRATO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_AREA FOREIGN KEY (CONS_AREA) REFERENCES GLO_AREAS (CONS_AREA) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_BODEGA FOREIGN KEY (CONS_BODEGA) REFERENCES GLO_BODEGAS (CONS_BODEGA) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_CARGO FOREIGN KEY (CONS_PERS_CARGO) REFERENCES GLO_PERS_CARGOS (CONS_PERS_CARGO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_CENT_COSTO FOREIGN KEY (CONS_PERS_CENT_COSTO) REFERENCES GLO_PERS_CENT_COSTOS (CONS_PERS_CENT_COSTO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_COST_GRUPO FOREIGN KEY (CONS_COST_GRUPO) REFERENCES SIS_COST_GRUPOS (CONS_COST_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_EMPRESA FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_LINEA FOREIGN KEY (CONS_PLAN_LINEA) REFERENCES GLO_PLAN_LINEAS (CONS_PLAN_LINEA) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_MOVIMIENTO FOREIGN KEY (CONS_PERS_MOVIMIENTO) REFERENCES GLO_PERS_MOVIMIENTOS (CONS_PERS_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_PLANTA FOREIGN KEY (CONS_PLANTA) REFERENCES GLO_PLANTAS (CONS_PLANTA) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_SECCION FOREIGN KEY (CONS_LINE_SECCION) REFERENCES GLO_LINE_SECCIONES (CONS_LINE_SECCION) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_TURNO FOREIGN KEY (CONS_TURNO) REFERENCES GLO_TURNOS (CONS_TURNO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_MOVI_TRASLADOS ADD CONSTRAINT GLO_PERS_MOVI_TRAS_UBIC_TIPOS FOREIGN KEY (CONS_UBIC_TIPO) REFERENCES SIS_UBIC_TIPOS (CONS_UBIC_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_OPER_EJECUTADAS ADD CONSTRAINT GLO_PERS_OPER_EJEC_MAQU_UTILIZA FOREIGN KEY (CONS_PERS_MAQU_UTILIZADA) REFERENCES GLO_PERS_MAQU_UTILIZADAS (CONS_PERS_MAQU_UTILIZADA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_OPER_EJECUTADAS ADD CONSTRAINT GLO_PERS_OPER_EJEC_OPER_COST_TI FOREIGN KEY (CONS_OPER_COST_TIPO) REFERENCES PCP_OPER_COST_TIPOS (CONS_OPER_COST_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_OPER_EJECUTADAS ADD CONSTRAINT GLO_PERS_OPER_EJEC_RANG_EFICIEN FOREIGN KEY (CONS_RANG_EFICIENCIA) REFERENCES SIS_RANG_EFICIENCIA (CONS_RANG_EFICIENCIA) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_SISTEMA ADD CONSTRAINT GLO_PERS_SISTEMA_FK_GLO_PERSONA FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PERS_TIPO_CONTRATO ADD CONSTRAINT GLO_PERS_TIPO_CONT_UNID_MEDIDA FOREIGN KEY (CONS_UNID_MEDI_TIEMPO) REFERENCES SIS_UNID_MEDI_TIEMPO (CONS_UNID_MEDI_TIEMPO) ON UPDATE CASCADE;

ALTER TABLE GLO_PERS_TIPO_MOVIMIENTO ADD CONSTRAINT GLO_PER_TIPO_MOVI_FAMI_MOVIMIEN FOREIGN KEY (CONS_FAMI_MOVIMIENTO) REFERENCES SIS_FAMI_MOVIMIENTO (CONS_FAMI_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PLANTAS ADD CONSTRAINT GLO_PLANTAS_GLO_CUIDADES FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_PLANTAS ADD CONSTRAINT GLO_PLANTAS_GLO_EMPRESAS FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE;

ALTER TABLE GLO_PLAN_LINEAS ADD CONSTRAINT GLO_PLAN_LINEAS_LINEA FOREIGN KEY (CONS_LINEA) REFERENCES GLO_LINEAS (CONS_LINEA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_PLAN_LINEAS ADD CONSTRAINT GLO_PLAN_LINEAS_PLANTA FOREIGN KEY (CONS_PLANTA) REFERENCES GLO_PLANTAS (CONS_PLANTA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECURSOS ADD CONSTRAINT CONS_RECU_FAMILIA FOREIGN KEY (CONS_RECU_GRUPO, CONS_RECU_TIPO, CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_GRUPO, CONS_RECU_TIPO, CONS_RECU_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECURSOS ADD CONSTRAINT CONS_RECU_MARCA FOREIGN KEY (CONS_RECU_MARCA) REFERENCES GLO_RECU_MARCAS (CONS_RECU_MARCA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_CARACTERISTICAS ADD CONSTRAINT GLO_RECU_CARA_RECURSOS FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_CARACTERISTICAS ADD CONSTRAINT GLO_RECU_CARA_TIPO_CARACTER FOREIGN KEY (CONS_RECU_TIPO_CARACTERISTICA) REFERENCES GLO_RECU_TIPO_CARACTERISTICAS (CONS_RECU_TIPO_CARACTERISTICA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_CORTE ADD CONSTRAINT GLO_RECU_CORT_ACCIONAMIENTO FOREIGN KEY (CONS_ACCI_CORTE) REFERENCES SIS_RECU_ACCI_CORTE (CONS_ACCI_CORTE) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_CORTE ADD CONSTRAINT GLO_RECU_CORT_CUCHILLA FOREIGN KEY (CONS_CUCHILLA) REFERENCES SIS_RECU_CUCHILLA (CONS_CUCHILLA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_CORTE ADD CONSTRAINT GLO_RECU_CORT_RECURSO FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_COSTURA ADD CONSTRAINT GLO_RECU_COST_RECURSO FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_COSTURA ADD CONSTRAINT GLO_RECU_COST_TIPO_PUNTADA FOREIGN KEY (CONS_RECU_TIPO_PUNTADA) REFERENCES GLO_RECU_TIPO_PUNTADA (CONS_RECU_TIPO_PUNTADA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_EXTENDIDO ADD CONSTRAINT GLO_RECU_EXTE_ACCIONAMIENTO FOREIGN KEY (CONS_ACCIONAMIENTO) REFERENCES SIS_RECU_ACCIONAMIENTO (CONS_ACCIONAMIENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_EXTENDIDO ADD CONSTRAINT GLO_RECU_EXTE_PRES_TREJIDO FOREIGN KEY (CONS_PRES_TEJIDO) REFERENCES SIS_RECU_PRES_TEJIDO (CONS_PRES_TEJIDO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_EXTENDIDO ADD CONSTRAINT GLO_RECU_EXTE_RECUSO FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_EXTENDIDO ADD CONSTRAINT GLO_RECU_EXTE_TIPO_EXTENDIDO FOREIGN KEY (CONS_TIPO_EXTENDIDO) REFERENCES SIS_RECU_TIPO_EXTENDIDO (CONS_RECU_TIPO_EXTENDIDO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_FAMILIAS ADD CONSTRAINT GLO_RECU_FAMILIAS_TIPO FOREIGN KEY (CONS_RECU_TIPO, CONS_RECU_GRUPO) REFERENCES GLO_RECU_TIPOS (CONS_RECU_TIPO, CONS_RECU_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_FUSIONADO ADD CONSTRAINT GLO_RECU_FUSI_ACCI_FUSIONADO FOREIGN KEY (CONS_ACCI_FUSIONADO) REFERENCES SIS_RECU_ACCI_FUSIONADO (CONS_ACCI_FUSIONADO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_FUSIONADO ADD CONSTRAINT GLO_RECU_FUSI_RECURSO FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_FUSIONADO ADD CONSTRAINT GLO_RECU_FUSI_SIST_PRESION FOREIGN KEY (CONS_SIST_PRESION) REFERENCES SIS_RECU_SIST_PRESION (CONS_SIST_PRESION) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_FUSIONADO ADD CONSTRAINT GLO_RECU_FUSI_TIPO_FUSIONADO FOREIGN KEY (CONS_TIPO_FUSIONADO) REFERENCES SIS_RECU_TIPO_FUSIONADO (CONS_TIPO_FUSIONADO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVIMIENTOS ADD CONSTRAINT GLO_RECU_MOVI_PERS_ENTREGA FOREIGN KEY (CONS_ENTREGA) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVIMIENTOS ADD CONSTRAINT GLO_RECU_MOVI_PERS_RECIBE FOREIGN KEY (CONS_RECIBE) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVIMIENTOS ADD CONSTRAINT GLO_RECU_MOVI_PERS_SOLICITA FOREIGN KEY (CONS_SOLICITA) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVIMIENTOS ADD CONSTRAINT GLO_RECU_MOVI_RECURSO FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_MOVIMIENTOS ADD CONSTRAINT GLO_RECU_MOVI_TIPO_DOCUMENTO FOREIGN KEY (CONS_TIPO_DOCUMENTO) REFERENCES GLO_TIPO_DOCUMENTO (CONS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVIMIENTOS ADD CONSTRAINT GLO_RECU_MOVI_TIPO_MOVIMIENTO FOREIGN KEY (CONS_RECU_TIPO_MOVIMIENTO) REFERENCES GLO_RECU_TIPO_MOVIMIENTO (CONS_RECU_TIPO_MOVIMIENTO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_ANULADOS ADD CONSTRAINT GLO_RECU_MOVI_ANUL_MOVIMIENTO FOREIGN KEY (CONS_RECU_MOVIMIENTO) REFERENCES GLO_RECU_MOVIMIENTOS (CONS_RECU_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_MOVI_ANULADOS ADD CONSTRAINT GLO_RECU_MOVI_ANUL_RESPONSABLE FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_BAJAS ADD CONSTRAINT GLO_RECU_MOVI_BAJA_RECU_MOVIMIE FOREIGN KEY (CONS_RECU_MOVIMIENTO) REFERENCES GLO_RECU_MOVIMIENTOS (CONS_RECU_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_AREA FOREIGN KEY (CONS_AREA) REFERENCES GLO_AREAS (CONS_AREA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_BODEGA FOREIGN KEY (CONS_BODEGA) REFERENCES GLO_BODEGAS (CONS_BODEGA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_EMPRESA FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_LINEA FOREIGN KEY (CONS_PLAN_LINEA) REFERENCES GLO_PLAN_LINEAS (CONS_PLAN_LINEA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_MOVIMIENTO FOREIGN KEY (CONS_RECU_MOVIMIENTO) REFERENCES GLO_RECU_MOVIMIENTOS (CONS_RECU_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_PLANTA FOREIGN KEY (CONS_PLANTA) REFERENCES GLO_PLANTAS (CONS_PLANTA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_SECCION FOREIGN KEY (CONS_LINE_SECCION) REFERENCES GLO_LINE_SECCIONES (CONS_LINE_SECCION) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_MOVI_TRASLADOS ADD CONSTRAINT GLO_RECU_MOVI_TRAS_UBIC_UBIC_TI FOREIGN KEY (CONS_UBIC_TIPO) REFERENCES SIS_UBIC_TIPOS (CONS_UBIC_TIPO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_PLANCHADO ADD CONSTRAINT GLO_RECU_PLAN_RECURSO FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_PLANCHADO ADD CONSTRAINT GLO_RECU_PLAN_SIST_PLANCHADO FOREIGN KEY (CONS_SIST_PLANCHADO) REFERENCES SIS_RECU_SIST_PLANCHADO (CONS_SIST_PLANCHADO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_PLANCHADO ADD CONSTRAINT GLO_RECU_PLAN_SIST_PLAN_BRAZO FOREIGN KEY (CONS_SIST_PLAN_BRAZO) REFERENCES SIS_RECU_SIST_PLANCHADO (CONS_SIST_PLANCHADO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_PLANCHADO ADD CONSTRAINT GLO_RECU_PLAN_TIPO_BRAZO FOREIGN KEY (CONS_TIPO_BRAZO) REFERENCES SIS_RECU_TIPO_BRAZO (CONS_TIPO_BRAZO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_PLANCHADO ADD CONSTRAINT GLO_RECU_PLAN_TIPO_PLANCHADO FOREIGN KEY (CONS_TIPO_PLANCHADO) REFERENCES SIS_RECU_TIPO_PLANCHADO (CONS_TIPO_PLANCHADO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_PLANCHADO ADD CONSTRAINT GLO_RECU_PLAN_TIPO_PRENSA FOREIGN KEY (CONS_TIPO_PRENSA) REFERENCES SIS_RECU_TIPO_PRENSA (CONS_TIPO_PRENSA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_TIPOS ADD CONSTRAINT GLO_RECU_TIPOS_GRUPO FOREIGN KEY (CONS_RECU_GRUPO) REFERENCES GLO_RECU_GRUPOS (CONS_RECU_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_TIPO_CARACTERISTICAS ADD CONSTRAINT GLO_RECU_TIPO_CARA_FAMILIAS FOREIGN KEY (CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE GLO_RECU_TIPO_CARACTERISTICAS ADD CONSTRAINT GLO_RECU_TIPO_CARA_TIPO_CAR FOREIGN KEY (CONS_TIPO_CARACTERISTICA) REFERENCES GLO_TIPO_CARACTERISTICAS (CONS_TIPO_CARACTERISTICA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_RECU_TIPO_MOVIMIENTO ADD CONSTRAINT GLO_RECU_TIPO_MOVI_FAMI_MOVIMIE FOREIGN KEY (CONS_FAMI_MOVIMIENTO) REFERENCES SIS_FAMI_MOVIMIENTO (CONS_FAMI_MOVIMIENTO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_BORDADOS FOREIGN KEY (CONS_REFE_BORDADO) REFERENCES GLO_REFE_BORDADOS (CONS_REFE_BORDADO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_EDADES FOREIGN KEY (CONS_REFE_EDAD) REFERENCES GLO_REFE_EDADES (CONS_REFE_EDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_ESTADOS FOREIGN KEY (CONS_REFE_ESTADO) REFERENCES GLO_REFE_ESTADOS (CONS_REFE_ESTADO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_ESTAMPADOS FOREIGN KEY (CONS_REFE_ESTAMPADO) REFERENCES GLO_REFE_ESTAMPADOS (CONS_REFE_ESTAMPADO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_ESTILOS FOREIGN KEY (CONS_REFE_ESTILO) REFERENCES GLO_REFE_ESTILOS (CONS_REFE_ESTILO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_GRUPOS FOREIGN KEY (CONS_REFE_GRUPO) REFERENCES GLO_REFE_GRUPOS (CONS_REFE_GRUPO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_GRUP_TALLAS FOREIGN KEY (CONS_REFE_GRUP_TALLAS) REFERENCES GLO_GRUP_TALLAS (CONS_GRUP_TALLAS);

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_LAVADOS FOREIGN KEY (CONS_REFE_LAVADO) REFERENCES GLO_REFE_LAVADOS (CONS_REFE_LAVADO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_LINEAS FOREIGN KEY (CONS_REFE_LINEA) REFERENCES GLO_REFE_LINEAS (CONS_REFE_LINEA) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_MARCAS FOREIGN KEY (CONS_REFE_MARCA) REFERENCES GLO_REFE_MARCAS (CONS_REFE_MARCA) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_SEXOS FOREIGN KEY (CONS_REFE_SEXO) REFERENCES SIS_SEXOS (CONS_SEXO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFERENCIAS ADD CONSTRAINT GLO_REFERENCIAS_FK_TEMPORADAS FOREIGN KEY (CONS_REFE_TEMPORADA) REFERENCES GLO_REFE_TEMPORADAS (CONS_REFE_TEMPORADA) ON UPDATE CASCADE;

ALTER TABLE GLO_REFE_CAMB_ESTADO ADD CONSTRAINT GLO_REFE_CAMB_ESTA_FK_ANTERIOR FOREIGN KEY (CONS_ESTA_ANTERIOR) REFERENCES GLO_REFE_ESTADOS (CONS_REFE_ESTADO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFE_CAMB_ESTADO ADD CONSTRAINT GLO_REFE_CAMB_ESTA_FK_REFERENCI FOREIGN KEY (CONS_REFERENCIA) REFERENCES GLO_REFERENCIAS (CONS_REFERENCIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_REFE_CAMB_ESTADO ADD CONSTRAINT GLO_REFE_CAMB_ESTA_NUEVO FOREIGN KEY (CONS_ESTA_NUEVO) REFERENCES GLO_REFE_ESTADOS (CONS_REFE_ESTADO) ON UPDATE CASCADE;

ALTER TABLE GLO_REFE_COLORES ADD CONSTRAINT GLO_REFE_COLORES_GLO_COLORES FOREIGN KEY (CONS_COLOR) REFERENCES GLO_COLORES (CONS_COLOR) ON UPDATE CASCADE;

ALTER TABLE GLO_REFE_COLORES ADD CONSTRAINT GLO_REFE_COLORES_GLO_REFERENCIA FOREIGN KEY (CONS_REFERENCIA) REFERENCES GLO_REFERENCIAS (CONS_REFERENCIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_REFE_HISTORIAL ADD CONSTRAINT GLO_REFE_HISTORIAL_FK_REFERENC FOREIGN KEY (CONS_REFERENCIA) REFERENCES GLO_REFERENCIAS (CONS_REFERENCIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_SUB_IMPRODUCTIVOS ADD CONSTRAINT GLO_SUB_IMPR_IMPRODUCTIVO FOREIGN KEY (CONS_IMPRODUCTIVO) REFERENCES GLO_IMPRODUCTIVOS (CONS_IMPRODUCTIVO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE GLO_TERCEROS ADD CONSTRAINT GLO_TERCEROS_TERC_ORIGEN FOREIGN KEY (CONS_ORIGEN) REFERENCES SIS_TERC_ORIGEN (CONS_ORIGEN) ON UPDATE CASCADE;

ALTER TABLE GLO_TERC_CONTACTOS ADD CONSTRAINT GLO_TERC_CONTACTOS_CONS_TERCERO FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE GLO_TERC_DESPACHAR_A ADD CONSTRAINT GLO_DESPACHAR_A_GLO_CIUDADES FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_TERC_DESPACHAR_A ADD CONSTRAINT GLO_DESPACHAR_A_GLO_TERCEROS FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE GLO_TERC_FACTURAR_A ADD CONSTRAINT FACTURAR_A_GLO_CIUDADES FOREIGN KEY (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) REFERENCES GLO_CIUDADES (CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD) ON UPDATE CASCADE;

ALTER TABLE GLO_TERC_FACTURAR_A ADD CONSTRAINT FACTURAR_A_GLO_TERCEROS FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE GLO_TERC_HISTORIAL ADD CONSTRAINT GLO_PROV_HISTORIAL_GLO_TERCEROS FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE PCP_COMP_LIST_OPER_COSTURA ADD CONSTRAINT PCP_COMP_LIST_OPER_COSTURA_COMP FOREIGN KEY (CONS_COMP_VARIACION) REFERENCES PCP_COMP_VARIACIONES (CONS_COMP_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_COMP_VARIACIONES ADD CONSTRAINT PCP_COMP_TIPOS_PCP_COMP_GRUPOS FOREIGN KEY (CONS_COMP_GRUPO) REFERENCES PCP_COMP_GRUPOS (CONS_COMP_GRUPO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONF_OBJE_CAMPOS ADD CONSTRAINT PCP_CONF_OBJE_CAMPOS_FK_OBJETOS FOREIGN KEY (CONS_CONF_OBJETO) REFERENCES PCP_CONF_OBJETOS (CONS_CONF_OBJETO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONF_OBJE_PARAMETROS ADD CONSTRAINT PCP_CONF_OBJE_PARA_FK_OBJETOS FOREIGN KEY (CONS_CONF_OBJETO) REFERENCES PCP_CONF_OBJETOS (CONS_CONF_OBJETO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_ABONADOS ADD CONSTRAINT PCP_CONT_NOVE_ABON_FK_ABONADO FOREIGN KEY (CONS_ABONADO) REFERENCES GLO_ABONADOS (CONS_ABONADO) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_ABONADOS ADD CONSTRAINT PCP_CONT_NOVE_ABON_FK_NOVE_DIAR FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_ABONADOS ADD CONSTRAINT PCP_CONT_NOVE_ABON_FK_PROD_ORDE FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_CURVA ADD CONSTRAINT PCP_CONT_NOVE_CURVA_FK_NOVE_DIA FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_DEFE_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_DEFE_FK_DIST_PAQU FOREIGN KEY (CONS_PROD_LOTE, CONS_PROCESO, CONS_PROD_PAQU_TIPO, NUME_PAQUETE) REFERENCES PCP_PROD_DIST_PAQUETES (CONS_PROD_LOTE, CONS_PROCESO, CONS_PROD_PAQU_TIPO, NUME_PAQUETE) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_DEFE_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_DEFE_FK_LIST_OPER FOREIGN KEY (CONS_PROD_LOTE, SECU_OPERACION) REFERENCES PCP_PROD_LIST_OPER_COSTURA (CONS_PROD_LOTE, SECU_OPERACION) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_DEFE_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_DEFE_FK_NOVE_DIAR FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_DEFE_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_DEFE_F_FK_DEFECTO FOREIGN KEY (CONS_CALI_DEFECTO) REFERENCES PCP_CALI_DEFECTOS (CONS_CALI_DEFECTO) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_DEFE_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_DEFE_F_FK_LOTE FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_DIARIAS ADD CONSTRAINT PCP_CONT_NOVE_DIAR_FK_EMPRESA FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_CONT_NOVE_DIARIAS ADD CONSTRAINT PCP_CONT_NOVE_DIAR_FK_LINEA FOREIGN KEY (CONS_PLAN_LINEA) REFERENCES GLO_PLAN_LINEAS (CONS_PLAN_LINEA) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_CONT_NOVE_DIARIAS ADD CONSTRAINT PCP_CONT_NOVE_DIAR_FK_PERSONAL FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_DIARIAS ADD CONSTRAINT PCP_CONT_NOVE_DIAR_FK_PLANTA FOREIGN KEY (CONS_PLANTA) REFERENCES GLO_PLANTAS (CONS_PLANTA) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_CONT_NOVE_DIARIAS ADD CONSTRAINT PCP_CONT_NOVE_DIAR_FK_SECCION FOREIGN KEY (CONS_LINE_SECCION) REFERENCES GLO_LINE_SECCIONES (CONS_LINE_SECCION) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_CONT_NOVE_DIARIAS ADD CONSTRAINT PCP_CONT_NOVE_DIAR_FK_TURNO FOREIGN KEY (CONS_TURNO) REFERENCES GLO_TURNOS (CONS_TURNO) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_CONT_NOVE_HORA_EXTRAS ADD CONSTRAINT PCP_CONT_NOVE_HORA_EXTR_HORA_EX FOREIGN KEY (CONS_HORA_EXTRA) REFERENCES GLO_HORA_EXTRAS (CONS_HORA_EXTRA) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_HORA_EXTRAS ADD CONSTRAINT PCP_CONT_NOVE_HORA_EXTR_NOVE_DI FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_HORA_EXTRAS ADD CONSTRAINT PCP_CONT_NOVE_HORA_EXTR_PROD_OR FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_IMPRODUCTIVOS ADD CONSTRAINT PCP_CONT_NOVE_IMPR_FK_IMPRODUCT FOREIGN KEY (CONS_IMPRODUCTIVO) REFERENCES GLO_IMPRODUCTIVOS (CONS_IMPRODUCTIVO) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_IMPRODUCTIVOS ADD CONSTRAINT PCP_CONT_NOVE_IMPR_FK_NOVE_DIAR FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_IMPRODUCTIVOS ADD CONSTRAINT PCP_CONT_NOVE_IMPR_FK_PROD_ORDE FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_IMPRODUCTIVOS ADD CONSTRAINT PCP_CONT_NOVE_IMPR_FK_RECURSOS FOREIGN KEY (CONS_RECURSO) REFERENCES GLO_RECURSOS (CONS_RECURSO) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_IMPRODUCTIVOS ADD CONSTRAINT PCP_CONT_NOVE_IMPR_FK_SUB_IMPRO FOREIGN KEY (CONS_SUB_IMPRODUCTIVO) REFERENCES GLO_SUB_IMPRODUCTIVOS (CONS_SUB_IMPRODUCTIVO) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_PAGO ADD CONSTRAINT PCP_CONT_NOVE_PAGO_FK_NOVE_DIAR FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_RESUMEN ADD CONSTRAINT PCP_CONT_NOVE_RESU_FK_NOVE_DIAR FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_TIQU_CORTE ADD CONSTRAINT PCP_CONT_NOVE_TIQU_CORT_FK_LOTE FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE);

ALTER TABLE PCP_CONT_NOVE_TIQU_CORTE ADD CONSTRAINT PCP_CONT_NOVE_TIQU_CORT_FK_MATE FOREIGN KEY (CONS_REFE_MATERIAL) REFERENCES PCP_REFE_MATERIALES (CONS_REFE_MATERIAL);

ALTER TABLE PCP_CONT_NOVE_TIQU_CORTE ADD CONSTRAINT PCP_CONT_NOVE_TIQU_CORT_FK_NOVE FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_TIQU_CORTE ADD CONSTRAINT PCP_CONT_NOVE_TIQU_CORT_FK_OPER FOREIGN KEY (CONS_PROD_LOTE, CONS_REFE_MATERIAL, SECU_OPERACION) REFERENCES PCP_PROD_LIST_OPER_CORTE (CONS_PROD_LOTE, CONS_REFE_MATERIAL, SECU_OPERACION);

ALTER TABLE PCP_CONT_NOVE_TIQU_CORTE ADD CONSTRAINT PCP_CONT_NOVE_TIQU_CORT_FK_ORDE FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_ABON FOREIGN KEY (CONS_CONT_NOVE_ABONADO) REFERENCES PCP_CONT_NOVE_ABONADOS (CONS_CONT_NOVE_ABONADO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_COLO FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_CURV FOREIGN KEY (CONS_FORM_PAGO_CURVA) REFERENCES PCP_FORM_PAGO_PERSONAL (CONS_FORM_PAGO_PERSONAL) ON UPDATE CASCADE;

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_DIST FOREIGN KEY (CONS_PROD_PAQU_TIPO) REFERENCES PCP_PROD_PAQU_TIPOS (CONS_PROD_PAQU_TIPO);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_LOTE FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_NOVE FOREIGN KEY (CONS_CONT_NOVE_DIARIA) REFERENCES PCP_CONT_NOVE_DIARIAS (CONS_CONT_NOVE_DIARIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_OPER FOREIGN KEY (CONS_PROD_LOTE, SECU_OPERACION) REFERENCES PCP_PROD_LIST_OPER_COSTURA (CONS_PROD_LOTE, SECU_OPERACION);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_ORDE FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_PAQU FOREIGN KEY (CONS_PROD_LOTE, CONS_PROCESO, CONS_PROD_PAQU_TIPO, NUME_PAQUETE) REFERENCES PCP_PROD_DIST_PAQUETES (CONS_PROD_LOTE, CONS_PROCESO, CONS_PROD_PAQU_TIPO, NUME_PAQUETE);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_PUNT FOREIGN KEY (CONS_PUNT_CONTROL) REFERENCES PCP_PUNT_CONTROL (CONS_PUNT_CONTROL);

ALTER TABLE PCP_CONT_NOVE_TIQU_FABRICACION ADD CONSTRAINT PCP_CONT_NOVE_TIQU_FABR_FK_TALL FOREIGN KEY (CONS_GRUP_TALL_DETALLE) REFERENCES GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE);

ALTER TABLE PCP_ELEM_CST ADD CONSTRAINT PCP_ELEM_CST_DIFICULTAD FOREIGN KEY (CONS_CST_DIFICULTAD) REFERENCES SIS_CST_DIFICULTADES (CONS_CST_DIFICULTAD) ON UPDATE CASCADE;

ALTER TABLE PCP_ELEM_CST ADD CONSTRAINT PCP_ELEM_CST_DISTANCIA FOREIGN KEY (CONS_CST_DISTANCIA) REFERENCES SIS_CST_DISTANCIAS (CONS_CST_DISTANCIA) ON UPDATE CASCADE;

ALTER TABLE PCP_ELEM_CST ADD CONSTRAINT PCP_ELEM_CST_PESOS FOREIGN KEY (CONS_CST_PESO) REFERENCES SIS_CST_PESOS (CONS_CST_PESO) ON UPDATE CASCADE;

ALTER TABLE PCP_ELEM_CST ADD CONSTRAINT PCP_ELEM_CST_POSICIONAMIENTO FOREIGN KEY (CONS_CST_POSICIONAMIENTO) REFERENCES SIS_CST_POSICIONAMIENTOS (CONS_CST_POSICIONAMIENTO) ON UPDATE CASCADE;

ALTER TABLE PCP_ELEM_CST_GESTOS ADD CONSTRAINT PCP_ELEM_CST_GEST_ELEM_CST FOREIGN KEY (CODI_ELEM_CST) REFERENCES PCP_ELEM_CST (CODI_ELEM_CST) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_ELEM_CST_HISTORIAL ADD CONSTRAINT PCP_ELEM_CST_HIST_FK_ELEM_CST FOREIGN KEY (CODI_ELEM_CST) REFERENCES PCP_ELEM_CST (CODI_ELEM_CST) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO ADD CONSTRAINT PCP_FOMR_PAGO_FK_TURNOS FOREIGN KEY (CONS_TURNO) REFERENCES GLO_TURNOS (CONS_TURNO) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO ADD CONSTRAINT PCP_FORM_PAGO_FK_EMPRESAS FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO ADD CONSTRAINT PCP_FORM_PAGO_FK_LINEAS FOREIGN KEY (CONS_PLAN_LINEA) REFERENCES GLO_PLAN_LINEAS (CONS_PLAN_LINEA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO ADD CONSTRAINT PCP_FORM_PAGO_FK_PLANTAS FOREIGN KEY (CONS_PLANTA) REFERENCES GLO_PLANTAS (CONS_PLANTA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO ADD CONSTRAINT PCP_FORM_PAGO_FK_SECCIONES FOREIGN KEY (CONS_LINE_SECCION) REFERENCES GLO_LINE_SECCIONES (CONS_LINE_SECCION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO ADD CONSTRAINT PCP_FORM_PAGO_FK_SIS_FORM_PAGO FOREIGN KEY (CONS_SIS_FORM_PAGO) REFERENCES SIS_PCP_FORM_PAGO (CONS_SIS_FORM_PAGO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO ADD CONSTRAINT PCP_FORM_PAGO_FK_SIS_PERI_PAGO FOREIGN KEY (CONS_PERI_PAGO) REFERENCES SIS_PERI_PAGO (CONS_PERI_PAGO) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO_APRE_DETALLE ADD CONSTRAINT PCP_FORM_PAGO_APRE_FK_FORM_PAGO FOREIGN KEY (CONS_FORM_PAGO_APRENDIZAJE) REFERENCES PCP_FORM_PAGO_APRENDIZAJE (CONS_FORM_PAGO_APRENDIZAJE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO_BONOS ADD CONSTRAINT PCP_FORM_PAGO_BONO_FK_PERI_PAGO FOREIGN KEY (CONS_PERI_PAGO) REFERENCES SIS_PERI_PAGO (CONS_PERI_PAGO) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO_BONO_PERSONAL ADD CONSTRAINT PCP_FORM_PAGO_BONO_PERS_FK_BONO FOREIGN KEY (CONS_FORM_PAGO_BONO) REFERENCES PCP_FORM_PAGO_BONOS (CONS_FORM_PAGO_BONO) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO_BONO_PERSONAL ADD CONSTRAINT PCP_FORM_PAGO_BONO_PERS_FK_PERS FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO_DIFE_DETALLE ADD CONSTRAINT PCP_FORM_PAGO_DIFE_DETA_FK_PAGO FOREIGN KEY (CONS_FORM_PAGO_DIFERENCIAL) REFERENCES PCP_FORM_PAGO_DIFERENCIAL (CONS_FORM_PAGO_DIFERENCIAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO_PARAMETROS ADD CONSTRAINT PCP_FORM_PAGO_PARA_FK_PERI_PAGO FOREIGN KEY (CONS_PERI_PAGO) REFERENCES SIS_PERI_PAGO (CONS_PERI_PAGO) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO_PARAMETROS ADD CONSTRAINT PCP_FORM_PAGO_PARA_FK_SIS_FORM_ FOREIGN KEY (CONS_SIS_FORM_PAGO) REFERENCES SIS_PCP_FORM_PAGO (CONS_SIS_FORM_PAGO) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO_PERSONAL ADD CONSTRAINT PCP_FORM_PAGO_PERS_FK_FORM_PAGO FOREIGN KEY (CONS_SIS_FORM_PAGO) REFERENCES SIS_PCP_FORM_PAGO (CONS_SIS_FORM_PAGO) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO_PERSONAL ADD CONSTRAINT PCP_FORM_PAGO_PERS_FK_OPERACION FOREIGN KEY (CONS_OPER_COSTURA) REFERENCES PCP_OPER_COSTURA (CONS_OPER_COSTURA) ON UPDATE CASCADE;

ALTER TABLE PCP_FORM_PAGO_PERSONAL ADD CONSTRAINT PCP_FORM_PAGO_PERS_FK_PERSONAL FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO_VALORES ADD CONSTRAINT PCP_FORM_PAGO_PARA_FK_FORM_PAGO FOREIGN KEY (CONS_FORM_PAGO) REFERENCES PCP_FORM_PAGO (CONS_FORM_PAGO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_FORM_PAGO_VALORES ADD CONSTRAINT PCP_FORM_PAGO_PARA_FK_SIS_AUXIL FOREIGN KEY (CONS_TABL_AUXI_DETALLE) REFERENCES SIS_TABL_AUXI_DETALLE (CONS_TABL_AUXI_DETALLE) ON UPDATE CASCADE;

ALTER TABLE PCP_INSU_REFERENCIAS ADD CONSTRAINT PCP_INSU_REFE_SUBGRUPO FOREIGN KEY (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO) REFERENCES PCP_INSU_SUBGRUPOS (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_INSU_REFERENCIAS ADD CONSTRAINT PCP_INSU_REFE_UNID_MEDIDA FOREIGN KEY (CONS_UNID_MEDIDA) REFERENCES GLO_INVE_UNIDADES (CONS_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE PCP_INSU_SUBGRUPOS ADD CONSTRAINT PCP_INSU_SUBG_INSU_GRUPOS FOREIGN KEY (CONS_INSU_GRUPO) REFERENCES PCP_INSU_GRUPOS (CONS_INSU_GRUPO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTRADA ADD CONSTRAINT PCP_INVE_INSU_ENTR_TERCERO FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTRADA ADD CONSTRAINT PCP_INVE_INSU_ENTR_TIPO_DOCUMEN FOREIGN KEY (CONS_TIPO_DOCUMENTO) REFERENCES GLO_TIPO_DOCUMENTO (CONS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTRADA ADD CONSTRAINT PCP_INVE_INSU_ENTR_TIPO_DOCU_AL FOREIGN KEY (CONS_TIPO_DOCU_ALTERNATIVO) REFERENCES GLO_TIPO_DOCUMENTO (CONS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_INSU_ENTR_INSU_ENTRADA FOREIGN KEY (CONS_INVE_INSU_ENTRADA) REFERENCES PCP_INVE_INSU_ENTRADA (CONS_INVE_INSU_ENTRADA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_INSU_ENTR_INSU_REFEREN FOREIGN KEY (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO, CONS_INSU_REFERENCIA) REFERENCES PCP_INSU_REFERENCIAS (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO, CONS_INSU_REFERENCIA) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_INSU_ENTR_INVE_GRUPO FOREIGN KEY (CONS_INVE_GRUPO) REFERENCES PCP_INVE_GRUPOS (CONS_INVE_GRUPO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_INSU_ENTR_UNID_MEDI_AL FOREIGN KEY (CONS_UNID_MEDI_ALMACENAMIENTO) REFERENCES GLO_INVE_UNIDADES (CONS_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INSU_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_INSU_ENTR_UNID_MEDI_EN FOREIGN KEY (CONS_UNID_MEDI_ENTRADA) REFERENCES GLO_INVE_UNIDADES (CONS_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INVE_ENTR_PIEZAS ADD CONSTRAINT PCP_INVE_INSU_ENTR_PIEZ_COLOR FOREIGN KEY (CONS_COLOR) REFERENCES GLO_COLORES (CONS_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_INVE_ENTR_PIEZAS ADD CONSTRAINT PCP_INVE_INSU_ENTR_PIEZ_ITEM FOREIGN KEY (CONS_INVE_INSU_ENTR_ITEM) REFERENCES PCP_INVE_INSU_ENTR_ITEMS (CONS_INVE_INSU_ENTR_ITEM) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTRADA ADD CONSTRAINT PCP_INVE_MATE_ENTR_TERCERO FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTRADA ADD CONSTRAINT PCP_INVE_MATE_ENTR_TIPO_DOCUMEN FOREIGN KEY (CONS_TIPO_DOCUMENTO) REFERENCES GLO_TIPO_DOCUMENTO (CONS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTRADA ADD CONSTRAINT PCP_INVE_MATE_ENTR_TIPO_DOCU_AL FOREIGN KEY (CONS_TIPO_DOCU_ALTERNATIVO) REFERENCES GLO_TIPO_DOCUMENTO (CONS_TIPO_DOCUMENTO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_MATE_ENTR_INVE_GRUPO FOREIGN KEY (CONS_INVE_GRUPO) REFERENCES PCP_INVE_GRUPOS (CONS_INVE_GRUPO) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_MATE_ENTR_MATE_ENTRADA FOREIGN KEY (CONS_INVE_MATE_ENTRADA) REFERENCES PCP_INVE_MATE_ENTRADA (CONS_INVE_MATE_ENTRADA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_MATE_ENTR_MATE_REFEREN FOREIGN KEY (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO, CONS_MATE_REFERENCIA) REFERENCES PCP_MATE_REFERENCIAS (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO, CONS_MATE_REFERENCIA) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_MATE_ENTR_UNID_MEDI_AL FOREIGN KEY (CONS_UNID_MEDI_ALMACENAMIENTO) REFERENCES GLO_INVE_UNIDADES (CONS_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTR_ITEMS ADD CONSTRAINT PCP_INVE_MATE_ENTR_UNID_MEDI_EN FOREIGN KEY (CONS_UNID_MEDI_ENTRADA) REFERENCES GLO_INVE_UNIDADES (CONS_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTR_PIEZAS ADD CONSTRAINT PCP_INVE_MATE_ENTR_PIEZ_COLOR FOREIGN KEY (CONS_COLOR) REFERENCES GLO_COLORES (CONS_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_INVE_MATE_ENTR_PIEZAS ADD CONSTRAINT PCP_INVE_MATE_ENTR_PIEZ_ITEM FOREIGN KEY (CONS_INVE_MATE_ENTR_ITEM) REFERENCES PCP_INVE_MATE_ENTR_ITEMS (CONS_INVE_MATE_ENTR_ITEM) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_MATE_COMPROMETIDO ADD CONSTRAINT PCP_MATE_COMP_INVE_MATE_PIEZA FOREIGN KEY (CONS_INVE_MATE_ENTR_PIEZA) REFERENCES PCP_INVE_MATE_ENTR_PIEZAS (CONS_INVE_MATE_ENTR_PIEZA);

ALTER TABLE PCP_MATE_COMPROMETIDO ADD CONSTRAINT PCP_MATE_COMP_PROD_ORDENES FOREIGN KEY (CONS_MATE_COMPROMETIDO) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_MATE_REFERENCIAS ADD CONSTRAINT PCP_MATE_PROD_REFE_SUBGRUPO FOREIGN KEY (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO) REFERENCES PCP_MATE_SUBGRUPOS (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_MATE_REFERENCIAS ADD CONSTRAINT PCP_MATE_PROD_REFE_UNID_MEDIDA FOREIGN KEY (CONS_UNID_MEDIDA) REFERENCES GLO_INVE_UNIDADES (CONS_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE PCP_MATE_SUBGRUPOS ADD CONSTRAINT PCP_MATE_SUBG_MATE_GRUPO FOREIGN KEY (CONS_MATE_GRUPO) REFERENCES PCP_MATE_GRUPOS (CONS_MATE_GRUPO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_METO_TIEM_CICLO ADD CONSTRAINT PCP_METO_TIEM_CICLO_RECU_FAMILI FOREIGN KEY (CONS_RECU_GRUPO, CONS_RECU_TIPO, CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_GRUPO, CONS_RECU_TIPO, CONS_RECU_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COSTURA ADD CONSTRAINT PCP_OPER_COSTURA_COMPONENTES FOREIGN KEY (CONS_COMP_GRUPO) REFERENCES PCP_COMP_GRUPOS (CONS_COMP_GRUPO) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COSTURA ADD CONSTRAINT PCP_OPER_COSTURA_OPERACIONES FOREIGN KEY (CONS_OPER_COST_TIPO) REFERENCES PCP_OPER_COST_TIPOS (CONS_OPER_COST_TIPO) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COSTURA ADD CONSTRAINT PCP_OPER_COSTURA_PAGO_HABILIDAD FOREIGN KEY (CONS_FORM_PAGO_HABILIDAD) REFERENCES PCP_FORM_PAGO_HABILIDAD (CONS_FORM_PAGO_HABILIDAD) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COSTURA ADD CONSTRAINT PCP_OPER_COSTURA_PROCESOS FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COSTURA ADD CONSTRAINT PCP_OPER_COSTURA_RECURSOS FOREIGN KEY (CONS_RECU_GRUPO, CONS_RECU_TIPO, CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_GRUPO, CONS_RECU_TIPO, CONS_RECU_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COSTURA ADD CONSTRAINT PCP_OPER_COSTURA_RECU_MARCAS FOREIGN KEY (CONS_RECU_MARCA) REFERENCES GLO_RECU_MARCAS (CONS_RECU_MARCA) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COSTURA ADD CONSTRAINT PCP_OPER_COSTURA_TIPO_PUNTADA FOREIGN KEY (CONS_RECU_TIPO_PUNTADA) REFERENCES GLO_RECU_TIPO_PUNTADA (CONS_RECU_TIPO_PUNTADA) ON UPDATE CASCADE;

ALTER TABLE PCP_OPER_COST_HISTORIAL ADD CONSTRAINT PCP_OPER_COST_HIST_OPER_COSTURA FOREIGN KEY (CONS_OPER_COSTURA) REFERENCES PCP_OPER_COSTURA (CONS_OPER_COSTURA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_OPER_REPROCESOS ADD CONSTRAINT PCP_OPER_REPR_RECURSOS FOREIGN KEY (CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_FAMILIA) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDIDOS ADD CONSTRAINT PCP_PEDI_DESP_A FOREIGN KEY (CONS_DESPACHAR_A) REFERENCES GLO_TERC_DESPACHAR_A (CONS_DESPACHAR_A);

ALTER TABLE PCP_PEDIDOS ADD CONSTRAINT PCP_PEDI_FACT_A FOREIGN KEY (CONS_FACTURAR_A) REFERENCES GLO_TERC_FACTURAR_A (CONS_FACTURAR_A);

ALTER TABLE PCP_PEDIDOS ADD CONSTRAINT PCP_PEDI_PRIORIDAD FOREIGN KEY (CONS_COME_PRIO_PEDIDO) REFERENCES GLO_COME_PRIO_PEDIDOS (CONS_COME_PRIO_PEDIDO) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDIDOS ADD CONSTRAINT PCP_PEDI_REFE_TEMPORADA FOREIGN KEY (CONS_REFE_TEMPORADA) REFERENCES GLO_REFE_TEMPORADAS (CONS_REFE_TEMPORADA) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDIDOS ADD CONSTRAINT PCP_PEDI_TERCERO FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDIDOS ADD CONSTRAINT PCP_PEDI_VENDEDOR FOREIGN KEY (CONS_COME_VENDEDOR) REFERENCES GLO_COME_VENDEDORES (CONS_COME_VENDEDOR) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDI_HISTORIAL ADD CONSTRAINT PCP_PEDI_HIST_PEDIDO FOREIGN KEY (CONS_PEDIDO) REFERENCES PCP_PEDIDOS (CONS_PEDIDO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PEDI_PLANEACION ADD CONSTRAINT PCP_PEDI_PLAN_PEDI_UNIDADES FOREIGN KEY (CONS_PEDI_UNIDADES) REFERENCES PCP_PEDI_UNIDADES (CONS_PEDI_UNIDADES) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDI_PLANEACION ADD CONSTRAINT PCP_PEDI_PLAN_PROD_ORDENES FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PEDI_REFERENCIAS ADD CONSTRAINT PCP_PEDI_REFE_GLO_REFERENCIAS FOREIGN KEY (CONS_REFERENCIA) REFERENCES GLO_REFERENCIAS (CONS_REFERENCIA) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDI_REFERENCIAS ADD CONSTRAINT PCP_PEDI_REFE_LAVADO FOREIGN KEY (CONS_REFE_LAVADO) REFERENCES GLO_REFE_LAVADOS (CONS_REFE_LAVADO) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDI_REFERENCIAS ADD CONSTRAINT PCP_PEDI_REFE_PEDIDO FOREIGN KEY (CONS_PEDIDO) REFERENCES PCP_PEDIDOS (CONS_PEDIDO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PEDI_REFERENCIAS ADD CONSTRAINT PCP_PEDI_REFE_REFE_VARIACION FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDI_UNIDADES ADD CONSTRAINT PCP_PEDI_UNIDADES_GRUP_TALL_DET FOREIGN KEY (CONS_GRUP_TALL_DETALLE) REFERENCES GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE) ON UPDATE CASCADE;

ALTER TABLE PCP_PEDI_UNIDADES ADD CONSTRAINT PCP_PEDI_UNID_GLO_REFE_COLORES FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PEDI_UNIDADES ADD CONSTRAINT PCP_PEDI_UNID_PEDI_REFERENCIA FOREIGN KEY (CONS_PEDI_REFERENCIA) REFERENCES PCP_PEDI_REFERENCIAS (CONS_PEDI_REFERENCIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PERS_MATR_POLI_OPERACIONES ADD CONSTRAINT PCP_PERS_MATR_POLI_OPER_FK_OPER FOREIGN KEY (CONS_OPER_COSTURA) REFERENCES PCP_OPER_COSTURA (CONS_OPER_COSTURA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PERS_MATR_POLI_OPERACIONES ADD CONSTRAINT PCP_PERS_MATR_POLI_OPER_FK_PERS FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PERS_MATR_POLI_RECURSOS ADD CONSTRAINT PCP_PERS_MATR_POLI_RECU_FK_PERS FOREIGN KEY (CONS_PERSONAL) REFERENCES GLO_PERSONAL (CONS_PERSONAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PERS_MATR_POLI_RECURSOS ADD CONSTRAINT PCP_PERS_MATR_POLI_RECU_FK_RECU FOREIGN KEY (CONS_RECU_FAMILIA) REFERENCES GLO_RECU_FAMILIAS (CONS_RECU_FAMILIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_CALENDARIO ADD CONSTRAINT PCP_PLAN_CALE_FK_EMPRESAS FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_CALENDARIO ADD CONSTRAINT PCP_PLAN_CALE_FK_LINEAS FOREIGN KEY (CONS_LINEA) REFERENCES GLO_PLAN_LINEAS (CONS_PLAN_LINEA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_CALENDARIO ADD CONSTRAINT PCP_PLAN_CALE_FK_PLANTAS FOREIGN KEY (CONS_PLANTA) REFERENCES GLO_PLANTAS (CONS_PLANTA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_CALENDARIO ADD CONSTRAINT PCP_PLAN_CALE_FK_SECCIONES FOREIGN KEY (CONS_SECCION) REFERENCES GLO_LINE_SECCIONES (CONS_LINE_SECCION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_CAPACIDAD ADD CONSTRAINT PCP_PLAN_CAPA_FK_PLAN_LINEAS FOREIGN KEY (CONS_PLAN_LINEA) REFERENCES GLO_PLAN_LINEAS (CONS_PLAN_LINEA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_DEPE_PROCESOS ADD CONSTRAINT PCP_PLAN_DEPE_PROC_FK_PROCESOS FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_DEPE_PROCESOS ADD CONSTRAINT PCP_PLAN_DEPE_PROC_FK_PROC_SIGU FOREIGN KEY (CONS_PROC_SIGUIENTE) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_LINE_ESPECIALIDADES ADD CONSTRAINT PCP_PLAN_LINE_ESPE_FK_ESTILOS FOREIGN KEY (CONS_REFE_ESTILO) REFERENCES GLO_REFE_ESTILOS (CONS_REFE_ESTILO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_LINE_ESPECIALIDADES ADD CONSTRAINT PCP_PLAN_LINE_ESPE_FK_LINEAS FOREIGN KEY (CONS_LINEA) REFERENCES GLO_LINEAS (CONS_LINEA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_RUTAS ADD CONSTRAINT PCP_PLAN_RUTA_FK_EMPRESAS FOREIGN KEY (CONS_EMPRESA) REFERENCES GLO_EMPRESAS (CONS_EMPRESA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_RUTAS ADD CONSTRAINT PCP_PLAN_RUTA_FK_ESTILOS FOREIGN KEY (CONS_REFE_ESTILO) REFERENCES GLO_REFE_ESTILOS (CONS_REFE_ESTILO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_SECC_PROCESOS ADD CONSTRAINT PCP_PLAN_SECC_PROC_FK_PROCESOS FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PLAN_SECC_PROCESOS ADD CONSTRAINT PCP_PLAN_SECC_PROC_FK_SECCIONES FOREIGN KEY (CONS_SECCION) REFERENCES GLO_SECCIONES (CONS_SECCION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROCESOS ADD CONSTRAINT PCP_PROCESOS_FK_GRUP_PROCES FOREIGN KEY (CONS_GRUP_PROCESO) REFERENCES SIS_PCP_GRUP_PROCESOS (CONS_GRUP_PROCESO) ON UPDATE CASCADE;

ALTER TABLE PCP_PROCESOS ADD CONSTRAINT PCP_PROCESOS_FK_PROD_PAQU_TIPOS FOREIGN KEY (CONS_PROD_PAQU_TIPO) REFERENCES PCP_PROD_PAQU_TIPOS (CONS_PROD_PAQU_TIPO) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_PROCESOS ADD CONSTRAINT PCP_PROCESOS_FK_PROD_PUNT_FINA FOREIGN KEY (CONS_PUNT_CONT_FINAL) REFERENCES PCP_PUNT_CONTROL (CONS_PUNT_CONTROL) ON UPDATE CASCADE;

ALTER TABLE PCP_PROCESOS ADD CONSTRAINT PCP_PROCESOS_FK_PROD_PUNT_INIC FOREIGN KEY (CONS_PUNT_CONT_INICIAL) REFERENCES PCP_PUNT_CONTROL (CONS_PUNT_CONTROL) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_CAPAS ADD CONSTRAINT PCP_PROD_CAPAS_FK_PROD_ESPIGAS FOREIGN KEY (CONS_PROD_ESPIGA) REFERENCES PCP_PROD_ESPIGAS (CONS_PROD_ESPIGA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_CAPAS ADD CONSTRAINT PCP_PROD_CAPAS_FK_REFE_COLORES FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_DIST_PAQUETES ADD CONSTRAINT PCP_PROD_DIST_PAQU_FK_GRUP_TALL FOREIGN KEY (CONS_GRUP_TALL_DETALLE) REFERENCES GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_DIST_PAQUETES ADD CONSTRAINT PCP_PROD_DIST_PAQU_FK_LOTES FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_DIST_PAQUETES ADD CONSTRAINT PCP_PROD_DIST_PAQU_FK_PROCESOS FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_DIST_PAQUETES ADD CONSTRAINT PCP_PROD_DIST_PAQU_FK_REFE_COLO FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_DIST_PAQUETES ADD CONSTRAINT PCP_PROD_DIST_PAQU_FK_TIPO_PAQU FOREIGN KEY (CONS_PROD_PAQU_TIPO) REFERENCES PCP_PROD_PAQU_TIPOS (CONS_PROD_PAQU_TIPO) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_ESPIGAS ADD CONSTRAINT PCP_PROD_ESPIGAS_FK_PROCESOS FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_ESPIGAS ADD CONSTRAINT PCP_PROD_ESPIGAS_FK_PROD_LOTES FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_ESPIGAS ADD CONSTRAINT PCP_PROD_ESPIGAS_FK_REFE_MATERI FOREIGN KEY (CONS_REFE_MATERIAL) REFERENCES PCP_REFE_MATERIALES (CONS_REFE_MATERIAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_IMPR_TIQUETES ADD CONSTRAINT PCP_PROD_IMPR_TIQU_FK_PROD_LOTE FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_LIST_OPER_CORTE ADD CONSTRAINT PCP_PROD_LIST_OPER_CORT_FK_LOTE FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_LIST_OPER_CORTE ADD CONSTRAINT PCP_PROD_LIST_OPER_CORT_FK_MATE FOREIGN KEY (CONS_REFE_MATERIAL) REFERENCES PCP_REFE_MATERIALES (CONS_REFE_MATERIAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_LIST_OPER_CORTE ADD CONSTRAINT PCP_PROD_LIST_OPER_CORT_FK_PROC FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_PROD_LIST_OPER_CORTE ADD CONSTRAINT PCP_PROD_LIST_OPER_CORT_FK_UNID FOREIGN KEY (CONS_CORT_UNID_MEDIDA) REFERENCES SIS_CORT_UNID_MEDIDA (CONS_CORT_UNID_MEDIDA) ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE PCP_PROD_LIST_OPER_COSTURA ADD CONSTRAINT PCP_PROD_LIST_OPER_COST_FK_LOTE FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_LIST_OPER_COSTURA ADD CONSTRAINT PCP_PROD_LIST_OPER_COST_FK_PUNT FOREIGN KEY (CONS_PUNT_CONTROL) REFERENCES PCP_PUNT_CONTROL (CONS_PUNT_CONTROL) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_LOTES ADD CONSTRAINT PCP_PROD_LOTES_FK_PROC_FINALIZA FOREIGN KEY (CONS_ULTI_PROC_FINALIZADO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_LOTES ADD CONSTRAINT PCP_PROD_LOTES_FK_PROD_ORDENES FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_LOTE_CORTE ADD CONSTRAINT PCP_PROD_LOTE_CORT_FK_PROD_LOTE FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_LOTE_UNIDADES ADD CONSTRAINT PCP_PROD_LOTE_UNID_FK_COLORES FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_LOTE_UNIDADES ADD CONSTRAINT PCP_PROD_LOTE_UNID_FK_LOTES FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_LOTE_UNIDADES ADD CONSTRAINT PCP_PROD_LOTE_UNID_FK_TALLAS FOREIGN KEY (CONS_GRUP_TALL_DETALLE) REFERENCES GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_ORDENES ADD CONSTRAINT PCP_PROD_ORDE_FK_REFERENCIAS FOREIGN KEY (CONS_REFERENCIA) REFERENCES GLO_REFERENCIAS (CONS_REFERENCIA) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_ORDE_HISTORIAL ADD CONSTRAINT PCP_PROD_ORDE_CONS_ORDEN FOREIGN KEY (CONS_PROD_ORDEN) REFERENCES PCP_PROD_ORDENES (CONS_PROD_ORDEN) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_ORDE_RESPONSABLES ADD CONSTRAINT PCP_PROD_ORDE_RESP_FK_LOTES FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_ORDE_RESPONSABLES ADD CONSTRAINT PCP_PROD_ORDE_RESP_FK_PROCESOS FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_PUNT_CONTROL ADD CONSTRAINT PCP_PROD_PUNT_CONT_PROCESO FOREIGN KEY (CONS_PROCESO) REFERENCES PCP_PROCESOS (CONS_PROCESO) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_UNIDADES ADD CONSTRAINT PCP_PROD_UNID_FK_GRUP_TALLAS FOREIGN KEY (CONS_GRUP_TALL_DETALLE) REFERENCES GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE) ON UPDATE CASCADE;

ALTER TABLE PCP_PROD_UNIDADES ADD CONSTRAINT PCP_PROD_UNID_FK_PROD_ESPIGAS FOREIGN KEY (CONS_PROD_ESPIGA) REFERENCES PCP_PROD_ESPIGAS (CONS_PROD_ESPIGA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROD_UNIDADES ADD CONSTRAINT PCP_PROD_UNID_FK_REFE_COLORES FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_PROG_PRODUCCION ADD CONSTRAINT PCP_PROG_PROD_FK_PROD_LOTES FOREIGN KEY (CONS_PROD_LOTE) REFERENCES PCP_PROD_LOTES (CONS_PROD_LOTE) ON UPDATE CASCADE;

ALTER TABLE PCP_PROG_PROD_GRUPOS ADD CONSTRAINT PCP_PROG_PROD_GRUP_FK_PROG_PROD FOREIGN KEY (CONS_PROG_PRODUCCION) REFERENCES PCP_PROG_PRODUCCION (CONS_PROG_PRODUCCION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_PROG_PROD_OPERACIONES ADD CONSTRAINT PCP_PROG_PROD_OPER_FK_PROG_PROD FOREIGN KEY (CONS_PROG_PRODUCCION) REFERENCES PCP_PROG_PRODUCCION (CONS_PROG_PRODUCCION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_02_HOJA_DISENO ADD CONSTRAINT PCP_REFE_FICH_02_FK_FICHA FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_03_ESPE_DISENO ADD CONSTRAINT PCP_REFE_FICH_03_FK_FICHAS FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_04_ESPE_DISENO ADD CONSTRAINT PCP_REFE_FICH_02_FK_FICHAS FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_05_ESPE_EMPAQUE ADD CONSTRAINT PCP_REFE_FICH_05_FK_FICHAS FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_06_ESPE_CONS ADD CONSTRAINT PCP_REFE_FICH_06_FK_FICHAS FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_07_MEDI_ESPECIAL ADD CONSTRAINT PCP_REFE_FICH_07_FK_FICHAS FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_08_MEDI_DETA ADD CONSTRAINT PCP_REFE_FICH_08_FK_08_MEDI FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_08_MEDI_PREN (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_08_MEDI_PREN ADD CONSTRAINT PCP_REFE_FICH_08_FK_FICHAS FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_09_ESPE_PRES ADD CONSTRAINT PCP_REFE_FICH_09_FK_FICHAS FOREIGN KEY (CONS_REFE_FICHA) REFERENCES PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_EDAD FOREIGN KEY (CONS_REFE_EDAD) REFERENCES GLO_REFE_EDADES (CONS_REFE_EDAD) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_ESTILO FOREIGN KEY (CONS_REFE_ESTILO) REFERENCES GLO_REFE_ESTILOS (CONS_REFE_ESTILO) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_GRUPO FOREIGN KEY (CONS_REFE_GRUPO) REFERENCES GLO_REFE_GRUPOS (CONS_REFE_GRUPO) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_GRUP_TALL FOREIGN KEY (CONS_REFE_GRUP_TALLAS) REFERENCES GLO_GRUP_TALLAS (CONS_GRUP_TALLAS) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_LINEA FOREIGN KEY (CONS_REFE_LINEA) REFERENCES GLO_REFE_LINEAS (CONS_REFE_LINEA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_MARCA FOREIGN KEY (CONS_REFE_MARCA) REFERENCES GLO_REFE_MARCAS (CONS_REFE_MARCA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_TEMPORADA FOREIGN KEY (CONS_REFE_TEMPORADA) REFERENCES GLO_REFE_TEMPORADAS (CONS_REFE_TEMPORADA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_TIPO_FICH FOREIGN KEY (CONS_REFE_TIPO_FICHA) REFERENCES SIS_REFE_TIPO_FICHA (CONS_REFE_TIPO_FICHA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_FICH_TECNICAS ADD CONSTRAINT PCP_REFE_FICH_TECN_FK_VARIACION FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_INSUMOS ADD CONSTRAINT PCP_REFE_INSU_INSU_REFERENCIA FOREIGN KEY (CONS_INSU_REFERENCIA) REFERENCES PCP_INSU_REFERENCIAS (CONS_INSU_REFERENCIA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_INSUMOS ADD CONSTRAINT PCP_REFE_INSU_MONEDAS FOREIGN KEY (CONS_MONEDA) REFERENCES GLO_MONEDAS (CONS_MONEDA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_INSUMOS ADD CONSTRAINT PCP_REFE_INSU_REFE_VARIACION FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_INSUMOS ADD CONSTRAINT PCP_REFE_INSU_TERCERO FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_INSU_COLORES ADD CONSTRAINT PCP_REFE_INSU_COLO_COLOR FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_INSU_COLORES ADD CONSTRAINT PCP_REFE_INSU_COLO_COLO_COMBINA FOREIGN KEY (CONS_COLO_COMBINADO) REFERENCES GLO_COLORES (CONS_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_INSU_COLORES ADD CONSTRAINT PCP_REFE_INSU_COLO_REFE_INSUMO FOREIGN KEY (CONS_REFE_INSUMO) REFERENCES PCP_REFE_INSUMOS (CONS_REFE_INSUMO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_INSU_TALLAS ADD CONSTRAINT PCP_REFE_INSU_TALL_GRUP_TALLAS FOREIGN KEY (CONS_GRUP_TALL_DETALLE) REFERENCES GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_INSU_TALLAS ADD CONSTRAINT PCP_REFE_INSU_TALL_REFE_INSUMO FOREIGN KEY (CONS_REFE_INSUMO) REFERENCES PCP_REFE_INSUMOS (CONS_REFE_INSUMO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_LIST_OPER_CORTE ADD CONSTRAINT PCP_REFE_LIST_OPER_CORT_MATERIA FOREIGN KEY (CONS_REFE_MATERIAL) REFERENCES PCP_REFE_MATERIALES (CONS_REFE_MATERIAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_LIST_OPER_CORTE ADD CONSTRAINT PCP_REFE_LIST_OPER_CORT_REFEREN FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_LIST_OPER_CORTE ADD CONSTRAINT PCP_REFE_LIST_OPER_CORT_UNID_ME FOREIGN KEY (CONS_CORT_UNID_MEDIDA) REFERENCES SIS_CORT_UNID_MEDIDA (CONS_CORT_UNID_MEDIDA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_LIST_OPER_COSTURA ADD CONSTRAINT PCP_REFE_LIST_OPER_COST_PUNT_CO FOREIGN KEY (CONS_PUNT_CONTROL) REFERENCES PCP_PUNT_CONTROL (CONS_PUNT_CONTROL) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_LIST_OPER_COSTURA ADD CONSTRAINT PCP_REFE_LIST_OPER_COST_REFEREN FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_LIST_OPER_COST_HIST ADD CONSTRAINT PCP_REFE_LIST_OPER_COST_H_REFER FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_MATERIALES ADD CONSTRAINT PCP_REFE_MATE_MATE_REFERENCIA FOREIGN KEY (CONS_MATE_REFERENCIA) REFERENCES PCP_MATE_REFERENCIAS (CONS_MATE_REFERENCIA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_MATERIALES ADD CONSTRAINT PCP_REFE_MATE_MONEDAS FOREIGN KEY (CONS_MONEDA) REFERENCES GLO_MONEDAS (CONS_MONEDA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_MATERIALES ADD CONSTRAINT PCP_REFE_MATE_REFE_VARIACIONES FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_MATERIALES ADD CONSTRAINT PCP_REFE_MATE_TERCERO FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_MATE_COLORES ADD CONSTRAINT PCP_REFE_MATE_COLO_COLOR FOREIGN KEY (CONS_REFE_COLOR) REFERENCES GLO_REFE_COLORES (CONS_REFE_COLOR) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_MATE_COLORES ADD CONSTRAINT PCP_REFE_MATE_COLO_COLO_COMBINA FOREIGN KEY (CONS_COLO_COMBINADO) REFERENCES GLO_COLORES (CONS_COLOR) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_MATE_COLORES ADD CONSTRAINT PCP_REFE_MATE_COLO_REFE_MATERIA FOREIGN KEY (CONS_REFE_MATERIAL) REFERENCES PCP_REFE_MATERIALES (CONS_REFE_MATERIAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_MATE_TALLAS ADD CONSTRAINT PCP_REFE_MATE_TALL_GRUP_TALLAS FOREIGN KEY (CONS_GRUP_TALL_DETALLE) REFERENCES GLO_GRUP_TALL_DETALLE (CONS_GRUP_TALL_DETALLE) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_MATE_TALLAS ADD CONSTRAINT PCP_REFE_MATE_TALL_REFE_MATERIA FOREIGN KEY (CONS_REFE_MATERIAL) REFERENCES PCP_REFE_MATERIALES (CONS_REFE_MATERIAL) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_OPER_COST_ALTE ADD CONSTRAINT PCP_REFE_OPER_COST_ALTE_LIST_OP FOREIGN KEY (CONS_REFE_VARIACION, SECU_OPERACION) REFERENCES PCP_REFE_LIST_OPER_COSTURA (CONS_REFE_VARIACION, SECU_OPERACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_OPER_COST_ALTE ADD CONSTRAINT PCP_REFE_OPER_COST_ALTE_OPERACI FOREIGN KEY (CONS_OPER_COSTURA) REFERENCES PCP_OPER_COSTURA (CONS_OPER_COSTURA) ON UPDATE CASCADE;

ALTER TABLE PCP_REFE_VARIACIONES ADD CONSTRAINT PCP_REFE_VARI_FK_REFEREN FOREIGN KEY (CONS_REFERENCIA) REFERENCES GLO_REFERENCIAS (CONS_REFERENCIA) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_VARIACIONES ADD CONSTRAINT PCP_REFE_VARI_FK_TIPO_VARIACION FOREIGN KEY (CONS_REFE_TIPO_VARIACION) REFERENCES PCP_REFE_TIPO_VARIACIONES (CONS_REFE_TIPO_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_VARI_COSTURA ADD CONSTRAINT PCP_REFE_VARI_COST_VARIACION FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_REFE_VARI_DISENO ADD CONSTRAINT PCP_REFE_VARI_DISE_VARIACION FOREIGN KEY (CONS_REFE_VARIACION) REFERENCES PCP_REFE_VARIACIONES (CONS_REFE_VARIACION) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_TERCEROS ADD CONSTRAINT PCP_TERCEROS_GLO_TERCEROS FOREIGN KEY (CONS_TERCERO) REFERENCES GLO_TERCEROS (CONS_TERCERO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE PCP_TERCEROS ADD CONSTRAINT PCP_TERCEROS_SIS_TIPO_TERCERO FOREIGN KEY (CONS_TIPO_TERCERO) REFERENCES SIS_TIPO_TERCERO (CONS_TIPO_TERCERO) ON UPDATE CASCADE;

ALTER TABLE SIS_FAMI_MOVIMIENTO ADD CONSTRAINT SIS_FAMI_MOVI_ESTADO FOREIGN KEY (CONS_ESTADO) REFERENCES SIS_ESTADOS (CONS_ESTADO) ON UPDATE CASCADE;

ALTER TABLE SIS_TABL_AUXI_DETALLE ADD CONSTRAINT SIS_TABLA_AUXI_DETA_FK_TABL_AUX FOREIGN KEY (CONS_TABL_AUXILIAR) REFERENCES SIS_TABL_AUXILIARES (CONS_TABL_AUXILIAR) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE SIS_TRADUCCION ADD CONSTRAINT SIS_TRAD_FRASE FOREIGN KEY (CONS_FRASE) REFERENCES SIS_FRASES (CONS_FRASE) ON UPDATE CASCADE;

ALTER TABLE SIS_TRADUCCION ADD CONSTRAINT SIS_TRAD_TIPO_LENGUAJE FOREIGN KEY (CONS_TIPO_LENGUAJE) REFERENCES SIS_TIPO_LENGUAJE (CONS_TIPO_LENGUAJE) ON UPDATE CASCADE;

ALTER TABLE SIS_USUA_INFORMES ADD CONSTRAINT SIS_USUA_INFO_USUA_MODULO FOREIGN KEY (CONS_USUA_MODULO) REFERENCES SIS_USUA_MODULOS (CONS_USUA_MODULO) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE SIS_USUA_OPCIONES ADD CONSTRAINT SIS_USUA_OPCI_USUA_MODULO FOREIGN KEY (CONS_USUA_MODULO) REFERENCES SIS_USUA_MODULOS (CONS_USUA_MODULO) ON UPDATE CASCADE ON DELETE CASCADE;

/*  View: VIS_GLO_LINE_SECCIONES, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_LINE_SECCIONES (CONS_LINE_SECCION, CONS_SECCION, CONS_PLAN_LINEA, FECH_SISTEMA, USUA_SISTEMA, CODI_SECCION, NOMB_SECCION)
AS


SELECT GLO_LINE_SECCIONES.CONS_LINE_SECCION, GLO_LINE_SECCIONES.CONS_SECCION,
       GLO_LINE_SECCIONES.CONS_PLAN_LINEA, GLO_LINE_SECCIONES.FECH_SISTEMA,
       GLO_LINE_SECCIONES.USUA_SISTEMA, GLO_SECCIONES.CODI_SECCION,
       GLO_SECCIONES.NOMB_SECCION
FROM GLO_SECCIONES
   INNER JOIN GLO_LINE_SECCIONES ON (GLO_SECCIONES.CONS_SECCION = GLO_LINE_SECCIONES.CONS_SECCION) ;

/*  View: VIS_C08_TELA_PEDIDO, Owner: SYSDBA  */
CREATE VIEW VIS_C08_TELA_PEDIDO (
    ADIC_C08_GP_DESC_BREVE, CONS_PEDI_REFERENCIA, NOMB_MATE_REFERENCIA, ES_MATE_BASICO)
AS

    SELECT M.ADIC_C08_GP_DESC_BREVE, R.CONS_PEDI_REFERENCIA, M.NOMB_MATE_REFERENCIA, RM.ES_MATE_BASICO
FROM PCP_PEDI_REFERENCIAS R

   INNER JOIN PCP_REFE_VARIACIONES V ON (R.CONS_REFE_VARIACION = V.CONS_REFE_VARIACION)
   INNER JOIN PCP_REFE_MATERIALES RM ON (V.CONS_REFE_VARIACION = RM.CONS_REFE_VARIACION)
   INNER JOIN PCP_MATE_REFERENCIAS M ON (RM.CONS_MATE_REFERENCIA = M.CONS_MATE_REFERENCIA);

/*  View: VIS_GLO_ABONADOS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_ABONADOS (CONS_ABONADO, CODI_ABONADO, NOMB_ABONADO, 
    ACTIVO, PORCENTAJE, CONS_VALO_HORA, 
    NOMB_FORM_PAGO_VALO_HORA, VALO_HORA, CONS_VALO_MINIMO, 
    NOMB_FORM_PAGO_VALO_MINIMO, VALO_MINIMO, ADICIONAL_1, 
    FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT G.CONS_ABONADO, G.CODI_ABONADO,
       G.NOMB_ABONADO, G.ACTIVO,
       G.PORCENTAJE, G.CONS_VALO_HORA,
       H.NOMB_FORM_PAGO_VALO_HORA, G.VALO_HORA,
       G.CONS_VALO_MINIMO, M.NOMB_FORM_PAGO_VALO_MINIMO,
       G.VALO_MINIMO, G.ADICIONAL_1,
       G.FECH_SISTEMA, G.USUA_SISTEMA
FROM GLO_ABONADOS A

   LEFT OUTER JOIN PCP_FORM_PAGO_VALO_HORA H ON (G.CONS_VALO_HORA = H.CONS_FORM_PAGO_VALO_HORA)
   LEFT OUTER JOIN PCP_FORM_PAGO_VALO_MINIMO M ON (G.CONS_VALO_MINIMO = M.CONS_FORM_PAGO_VALO_MINIMO);

/*  View: VIS_GLO_BODEGAS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_BODEGAS (CONS_BODEGA, CONS_EMPRESA, CODI_BODEGA, NOMB_BODEGA, 
    CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD, DIRECCION, TELE_1, TELE_2, FAX, 
    TELE_MOVIL, RESPONSABLE, DESCRIPCION, FECH_SISTEMA, USUA_SISTEMA, NOMB_EMPRESA, 
    CODI_EMPRESA, CONS_EMPRESA1, CODI_PAIS, NOMB_PAIS, CODI_DEPARTAMENTO, 
    NOMB_DEPARTAMENTO, CODI_CIUDAD, NOMB_CIUDAD)
AS

SELECT B.*, E.NOMB_EMPRESA, E.CODI_EMPRESA, E.CONS_EMPRESA,
 PA.CODI_PAIS, PA.NOMB_PAIS,
 D.CODI_DEPARTAMENTO, D.NOMB_DEPARTAMENTO,
 C.CODI_CIUDAD, C.NOMB_CIUDAD
FROM GLO_BODEGAS B, GLO_PAISES PA,
 GLO_DEPARTAMENTOS D, GLO_CIUDADES C,
 GLO_EMPRESAS E
WHERE (B.CONS_EMPRESA = E.CONS_EMPRESA) AND 
        (B.CONS_PAIS = C.CONS_PAIS AND 
            B.CONS_DEPARTAMENTO = C.CONS_DEPARTAMENTO AND 
            B.CONS_CIUDAD = C.CONS_CIUDAD) AND 
        (C.CONS_DEPARTAMENTO = D.CONS_DEPARTAMENTO AND 
            C.CONS_PAIS = D.CONS_PAIS) AND 
        (D.CONS_PAIS = PA.CONS_PAIS) ;

/*  View: VIS_GLO_CIUDADES, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_CIUDADES (CONS_CIUDAD, FECH_SISTEMA, USUA_SISTEMA, CODI_CIUDAD, NOMB_CIUDAD, CONS_DEPARTAMENTO, CODI_DEPARTAMENTO, NOMB_DEPARTAMENTO, CONS_PAIS, CODI_PAIS, NOMB_PAIS)
AS


SELECT C.CONS_CIUDAD, C.FECH_SISTEMA,
    C.USUA_SISTEMA, C.CODI_CIUDAD,
    C.NOMB_CIUDAD, C.CONS_DEPARTAMENTO,
    D.CODI_DEPARTAMENTO, D.NOMB_DEPARTAMENTO,
    D.CONS_PAIS, P.CODI_PAIS, P.NOMB_PAIS
FROM GLO_PAISES P, GLO_DEPARTAMENTOS D, GLO_CIUDADES C
WHERE (C.CONS_PAIS = D.CONS_PAIS AND 
    C.CONS_DEPARTAMENTO = D.CONS_DEPARTAMENTO) AND 
    (D.CONS_PAIS = P.CONS_PAIS);

/*  View: VIS_GLO_COLO_SUBGRUPOS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_COLO_SUBGRUPOS (CONS_COLO_SUBGRUPO, CONS_COLO_GRUPO, CODI_COLO_GRUPO, 
    NOMB_COLO_GRUPO, CODI_COLO_SUBGRUPO, NOMB_COLO_SUBGRUPO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT S.CONS_COLO_SUBGRUPO, S.CONS_COLO_GRUPO,
    G.CODI_COLO_GRUPO, G.NOMB_COLO_GRUPO,
    S.CODI_COLO_SUBGRUPO, S.NOMB_COLO_SUBGRUPO,
    S.FECH_SISTEMA, S.USUA_SISTEMA
FROM GLO_COLO_SUBGRUPOS S
   INNER JOIN GLO_COLO_GRUPOS G ON (S.CONS_COLO_GRUPO = G.CONS_COLO_GRUPO);

/*  View: VIS_GLO_COME_COMP_ENVIO, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_COME_COMP_ENVIO (CONS_COMP_ENVIO, CODI_COMP_ENVIO, NOMB_COMP_ENVIO, CONS_PAIS, 
    NOMB_PAIS, CONS_DEPARTAMENTO, NOMB_DEPARTAMENTO, CONS_CIUDAD, NOMB_CIUDAD, DIRECCION, 
    TELEFONO1, TELEFONO2, FAX, CELULAR, CORR_ELECTRONICO, PAGI_WEB, OBSERVACIONES, 
    FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT COMP.CONS_COMP_ENVIO, COMP.CODI_COMP_ENVIO, COMP.NOMB_COMP_ENVIO,
    COMP.CONS_PAIS, PAIS.NOMB_PAIS, COMP.CONS_DEPARTAMENTO, DEPA.NOMB_DEPARTAMENTO,
    COMP.CONS_CIUDAD, CIUD.NOMB_CIUDAD, COMP.DIRECCION, COMP.TELEFONO1,
    COMP.TELEFONO2, COMP.FAX, COMP.CELULAR, COMP.CORR_ELECTRONICO,
    COMP.PAGI_WEB, COMP.OBSERVACIONES, COMP.FECH_SISTEMA, COMP.USUA_SISTEMA
FROM GLO_COME_COMP_ENVIO COMP
   INNER JOIN GLO_DEPARTAMENTOS DEPA ON (CIUD.CONS_DEPARTAMENTO = DEPA.CONS_DEPARTAMENTO)
   INNER JOIN GLO_PAISES PAIS ON (DEPA.CONS_PAIS = PAIS.CONS_PAIS);

/*  View: VIS_GLO_COME_SUBZONAS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_COME_SUBZONAS (CONS_COME_ZONA_DETALLE, CODI_COME_ZONA_DETALLE, NOMB_COME_ZONA_DETALLE, CONS_COME_ZONA, CODI_COME_ZONA, NOMB_COME_ZONA, FECH_SISTEMA, USUA_SISTEMA)
AS


SELECT GLO_COME_ZONA_DETALLE.CONS_COME_ZONA_DETALLE, GLO_COME_ZONA_DETALLE.CODI_COME_ZONA_DETALLE,
       GLO_COME_ZONA_DETALLE.NOMB_COME_ZONA_DETALLE, GLO_COME_ZONA_DETALLE.CONS_COME_ZONA,
       GLO_COME_ZONAS.CODI_COME_ZONA, GLO_COME_ZONAS.NOMB_COME_ZONA,
       GLO_COME_ZONA_DETALLE.FECH_SISTEMA, GLO_COME_ZONA_DETALLE.USUA_SISTEMA

FROM GLO_COME_ZONA_DETALLE
   INNER JOIN GLO_COME_ZONAS ON (GLO_COME_ZONA_DETALLE.CONS_COME_ZONA = GLO_COME_ZONAS.CONS_COME_ZONA)

;

/*  View: VIS_GLO_COME_VENDEDORES, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_COME_VENDEDORES (CONS_COME_VENDEDOR, CODI_COME_VENDEDOR, IDEN_COME_VENDEDOR, NOMB_COME_VENDEDOR, CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD, NOMB_CIUDAD, NOMB_DEPARTAMENTO, NOMB_PAIS, DIRECCION, APAR_AEREO, TELEFONO1, TELEFONO2, TELEFONO3, TELE_FAX, TELE_MOVIL, CORR_ELECTRONICO, PAGI_WEB, OBSERVACIONES, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT GLO_COME_VENDEDORES.CONS_COME_VENDEDOR, GLO_COME_VENDEDORES.CODI_COME_VENDEDOR,
       GLO_COME_VENDEDORES.IDEN_COME_VENDEDOR, GLO_COME_VENDEDORES.NOMB_COME_VENDEDOR,
       GLO_COME_VENDEDORES.CONS_PAIS, GLO_COME_VENDEDORES.CONS_DEPARTAMENTO,
       GLO_COME_VENDEDORES.CONS_CIUDAD, VIS_GLO_CIUDADES.NOMB_CIUDAD,
       VIS_GLO_CIUDADES.NOMB_DEPARTAMENTO, VIS_GLO_CIUDADES.NOMB_PAIS,
       GLO_COME_VENDEDORES.DIRECCION, GLO_COME_VENDEDORES.APAR_AEREO,
       GLO_COME_VENDEDORES.TELEFONO1, GLO_COME_VENDEDORES.TELEFONO2,
       GLO_COME_VENDEDORES.TELEFONO3, GLO_COME_VENDEDORES.TELE_FAX,
       GLO_COME_VENDEDORES.TELE_MOVIL, GLO_COME_VENDEDORES.CORR_ELECTRONICO,
       GLO_COME_VENDEDORES.PAGI_WEB, GLO_COME_VENDEDORES.OBSERVACIONES,
       GLO_COME_VENDEDORES.FECH_SISTEMA, GLO_COME_VENDEDORES.USUA_SISTEMA
FROM GLO_COME_VENDEDORES
   INNER JOIN VIS_GLO_CIUDADES ON (GLO_COME_VENDEDORES.CONS_CIUDAD = VIS_GLO_CIUDADES.CONS_CIUDAD);

/*  View: VIS_GLO_DEPARTAMENTOS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_DEPARTAMENTOS (CONS_DEPARTAMENTO, CONS_PAIS, FECH_SISTEMA, USUA_SISTEMA, CODI_DEPARTAMENTO, NOMB_DEPARTAMENTO, CODI_PAIS, NOMB_PAIS)
AS

SELECT D.CONS_DEPARTAMENTO, D.CONS_PAIS,
    D.FECH_SISTEMA, D.USUA_SISTEMA,
    D.CODI_DEPARTAMENTO, D.NOMB_DEPARTAMENTO,
    P.CODI_PAIS, P.NOMB_PAIS
FROM GLO_DEPARTAMENTOS D, GLO_PAISES P
WHERE P.CONS_PAIS = D.CONS_PAIS ;

/*  View: VIS_GLO_EMPRESAS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_EMPRESAS (CONS_EMPRESA, CODI_EMPRESA, FECH_SISTEMA, USUA_SISTEMA, NOMB_EMPRESA, NUME_IDENTIFICACION, ACTI_PRINCIPAL, REPR_LEGAL, CONS_CIUDAD, CODI_CIUDAD, NOMB_CIUDAD, CONS_DEPARTAMENTO, CODI_DEPARTAMENTO, NOMB_DEPARTAMENTO, CONS_PAIS, CODI_PAIS, NOMB_PAIS, DIRECCION, TELE_1, TELE_2, TELE_FAX, TELE_MOVIL, CORR_ELECTRONICO, PAGI_WEB)
AS


SELECT E.CONS_EMPRESA, E.CODI_EMPRESA,
    E.FECH_SISTEMA, E.USUA_SISTEMA,
    E.NOMB_EMPRESA, E.NUME_IDENTIFICACION || '-' ||
    E.DIGI_VERI_NUME_IDENTIFICACION, E.ACTI_PRINCIPAL,
    E.REPR_LEGAL, E.CONS_CIUDAD, C.CODI_CIUDAD,
    C.NOMB_CIUDAD, C.CONS_DEPARTAMENTO,
    C.CODI_DEPARTAMENTO, C.NOMB_DEPARTAMENTO,
    C.CONS_PAIS, C.CODI_PAIS, C.NOMB_PAIS,
    E.DIRECCION, E.TELE_1, E.TELE_2,
    E.TELE_FAX, E.TELE_MOVIL, E.CORR_ELECTRONICO,
    E.PAGI_WEB
FROM GLO_EMPRESAS E, VIS_GLO_CIUDADES C
WHERE E.CONS_CIUDAD = C.CONS_CIUDAD
;

/*  View: VIS_GLO_HERR_IMAG_CATE_ACTIVAS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_HERR_IMAG_CATE_ACTIVAS (CONS_HERR_IMAG_CATEGORIA, NOMB_HERR_IMAG_CATEGORIA, CONS_HERR_IMAG_CATALOGO, NOMB_HERR_IMAG_CATALOGO, ANCHO, ALTO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT C.CONS_HERR_IMAG_CATEGORIA,
       C.NOMB_HERR_IMAG_CATEGORIA,
       C.CONS_HERR_IMAG_CATALOGO,
       GLO_HERR_IMAG_CATALOGOS.NOMB_HERR_IMAG_CATALOGO,
       C.ANCHO, 
       CAST(C.ALTO AS INTEGER),
       C.FECH_SISTEMA,
       C.USUA_SISTEMA
FROM GLO_HERR_IMAG_CATEGORIAS C
   INNER JOIN GLO_HERR_IMAG_CATALOGOS T ON (C.CONS_HERR_IMAG_CATALOGO = GLO_HERR_IMAG_CATALOGOS.CONS_HERR_IMAG_CATALOGO)
WHERE (GLO_HERR_IMAG_CATALOGOS.ACTIVO = 1) and (C.ACTIVO = 1);

/*  View: VIS_GLO_IMPRODUCTIVOS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_IMPRODUCTIVOS (CONS_IMPRODUCTIVO, CODI_IMPRODUCTIVO, CONS_IMPR_FAMILIA, 
    CODI_IMPR_FAMILIA, NOMB_IMPR_FAMILIA, NOMB_IMPRODUCTIVO, ACTIVO, DESC_INCENTIVOS, 
    DESC_EFICIENCIA, APLI_IMPRODUCTIVO, PORCENTAJE, ADICIONAL_1, CONS_VALO_HORA, 
    NOMB_FORM_PAGO_VALO_HORA, VALO_HORA, CONS_VALO_MINIMO, NOMB_FORM_PAGO_VALO_MINIMO, 
    VALO_MINIMO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT I.CONS_IMPRODUCTIVO, I.CODI_IMPRODUCTIVO, 
        I.CONS_IMPR_FAMILIA, SIS_IMPR_FAMILIAS.CODI_IMPR_FAMILIA,
       SIS_IMPR_FAMILIAS.NOMB_IMPR_FAMILIA, I.NOMB_IMPRODUCTIVO,
       I.ACTIVO, I.DESC_INCENTIVOS,
       I.DESC_EFICIENCIA, I.APLI_IMPRODUCTIVO,
       I.PORCENTAJE, I.ADICIONAL_1,
       I.CONS_VALO_HORA, H.NOMB_FORM_PAGO_VALO_HORA,
       I.VALO_HORA, I.CONS_VALO_MINIMO,
       M.NOMB_FORM_PAGO_VALO_MINIMO, I.VALO_MINIMO,
       I.FECH_SISTEMA, I.USUA_SISTEMA
FROM SIS_IMPR_FAMILIAS
   INNER JOIN GLO_IMPRODUCTIVOS I ON (SIS_IMPR_FAMILIAS.CONS_IMPR_FAMILIA = I.CONS_IMPR_FAMILIA)
   LEFT OUTER JOIN PCP_FORM_PAGO_VALO_HORA H ON (I.CONS_VALO_HORA = H.CONS_FORM_PAGO_VALO_HORA)
   LEFT OUTER JOIN PCP_FORM_PAGO_VALO_MINIMO M ON (I.CONS_VALO_MINIMO = M.CONS_FORM_PAGO_VALO_MINIMO);

/*  View: VIS_GLO_INVE_UNID_MEDI_REFE, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_INVE_UNID_MEDI_REFE (CONS_UNID_MEDIDA, NOMB_UNID_MEDIDA)
AS

Select cons_unid_medida, nomb_unid_medida
from GLO_INVE_UNIDADES
Where  cons_tipo_unid_medida in  (0,3);

/*  View: VIS_C08_CENT_COSTOS, Owner: SYSDBA  */
CREATE VIEW VIS_C08_CENT_COSTOS (CONS_LINE_SECCION, CONS_SECCION, CODI_SECCION, NOMB_SECCION, 
    CONS_PLAN_LINEA, CODI_PLANTA, NOMB_PLANTA, CODI_EMPRESA, NOMB_EMPRESA, TIPO_CENT_COSTOS, 
    CODI_CENT_COSTOS, CODI_LINEA, NOMB_LINEA)
AS

SELECT LS.CONS_LINE_SECCION, LS.CONS_SECCION,
       LS.CODI_SECCION, SECC.NOMB_SECCION, LS.CONS_PLAN_LINEA,
       PLANT.CODI_PLANTA, PLANT.NOMB_PLANTA, EMPR.CODI_EMPRESA,
       EMPR.NOMB_EMPRESA, MIDA.TIPO_CENT_COSTOS, MIDA.CODI_CENT_COSTOS,
       GLO_LINEAS.CODI_LINEA, GLO_LINEAS.NOMB_LINEA
FROM GLO_LINEAS
   INNER JOIN GLO_PLAN_LINEAS PLAN_LINE ON (GLO_LINEAS.CONS_LINEA = PLAN_LINE.CONS_LINEA)
   INNER JOIN VIS_GLO_LINE_SECCIONES LS ON (PLAN_LINE.CONS_PLAN_LINEA = LS.CONS_PLAN_LINEA)
   LEFT OUTER JOIN C08_MIDA_EQUI_CENT_COSTOS MIDA ON (LS.CONS_LINE_SECCION = MIDA.CONS_LINE_SECCION)
   INNER JOIN GLO_SECCIONES SECC ON (LINE_SECC.CONS_SECCION = SECC.CONS_SECCION)
   INNER JOIN GLO_PLANTAS PLANT ON (PLAN_LINE.CONS_PLANTA = PLANT.CONS_PLANTA)
   INNER JOIN GLO_EMPRESAS EMPR ON (PLANT.CONS_EMPRESA = EMPR.CONS_EMPRESA);

/*  View: VIS_GLO_PERS_TIPO_MOVI_BAJA, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_PERS_TIPO_MOVI_BAJA (CONS_PERS_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO, CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT GLO_PERS_TIPO_MOVIMIENTO.CONS_PERS_TIPO_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.CONS_FAMI_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.CODI_PERS_TIPO_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.NOMB_PERS_TIPO_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.FECH_SISTEMA,
    GLO_PERS_TIPO_MOVIMIENTO.USUA_SISTEMA
FROM GLO_PERS_TIPO_MOVIMIENTO
WHERE CONS_FAMI_MOVIMIENTO IN (3,4);

/*  View: VIS_GLO_PERS_TIPO_MOVI_TRASLADO, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_PERS_TIPO_MOVI_TRASLADO (CONS_PERS_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO, 
    CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT GLO_PERS_TIPO_MOVIMIENTO.CONS_PERS_TIPO_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.CONS_FAMI_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.CODI_PERS_TIPO_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.NOMB_PERS_TIPO_MOVIMIENTO,
    GLO_PERS_TIPO_MOVIMIENTO.FECH_SISTEMA,
    GLO_PERS_TIPO_MOVIMIENTO.USUA_SISTEMA
FROM GLO_PERS_TIPO_MOVIMIENTO
WHERE CONS_FAMI_MOVIMIENTO = 2;

/*  View: VIS_GLO_PERS_TIPO_MOVIMIENTO, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_PERS_TIPO_MOVIMIENTO (CONS_PERS_TIPO_MOVIMIENTO, CODI_PERS_TIPO_MOVIMIENTO, 
    NOMB_PERS_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO, CODI_FAMI_MOVIMIENTO, NOMB_FAMI_MOVIMIENTO, 
    CONS_ESTADO, CODI_ESTADO, NOMB_ESTADO)
AS

SELECT TIPO.CONS_PERS_TIPO_MOVIMIENTO, TIPO.CODI_PERS_TIPO_MOVIMIENTO,
    TIPO.NOMB_PERS_TIPO_MOVIMIENTO, TIPO.CONS_FAMI_MOVIMIENTO,
    FAMI.CODI_FAMI_MOVIMIENTO, FAMI.NOMB_FAMI_MOVIMIENTO, FAMI.CONS_ESTADO,
    SIS_ESTADOS.CODI_ESTADO, SIS_ESTADOS.NOMB_ESTADO
FROM SIS_ESTADOS
   INNER JOIN SIS_FAMI_MOVIMIENTO FAMI ON (SIS_ESTADOS.CONS_ESTADO = FAMI.CONS_ESTADO)
   INNER JOIN GLO_PERS_TIPO_MOVIMIENTO TIPO ON (FAMI.CONS_FAMI_MOVIMIENTO = TIPO.CONS_FAMI_MOVIMIENTO);

/*  View: VIS_GLO_PLAN_LINEAS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_PLAN_LINEAS (CONS_PLAN_LINEA, CONS_PLANTA, CONS_LINEA, CODI_LINEA, 
    NOMB_LINEA, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT P.CONS_PLAN_LINEA, P.CONS_PLANTA,
       P.CONS_LINEA, GLO_LINEAS.CODI_LINEA,
       L.NOMB_LINEA, P.FECH_SISTEMA, P.USUA_SISTEMA
FROM GLO_PLAN_LINEAS P
   INNER JOIN GLO_LINEAS L ON (P.CONS_LINEA = L.CONS_LINEA);

/*  View: VIS_GLO_PLANTAS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_PLANTAS (CONS_PLANTA, CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA, FECH_SISTEMA, 
    USUA_SISTEMA, CODI_PLANTA, NOMB_PLANTA, CONS_PAIS, CODI_PAIS, NOMB_PAIS, CONS_DEPARTAMENTO, 
    CODI_DEPARTAMENTO, NOMB_DEPARTAMENTO, CONS_CIUDAD, CODI_CIUDAD, NOMB_CIUDAD, DIRECCION, 
    TELE_1, TELE_2, TELE_FAX, TELE_MOVIL, NOMB_RESPONSABLE, NOMB_SUPERVISOR, TIPO_PLANTA, 
    NOMB_TIPO_PLANTA, DESCRIPCION)
AS

SELECT A.CONS_PLANTA, A.CONS_EMPRESA, E.CODI_EMPRESA,
    E.NOMB_EMPRESA, A.FECH_SISTEMA, A.USUA_SISTEMA,
    A.CODI_PLANTA, A.NOMB_PLANTA, A.CONS_PAIS,
    C.CODI_PAIS, C.NOMB_PAIS,
    A.CONS_DEPARTAMENTO, C.CODI_DEPARTAMENTO,
    C.NOMB_DEPARTAMENTO, A.CONS_CIUDAD, C.CODI_CIUDAD,
    C.NOMB_CIUDAD, A.DIRECCION, A.TELE_1, A.TELE_2,
    A.TELE_FAX, A.TELE_MOVIL, A.NOMB_RESPONSABLE,
    A.NOMB_SUPERVISOR, A.TIPO_PLANTA,
    CASE A.TIPO_PLANTA
       WHEN 0 THEN 'Interna'
       WHEN 1 THEN 'Externa'
       WHEN 2 THEN 'Satélite'
       ELSE 'Desconocido'
    End, A.DESCRIPCION
FROM GLO_PLANTAS A, GLO_EMPRESAS E, VIS_GLO_CIUDADES C
   WHERE (A.CONS_EMPRESA = E.CONS_EMPRESA) AND 
            (A.CONS_CIUDAD = C.CONS_CIUDAD);

/*  View: VIS_GLO_PROTOTIPOS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_PROTOTIPOS (CONS_REFERENCIA, CODI_REFERENCIA, CONS_REFE_TEMPORADA, 
    CODI_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, 
    CODI_BARRAS, CONS_REFE_MARCA, CODI_REFE_MARCA, NOMB_REFE_MARCA, CONS_REFE_LINEA, 
    CODI_REFE_LINEA, NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, NOMB_REFE_EDAD, 
    CONS_REFE_ESTILO, CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, CODI_REFE_GRUPO, 
    NOMB_REFE_GRUPO, CONS_REFE_SEXO, CODI_SEXO, NOMB_SEXO, CONS_REFE_LAVADO, CODI_REFE_LAVADO, 
    NOMB_REFE_LAVADO, CONS_REFE_BORDADO, CODI_REFE_BORDADO, NOMB_REFE_BORDADO, CONS_REFE_ESTAMPADO, 
    CODI_REFE_ESTAMPADO, NOMB_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, 
    NOMB_GRUP_TALLAS, CONS_REFE_ESTADO, CODI_REFE_ESTADO, NOMB_REFE_ESTADO, ESTA_EDIT_MAESTRO, 
    ESTA_MOST_METODOS, ESTA_MOST_ORDE_TRABAJO, ESTA_MOST_INVE_MATERIALES, IMAGEN, AJUS_IMAGEN, 
    IMAG_SMALL, DESCRIPCION, CON_ENTREPIERNAS, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_REFERENCIA, R.CODI_REFERENCIA,
       R.CONS_REFE_TEMPORADA, T.CODI_REFE_TEMPORADA,
       T.NOMB_REFE_TEMPORADA, R.MOLDE,
       R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA,
       R.CODI_BARRAS, R.CONS_REFE_MARCA,
       M.CODI_REFE_MARCA, M.NOMB_REFE_MARCA,
       R.CONS_REFE_LINEA, L.CODI_REFE_LINEA,
       L.NOMB_REFE_LINEA, R.CONS_REFE_EDAD,
       GLO_REFE_EDADES.CODI_REFE_EDAD, GLO_REFE_EDADES.NOMB_REFE_EDAD,
       R.CONS_REFE_ESTILO, E.CODI_REFE_ESTILO,
       E.NOMB_REFE_ESTILO, R.CONS_REFE_GRUPO,
       GLO_REFE_GRUPOS.CODI_REFE_GRUPO, GLO_REFE_GRUPOS.NOMB_REFE_GRUPO,
       R.CONS_REFE_SEXO, X.CODI_SEXO,
       X.NOMB_SEXO, R.CONS_REFE_LAVADO,
       V.CODI_REFE_LAVADO, V.NOMB_REFE_LAVADO,
       R.CONS_REFE_BORDADO, GLO_REFE_BORDADOS.CODI_REFE_BORDADO,
       GLO_REFE_BORDADOS.NOMB_REFE_BORDADO, R.CONS_REFE_ESTAMPADO,
       P.CODI_REFE_ESTAMPADO, P.NOMB_REFE_ESTAMPADO,
       R.CONS_REFE_GRUP_TALLAS, GLO_GRUP_TALLAS.CODI_GRUP_TALLAS,
       GLO_GRUP_TALLAS.NOMB_GRUP_TALLAS, R.CONS_REFE_ESTADO,
       S.CODI_REFE_ESTADO, S.NOMB_REFE_ESTADO,
       S.EDIT_MAESTRO, S.MOST_METODOS,
       S.MOST_ORDE_TRABAJO, S.MOST_INVE_MATERIALES,
       R.IMAGEN, R.AJUS_IMAGEN,
       R.IMAG_SMALL,
       R.DESCRIPCION, R.CON_ENTREPIERNAS,
       R.FECH_SISTEMA, R.USUA_SISTEMA
FROM GLO_REFERENCIAS R
   INNER JOIN GLO_REFE_TEMPORADAS T ON (R.CONS_REFE_TEMPORADA = T.CONS_REFE_TEMPORADA)
   INNER JOIN GLO_REFE_MARCAS M ON (R.CONS_REFE_MARCA = M.CONS_REFE_MARCA)
   INNER JOIN GLO_REFE_LINEAS L ON (R.CONS_REFE_LINEA = L.CONS_REFE_LINEA)
   INNER JOIN GLO_REFE_EDADES ON (R.CONS_REFE_EDAD = GLO_REFE_EDADES.CONS_REFE_EDAD)
   INNER JOIN GLO_REFE_ESTILOS E ON (R.CONS_REFE_ESTILO = E.CONS_REFE_ESTILO)
   INNER JOIN GLO_REFE_GRUPOS ON (R.CONS_REFE_GRUPO = GLO_REFE_GRUPOS.CONS_REFE_GRUPO)
   INNER JOIN SIS_SEXOS X ON (R.CONS_REFE_SEXO = X.CONS_SEXO)
   INNER JOIN GLO_REFE_LAVADOS V ON (R.CONS_REFE_LAVADO = V.CONS_REFE_LAVADO)
   INNER JOIN GLO_REFE_BORDADOS ON (R.CONS_REFE_BORDADO = GLO_REFE_BORDADOS.CONS_REFE_BORDADO)
   INNER JOIN GLO_REFE_ESTAMPADOS P ON (R.CONS_REFE_ESTAMPADO = P.CONS_REFE_ESTAMPADO)
   INNER JOIN GLO_GRUP_TALLAS ON (R.CONS_REFE_GRUP_TALLAS = GLO_GRUP_TALLAS.CONS_GRUP_TALLAS)
   INNER JOIN GLO_REFE_ESTADOS S ON (R.CONS_REFE_ESTADO = S.CONS_REFE_ESTADO)
   WHERE R.ES_PROTOTIPO = 1;

/*  View: VIS_GLO_RECU_FAMILIAS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_RECU_FAMILIAS (CONS_RECU_GRUPO, CODI_RECU_GRUPO, NOMB_RECU_GRUPO, 
    CONS_RECU_TIPO, CODI_RECU_TIPO, NOMB_RECU_TIPO, CONS_RECU_FAMILIA, CODI_RECU_FAMILIA, 
    NOMB_RECU_FAMILIA, CARACTERISTICAS, PORC_SUPLEMENTO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT G.CONS_RECU_GRUPO, G.CODI_RECU_GRUPO,
       G.NOMB_RECU_GRUPO, T.CONS_RECU_TIPO,
       T.CODI_RECU_TIPO, T.NOMB_RECU_TIPO,
       F.CONS_RECU_FAMILIA, F.CODI_RECU_FAMILIA,
       F.NOMB_RECU_FAMILIA, F.CARACTERISTICAS,
       F.PORC_SUPLEMENTO, F.FECH_SISTEMA,
       F.USUA_SISTEMA
FROM GLO_RECU_FAMILIAS F
   INNER JOIN GLO_RECU_TIPOS T ON (F.CONS_RECU_TIPO = T.CONS_RECU_TIPO)
   INNER JOIN GLO_RECU_GRUPOS G ON (T.CONS_RECU_GRUPO = G.CONS_RECU_GRUPO);

/*  View: VIS_GLO_REFE_COLORES, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_REFE_COLORES (CONS_REFE_COLOR, CONS_REFERENCIA, SECU_COLOR, CONS_COLOR, CODI_COLOR, NOMB_COLOR, MUES_COLOR, NUME_COLOR)
AS

SELECT R.CONS_REFE_COLOR, R.CONS_REFERENCIA,
       R.SECU_COLOR, R.CONS_COLOR,
       C.CODI_COLOR,
       C.NOMB_COLOR, C.MUES_COLOR, R.NUME_COLOR
FROM GLO_REFE_COLORES R
   INNER JOIN GLO_COLORES C ON (R.CONS_COLOR = C.CONS_COLOR);

/*  View: VIS_GLO_REFE_MATERIALES, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_REFE_MATERIALES (CONS_REFERENCIA, CODI_REFERENCIA, CONS_REFE_TEMPORADA, 
    MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_VARIACION, CONS_REFE_MATERIAL, 
    CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA, NOMB_REFE_ESTADO, 
    EDIT_MAESTRO, MOST_METODOS, MOST_ORDE_TRABAJO, MOST_INVE_MATERIALES, CODI_REFE_TIPO_VARIACION, 
    NOMB_REFE_TIPO_VARIACION)
AS

SELECT REFE.CONS_REFERENCIA, REFE.CODI_REFERENCIA, REFE.CONS_REFE_TEMPORADA, REFE.MOLDE, 
        REFE.CODI_INTE_REFERENCIA, REFE.NOMB_REFERENCIA, V.CONS_REFE_VARIACION, 
        RMAT.CONS_REFE_MATERIAL, RMAT.CONS_MATE_REFERENCIA, MREF.CODI_MATE_REFERENCIA, 
        MREF.NOMB_MATE_REFERENCIA, ESTA.NOMB_REFE_ESTADO, ESTA.EDIT_MAESTRO, ESTA.MOST_METODOS, 
        ESTA.MOST_ORDE_TRABAJO, ESTA.MOST_INVE_MATERIALES, TV2.CODI_REFE_TIPO_VARIACION, 
        TV2.NOMB_REFE_TIPO_VARIACION

FROM PCP_REFE_VARIACIONES V
   INNER JOIN PCP_REFE_MATERIALES RMAT ON (VARI.CONS_REFE_VARIACION = RMAT.CONS_REFE_VARIACION)
   INNER JOIN PCP_MATE_REFERENCIAS MREF ON (RMAT.CONS_MATE_REFERENCIA = MREF.CONS_MATE_REFERENCIA)
   INNER JOIN GLO_REFERENCIAS REFE ON (VARI.CONS_REFERENCIA = REFE.CONS_REFERENCIA)
   INNER JOIN GLO_REFE_ESTADOS ESTA ON (REFE.CONS_REFE_ESTADO = ESTA.CONS_REFE_ESTADO)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES TVAR ON (V.CONS_REFE_TIPO_VARIACION = TVAR.CONS_REFE_TIPO_VARIACION)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES TV2 ON (VARI.CONS_REFE_TIPO_VARIACION = TV2.CONS_REFE_TIPO_VARIACION)
WHERE (REFE.ES_PROTOTIPO = -1);

/*  View: VIS_GLO_REFE_MOST_MAES_BA, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_REFE_MOST_MAES_BA (CONS_REFERENCIA, CODI_REFERENCIA, CONS_REFE_TEMPORADA, 
    MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CODI_BARRAS, CONS_REFE_MARCA, 
    CONS_REFE_LINEA, CONS_REFE_EDAD, CONS_REFE_ESTILO, CONS_REFE_GRUPO, CONS_REFE_SEXO, 
    CONS_REFE_LAVADO, CONS_REFE_BORDADO, CONS_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, 
    CONS_REFE_ESTADO, ESTA_MOST_METODOS, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_REFERENCIA, R.CODI_REFERENCIA,
       R.CONS_REFE_TEMPORADA,R.MOLDE,
       R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA,
       R.CODI_BARRAS, R.CONS_REFE_MARCA,
       R.CONS_REFE_LINEA, R.CONS_REFE_EDAD,
       R.CONS_REFE_ESTILO, R.CONS_REFE_GRUPO,
       R.CONS_REFE_SEXO, R.CONS_REFE_LAVADO,
       R.CONS_REFE_BORDADO, R.CONS_REFE_ESTAMPADO,
       R.CONS_REFE_GRUP_TALLAS, R.CONS_REFE_ESTADO,
       GLO_REFE_ESTADOS.MOST_METODOS,R.FECH_SISTEMA, R.USUA_SISTEMA
FROM GLO_REFERENCIAS R
   INNER JOIN GLO_REFE_ESTADOS ON (R.CONS_REFE_ESTADO = GLO_REFE_ESTADOS.CONS_REFE_ESTADO)
   WHERE R.ES_PROTOTIPO = -1 AND GLO_REFE_ESTADOS.Edit_Maestro = 1;

/*  View: VIS_GLO_REFE_MOST_MAESTRO, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_REFE_MOST_MAESTRO (CONS_REFERENCIA, CODI_REFERENCIA, CONS_REFE_TEMPORADA, 
    CODI_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, 
    CODI_BARRAS, CONS_REFE_MARCA, CODI_REFE_MARCA, NOMB_REFE_MARCA, CONS_REFE_LINEA, 
    CODI_REFE_LINEA, NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, NOMB_REFE_EDAD, 
    CONS_REFE_ESTILO, CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, CODI_REFE_GRUPO, 
    NOMB_REFE_GRUPO, CONS_REFE_SEXO, CODI_SEXO, NOMB_SEXO, CONS_REFE_LAVADO, CODI_REFE_LAVADO, 
    NOMB_REFE_LAVADO, CONS_REFE_BORDADO, CODI_REFE_BORDADO, NOMB_REFE_BORDADO, CONS_REFE_ESTAMPADO, 
    CODI_REFE_ESTAMPADO, NOMB_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, 
    NOMB_GRUP_TALLAS, CONS_REFE_ESTADO, CODI_REFE_ESTADO, NOMB_REFE_ESTADO, ESTA_EDIT_MAESTRO, 
    ESTA_MOST_METODOS, ESTA_MOST_ORDE_TRABAJO, ESTA_MOST_INVE_MATERIALES, IMAGEN, AJUS_IMAGEN, 
    DESCRIPCION, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_REFERENCIA, R.CODI_REFERENCIA,
       R.CONS_REFE_TEMPORADA, GLO_REFE_TEMPORADAS.CODI_REFE_TEMPORADA,
       GLO_REFE_TEMPORADAS.NOMB_REFE_TEMPORADA, R.MOLDE,
       R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA,
       R.CODI_BARRAS, R.CONS_REFE_MARCA,
       GLO_REFE_MARCAS.CODI_REFE_MARCA, GLO_REFE_MARCAS.NOMB_REFE_MARCA,
       R.CONS_REFE_LINEA, GLO_REFE_LINEAS.CODI_REFE_LINEA,
       GLO_REFE_LINEAS.NOMB_REFE_LINEA, R.CONS_REFE_EDAD,
       GLO_REFE_EDADES.CODI_REFE_EDAD, GLO_REFE_EDADES.NOMB_REFE_EDAD,
       R.CONS_REFE_ESTILO, GLO_REFE_ESTILOS.CODI_REFE_ESTILO,
       GLO_REFE_ESTILOS.NOMB_REFE_ESTILO, R.CONS_REFE_GRUPO,
       G.CODI_REFE_GRUPO, G.NOMB_REFE_GRUPO,
       R.CONS_REFE_SEXO, SIS_SEXOS.CODI_SEXO,
       SIS_SEXOS.NOMB_SEXO, R.CONS_REFE_LAVADO,
       GLO_REFE_LAVADOS.CODI_REFE_LAVADO, GLO_REFE_LAVADOS.NOMB_REFE_LAVADO,
       R.CONS_REFE_BORDADO, GLO_REFE_BORDADOS.CODI_REFE_BORDADO,
       GLO_REFE_BORDADOS.NOMB_REFE_BORDADO, R.CONS_REFE_ESTAMPADO,
       GLO_REFE_ESTAMPADOS.CODI_REFE_ESTAMPADO, GLO_REFE_ESTAMPADOS.NOMB_REFE_ESTAMPADO,
       R.CONS_REFE_GRUP_TALLAS, GLO_GRUP_TALLAS.CODI_GRUP_TALLAS,
       GLO_GRUP_TALLAS.NOMB_GRUP_TALLAS, R.CONS_REFE_ESTADO,
       S.CODI_REFE_ESTADO, S.NOMB_REFE_ESTADO,
       S.EDIT_MAESTRO, S.MOST_METODOS,
       S.MOST_ORDE_TRABAJO, S.MOST_INVE_MATERIALES,
       R.IMAGEN, R.AJUS_IMAGEN,
       R.DESCRIPCION, R.FECH_SISTEMA, R.USUA_SISTEMA

FROM GLO_REFERENCIAS R
   INNER JOIN GLO_REFE_TEMPORADAS ON (R.CONS_REFE_TEMPORADA = GLO_REFE_TEMPORADAS.CONS_REFE_TEMPORADA)
   INNER JOIN GLO_REFE_MARCAS ON (R.CONS_REFE_MARCA = GLO_REFE_MARCAS.CONS_REFE_MARCA)
   INNER JOIN GLO_REFE_LINEAS ON (R.CONS_REFE_LINEA = GLO_REFE_LINEAS.CONS_REFE_LINEA)
   INNER JOIN GLO_REFE_EDADES ON (R.CONS_REFE_EDAD = GLO_REFE_EDADES.CONS_REFE_EDAD)
   INNER JOIN GLO_REFE_ESTILOS ON (R.CONS_REFE_ESTILO = GLO_REFE_ESTILOS.CONS_REFE_ESTILO)
   INNER JOIN GLO_REFE_GRUPOS GON (R.CONS_REFE_GRUPO = G.CONS_REFE_GRUPO)
   INNER JOIN SIS_SEXOS ON (R.CONS_REFE_SEXO = SIS_SEXOS.CONS_SEXO)
   INNER JOIN GLO_REFE_LAVADOS ON (R.CONS_REFE_LAVADO = GLO_REFE_LAVADOS.CONS_REFE_LAVADO)
   INNER JOIN GLO_REFE_BORDADOS ON (R.CONS_REFE_BORDADO = GLO_REFE_BORDADOS.CONS_REFE_BORDADO)
   INNER JOIN GLO_REFE_ESTAMPADOS ON (R.CONS_REFE_ESTAMPADO = GLO_REFE_ESTAMPADOS.CONS_REFE_ESTAMPADO)
   INNER JOIN GLO_GRUP_TALLAS ON (R.CONS_REFE_GRUP_TALLAS = GLO_GRUP_TALLAS.CONS_GRUP_TALLAS)
   INNER JOIN GLO_REFE_ESTADOS SON (R.CONS_REFE_ESTADO = S.CONS_REFE_ESTADO)
   WHERE R.ES_PROTOTIPO = -1 AND S.Edit_Maestro = 1;

/*  View: VIS_GLO_REFE_MOST_METODOS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_REFE_MOST_METODOS (CONS_REFERENCIA, CODI_REFERENCIA, CONS_REFE_TEMPORADA, 
    CODI_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, 
    CODI_BARRAS, CONS_REFE_MARCA, CODI_REFE_MARCA, NOMB_REFE_MARCA, CONS_REFE_LINEA, 
    CODI_REFE_LINEA, NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, NOMB_REFE_EDAD, 
    CONS_REFE_ESTILO, CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, CODI_REFE_GRUPO, 
    NOMB_REFE_GRUPO, CONS_REFE_SEXO, CODI_SEXO, NOMB_SEXO, CONS_REFE_LAVADO, CODI_REFE_LAVADO, 
    NOMB_REFE_LAVADO, CONS_REFE_BORDADO, CODI_REFE_BORDADO, NOMB_REFE_BORDADO, CONS_REFE_ESTAMPADO, 
    CODI_REFE_ESTAMPADO, NOMB_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, 
    NOMB_GRUP_TALLAS, CONS_REFE_ESTADO, CODI_REFE_ESTADO, NOMB_REFE_ESTADO, ESTA_EDIT_MAESTRO, 
    ESTA_MOST_METODOS, ESTA_MOST_ORDE_TRABAJO, ESTA_MOST_INVE_MATERIALES, IMAGEN, AJUS_IMAGEN, 
    DESCRIPCION, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_REFERENCIA, R.CODI_REFERENCIA,
       R.CONS_REFE_TEMPORADA, GLO_REFE_TEMPORADAS.CODI_REFE_TEMPORADA,
       GLO_REFE_TEMPORADAS.NOMB_REFE_TEMPORADA, R.MOLDE,
       R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA,
       R.CODI_BARRAS, R.CONS_REFE_MARCA,
       GLO_REFE_MARCAS.CODI_REFE_MARCA, GLO_REFE_MARCAS.NOMB_REFE_MARCA,
       R.CONS_REFE_LINEA, GLO_REFE_LINEAS.CODI_REFE_LINEA,
       GLO_REFE_LINEAS.NOMB_REFE_LINEA, R.CONS_REFE_EDAD,
       GLO_REFE_EDADES.CODI_REFE_EDAD, GLO_REFE_EDADES.NOMB_REFE_EDAD,
       R.CONS_REFE_ESTILO, GLO_REFE_ESTILOS.CODI_REFE_ESTILO,
       GLO_REFE_ESTILOS.NOMB_REFE_ESTILO, R.CONS_REFE_GRUPO,
       G.CODI_REFE_GRUPO, G.NOMB_REFE_GRUPO,
       R.CONS_REFE_SEXO, SIS_SEXOS.CODI_SEXO,
       SIS_SEXOS.NOMB_SEXO, R.CONS_REFE_LAVADO,
       GLO_REFE_LAVADOS.CODI_REFE_LAVADO, GLO_REFE_LAVADOS.NOMB_REFE_LAVADO,
       R.CONS_REFE_BORDADO, GLO_REFE_BORDADOS.CODI_REFE_BORDADO,
       GLO_REFE_BORDADOS.NOMB_REFE_BORDADO, R.CONS_REFE_ESTAMPADO,
       GLO_REFE_ESTAMPADOS.CODI_REFE_ESTAMPADO, GLO_REFE_ESTAMPADOS.NOMB_REFE_ESTAMPADO,
       R.CONS_REFE_GRUP_TALLAS, GLO_GRUP_TALLAS.CODI_GRUP_TALLAS,
       GLO_GRUP_TALLAS.NOMB_GRUP_TALLAS, R.CONS_REFE_ESTADO,
       S.CODI_REFE_ESTADO, S.NOMB_REFE_ESTADO,
       S.EDIT_MAESTRO, S.MOST_METODOS,
       S.MOST_ORDE_TRABAJO, S.MOST_INVE_MATERIALES,
       R.IMAGEN, R.AJUS_IMAGEN,
       R.DESCRIPCION, R.FECH_SISTEMA, R.USUA_SISTEMA
FROM GLO_REFERENCIAS R
   INNER JOIN GLO_REFE_TEMPORADAS ON (R.CONS_REFE_TEMPORADA = GLO_REFE_TEMPORADAS.CONS_REFE_TEMPORADA)
   INNER JOIN GLO_REFE_MARCAS ON (R.CONS_REFE_MARCA = GLO_REFE_MARCAS.CONS_REFE_MARCA)
   INNER JOIN GLO_REFE_LINEAS ON (R.CONS_REFE_LINEA = GLO_REFE_LINEAS.CONS_REFE_LINEA)
   INNER JOIN GLO_REFE_EDADES ON (R.CONS_REFE_EDAD = GLO_REFE_EDADES.CONS_REFE_EDAD)
   INNER JOIN GLO_REFE_ESTILOS ON (R.CONS_REFE_ESTILO = GLO_REFE_ESTILOS.CONS_REFE_ESTILO)
   INNER JOIN GLO_REFE_GRUPOS GON (R.CONS_REFE_GRUPO = G.CONS_REFE_GRUPO)
   INNER JOIN SIS_SEXOS ON (R.CONS_REFE_SEXO = SIS_SEXOS.CONS_SEXO)
   INNER JOIN GLO_REFE_LAVADOS ON (R.CONS_REFE_LAVADO = GLO_REFE_LAVADOS.CONS_REFE_LAVADO)
   INNER JOIN GLO_REFE_BORDADOS ON (R.CONS_REFE_BORDADO = GLO_REFE_BORDADOS.CONS_REFE_BORDADO)
   INNER JOIN GLO_REFE_ESTAMPADOS ON (R.CONS_REFE_ESTAMPADO = GLO_REFE_ESTAMPADOS.CONS_REFE_ESTAMPADO)
   INNER JOIN GLO_GRUP_TALLAS ON (R.CONS_REFE_GRUP_TALLAS = GLO_GRUP_TALLAS.CONS_GRUP_TALLAS)
   INNER JOIN GLO_REFE_ESTADOS SON (R.CONS_REFE_ESTADO = S.CONS_REFE_ESTADO)
   WHERE R.ES_PROTOTIPO = -1 AND S.MOST_METODOS = 1;

/*  View: VIS_R. Owner: SYSDBA  */
CREATE VIEW VIS_R.(CONS_REFERENCIA, CODI_REFERENCIA, CONS_REFE_TEMPORADA, CODI_REFE_TEMPORADA, 
    NOMB_REFE_TEMPORADA, MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CODI_BARRAS, 
    CONS_REFE_MARCA, CODI_REFE_MARCA, NOMB_REFE_MARCA, CONS_REFE_LINEA, CODI_REFE_LINEA, 
    NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, NOMB_REFE_EDAD, CONS_REFE_ESTILO, 
    CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, CODI_REFE_GRUPO, NOMB_REFE_GRUPO, 
    CONS_REFE_SEXO, CODI_SEXO, NOMB_SEXO, CONS_REFE_LAVADO, CODI_REFE_LAVADO, NOMB_REFE_LAVADO, 
    CONS_REFE_BORDADO, CODI_REFE_BORDADO, NOMB_REFE_BORDADO, CONS_REFE_ESTAMPADO, 
    CODI_REFE_ESTAMPADO, NOMB_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, 
    NOMB_GRUP_TALLAS, CONS_REFE_ESTADO, CODI_REFE_ESTADO, NOMB_REFE_ESTADO, ESTA_EDIT_MAESTRO, 
    ESTA_MOST_METODOS, ESTA_MOST_ORDE_TRABAJO, ESTA_MOST_INVE_MATERIALES, IMAGEN, AJUS_IMAGEN, 
    IMAG_SMALL, DESCRIPCION, CON_ENTREPIERNAS, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_REFERENCIA, R.CODI_REFERENCIA,
       R.CONS_REFE_TEMPORADA, GLO_REFE_TEMPORADAS.CODI_REFE_TEMPORADA,
       GLO_REFE_TEMPORADAS.NOMB_REFE_TEMPORADA, R.MOLDE,
       R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA,
       R.CODI_BARRAS, R.CONS_REFE_MARCA,
       GLO_REFE_MARCAS.CODI_REFE_MARCA, GLO_REFE_MARCAS.NOMB_REFE_MARCA,
       R.CONS_REFE_LINEA, GLO_REFE_LINEAS.CODI_REFE_LINEA,
       GLO_REFE_LINEAS.NOMB_REFE_LINEA, R.CONS_REFE_EDAD,
       GLO_REFE_EDADES.CODI_REFE_EDAD, GLO_REFE_EDADES.NOMB_REFE_EDAD,
       R.CONS_REFE_ESTILO, GLO_REFE_ESTILOS.CODI_REFE_ESTILO,
       GLO_REFE_ESTILOS.NOMB_REFE_ESTILO, R.CONS_REFE_GRUPO,
       G.CODI_REFE_GRUPO, G.NOMB_REFE_GRUPO,
       R.CONS_REFE_SEXO, SIS_SEXOS.CODI_SEXO,
       SIS_SEXOS.NOMB_SEXO, R.CONS_REFE_LAVADO,
       GLO_REFE_LAVADOS.CODI_REFE_LAVADO, GLO_REFE_LAVADOS.NOMB_REFE_LAVADO,
       R.CONS_REFE_BORDADO, GLO_REFE_BORDADOS.CODI_REFE_BORDADO,
       GLO_REFE_BORDADOS.NOMB_REFE_BORDADO, R.CONS_REFE_ESTAMPADO,
       GLO_REFE_ESTAMPADOS.CODI_REFE_ESTAMPADO, GLO_REFE_ESTAMPADOS.NOMB_REFE_ESTAMPADO,
       R.CONS_REFE_GRUP_TALLAS, GLO_GRUP_TALLAS.CODI_GRUP_TALLAS,
       GLO_GRUP_TALLAS.NOMB_GRUP_TALLAS, R.CONS_REFE_ESTADO,
       S.CODI_REFE_ESTADO, S.NOMB_REFE_ESTADO,
       S.EDIT_MAESTRO, S.MOST_METODOS,
       S.MOST_ORDE_TRABAJO, S.MOST_INVE_MATERIALES,
       R.IMAGEN, R.AJUS_IMAGEN,
       R.IMAG_SMALL,
       R.DESCRIPCION, R.CON_ENTREPIERNAS,
       R.FECH_SISTEMA, R.USUA_SISTEMA
FROM GLO_REFERENCIAS R
   INNER JOIN GLO_REFE_TEMPORADAS ON (R.CONS_REFE_TEMPORADA = GLO_REFE_TEMPORADAS.CONS_REFE_TEMPORADA)
   INNER JOIN GLO_REFE_MARCAS ON (R.CONS_REFE_MARCA = GLO_REFE_MARCAS.CONS_REFE_MARCA)
   INNER JOIN GLO_REFE_LINEAS ON (R.CONS_REFE_LINEA = GLO_REFE_LINEAS.CONS_REFE_LINEA)
   INNER JOIN GLO_REFE_EDADES ON (R.CONS_REFE_EDAD = GLO_REFE_EDADES.CONS_REFE_EDAD)
   INNER JOIN GLO_REFE_ESTILOS ON (R.CONS_REFE_ESTILO = GLO_REFE_ESTILOS.CONS_REFE_ESTILO)
   INNER JOIN GLO_REFE_GRUPOS GON (R.CONS_REFE_GRUPO = G.CONS_REFE_GRUPO)
   INNER JOIN SIS_SEXOS ON (R.CONS_REFE_SEXO = SIS_SEXOS.CONS_SEXO)
   INNER JOIN GLO_REFE_LAVADOS ON (R.CONS_REFE_LAVADO = GLO_REFE_LAVADOS.CONS_REFE_LAVADO)
   INNER JOIN GLO_REFE_BORDADOS ON (R.CONS_REFE_BORDADO = GLO_REFE_BORDADOS.CONS_REFE_BORDADO)
   INNER JOIN GLO_REFE_ESTAMPADOS ON (R.CONS_REFE_ESTAMPADO = GLO_REFE_ESTAMPADOS.CONS_REFE_ESTAMPADO)
   INNER JOIN GLO_GRUP_TALLAS ON (R.CONS_REFE_GRUP_TALLAS = GLO_GRUP_TALLAS.CONS_GRUP_TALLAS)
   INNER JOIN GLO_REFE_ESTADOS SON (R.CONS_REFE_ESTADO = S.CONS_REFE_ESTADO)
   WHERE R.ES_PROTOTIPO = -1;

/*  View: VIS_GLO_TERCEROS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_TERCEROS (NOMB_CIUDAD, NOMB_DEPARTAMENTO, NOMB_PAIS, CODI_TERCERO, 
    NOMB_TERCERO, CONS_CIUDAD, CONS_DEPARTAMENTO, CONS_ORIGEN, CONS_TERCERO, 
    IDEN_TERC_DIGI_VERIFICACION, DIRE_TERCERO, CONS_PAIS, CODI_POSTAL, TELEFONO1, 
    TELEFONO2, TELEFONO3, FAX1, FAX2, CELULAR, CORR_ELECTRONICO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT C.nomb_ciudad, glo_departamentos.nomb_departamento, glo_paises.nomb_pais,
        T.CODI_TERCERO, T.NOMB_TERCERO,
        T.CONS_CIUDAD, T.CONS_DEPARTAMENTO,
        T.CONS_ORIGEN, T.CONS_TERCERO,
        T.IDEN_TERCERO || '-' || T.DIGI_VERIFICACION,
        T.DIRE_TERCERO, T.CONS_PAIS,
        T.CODI_POSTAL, T.TELEFONO1, T.TELEFONO2,
        T.TELEFONO3, T.FAX1, T.FAX2, T.CELULAR,
        T.corr_electronico, T.FECH_SISTEMA, T.USUA_SISTEMA
FROM glo_ciudades C
   INNER JOIN GLO_TERCEROS T
   ON  (T.CONS_CIUDAD = C.COns_CIUDAD) AND  
        (T.CONS_DEPARTAMENTO = C.CONS_DEPARTAMENTO) AND  
        (T.CONS_PAIS = C.COns_PAIS)

   INNER JOIN glo_departamentos glo_departamentos
   ON  (C.COns_PAIS = glo_departamentos.COns_PAIS) AND  
        (C.COns_DEPARTAMENTO = glo_departamentos.COns_DEPARTAMENTO)

   INNER JOIN SIS_TERC_ORIGEN
   ON  (T.CONS_ORIGEN = Sis_terc_origen.CONS_ORIGEN)

   INNER JOIN glo_paises glo_paises
   ON  (glo_departamentos.COns_PAIS = glo_paises.cons_pais);

/*  View: VIS_GLO_TURN_MINUTOS, Owner: SYSDBA  */
CREATE VIEW VIS_GLO_TURN_MINUTOS (CONS_TURNO, CODI_TURNO, TIPO_TURNO, LUNE_MINUTOS, 
    MART_MINUTOS, MIER_MINUTOS, JUEV_MINUTOS, VIER_MINUTOS, SABA_MINUTOS, 
    DOMI_MINUTOS, PRIM_DESCANSO, SEGU_DESCANSO)
AS

SELECT
    CONS_TURNO, CODI_TURNO, TIPO_TURNO, LUNE_MINUTOS, 
    MART_MINUTOS, MIER_MINUTOS, JUEV_MINUTOS, VIER_MINUTOS, SABA_MINUTOS, 
    DOMI_MINUTOS, PRIM_DESCANSO, SEGU_DESCANSO
FROM GLO_TURNOS ;

/*  View: VIS_PCP_CLIENTES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CLIENTES (NOMB_CIUDAD, NOMB_DEPARTAMENTO, NOMB_PAIS, CODI_TERCERO, 
    NOMB_TERCERO, CONS_CIUDAD, CONS_DEPARTAMENTO, CONS_ORIGEN, CONS_TERCERO, 
    IDEN_TERC_DIGI_VERIFICACION, DIRE_TERCERO, CONS_PAIS, CODI_POSTAL, TELEFONO1, 
    TELEFONO2, TELEFONO3, FAX1, FAX2, CELULAR, CORR_ELECTRONICO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT NOMB_CIUDAD, NOMB_DEPARTAMENTO,
       NOMB_PAIS, CODI_TERCERO,
       NOMB_TERCERO, CONS_CIUDAD,
       CONS_DEPARTAMENTO, CONS_ORIGEN,
       CONS_TERCERO, IDEN_TERC_DIGI_VERIFICACION,
       DIRE_TERCERO, CONS_PAIS,
       CODI_POSTAL, TELEFONO1,
       TELEFONO2, TELEFONO3,
       FAX1, FAX2,
       CELULAR, CORR_ELECTRONICO,
       FECH_SISTEMA, USUA_SISTEMA
FROM VIS_GLO_TERCEROS
WHERE cons_tercero > 0 AND cons_tercero  IN 
    (SELECT pcp_terceros.CONS_TERCERO
    FROM pcp_terceros 
    WHERE pcp_terceros.cons_tipo_tercero =0);

/*  View: VIS_PCP_COMP_VARIACIONES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_COMP_VARIACIONES (CONS_COMP_VARIACION, CODI_COMP_VARIACION, NOMB_COMP_VARIACION, 
    CONS_COMP_GRUPO, CODI_COMP_GRUPO, NOMB_COMP_GRUPO, DESCRIPCION, IMAGEN, AJUS_IMAGEN, 
    FECH_SISTEMA, USUA_SISTEMA)
AS
SELECT V.CONS_COMP_VARIACION, V.CODI_COMP_VARIACION,
       V.NOMB_COMP_VARIACION, V.CONS_COMP_GRUPO,
       G.CODI_COMP_GRUPO, G.NOMB_COMP_GRUPO,
       V.DESCRIPCION, V.IMAGEN,
       V.AJUS_IMAGEN, V.FECH_SISTEMA,
       V.USUA_SISTEMA
FROM PCP_COMP_GRUPOS G
   INNER JOIN PCP_COMP_VARIACIONES ON (G.CONS_COMP_GRUPO = V.CONS_COMP_GRUPO);

/*  View: VIS_PCP_CONT_NOVE_ABONADOS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_ABONADOS (CONS_CONT_NOVE_ABONADO, CONS_ABONADO, 
    CONS_CONT_NOVE_DIARIA, CODI_ABONADO, NOMB_ABONADO, CONS_PROD_ORDEN, 
    NUME_PROD_ORDEN, MINU_TRABAJADOS, MINU_ABONADOS, MINU_REAL_ABONADOS, 
    TIQUETES, VALO_HORA, VALO_MINIMO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT N.CONS_CONT_NOVE_ABONADO,
       N.CONS_ABONADO, N.CONS_CONT_NOVE_DIARIA,
       GLO_ABONADOS.CODI_ABONADO, GLO_ABONADOS.NOMB_ABONADO,
       N.CONS_PROD_ORDEN, PCP_PROD_ORDENES.NUME_PROD_ORDEN,
       N.MINU_TRABAJADOS, N.MINU_ABONADOS,
       N.MINU_REAL_ABONADOS, N.TIQUETES,
       N.VALO_HORA, N.VALO_MINIMO,
       N.FECH_SISTEMA, N.USUA_SISTEMA
FROM PCP_PROD_ORDENES O
   RIGHT OUTER JOIN PCP_CONT_NOVE_ABONADOS N ON (O.CONS_PROD_ORDEN = N.CONS_PROD_ORDEN)
   INNER JOIN GLO_ABONADOS ON (N.CONS_ABONADO = GLO_ABONADOS.CONS_ABONADO);

/*  View: VIS_PCP_CONT_NOVE_DEFE_FABR_BA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_DEFE_FABR_BA (CONS_CONT_NOVE_DEFE_FABRICACION, CONS_CALI_DEFECTO, 
    CODI_CALI_DEFECTO, NOMB_CALI_DEFECTO, CONS_PROD_ORDEN, NUME_PROD_ORDEN, 
    CONS_PROD_LOTE, NUME_LOTE, NUME_PAQUETE, SECU_OPERACION, CODI_OPER_COSTURA, 
    NOMB_OPER_COSTURA, FECH_DEFECTO, CONS_CONT_NOVE_DIARIA, CONS_PERS_ASIGNADO, 
    CANT_UNID_DEFECTUOSAS, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT F.CONS_CONT_NOVE_DEFE_FABRICACION, F.CONS_CALI_DEFECTO,
    D.CODI_CALI_DEFECTO, D.NOMB_CALI_DEFECTO,
    PCP_PROD_ORDENES.CONS_PROD_ORDEN, PCP_PROD_ORDENES.NUME_PROD_ORDEN,
    PCP_PROD_LOTES.CONS_PROD_LOTE, PCP_PROD_LOTES.NUME_LOTE,
    F.NUME_PAQUETE, C.SECU_OPERACION,
    C.CODI_OPER_COSTURA, C.NOMB_OPER_COSTURA,
    F.FECH_DEFECTO, F.CONS_CONT_NOVE_DIARIA,
    F.CONS_PERS_ASIGNADO, F.CANT_UNID_DEFECTUOSAS,
    F.FECH_SISTEMA, F.USUA_SISTEMA
FROM PCP_CONT_NOVE_DEFE_FABRICACION F
   INNER JOIN PCP_CALI_DEFECTOS D ON (F.CONS_CALI_DEFECTO = D.CONS_CALI_DEFECTO)
   INNER JOIN PCP_PROD_LOTES ON (F.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_ORDENES ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN)
   INNER JOIN PCP_PROD_LIST_OPER_COSTURA C 
            ON (F.CONS_PROD_LOTE = C.CONS_PROD_LOTE) AND (F.SECU_OPERACION = C.SECU_OPERACION);

/*  View: VIS_PCP_CONT_NOVE_DIAR_UBIC, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_DIAR_UBIC (CONS_CONT_NOVE_DIARIA, CONS_PERSONAL, 
    FECH_LECTURA, NUME_LECTURA, CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA, 
    CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA, CODI_LINEA, 
    NOMB_LINEA, CONS_LINE_SECCION, CODI_SECCION, NOMB_SECCION, CONS_TURNO, 
    CODI_TURNO, TIPO_TURNO, HORA_INICIO, HORA_FINAL, MINU_CONTRATADOS, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT N.CONS_CONT_NOVE_DIARIA, N.CONS_PERSONAL,
    N.FECH_LECTURA, N.NUME_LECTURA,
    N.CONS_EMPRESA, GLO_EMPRESAS.CODI_EMPRESA,
    GLO_EMPRESAS.NOMB_EMPRESA, N.CONS_PLANTA,
    GLO_PLANTAS.CODI_PLANTA, GLO_PLANTAS.NOMB_PLANTA,
    N.CONS_PLAN_LINEA, VIS_GLO_PLAN_LINEAS.CODI_LINEA,
    VIS_GLO_PLAN_LINEAS.NOMB_LINEA, N.CONS_LINE_SECCION,
    VLS.CODI_SECCION, VLS.NOMB_SECCION,
    N.CONS_TURNO, GLO_TURNOS.CODI_TURNO,
    CASE GLO_TURNOS.TIPO_TURNO
         WHEN 0 THEN 'COMPLETO'
         WHEN 1 THEN 'MAÑANA'
         WHEN 2 THEN 'TARDE'
         WHEN 3 THEN 'NOCHE'
         WHEN 4 THEN 'ÚNICA'
         ELSE 'DESCONOCIDO'
    END,
    N.HORA_INICIO, N.HORA_FINAL,
    N.MINU_CONTRATADOS, N.FECH_SISTEMA,
    N.USUA_SISTEMA
FROM PCP_CONT_NOVE_DIARIAS N
   INNER JOIN GLO_EMPRESAS ON (N.CONS_EMPRESA = GLO_EMPRESAS.CONS_EMPRESA)
   INNER JOIN GLO_PLANTAS ON (N.CONS_PLANTA = GLO_PLANTAS.CONS_PLANTA)
   INNER JOIN VIS_GLO_PLAN_LINEAS ON (N.CONS_PLAN_LINEA = VIS_GLO_PLAN_LINEAS.CONS_PLAN_LINEA)
   INNER JOIN VIS_GLO_LINE_SECCIONES VLS ON (N.CONS_LINE_SECCION = VLS.CONS_LINE_SECCION)
   INNER JOIN GLO_TURNOS ON (N.CONS_TURNO = GLO_TURNOS.CONS_TURNO);

/*  View: VIS_PCP_CONT_NOVE_HORA_EXTRAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_HORA_EXTRAS (CONS_CONT_NOVE_HORA_EXTRA, CONS_CONT_NOVE_DIARIA, 
    CONS_HORA_EXTRA, CODI_HORA_EXTRA, NOMB_HORA_EXTRA, CONS_PROD_ORDEN, MINU_EXTRAS, 
    ESTANDAR, FECH_SISTEMA, USUA_SISTEMA, NUME_PROD_ORDEN)
AS

SELECT H.CONS_CONT_NOVE_HORA_EXTRA, H.CONS_CONT_NOVE_DIARIA,
       H.CONS_HORA_EXTRA, GLO_HORA_EXTRAS.CODI_HORA_EXTRA,
       GLO_HORA_EXTRAS.NOMB_HORA_EXTRA, H.CONS_PROD_ORDEN,
       H.MINU_EXTRAS, H.ESTANDAR,
       H.FECH_SISTEMA,
       H.USUA_SISTEMA, PCP_PROD_ORDENES.NUME_PROD_ORDEN
FROM PCP_PROD_ORDENES
   INNER JOIN PCP_CONT_NOVE_HORA_EXTRAS H ON (PCP_PROD_ORDENES.CONS_PROD_ORDEN = H.CONS_PROD_ORDEN)
   INNER JOIN GLO_HORA_EXTRAS ON (H.CONS_HORA_EXTRA = GLO_HORA_EXTRAS.CONS_HORA_EXTRA);

/*  View: VIS_PCP_CONT_NOVE_IMPR_FAMILIA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_IMPR_FAMILIA (CONS_CONT_NOVE_IMPRODUCTIVO, CONS_CONT_NOVE_DIARIA, 
    CONS_IMPRODUCTIVO, CODI_IMPR_FAMILIA, MINU_IMPRODUCTIVOS)
AS

SELECT I.CONS_CONT_NOVE_IMPRODUCTIVO, I.CONS_CONT_NOVE_DIARIA,
    I.CONS_IMPRODUCTIVO, F.CODI_IMPR_FAMILIA, I.MINU_IMPRODUCTIVOS
FROM PCP_CONT_NOVE_IMPRODUCTIVOS I
   INNER JOIN GLO_IMPRODUCTIVOS ON (I.CONS_IMPRODUCTIVO = GLO_IMPRODUCTIVOS.CONS_IMPRODUCTIVO)
   INNER JOIN SIS_IMPR_FAMILIAS F ON (GLO_IMPRODUCTIVOS.CONS_IMPRODUCTIVO = F.CONS_IMPR_FAMILIA);

/*  View: VIS_PCP_CONT_NOVE_PAGO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_PAGO (CONS_CONT_NOVE_DIARIA, CONS_PERSONAL, FECH_LECTURA, 
    NUME_LECTURA, CONS_EMPRESA, CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION, 
    CONS_TURNO, HORA_INICIO, HORA_FINAL, MINU_CONTRATADOS, CONS_FORM_PAGO, 
    CODI_FORM_PAGO, VALO_HORA_PRODUCCION, VALO_MINI_GARANTIZADO, VALO_PAGO_MINIMO, 
    VALO_MINI_GARA_ESTANDAR, VALO_MINI_GARA_NO_ESTANDAR, VALO_GANA_ESTANDAR, 
    VALO_GANA_NO_ESTANDAR, VALO_AJUS_AL_MINI_ESTANDAR, VALO_AJUS_AL_MINI_NO_ESTANDAR, 
    VALO_BONO_HORA_EXTRAS, VALO_BONO_PRODUCCION, VALO_BONO_CURVA, VALO_TOTA_DEVENGADO, 
    MINU_TRAB_ESTANDAR, MINU_TRAB_NO_ESTANDAR, MINU_TRAB_CURVA, MINU_EXTR_ESTANDAR, 
    MINU_EXTR_NO_ESTANDAR, MINU_AUSE_ESTANDAR, MINU_AUSE_NO_ESTANDAR, MINU_IMPR_ESTANDAR, 
    MINU_IMPR_NO_ESTANDAR, MINU_PROD_ESTANDAR, MINU_PROD_CORTE, MINU_PROD_FABRICACION, 
    MINU_PROD_NO_ESTANDAR, MINU_PROD_CURVA, CURV_ESTANDAR)
AS

SELECT D.CONS_CONT_NOVE_DIARIA, D.CONS_PERSONAL,
    D.FECH_LECTURA, D.NUME_LECTURA,
    D.CONS_EMPRESA, D.CONS_PLANTA,
    D.CONS_PLAN_LINEA, D.CONS_LINE_SECCION,
    D.CONS_TURNO, D.HORA_INICIO,
    D.HORA_FINAL, D.MINU_CONTRATADOS,
    NP.CONS_FORM_PAGO, NP.CODI_FORM_PAGO,
    NP.VALO_HORA_PRODUCCION, NP.VALO_MINI_GARANTIZADO,
    NP.VALO_PAGO_MINIMO, NP.VALO_MINI_GARA_ESTANDAR,
    NP.VALO_MINI_GARA_NO_ESTANDAR, NP.VALO_GANA_ESTANDAR,
    NP.VALO_GANA_NO_ESTANDAR, NP.VALO_AJUS_AL_MINI_ESTANDAR,
    NP.VALO_AJUS_AL_MINI_NO_ESTANDAR, NP.VALO_BONO_HORA_EXTRAS,
    NP.VALO_BONO_PRODUCCION, NP.VALO_BONO_CURVA,
    NP.VALO_TOTA_DEVENGADO, NP.MINU_TRAB_ESTANDAR,
    NP.MINU_TRAB_NO_ESTANDAR, NP.MINU_TRAB_CURVA,
    NP.MINU_EXTR_ESTANDAR, NP.MINU_EXTR_NO_ESTANDAR,
    NP.MINU_AUSE_ESTANDAR, NP.MINU_AUSE_NO_ESTANDAR,
    NP.MINU_IMPR_ESTANDAR, NP.MINU_IMPR_NO_ESTANDAR,
    NP.MINU_PROD_ESTANDAR, NP.MINU_PROD_CORTE,
    NP.MINU_PROD_FABRICACION, NP.MINU_PROD_NO_ESTANDAR,
    NP.MINU_PROD_CURVA, NP.CURV_ESTANDAR
FROM PCP_CONT_NOVE_PAGO NP
   INNER JOIN PCP_CONT_NOVE_DIARIAS D ON (NP.CONS_CONT_NOVE_DIARIA = D.CONS_CONT_NOVE_DIARIA);

/*  View: VIS_PCP_CONT_NOVE_PUNT_CONTROL, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_PUNT_CONTROL (CODI_BARRAS, CONS_PROD_ORDEN, NUME_PROD_ORDEN, 
    CONS_REFERENCIA, CODI_REFERENCIA, CONS_PROD_LOTE, NUME_LOTE, CONS_PROCESO, 
    NUME_PAQUETE, CONS_GRUP_TALL_DETALLE, SECU_TALLA, TALLA, CONS_REFE_COLOR, 
    SECU_COLOR, CONS_COLOR, CODI_COLOR, NOMB_COLOR, NUME_COLOR, SECU_OPERACION, 
    CODI_OPER_COSTURA, NOMB_OPER_COSTURA, TIEM_OPERACION, CANT_UNIDADES, 
    CONS_PUNT_CONTROL, CODI_PUNT_CONTROL, NOMB_PUNT_CONTROL, FECH_LECTURA, 
    CONS_EMPRESA, CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION, CONS_TURNO)
AS

SELECT TF.CODI_BARRAS, TF.CONS_PROD_ORDEN, 
    PCP_PROD_ORDENES.NUME_PROD_ORDEN, PCP_PROD_ORDENES.CONS_REFERENCIA, 
    GLO_REFERENCIAS.CODI_REFERENCIA, TF.CONS_PROD_LOTE, 
    PCP_PROD_LOTES.NUME_LOTE, TF.CONS_PROCESO, 
    TF.NUME_PAQUETE, TF.CONS_GRUP_TALL_DETALLE, 
    TD.SECU_TALLA, TD.TALLA, 
    TF.CONS_REFE_COLOR, GLO_REFE_COLORES.SECU_COLOR, 
    GLO_REFE_COLORES.CONS_COLOR, GLO_COLORES.CODI_COLOR, GLO_COLORES.NOMB_COLOR, 
    GLO_REFE_COLORES.NUME_COLOR, TF.SECU_OPERACION, 
    OC.CODI_OPER_COSTURA, OC.NOMB_OPER_COSTURA, 
    TF.TIEM_OPERACION, TF.CANT_UNIDADES, 
    TF.CONS_PUNT_CONTROL, PCP_PUNT_CONTROL.CODI_PUNT_CONTROL, 
    PCP_PUNT_CONTROL.NOMB_PUNT_CONTROL, ND.FECH_LECTURA, 
    ND.CONS_EMPRESA, ND.CONS_PLANTA, 
    ND.CONS_PLAN_LINEA, ND.CONS_LINE_SECCION, 
    ND.CONS_TURNO
FROM PCP_PROD_LIST_OPER_COSTURA OC
   INNER JOIN PCP_CONT_NOVE_TIQU_FABRICACION TF ON (OC.SECU_OPERACION = TF.SECU_OPERACION) AND 
            (OC.CONS_PROD_LOTE = TF.CONS_PROD_LOTE)
   LEFT OUTER JOIN PCP_PUNT_CONTROL ON (TF.CONS_PUNT_CONTROL = PCP_PUNT_CONTROL.CONS_PUNT_CONTROL)
   INNER JOIN PCP_CONT_NOVE_DIARIAS ND ON (TF.CONS_CONT_NOVE_DIARIA = ND.CONS_CONT_NOVE_DIARIA)
   INNER JOIN PCP_PROD_ORDENES ON (TF.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN)
   INNER JOIN GLO_REFERENCIAS ON (PCP_PROD_ORDENES.CONS_REFERENCIA = GLO_REFERENCIAS.CONS_REFERENCIA)
   INNER JOIN PCP_PROD_LOTES ON (TF.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN GLO_GRUP_TALL_DETALLE TD ON (TF.CONS_GRUP_TALL_DETALLE = TD.CONS_GRUP_TALL_DETALLE)
   INNER JOIN GLO_REFE_COLORES ON (TF.CONS_REFE_COLOR = GLO_REFE_COLORES.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR);

/*  View: VIS_PCP_CONT_NOVE_QUIE_REPORTA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_QUIE_REPORTA (CONS_CONT_NOVE_TIQU_FABRICACION, CODI_BARRAS, 
    FECH_LECTURA, CONS_PERSONAL, CODI_PERSONAL, PRIM_APELLIDO, SEGU_APELLIDO, 
    NOMBRES, NOMB_COMPLETO, NUME_PAQUETE, CONS_GRUP_TALL_DETALLE, TALLA, CONS_REFE_COLOR, 
    NOMB_COLOR, SECU_OPERACION, CODI_OPER_COSTURA, NOMB_OPER_COSTURA, TIEM_OPERACION, CANT_UNIDADES)
AS

SELECT TF.CONS_CONT_NOVE_TIQU_FABRICACION, TF.CODI_BARRAS,
       N.FECH_LECTURA, N.CONS_PERSONAL,
       GP.CODI_PERSONAL, GP.PRIM_APELLIDO,
       GP.SEGU_APELLIDO, GP.NOMBRES,
       GP.NOMB_COMPLETO, TF.NUME_PAQUETE,
       TF.CONS_GRUP_TALL_DETALLE, GTD.TALLA,
       TF.CONS_REFE_COLOR, GLO_COLORES.NOMB_COLOR,
       TF.SECU_OPERACION, OC.CODI_OPER_COSTURA,
       OC.NOMB_OPER_COSTURA, TF.TIEM_OPERACION,
       TF.CANT_UNIDADES
FROM PCP_CONT_NOVE_TIQU_FABRICACION TF
   INNER JOIN PCP_CONT_NOVE_DIARIAS N ON (TF.CONS_CONT_NOVE_DIARIA = N.CONS_CONT_NOVE_DIARIA)
   INNER JOIN GLO_PERSONAL GP ON (N.CONS_PERSONAL = GP.CONS_PERSONAL)
   INNER JOIN GLO_GRUP_TALL_DETALLE ON (TF.CONS_GRUP_TALL_DETALLE = GTD.CONS_GRUP_TALL_DETALLE)
   INNER JOIN GLO_REFE_COLORES ON (TF.CONS_REFE_COLOR = GLO_REFE_COLORES.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR)
   INNER JOIN PCP_PROD_LIST_OPER_COSTURA OC ON (TF.CONS_PROD_LOTE = OC.CONS_PROD_LOTE) AND 
            (TF.SECU_OPERACION = OC.SECU_OPERACION);

/*  View: VIS_PCP_CONT_NOVE_RESUMEN, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_RESUMEN (CONS_CONT_NOVE_DIARIA, CONS_PERSONAL, 
    FECH_LECTURA, NUME_LECTURA, CONS_EMPRESA, CONS_PLANTA, CONS_PLAN_LINEA, 
    CONS_LINE_SECCION, CONS_TURNO, MINU_CONTRATADOS, CURV_ESTANDAR, 
    MINU_PROD_CORTE, MINU_PROD_FABRICACION, MINU_PROD_NOESTANDAR, MINU_PROD_CURVA, 
    MINU_AUSENTISMOS, MINU_IMPRODUCTIVOS, MINU_EXTRA)
AS

SELECT DIAR.CONS_CONT_NOVE_DIARIA, DIAR.CONS_PERSONAL,
    DIAR.FECH_LECTURA, DIAR.NUME_LECTURA,
    DIAR.CONS_EMPRESA, DIAR.CONS_PLANTA,
    DIAR.CONS_PLAN_LINEA, DIAR.CONS_LINE_SECCION,
    DIAR.CONS_TURNO, DIAR.MINU_CONTRATADOS,
    CURV.CURV_ESTANDAR, RESU.MINU_PROD_CORTE,
    RESU.MINU_PROD_FABRICACION, RESU.MINU_PROD_NOESTANDAR,
    RESU.MINU_PROD_CURVA, RESU.MINU_AUSENTISMOS,
    RESU.MINU_IMPRODUCTIVOS, RESU.MINU_EXTRA
FROM PCP_CONT_NOVE_RESUMEN RESU
   RIGHT OUTER JOIN PCP_CONT_NOVE_DIARIAS DIAR ON (RESU.CONS_CONT_NOVE_DIARIA = DIAR.CONS_CONT_NOVE_DIARIA)
   LEFT OUTER JOIN PCP_CONT_NOVE_CURVA CURV ON (DIAR.CONS_CONT_NOVE_DIARIA = CURV.CONS_CONT_NOVE_DIARIA);

/*  View: VIS_PCP_CONT_NOVE_TIQU_CORT, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_TIQU_CORT (CONS_CONT_NOVE_TIQU_CORTE, CONS_CONT_NOVE_DIARIA, 
    CODI_BARRAS, CONS_PROD_ORDEN, NUME_PROD_ORDEN, CONS_PROD_LOTE, NUME_LOTE, 
    SECU_OPERACION, CODI_OPERACION, NOMB_OPERACION, CONS_REFE_MATERIAL, CODI_MATE_REFERENCIA, 
    NOMB_MATE_REFERENCIA, NUME_PAQUETE, NOMB_CORT_UNID_MEDIDA, TIEM_OPERACION, CANT_UNIDADES, 
    FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT NTC.CONS_CONT_NOVE_TIQU_CORTE, NTC.CONS_CONT_NOVE_DIARIA,
    NTC.CODI_BARRAS, NTC.CONS_PROD_ORDEN,
    PCP_PROD_ORDENES.NUME_PROD_ORDEN, NTC.CONS_PROD_LOTE,
    PCP_PROD_LOTES.NUME_LOTE, NTC.SECU_OPERACION,
    LOC.CODI_OPERACION, LOC.NOMB_OPERACION,
    NTC.CONS_REFE_MATERIAL, MR.CODI_MATE_REFERENCIA,
    MR.NOMB_MATE_REFERENCIA, NTC.NUME_PAQUETE,
    CUM.NOMB_CORT_UNID_MEDIDA, NTC.TIEM_OPERACION,
    NTC.CANT_UNIDADES, NTC.FECH_SISTEMA, NTC.USUA_SISTEMA
FROM PCP_PROD_LIST_OPER_CORTE LOC
   INNER JOIN PCP_CONT_NOVE_TIQU_CORTE NTC ON (LOC.SECU_OPERACION = NTC.SECU_OPERACION) AND 
            (LOC.CONS_PROD_LOTE = NTC.CONS_PROD_LOTE) AND 
            (LOC.CONS_REFE_MATERIAL = NTC.CONS_REFE_MATERIAL)
   INNER JOIN PCP_PROD_ORDENES ON (NTC.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN)
   INNER JOIN PCP_PROD_LOTES ON (NTC.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_REFE_MATERIALES ON (NTC.CONS_REFE_MATERIAL = PCP_REFE_MATERIALES.CONS_REFE_MATERIAL)
   INNER JOIN PCP_MATE_REFERENCIAS MR ON (PCP_REFE_MATERIALES.CONS_MATE_REFERENCIA = MR.CONS_MATE_REFERENCIA)
   INNER JOIN SIS_CORT_UNID_MEDIDA CUM ON (LOC.CONS_CORT_UNID_MEDIDA = CUM.CONS_CORT_UNID_MEDIDA);

/*  View: VIS_PCP_CONT_NOVE_TIQU_FABR, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_TIQU_FABR (CONS_CONT_NOVE_TIQU_FABRICACION, CONS_CONT_NOVE_DIARIA, 
    CODI_BARRAS, CONS_PROD_PAQU_TIPO, NOMB_PROD_PAQU_TIPO, NUME_PROD_ORDEN, 
    NUME_LOTE, CONS_PROCESO, NUME_PAQUETE, SECU_OPERACION, CODI_OPERACION, 
    NOMB_OPERACION, TIEM_OPERACION, CANT_UNIDADES, VALO_HORA_PRODUCCION, 
    CONS_CONT_NOVE_ABONADO, CONS_FORM_PAGO_CURVA, TIEM_PAQUETE)
AS

SELECT TF.CONS_CONT_NOVE_TIQU_FABRICACION,
       TF.CONS_CONT_NOVE_DIARIA, TF.CODI_BARRAS,
       TF.CONS_PROD_PAQU_TIPO, PCP_PROD_PAQU_TIPOS.NOMB_PROD_PAQU_TIPO,
       PO.NUME_PROD_ORDEN, PCP_PROD_LOTES.NUME_LOTE,
       TF.CONS_PROCESO, TF.NUME_PAQUETE,
       TF.SECU_OPERACION, OC.CODI_OPER_COSTURA,
       OC.NOMB_OPER_COSTURA, TF.TIEM_OPERACION,
       TF.CANT_UNIDADES, TF.VALO_HORA_PRODUCCION,
       TF.CONS_CONT_NOVE_ABONADO, TF.CONS_FORM_PAGO_CURVA,
       TF.TIEM_OPERACION * TF.CANT_UNIDADES
FROM PCP_CONT_NOVE_TIQU_FABRICACION TF
   INNER JOIN PCP_PROD_PAQU_TIPOS ON (TF.CONS_PROD_PAQU_TIPO = PCP_PROD_PAQU_TIPOS.CONS_PROD_PAQU_TIPO)
   INNER JOIN PCP_PROD_ORDENES ON (TF.CONS_PROD_ORDEN = PO.CONS_PROD_ORDEN)
   INNER JOIN PCP_PROD_LOTES ON (TF.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_LIST_OPER_COSTURA OC ON (TF.CONS_PROD_LOTE = OC.CONS_PROD_LOTE) AND 
        (TF.SECU_OPERACION = OC.SECU_OPERACION);

/*  View: VIS_PCP_CONT_NOVE_TIQU_FABR_UB, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_CONT_NOVE_TIQU_FABR_UB (CONS_CONT_NOVE_TIQU_FABRICACION, CONS_CONT_NOVE_DIARIA, CANT_UNIDADES, CODI_BARRAS, CONS_PROD_PAQU_TIPO, CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_PROCESO, NUME_PAQUETE, CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR, SECU_OPERACION, TIEM_OPERACION, VALO_HORA_PRODUCCION, CONS_PERSONAL, FECH_LECTURA, NUME_LECTURA, CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA, CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA, CODI_LINEA, NOMB_LINEA, CONS_LINE_SECCION, CODI_SECCION, NOMB_SECCION, CONS_TURNO, CODI_TURNO, TIPO_TURNO, HORA_INICIO, HORA_FINAL, MINU_CONTRATADOS, CODI_PERSONAL, NOMB_COMPLETO)
AS


SELECT TF.CONS_CONT_NOVE_TIQU_FABRICACION, TF.CONS_CONT_NOVE_DIARIA,
    TF.CANT_UNIDADES, TF.CODI_BARRAS,
    TF.CONS_PROD_PAQU_TIPO, TF.CONS_PROD_ORDEN,
    TF.CONS_PROD_LOTE, TF.CONS_PROCESO,
    TF.NUME_PAQUETE, TF.CONS_GRUP_TALL_DETALLE,
    TF.CONS_REFE_COLOR, TF.SECU_OPERACION,
    TF.TIEM_OPERACION, TF.VALO_HORA_PRODUCCION,
    VNDU.CONS_PERSONAL, VNDU.FECH_LECTURA,
    VNDU.NUME_LECTURA, VNDU.CONS_EMPRESA,
    VNDU.CODI_EMPRESA, VNDU.NOMB_EMPRESA,
    VNDU.CONS_PLANTA, VNDU.CODI_PLANTA,
    VNDU.NOMB_PLANTA, VNDU.CONS_PLAN_LINEA,
    VNDU.CODI_LINEA, VNDU.NOMB_LINEA,
    VNDU.CONS_LINE_SECCION, VNDU.CODI_SECCION,
    VNDU.NOMB_SECCION, VNDU.CONS_TURNO,
    VNDU.CODI_TURNO, VNDU.TIPO_TURNO,
    VNDU.HORA_INICIO, VNDU.HORA_FINAL,
    VNDU.MINU_CONTRATADOS, GLO_PERSONAL.CODI_PERSONAL,
    GLO_PERSONAL.NOMB_COMPLETO
FROM GLO_PERSONAL
   INNER JOIN VIS_PCP_CONT_NOVE_DIAR_UBIC VNDU ON (GLO_PERSONAL.CONS_PERSONAL = VNDU.CONS_PERSONAL)
   INNER JOIN PCP_CONT_NOVE_TIQU_FABRICACION ON (VNDU.CONS_CONT_NOVE_DIARIA = TF.CONS_CONT_NOVE_DIARIA) ;

/*  View: VIS_PCP_ELEM_CST, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_ELEM_CST (CODI_ELEM_CST, NOMB_ELEM_CST, CONS_CST_DIFICULTAD, 
    CODI_CST_DIFICULTAD, NOMB_CST_DIFICULTAD, CONS_CST_DISTANCIA, CODI_CST_DISTANCIA, 
    NOMB_CST_DISTANCIA, CONS_CST_POSICIONAMIENTO, CODI_CST_POSICIONAMIENTO, NOMB_CST_POSICIONAMIENTO, 
    CONS_CST_PESO, CODI_CST_PESO, NOMB_CST_PESO, TIEM_CST, SOFTCONF, NOMB_ANALISTA, 
    DESCRIPCION, IMAGEN, FECH_MODIFICACION, USUA_MODIFICACION, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT EC.CODI_ELEM_CST, 		EC.NOMB_ELEM_CST,
        EC.CONS_CST_DIFICULTAD, 	F.CODI_CST_DIFICULTAD,
        F.NOMB_CST_DIFICULTAD, 	EC.CONS_CST_DISTANCIA,
        D.CODI_CST_DISTANCIA, 	D.NOMB_CST_DISTANCIA,
        EC.CONS_CST_POSICIONAMIENTO, 	P.CODI_CST_POSICIONAMIENTO,
        P.NOMB_CST_POSICIONAMIENTO, 	EC.CONS_CST_PESO,
        SIS_CST_PESOS.CODI_CST_PESO, 	SIS_CST_PESOS.NOMB_CST_PESO,
        EC.TIEM_CST, 	EC.SOFTCONF,
        EC.NOMB_ANALISTA, 	EC.DESCRIPCION, 	EC.IMAGEN,
        EC.FECH_MODIFICACION, 	EC.USUA_MODIFICACION,
        EC.FECH_SISTEMA, 	EC.USUA_SISTEMA
FROM PCP_ELEM_CST EC
   INNER JOIN SIS_CST_DIFICULTADES F ON (EC.CONS_CST_DIFICULTAD = F.CONS_CST_DIFICULTAD)
   INNER JOIN SIS_CST_DISTANCIAS D ON (EC.CONS_CST_DISTANCIA = D.CONS_CST_DISTANCIA)
   INNER JOIN SIS_CST_POSICIONAMIENTOS P ON (EC.CONS_CST_POSICIONAMIENTO = P.CONS_CST_POSICIONAMIENTO)
   INNER JOIN SIS_CST_PESOS ON (EC.CONS_CST_PESO = SIS_CST_PESOS.CONS_CST_PESO);

/*  View: VIS_PCP_FORM_PAGO_DIFE_DETALLE, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_FORM_PAGO_DIFE_DETALLE (CONS_FORM_PAGO_DIFERENCIAL, RANG_INICIAL, RANG_FINAL, VALO_HORA_PRODUCCION, CODI_FORM_PAGO_DIFERENCIAL)
AS

SELECT D.CONS_FORM_PAGO_DIFERENCIAL, D.RANG_INICIAL,
    D.RANG_FINAL, D.VALO_HORA_PRODUCCION,
    PD.CODI_FORM_PAGO_DIFERENCIAL
FROM PCP_FORM_PAGO_DIFERENCIAL PD
   INNER JOIN PCP_FORM_PAGO_DIFE_DETALLE D ON (PD.CONS_FORM_PAGO_DIFERENCIAL = D.CONS_FORM_PAGO_DIFERENCIAL);

/*  View: VIS_PCP_FORM_PAGO_PERSONAL, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_FORM_PAGO_PERSONAL (CONS_FORM_PAGO_PERSONAL, CONS_PERSONAL, 
    FECH_INICIAL, VALO_HORA_MINI_GARANTIZADO, VALO_HORA_PRODUCCION, CONS_SIS_FORM_PAGO, 
    NOMB_SIS_FORM_PAGO, PARA_1, PARA_2, PARA_3, CONS_FORM_PAGO_APRENDIZAJE, 
    CODI_FORM_PAGO_APRENDIZAJE, NOMB_FORM_PAGO_APRENDIZAJE, FECH_FINA_PAGO_APRENDIZAJE, 
    FECH_SISTEMA, USUA_SISTEMA, EFIC_INIC_APRENDIZAJE, CONS_OPER_COSTURA, 
    CODI_OPER_COSTURA, NOMB_OPER_COSTURA)
AS

SELECT PP.CONS_FORM_PAGO_PERSONAL, PP.CONS_PERSONAL,
       PP.FECH_INICIAL, PP.VALO_HORA_MINI_GARANTIZADO,
       PP.VALO_HORA_PRODUCCION, PP.CONS_SIS_FORM_PAGO,
       SIS_PCP_FORM_PAGO.NOMB_SIS_FORM_PAGO, PP.PARA_1,
       PP.PARA_2, PP.PARA_3,
       PP.CONS_FORM_PAGO_APRENDIZAJE, PA.CODI_FORM_PAGO_APRENDIZAJE,
       PA.NOMB_FORM_PAGO_APRENDIZAJE, PP.FECH_FINA_PAGO_APRENDIZAJE,
       PP.FECH_SISTEMA, PP.USUA_SISTEMA,
       PP.EFIC_INIC_APRENDIZAJE, PP.CONS_OPER_COSTURA,
       PCP_OPER_COSTURA.CODI_OPER_COSTURA, PCP_OPER_COSTURA.NOMB_OPER_COSTURA
FROM PCP_OPER_COSTURA
   RIGHT OUTER JOIN PCP_FORM_PAGO_PERSONAL PP ON (PCP_OPER_COSTURA.CONS_OPER_COSTURA = PP.CONS_OPER_COSTURA)
   LEFT OUTER JOIN PCP_FORM_PAGO_APRENDIZAJE PA ON (PP.CONS_FORM_PAGO_APRENDIZAJE = PA.CONS_FORM_PAGO_APRENDIZAJE)
   LEFT OUTER JOIN SIS_PCP_FORM_PAGO ON (PP.CONS_SIS_FORM_PAGO = SIS_PCP_FORM_PAGO.CONS_SIS_FORM_PAGO);

/*  View: VIS_SIS_TABL_AUXI_DETALLE, Owner: SYSDBA  */
CREATE VIEW VIS_SIS_TABL_AUXI_DETALLE (CONS_TABL_AUXI_DETALLE, CONS_TABL_AUXILIAR, 
    CODI_TABL_AUXILIAR, TEXT_TABL_AUXI_DETALLE, ADIC_VARC, ADIC_INTE, ADIC_REAL)
AS

SELECT DETA.CONS_TABL_AUXI_DETALLE, DETA.CONS_TABL_AUXILIAR,
    MAES.CODI_TABL_AUXILIAR, DETA.TEXT_TABL_AUXI_DETALLE,
    DETA.ADIC_VARC, DETA.ADIC_INTE, DETA.ADIC_REAL
FROM SIS_TABL_AUXILIARES MAES
   INNER JOIN SIS_TABL_AUXI_DETALLE DETA ON (MAES.CONS_TABL_AUXILIAR = DETA.CONS_TABL_AUXILIAR);

/*  View: VIS_PCP_INSU_SUBGRUPOS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_INSU_SUBGRUPOS (CONS_INSU_SUBGRUPO, CONS_INSU_GRUPO, CODI_INSU_GRUPO, 
    NOMB_INSU_GRUPO, CODI_INSU_SUBGRUPO, NOMB_INSU_SUBGRUPO, OBSERVACIONES, 
    FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT S.CONS_INSU_SUBGRUPO, S.CONS_INSU_GRUPO,
       G.CODI_INSU_GRUPO, G.NOMB_INSU_GRUPO,
       S.CODI_INSU_SUBGRUPO, S.NOMB_INSU_SUBGRUPO,
       S.OBSERVACIONES, S.FECH_SISTEMA,
       S.USUA_SISTEMA
FROM PCP_INSU_SUBGRUPOS S
   INNER JOIN PCP_INSU_GRUPOS G ON (S.CONS_INSU_GRUPO = G.CONS_INSU_GRUPO);

/*  View: VIS_PCP_INSU_REFERENCIAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_INSU_REFERENCIAS (CONS_INSU_REFERENCIA, CONS_INSU_GRUPO, 
    CODI_INSU_GRUPO, NOMB_INSU_GRUPO, CONS_INSU_SUBGRUPO, CODI_INSU_SUBGRUPO, 
    NOMB_INSU_SUBGRUPO, CODI_INSU_REFERENCIA, NOMB_INSU_REFERENCIA, OBSERVACIONES, 
    CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_INSU_REFERENCIA, R.CONS_INSU_GRUPO,
       VIS_PCP_INSU_SUBGRUPOS.CODI_INSU_GRUPO, VIS_PCP_INSU_SUBGRUPOS.NOMB_INSU_GRUPO,
       R.CONS_INSU_SUBGRUPO, VIS_PCP_INSU_SUBGRUPOS.CODI_INSU_SUBGRUPO,
       VIS_PCP_INSU_SUBGRUPOS.NOMB_INSU_SUBGRUPO, R.CODI_INSU_REFERENCIA,
       R.NOMB_INSU_REFERENCIA, R.OBSERVACIONES,
       R.CONS_UNID_MEDIDA, GLO_INVE_UNIDADES.CODI_UNID_MEDIDA,
       GLO_INVE_UNIDADES.NOMB_UNID_MEDIDA, R.FECH_SISTEMA,
       R.USUA_SISTEMA
FROM PCP_INSU_REFERENCIAS R
   INNER JOIN VIS_PCP_INSU_SUBGRUPOS ON (R.CONS_INSU_SUBGRUPO = VIS_PCP_INSU_SUBGRUPOS.CONS_INSU_SUBGRUPO)
   INNER JOIN GLO_INVE_UNIDADES ON (R.CONS_UNID_MEDIDA = GLO_INVE_UNIDADES.CONS_UNID_MEDIDA);

/*  View: VIS_PCP_INVE_UNID_MEDIDA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_INVE_UNID_MEDIDA (CONS_UNID_MEDIDA, CONS_TIPO_UNID_MEDIDA, 
    CODI_TIPO_UNID_MEDIDA, NOMB_TIPO_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, 
    FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT I.CONS_UNID_MEDIDA, I.CONS_TIPO_UNID_MEDIDA,
       U.CODI_TIPO_UNID_MEDIDA, U.NOMB_TIPO_UNID_MEDIDA,
       I.CODI_UNID_MEDIDA, I.NOMB_UNID_MEDIDA,
       I.FECH_SISTEMA, I.USUA_SISTEMA
FROM GLO_INVE_UNIDADES I
   INNER JOIN SIS_TIPO_UNID_MEDIDA U ON (I.CONS_TIPO_UNID_MEDIDA = U.CONS_TIPO_UNID_MEDIDA);

/*  View: VIS_PCP_MATE_SUBGRUPOS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_MATE_SUBGRUPOS (CONS_MATE_SUBGRUPO, CONS_MATE_GRUPO, 
    CODI_MATE_GRUPO, NOMB_MATE_GRUPO, CODI_MATE_SUBGRUPO, NOMB_MATE_SUBGRUPO, 
    OBSERVACIONES, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT S.CONS_MATE_SUBGRUPO, S.CONS_MATE_GRUPO,
       PCP_MATE_GRUPOS.CODI_MATE_GRUPO, PCP_MATE_GRUPOS.NOMB_MATE_GRUPO,
       S.CODI_MATE_SUBGRUPO, S.NOMB_MATE_SUBGRUPO,
       S.OBSERVACIONES, S.FECH_SISTEMA,
       S.USUA_SISTEMA
FROM PCP_MATE_SUBGRUPOS S
   INNER JOIN PCP_MATE_GRUPOS ON (S.CONS_MATE_GRUPO = PCP_MATE_GRUPOS.CONS_MATE_GRUPO);

/*  View: VIS_PCP_MATE_REFERENCIAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_MATE_REFERENCIAS (CONS_MATE_REFERENCIA, CONS_MATE_GRUPO, 
    CODI_MATE_GRUPO, NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO, 
    NOMB_MATE_SUBGRUPO, CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA, OBSERVACIONES, 
    CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_MATE_REFERENCIA, R.CONS_MATE_GRUPO,
       VS.CODI_MATE_GRUPO, VS.NOMB_MATE_GRUPO,
       R.CONS_MATE_SUBGRUPO, VS.CODI_MATE_SUBGRUPO,
       VS.NOMB_MATE_SUBGRUPO, R.CODI_MATE_REFERENCIA,
       R.NOMB_MATE_REFERENCIA, R.OBSERVACIONES,
       R.CONS_UNID_MEDIDA, GLO_INVE_UNIDADES.CODI_UNID_MEDIDA,
       GLO_INVE_UNIDADES.NOMB_UNID_MEDIDA, R.FECH_SISTEMA,
       R.USUA_SISTEMA
FROM PCP_MATE_REFERENCIAS R
   INNER JOIN VIS_PCP_MATE_SUBGRUPOS VS ON (R.CONS_MATE_SUBGRUPO = VS.CONS_MATE_SUBGRUPO)
   INNER JOIN GLO_INVE_UNIDADES ON (R.CONS_UNID_MEDIDA = GLO_INVE_UNIDADES.CONS_UNID_MEDIDA);

/*  View: VIS_PCP_METO_TIEM_CICLO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_METO_TIEM_CICLO (CONS_METO_TIEM_CICLO, CODI_METO_TIEM_CICLO, 
    NOMB_METO_TIEM_CICLO, CONS_RECU_GRUPO, CODI_RECU_GRUPO, NOMB_RECU_GRUPO, 
    CONS_RECU_TIPO, CODI_RECU_TIPO, NOMB_RECU_TIPO, CONS_RECU_FAMILIA, 
    CODI_RECU_FAMILIA, NOMB_RECU_FAMILIA, CARACTERISTICAS, TIEM_ASIGNADO, 
    TIEM_CST, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT T.CONS_METO_TIEM_CICLO,
       T.CODI_METO_TIEM_CICLO, T.NOMB_METO_TIEM_CICLO,
       F.CONS_RECU_GRUPO, F.CODI_RECU_GRUPO,
       F.NOMB_RECU_GRUPO, F.CONS_RECU_TIPO,
       F.CODI_RECU_TIPO, F.NOMB_RECU_TIPO,
       F.CONS_RECU_FAMILIA, F.CODI_RECU_FAMILIA,
       F.NOMB_RECU_FAMILIA, T.CARACTERISTICAS,
       T.TIEM_ASIGNADO, T.TIEM_CST,
       T.FECH_SISTEMA, T.USUA_SISTEMA
FROM PCP_METO_TIEM_CICLO T
   INNER JOIN VIS_GLO_RECU_FAMILIAS ON (T.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA);

/*  View: VIS_PCP_OPCIONES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_OPCIONES (PERS_AVIS_VENC_CONTRATO, PERS_DEFE_PAIS, 
    PERS_DEFE_DEPARTAMENTO, PERS_DEFE_CIUDAD, INGE_METO_TIPO_ACTIVIDAD, 
    INGE_METO_TIPO_ACTI_FACTOR, INGE_METO_UNID_MEDIDA, INGE_METO_UNID_MEDI_FACTOR, 
    INGE_METO_NUME_DECIMALES, INGE_METO_COLO_MANUAL, INGE_METO_COLO_MAQUINA, 
    INGE_METO_COLO_REPEAT, MOTO_FORM_FECHA, GENE_NOMB_SERVIDOR, 
    CONT_PROD_HORA_EXTR_DETALLADA, TIQU_INIC_LINEA, TIQU_SALT_LINEA, 
    TIQU_CORT_TIQUETE, TIQU_MARG_IZQUIERDO, TIQU_DIST_TIQUETES, 
    TIQU_PRODUCCION, TIQU_CORTE, CONT_PROD_NOMB_INDI_1, 
    CONT_PROD_NOMB_INDI_2, CONT_PROD_NOMB_INDI_3, CONT_PROD_DIAS_EFIC_PROMEDIO)
AS

SELECT
    /*  Dias de vencimiento del contrato  */
    PERS_AVIS_VENC_CONTRATO,

    /*  UBICACION DEL PERSONAL  */
    PERS_DEFE_PAIS, PERS_DEFE_DEPARTAMENTO, PERS_DEFE_CIUDAD,

    /*  Tipo de actividad  */
    CASE INGE_METO_TIPO_ACTIVIDAD
            WHEN 0 THEN 'Normal'
            WHEN 1 THEN 'Optima'
            WHEN 2 THEN 'MTM'
            ELSE 'Desconocido'
    END AS INGE_METO_TIPO_ACTIVIDAD,

    /*  Factor del tipo de actividad  */
    CASE INGE_METO_TIPO_ACTIVIDAD
            WHEN 0 THEN 1.11
            WHEN 1 THEN 0.83
            WHEN 2 THEN 1
            ELSE 1
    END AS INGE_METO_TIPO_ACTIV_FACTOR,

    /*  Unidad de medida metodos  */
    CASE INGE_METO_UNID_MEDIDA
            WHEN 0 THEN 'Minutos'
            WHEN 1 THEN'Segundos'
            WHEN 2 THEN 'Horas'
            WHEN 3 THEN 'CMinuto'
            WHEN 4 THEN 'DMHora'
            WHEN 5 THEN 'TMU'
            ELSE 'Desconocido'
    END AS INGE_METO_UNID_MEDIDA,

    /*  Factor unidad de medida metodos  */
    CASE INGE_METO_UNID_MEDIDA
            WHEN 0 THEN 0.0006
            WHEN 1 THEN 0.036
            WHEN 2 THEN 0.000001
            WHEN 3 THEN 0.06
            WHEN 4 THEN 0.1
            WHEN 5 THEN 1
            ELSE 1
    END AS INGE_METO_UNID_MEDIDA_FACTOR,

    INGE_METO_NUME_DECIMALES, INGE_METO_COLO_MANUAL, INGE_METO_COLO_MAQUINA,
    INGE_METO_COLO_REPEAT, MOTO_FORM_FECHA, GENE_NOMB_SERVIDOR,
    CONT_PROD_HORA_EXTR_DETALLADA, TIQU_INIC_LINEA, TIQU_SALT_LINEA,
    TIQU_CORT_TIQUETE, TIQU_MARG_IZQUIERDO, TIQU_DIST_TIQUETES,
    TIQU_PRODUCCION, TIQU_CORTE, CONT_PROD_NOMB_INDI_1,
    CONT_PROD_NOMB_INDI_2, CONT_PROD_NOMB_INDI_3, CONT_PROD_DIAS_EFIC_PROMEDIO
FROM PCP_OPCIONES;

/*  View: VIS_PCP_OPER_COST_PAGO_HABI, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_OPER_COST_PAGO_HABI (CODI_OPER_COSTURA, CONS_FORM_PAGO_HABILIDAD, 
    CODI_FORM_PAGO_HABILIDAD, VALO_HORA_PRODUCCION)
AS

SELECT C.CODI_OPER_COSTURA, C.CONS_FORM_PAGO_HABILIDAD,
    H.CODI_FORM_PAGO_HABILIDAD, H.VALO_HORA_PRODUCCION
FROM PCP_FORM_PAGO_HABILIDAD H
   INNER JOIN PCP_OPER_COSTURA C ON (H.CONS_FORM_PAGO_HABILIDAD = C.CONS_FORM_PAGO_HABILIDAD) ;

/*  View: VIS_PCP_OPER_COST_PAQU_TIPO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_OPER_COST_PAQU_TIPO (CONS_OPER_COSTURA, CODI_OPER_COSTURA, 
    NOMB_OPER_COSTURA, CONS_PROCESO, CODI_PROCESO, NOMB_PROCESO, 
    CONS_PROD_PAQU_TIPO, CODI_PROD_PAQU_TIPO, NOMB_PROD_PAQU_TIPO, 
    CONS_OPER_COST_TIPO, CONS_COMP_GRUPO)
AS

SELECT OC.CONS_OPER_COSTURA, OC.CODI_OPER_COSTURA,
    OC.NOMB_OPER_COSTURA, OC.CONS_PROCESO, PCP_PROCESOS.CODI_PROCESO,
    P.NOMB_PROCESO, PCP_PROD_PAQU_TIPOS.CONS_PROD_PAQU_TIPO,
    PCP_PROD_PAQU_TIPOS.CODI_PROD_PAQU_TIPO, PCP_PROD_PAQU_TIPOS.NOMB_PROD_PAQU_TIPO, 
    OC.CONS_OPER_COST_TIPO, OC.CONS_COMP_GRUPO

FROM PCP_OPER_COSTURA OC
   INNER JOIN PCP_PROCESOS P ON (OC.CONS_PROCESO = P.CONS_PROCESO)
   INNER JOIN PCP_PROD_PAQU_TIPOS ON (P.CONS_PROD_PAQU_TIPO = PCP_PROD_PAQU_TIPOS.CONS_PROD_PAQU_TIPO);

/*  View: VIS_PCP_OPER_COSTURA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_OPER_COSTURA (CONS_OPER_COSTURA, CODI_OPER_COSTURA, NOMB_OPER_COSTURA, 
    CONS_PROCESO, CODI_PROCESO, NOMB_PROCESO, CONS_OPER_COST_TIPO, 
    CODI_OPER_COST_TIPO, NOMB_OPER_COST_TIPO, CONS_COMP_GRUPO, CODI_COMP_GRUPO, 
    NOMB_COMP_GRUPO, FECH_SISTEMA, USUA_SISTEMA, DESCRIPCION, 
    IMAGEN, AJUS_IMAGEN, PUNT_POR_CENTIMETRO, SUPL_CONSTANTE, 
    SUPL_VARIABLE, LARG_COSTURA, COMP_LARG_COSTURA, CONS_RECU_FAMILIA, 
    CODI_RECU_FAMILIA, NOMB_RECU_FAMILIA, CONS_RECU_GRUPO, CODI_RECU_GRUPO, 
    NOMB_RECU_GRUPO, CONS_RECU_TIPO, CODI_RECU_TIPO, CONS_RECU_MARCA, 
    CODI_RECU_MARCA, NOMB_RECU_MARCA, CLAS_RECURSO, CODI_RECU_TIPO_PUNTADA, 
    CONS_RECU_TIPO_PUNTADA, NOMB_RECU_TIPO, REVO_POR_MINUTO, SUPL_MAQUINA, 
    CONS_ACCE_FAMILIA, IMAG_PUES_TRABAJO, AJUS_IMAG_PUES_TRABAJO, MODI_PUES_TRABAJO, 
    IMAG_DIST_PUES_TRABAJO, AJUS_IMAG_DIST_PUES_TRABAJO, SECU_MOVIMIENTOS, 
    TIEM_CRONOMETRO, TIEM_ASIGNADO, COST_OPERACION, FECH_MODIFICACION, USUA_MODIFICACION)
AS

SELECT OC.CONS_OPER_COSTURA, OC.CODI_OPER_COSTURA,
    OC.NOMB_OPER_COSTURA, OC.CONS_PROCESO,
    PCP_PROCESOS.CODI_PROCESO, PCP_PROCESOS.NOMB_PROCESO,
    OC.CONS_OPER_COST_TIPO, PCP_OPER_COST_TIPOS.CODI_OPER_COST_TIPO,
    PCP_OPER_COST_TIPOS.NOMB_OPER_COST_TIPO, OC.CONS_COMP_GRUPO,
    PCP_COMP_GRUPOS.CODI_COMP_GRUPO, PCP_COMP_GRUPOS.NOMB_COMP_GRUPO,
    OC.FECH_SISTEMA, OC.USUA_SISTEMA,
    OC.DESCRIPCION,
    OC.IMAGEN, OC.AJUS_IMAGEN,
    OC.PUNT_POR_CENTIMETRO,
    OC.SUPL_CONSTANTE, OC.SUPL_VARIABLE,
    OC.LARG_COSTURA, OC.COMP_LARG_COSTURA,
    OC.CONS_RECU_FAMILIA, GLO_RECU_FAMILIAS.CODI_RECU_FAMILIA,
    GLO_RECU_FAMILIAS.NOMB_RECU_FAMILIA, OC.CONS_RECU_GRUPO,
    GLO_RECU_GRUPOS.CODI_RECU_GRUPO, GLO_RECU_GRUPOS.NOMB_RECU_GRUPO,
    OC.CONS_RECU_TIPO, GLO_RECU_TIPOS.CODI_RECU_TIPO,
    OC.CONS_RECU_MARCA, GLO_RECU_MARCAS.CODI_RECU_MARCA,
    GLO_RECU_MARCAS.NOMB_RECU_MARCA, OC.CLAS_RECURSO,
    GLO_RECU_TIPO_PUNTADA.CODI_RECU_TIPO_PUNTADA, OC.CONS_RECU_TIPO_PUNTADA,
    GLO_RECU_TIPOS.NOMB_RECU_TIPO, OC.REVO_POR_MINUTO,
    OC.SUPL_MAQUINA, OC.CONS_ACCE_FAMILIA,
    OC.IMAG_PUES_TRABAJO, OC.AJUS_IMAG_PUES_TRABAJO,
    OC.MODI_PUES_TRABAJO, OC.IMAG_DIST_PUES_TRABAJO,
    OC.AJUS_IMAG_DIST_PUES_TRABAJO, OC.SECU_MOVIMIENTOS,
    OC.TIEM_CRONOMETRO, OC.TIEM_ASIGNADO,
    OC.COST_OPERACION,
    OC.FECH_MODIFICACION, OC.USUA_MODIFICACION
FROM PCP_OPER_COSTURA OC
   INNER JOIN PCP_PROCESOS ON (OC.CONS_PROCESO = PCP_PROCESOS.CONS_PROCESO)
   INNER JOIN PCP_OPER_COST_TIPOS ON (OC.CONS_OPER_COST_TIPO = PCP_OPER_COST_TIPOS.CONS_OPER_COST_TIPO)
   INNER JOIN PCP_COMP_GRUPOS ON (OC.CONS_COMP_GRUPO = PCP_COMP_GRUPOS.CONS_COMP_GRUPO)
   INNER JOIN GLO_RECU_FAMILIAS ON (OC.CONS_RECU_FAMILIA = GLO_RECU_FAMILIAS.CONS_RECU_FAMILIA)
   INNER JOIN GLO_RECU_GRUPOS ON (OC.CONS_RECU_GRUPO = GLO_RECU_GRUPOS.CONS_RECU_GRUPO)
   INNER JOIN GLO_RECU_TIPOS ON (OC.CONS_RECU_TIPO = GLO_RECU_TIPOS.CONS_RECU_TIPO)
   INNER JOIN GLO_RECU_MARCAS ON (OC.CONS_RECU_MARCA = GLO_RECU_MARCAS.CONS_RECU_MARCA)
   INNER JOIN GLO_RECU_TIPO_PUNTADA ON (OC.CONS_RECU_TIPO_PUNTADA = GLO_RECU_TIPO_PUNTADA.CONS_RECU_TIPO_PUNTADA);

/*  View: VIS_PCP_PEDIDOS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDIDOS (CONS_PEDIDO, NUME_PEDIDO, CONS_REFE_TEMPORADA, 
    NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO, FECH_PEDIDO, 
    FECH_ENTREGA, OBSERVACIONES, CONS_COME_VENDEDOR, NOMB_COME_VENDEDOR, 
    CONS_COME_PRIO_PEDIDO, NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, 
    CONS_DESPACHAR_A, CONS_FACTURAR_A, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT P.CONS_PEDIDO, P.NUME_PEDIDO, P.CONS_REFE_TEMPORADA,
       GLO_REFE_TEMPORADAS.NOMB_REFE_TEMPORADA, P.CONS_TERCERO,
       VIS_PCP_CLIENTES.NOMB_TERCERO, P.FECH_PEDIDO,
       P.FECH_ENTREGA, P.OBSERVACIONES,
       P.CONS_COME_VENDEDOR, GLO_COME_VENDEDORES.NOMB_COME_VENDEDOR,
       P.CONS_COME_PRIO_PEDIDO, O.NOMB_COME_PRIO_PEDIDO,
       O.COLOR, P.CONS_DESPACHAR_A,
       P.CONS_FACTURAR_A, P.FECH_SISTEMA,
       P.USUA_SISTEMA
FROM PCP_PEDIDOS P
   INNER JOIN GLO_REFE_TEMPORADAS ON (P.CONS_REFE_TEMPORADA = GLO_REFE_TEMPORADAS.CONS_REFE_TEMPORADA)
   INNER JOIN VIS_PCP_CLIENTES ON (P.CONS_TERCERO = VIS_PCP_CLIENTES.CONS_TERCERO)
   INNER JOIN GLO_COME_VENDEDORES ON (P.CONS_COME_VENDEDOR = GLO_COME_VENDEDORES.CONS_COME_VENDEDOR)
   INNER JOIN GLO_COME_PRIO_PEDIDOS O ON (P.CONS_COME_PRIO_PEDIDO = O.CONS_COME_PRIO_PEDIDO) ;

/*  View: VIS_PCP_PEDI_REFE_COLORES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_REFE_COLORES (CONS_PEDI_REFERENCIA, CONS_REFE_COLOR, 
    SECU_COLOR, NOMB_COLOR, NUME_COLOR)
AS

SELECT DISTINCT U.CONS_PEDI_REFERENCIA, GLO_REFE_COLORES.CONS_REFE_COLOR,
  U.SECU_COLOR, GLO_COLORES.NOMB_COLOR, GLO_REFE_COLORES.NUME_COLOR
FROM GLO_REFE_COLORES 
   INNER JOIN PCP_PEDI_UNIDADES U ON (GLO_REFE_COLORES.CONS_REFE_COLOR = U.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR);

/*  View: VIS_PCP_PEDI_REFERENCIAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_REFERENCIAS (CONS_PEDI_REFERENCIA, CONS_PEDIDO, NUME_PEDIDO, 
    CONS_REFE_TEMPORADA, CODI_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, CONS_TERCERO, 
    FECH_PEDIDO, FECH_ENTREGA, OBSERVACIONES, CONS_COME_VENDEDOR, 
    CONS_COME_PRIO_PEDIDO, CONS_DESPACHAR_A, CONS_FACTURAR_A, CONS_REFERENCIA, 
    CODI_REFERENCIA, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_TIPO_VARIACION, 
    CODI_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, CONS_REFE_VARIACION, 
    ORDE_COMPRA, CONS_REFE_LAVADO, NOMB_REFE_LAVADO, TOLE_SUPERIOR, 
    TOLE_INFERIOR, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT F.CONS_PEDI_REFERENCIA, F.CONS_PEDIDO, 
        P.NUME_PEDIDO, P.CONS_REFE_TEMPORADA, 
        T.CODI_REFE_TEMPORADA, T.NOMB_REFE_TEMPORADA, 
        P.CONS_TERCERO, P.FECH_PEDIDO, P.FECH_ENTREGA, 
        P.OBSERVACIONES, P.CONS_COME_VENDEDOR, 
        P.CONS_COME_PRIO_PEDIDO, P.CONS_DESPACHAR_A, 
        P.CONS_FACTURAR_A, F.CONS_REFERENCIA, 
        G.CODI_REFERENCIA, G.CODI_INTE_REFERENCIA, 
        G.NOMB_REFERENCIA, V.CONS_REFE_TIPO_VARIACION, 
        V.CODI_REFE_TIPO_VARIACION, V.NOMB_REFE_TIPO_VARIACION, 
        F.CONS_REFE_VARIACION, F.ORDE_COMPRA, 
        F.CONS_REFE_LAVADO, GLO_REFE_LAVADOS.NOMB_REFE_LAVADO, 
        F.TOLE_SUPERIOR, F.TOLE_INFERIOR, 
        F.FECH_SISTEMA, F.USUA_SISTEMA
FROM PCP_REFE_VARIACIONES R
   INNER JOIN PCP_PEDI_REFERENCIAS F ON (R.CONS_REFE_VARIACION = F.CONS_REFE_VARIACION)
   INNER JOIN GLO_REFE_LAVADOS ON (F.CONS_REFE_LAVADO = GLO_REFE_LAVADOS.CONS_REFE_LAVADO)
   INNER JOIN GLO_REFERENCIAS G ON (F.CONS_REFERENCIA = G.CONS_REFERENCIA)
   INNER JOIN PCP_PEDIDOS P ON (F.CONS_PEDIDO = P.CONS_PEDIDO)
   INNER JOIN GLO_REFE_TEMPORADAS T ON (P.CONS_REFE_TEMPORADA = T.CONS_REFE_TEMPORADA)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES V ON (R.CONS_REFE_TIPO_VARIACION = V.CONS_REFE_TIPO_VARIACION) ;

/*  View: VIS_PCP_PEDI_REFE_TALLAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_REFE_TALLAS (CONS_PEDI_REFERENCIA, SECU_TALLA, CONS_GRUP_TALL_DETALLE, TALLA) 
AS

SELECT DISTINCT UNID.CONS_PEDI_REFERENCIA, UNID.SECU_TALLA, UNID.CONS_GRUP_TALL_DETALLE, TALL.TALLA
FROM PCP_PEDI_UNIDADES UNID
   INNER JOIN GLO_GRUP_TALL_DETALLE TALL ON (UNID.CONS_GRUP_TALL_DETALLE = TALL.CONS_GRUP_TALL_DETALLE) ;

/*  View: VIS_PCP_PEDI_REFE_PENDIENTES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_REFE_PENDIENTES (CONS_PEDI_REFERENCIA, CONS_PEDIDO, NUME_PEDIDO, 
    CONS_REFE_TEMPORADA, CONS_TERCERO, FECH_PEDIDO, FECH_ENTREGA, OBSERVACIONES, 
    CONS_COME_VENDEDOR, CONS_COME_PRIO_PEDIDO, CONS_DESPACHAR_A, CONS_FACTURAR_A, 
    CONS_REFERENCIA, CODI_REFERENCIA, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, 
    CODI_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, CONS_REFE_VARIACION, 
    ORDE_COMPRA, CONS_REFE_LAVADO, NOMB_REFE_LAVADO, TOLE_INFERIOR, 
    TOLE_SUPERIOR, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT  VPR.CONS_PEDI_REFERENCIA, 	VPR.CONS_PEDIDO,
        VPR.NUME_PEDIDO, 			VPR.CONS_REFE_TEMPORADA,
        VPR.CONS_TERCERO, 			VPR.FECH_PEDIDO,
        VPR.FECH_ENTREGA, 			VPR.OBSERVACIONES,
        VPR.CONS_COME_VENDEDOR, 	VPR.CONS_COME_PRIO_PEDIDO,
        VPR.CONS_DESPACHAR_A, 		VPR.CONS_FACTURAR_A,
        VPR.CONS_REFERENCIA, 		VPR.CODI_REFERENCIA,
        VPR.CODI_INTE_REFERENCIA, 	VPR.NOMB_REFERENCIA,
        VPR.CODI_REFE_TIPO_VARIACION, 	VPR.NOMB_REFE_TIPO_VARIACION,
        VPR.CONS_REFE_VARIACION, 	VPR.ORDE_COMPRA,
        VPR.CONS_REFE_LAVADO, 		VPR.NOMB_REFE_LAVADO,
        VPR.TOLE_INFERIOR, 		    VPR.TOLE_SUPERIOR,
        VPR.FECH_SISTEMA, 			VPR.USUA_SISTEMA

FROM VIS_PCP_PEDI_REFERENCIAS VPR
Where Not cons_pedi_referencia In
    (Select un.cons_pedi_referencia
      from pcp_pedi_unidades un
      Where un.CONS_PEDI_UNIDADES
      IN (SELECT DISTINCT CONS_PEDI_UNIDADES FROM PCP_PEDI_PLANEACION
        ORDER BY CONS_PEDI_UNIDADES)
      Order by un.Cons_Pedi_Referencia
     );

/*  View: VIS_PCP_PEDI_UNID_BASICO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_UNID_BASICO (CONS_PEDI_UNIDADES, CONS_PEDI_REFERENCIA, 
    SECU_TALLA, CONS_GRUP_TALL_DETALLE, SECU_COLOR, CONS_REFE_COLOR, UNIDADES, 
    CONS_PEDIDO, CONS_REFERENCIA, CONS_REFE_VARIACION, ORDE_COMPRA, NUME_PEDIDO, 
    CONS_TERCERO, FECH_PEDIDO, FECH_ENTREGA)
AS

SELECT U.CONS_PEDI_UNIDADES, U.CONS_PEDI_REFERENCIA,
    U.SECU_TALLA, U.CONS_GRUP_TALL_DETALLE,
    U.SECU_COLOR, U.CONS_REFE_COLOR,
    U.UNIDADES, R.CONS_PEDIDO,
    R.CONS_REFERENCIA, R.CONS_REFE_VARIACION,
    R.ORDE_COMPRA, P.NUME_PEDIDO,
    P.CONS_TERCERO, P.FECH_PEDIDO, P.FECH_ENTREGA
FROM PCP_PEDIDOS P
   INNER JOIN PCP_PEDI_REFERENCIAS R ON (P.CONS_PEDIDO = R.CONS_PEDIDO)
   INNER JOIN PCP_PEDI_UNIDADES U ON (R.CONS_PEDI_REFERENCIA = U.CONS_PEDI_REFERENCIA);

/*  View: VIS_PCP_PEDI_UNIDADES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_UNIDADES (CONS_PEDIDO, NUME_PEDIDO, CONS_REFE_TEMPORADA, 
    NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO, FECH_PEDIDO, FECH_ENTREGA, 
    OBSERVACIONES, CONS_COME_VENDEDOR, NOMB_COME_VENDEDOR, CONS_COME_PRIO_PEDIDO, 
    NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, CONS_DESPACHAR_A, CONS_FACTURAR_A, 
    FECH_SISTEMA, USUA_SISTEMA, CONS_PEDI_REFERENCIA, CONS_REFERENCIA, CODI_REFERENCIA, 
    MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_VARIACION, 
    CONS_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, ORDE_COMPRA, CONS_REFE_LAVADO, 
    CONS_REFE_BORDADO, CONS_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, NOMB_REFE_BORDADO, 
    NOMB_REFE_ESTAMPADO, NOMB_REFE_LAVADO, TOLE_INFERIOR, TOLE_SUPERIOR, 
    CONS_PEDI_UNIDADES, SECU_TALLA, TALLA, CONS_GRUP_TALL_DETALLE, 
    CONS_REFE_COLOR, SECU_COLOR, CODI_COLOR, NOMB_COLOR, NUME_COLOR, UNIDADES)
AS

SELECT PEDI.CONS_PEDIDO, PEDI.NUME_PEDIDO, PEDI.CONS_REFE_TEMPORADA,
       PEDI.NOMB_REFE_TEMPORADA, PEDI.CONS_TERCERO,
       PEDI.NOMB_TERCERO, PEDI.FECH_PEDIDO,
       PEDI.FECH_ENTREGA, PEDI.OBSERVACIONES,
       PEDI.CONS_COME_VENDEDOR, PEDI.NOMB_COME_VENDEDOR,
       PEDI.CONS_COME_PRIO_PEDIDO, PEDI.NOMB_COME_PRIO_PEDIDO,
       PEDI.COLO_COME_PRIO_PEDIDO, PEDI.CONS_DESPACHAR_A,
       PEDI.CONS_FACTURAR_A, PEDI.FECH_SISTEMA,
       PEDI.USUA_SISTEMA, PEDI_REFE.CONS_PEDI_REFERENCIA,
       PEDI_REFE.CONS_REFERENCIA, REFE.CODI_REFERENCIA,
       REFE.MOLDE, REFE.CODI_INTE_REFERENCIA,
       REFE.NOMB_REFERENCIA, PEDI_REFE.CONS_REFE_VARIACION,
       TV.CONS_REFE_TIPO_VARIACION, TV.NOMB_REFE_TIPO_VARIACION,
       PEDI_REFE.ORDE_COMPRA, PEDI_REFE.CONS_REFE_LAVADO,
       REFE.CONS_REFE_BORDADO, REFE.CONS_REFE_ESTAMPADO,
       REFE.CONS_REFE_GRUP_TALLAS, GLO_REFE_BORDADOS.NOMB_REFE_BORDADO,
       GLO_REFE_ESTAMPADOS.NOMB_REFE_ESTAMPADO, GLO_REFE_LAVADOS.NOMB_REFE_LAVADO,
       PEDI_REFE.TOLE_INFERIOR, PEDI_REFE.TOLE_SUPERIOR,
       U.CONS_PEDI_UNIDADES, U.SECU_TALLA, D.TALLA,
       U.CONS_GRUP_TALL_DETALLE, U.CONS_REFE_COLOR,
       U.SECU_COLOR, GLO_COLORES.CODI_COLOR, GLO_COLORES.NOMB_COLOR,
       GLO_REFE_COLORES.NUME_COLOR, U.UNIDADES
FROM GLO_GRUP_TALL_DETALLE D
   INNER JOIN PCP_PEDI_UNIDADES U ON (D.CONS_GRUP_TALL_DETALLE = U.CONS_GRUP_TALL_DETALLE)
   INNER JOIN GLO_REFE_COLORES ON (U.CONS_REFE_COLOR = GLO_REFE_COLORES.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR)
   INNER JOIN PCP_PEDI_REFERENCIAS PEDI_REFE ON (U.CONS_PEDI_REFERENCIA = PEDI_REFE.CONS_PEDI_REFERENCIA)
   INNER JOIN VIS_PCP_PEDIDOS PEDI ON (PEDI_REFE.CONS_PEDIDO = PEDI.CONS_PEDIDO)
   INNER JOIN GLO_REFERENCIAS REFE ON (PEDI_REFE.CONS_REFERENCIA = REFE.CONS_REFERENCIA)
   INNER JOIN GLO_REFE_BORDADOS ON (REFE.CONS_REFE_BORDADO = GLO_REFE_BORDADOS.CONS_REFE_BORDADO)
   INNER JOIN GLO_REFE_ESTAMPADOS ON (REFE.CONS_REFE_ESTAMPADO = GLO_REFE_ESTAMPADOS.CONS_REFE_ESTAMPADO)
   INNER JOIN PCP_REFE_VARIACIONES V ON (PEDI_REFE.CONS_REFE_VARIACION = V.CONS_REFE_VARIACION)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES TV ON (V.CONS_REFE_TIPO_VARIACION = TV.CONS_REFE_TIPO_VARIACION)
   INNER JOIN GLO_REFE_LAVADOS ON (PEDI_REFE.CONS_REFE_LAVADO = GLO_REFE_LAVADOS.CONS_REFE_LAVADO) ;

/*  View: VIS_PCP_PEDI_UNID_DETALLE, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_UNID_DETALLE (CONS_PEDIDO, NUME_PEDIDO, NOMB_REFE_TEMPORADA, 
    NOMB_TERCERO, FECH_PEDIDO, FECH_ENTREGA, NOMB_COME_VENDEDOR, NOMB_COME_PRIO_PEDIDO, 
    COLO_COME_PRIO_PEDIDO, CONS_PEDI_REFERENCIA, CONS_REFERENCIA, CODI_REFERENCIA, 
    NOMB_REFERENCIA, CONS_REFE_VARIACION, CONS_REFE_TIPO_VARIACION, 
    NOMB_REFE_TIPO_VARIACION, ORDE_COMPRA, NOMB_REFE_LAVADO, NOMB_REFE_BORDADO, 
    NOMB_REFE_ESTAMPADO, TOLE_INFERIOR, TOLE_SUPERIOR, SECU_TALLA, TALLA, 
    CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR, SECU_COLOR, CODI_COLOR, NOMB_COLOR, 
    NUME_COLOR, UNIDADES)
AS

SELECT CONS_PEDIDO, 		NUME_PEDIDO, 		NOMB_REFE_TEMPORADA,
        NOMB_TERCERO, 		FECH_PEDIDO, 		FECH_ENTREGA, 		NOMB_COME_VENDEDOR,
        NOMB_COME_PRIO_PEDIDO, 	COLO_COME_PRIO_PEDIDO, 		CONS_PEDI_REFERENCIA,
        CONS_REFERENCIA, 	CODI_REFERENCIA, 	NOMB_REFERENCIA,
        CONS_REFE_VARIACION, 	CONS_REFE_TIPO_VARIACION,
        NOMB_REFE_TIPO_VARIACION, 	ORDE_COMPRA, 	NOMB_REFE_LAVADO,
        NOMB_REFE_BORDADO, 		NOMB_REFE_ESTAMPADO,
        TOLE_INFERIOR, 		TOLE_SUPERIOR, 		SECU_TALLA, 		TALLA,
        CONS_GRUP_TALL_DETALLE, 	CONS_REFE_COLOR, 	SECU_COLOR,
        CODI_COLOR, 	NOMB_COLOR, 	NUME_COLOR, 	UNIDADES
FROM VIS_PCP_PEDI_UNIDADES ;

/*  View: VIS_PCP_PEDI_UNID_PLAN_BASICO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_UNID_PLAN_BASICO (CONS_PEDI_UNIDADES, CONS_PROD_ORDEN, 
    CONS_PEDI_REFERENCIA, SECU_TALLA, CONS_GRUP_TALL_DETALLE, SECU_COLOR, 
    CONS_REFE_COLOR, UNIDADES, CONS_PEDIDO, CONS_REFERENCIA, CONS_REFE_VARIACION, 
    ORDE_COMPRA, CONS_REFE_LAVADO, TOLE_INFERIOR, TOLE_SUPERIOR)
AS

SELECT P.CONS_PEDI_UNIDADES, P.CONS_PROD_ORDEN,
    U.CONS_PEDI_REFERENCIA, U.SECU_TALLA,
    U.CONS_GRUP_TALL_DETALLE, U.SECU_COLOR,
    U.CONS_REFE_COLOR, U.UNIDADES,
    R.CONS_PEDIDO, R.CONS_REFERENCIA,
    R.CONS_REFE_VARIACION, R.ORDE_COMPRA,
    R.CONS_REFE_LAVADO, R.TOLE_INFERIOR,
    R.TOLE_SUPERIOR
FROM PCP_PEDI_REFERENCIAS R
   INNER JOIN PCP_PEDI_UNIDADES U ON (R.CONS_PEDI_REFERENCIA = U.CONS_PEDI_REFERENCIA)
   INNER JOIN PCP_PEDI_PLANEACION P ON (U.CONS_PEDI_UNIDADES = P.CONS_PEDI_UNIDADES) ;

/*  View: VIS_PCP_PEDI_UNID_PLANEADAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_UNID_PLANEADAS (CONS_PEDIDO, NUME_PEDIDO, CONS_REFE_TEMPORADA, 
    NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO, FECH_PEDIDO, FECH_ENTREGA, 
    OBSERVACIONES, CONS_COME_VENDEDOR, NOMB_COME_VENDEDOR, CONS_COME_PRIO_PEDIDO, 
    NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, CONS_DESPACHAR_A, CONS_FACTURAR_A, 
    FECH_SISTEMA, USUA_SISTEMA, CONS_PEDI_REFERENCIA, CONS_REFERENCIA, CODI_REFERENCIA, 
    MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CON_ENTREPIERNAS, CONS_REFE_VARIACION, 
    CONS_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, ORDE_COMPRA, CONS_REFE_LAVADO, 
    CONS_REFE_BORDADO, CONS_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, NOMB_REFE_BORDADO, 
    NOMB_REFE_ESTAMPADO, NOMB_REFE_LAVADO, TOLE_INFERIOR, TOLE_SUPERIOR, 
    CONS_PEDI_UNIDADES, SECU_TALLA, TALLA, CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR, 
    SECU_COLOR, CODI_COLOR, NOMB_COLOR, NUME_COLOR, UNIDADES, CONS_PROD_ORDEN)
AS

SELECT P.CONS_PEDIDO, P.NUME_PEDIDO, P.CONS_REFE_TEMPORADA,
       P.NOMB_REFE_TEMPORADA, P.CONS_TERCERO,
       P.NOMB_TERCERO, P.FECH_PEDIDO,
       P.FECH_ENTREGA, P.OBSERVACIONES,
       P.CONS_COME_VENDEDOR, P.NOMB_COME_VENDEDOR,
       P.CONS_COME_PRIO_PEDIDO, P.NOMB_COME_PRIO_PEDIDO,
       P.COLO_COME_PRIO_PEDIDO, P.CONS_DESPACHAR_A,
       P.CONS_FACTURAR_A, P.FECH_SISTEMA,
       P.USUA_SISTEMA, P.REFE.CONS_PEDI_REFERENCIA,
       P.REFE.CONS_REFERENCIA, R.CODI_REFERENCIA,
       R.MOLDE, R.CODI_INTE_REFERENCIA,
       R.NOMB_REFERENCIA, R.CON_ENTREPIERNAS, P.REFE.CONS_REFE_VARIACION,
       TV.CONS_REFE_TIPO_VARIACION,
       TV.NOMB_REFE_TIPO_VARIACION,
       P.REFE.ORDE_COMPRA, P.REFE.CONS_REFE_LAVADO,
       R.CONS_REFE_BORDADO, R.CONS_REFE_ESTAMPADO,
       R.CONS_REFE_GRUP_TALLAS, GLO_REFE_BORDADOS.NOMB_REFE_BORDADO,
       GLO_REFE_ESTAMPADOS.NOMB_REFE_ESTAMPADO, GLO_REFE_LAVADOS.NOMB_REFE_LAVADO,
       P.REFE.TOLE_INFERIOR, P.REFE.TOLE_SUPERIOR,
       U.CONS_PEDI_UNIDADES, U.SECU_TALLA, TD.TALLA,
       U.CONS_GRUP_TALL_DETALLE, U.CONS_REFE_COLOR,
       U.SECU_COLOR, GLO_COLORES.CODI_COLOR, GLO_COLORES.NOMB_COLOR,
       GLO_REFE_COLORES.NUME_COLOR, U.UNIDADES, Pcp_Pedi_Planeacion.Cons_Prod_Orden
FROM GLO_GRUP_TALL_DETALLE TD
   INNER JOIN PCP_PEDI_UNIDADES U ON (TD.CONS_GRUP_TALL_DETALLE = U.CONS_GRUP_TALL_DETALLE)
   INNER JOIN GLO_REFE_COLORES ON (U.CONS_REFE_COLOR = GLO_REFE_COLORES.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR)
   INNER JOIN PCP_PEDI_REFERENCIAS PEDI_REFE ON (U.CONS_PEDI_REFERENCIA = PEDI_REFE.CONS_PEDI_REFERENCIA)
   INNER JOIN VIS_PCP_PEDIDOS P ON (PEDI_REFE.CONS_PEDIDO = P.CONS_PEDIDO)
   INNER JOIN GLO_REFERENCIAS R ON (PEDI_REFE.CONS_REFERENCIA = R.CONS_REFERENCIA)
   INNER JOIN GLO_REFE_BORDADOS ON (REFE.CONS_REFE_BORDADO = GLO_REFE_BORDADOS.CONS_REFE_BORDADO)
   INNER JOIN GLO_REFE_ESTAMPADOS ON (REFE.CONS_REFE_ESTAMPADO = GLO_REFE_ESTAMPADOS.CONS_REFE_ESTAMPADO)
   INNER JOIN PCP_REFE_VARIACIONES V ON (PEDI_REFE.CONS_REFE_VARIACION = V.CONS_REFE_VARIACION)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES TV ON (V.CONS_REFE_TIPO_VARIACION = TV.CONS_REFE_TIPO_VARIACION)
   INNER JOIN GLO_REFE_LAVADOS ON (PEDI_REFE.CONS_REFE_LAVADO = GLO_REFE_LAVADOS.CONS_REFE_LAVADO)
   INNER JOIN PCP_PEDI_PLANEACION ON (U.Cons_Pedi_Unidades = PCP_PEDI_PLANEACION.Cons_Pedi_Unidades) ;

/*  View: VIS_PCP_PEDI_UNID_PENDIENTES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_UNID_PENDIENTES (CONS_PEDIDO, NUME_PEDIDO, CONS_REFE_TEMPORADA, 
    NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO, FECH_PEDIDO, FECH_ENTREGA, 
    OBSERVACIONES, CONS_COME_VENDEDOR, NOMB_COME_VENDEDOR, CONS_COME_PRIO_PEDIDO, 
    NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, CONS_DESPACHAR_A, CONS_FACTURAR_A, 
    FECH_SISTEMA, USUA_SISTEMA, CONS_PEDI_REFERENCIA, CONS_REFERENCIA, CODI_REFERENCIA, 
    MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_VARIACION, 
    CONS_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, ORDE_COMPRA, CONS_REFE_LAVADO, 
    CONS_REFE_BORDADO, CONS_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, NOMB_REFE_BORDADO, 
    NOMB_REFE_ESTAMPADO, NOMB_REFE_LAVADO, TOLE_INFERIOR, TOLE_SUPERIOR, 
    CONS_PEDI_UNIDADES, SECU_TALLA, TALLA, CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR, 
    SECU_COLOR, CODI_COLOR, NOMB_COLOR, NUME_COLOR, UNIDADES)
AS

SELECT CONS_PEDIDO, 			NUME_PEDIDO,
       CONS_REFE_TEMPORADA, 	NOMB_REFE_TEMPORADA,
       CONS_TERCERO, 			NOMB_TERCERO,
       FECH_PEDIDO, 			FECH_ENTREGA,
       OBSERVACIONES, 			CONS_COME_VENDEDOR,
       NOMB_COME_VENDEDOR, 		CONS_COME_PRIO_PEDIDO,
       NOMB_COME_PRIO_PEDIDO, 	COLO_COME_PRIO_PEDIDO,
       CONS_DESPACHAR_A, 		CONS_FACTURAR_A,
       FECH_SISTEMA, 			USUA_SISTEMA,
       CONS_PEDI_REFERENCIA, 	CONS_REFERENCIA,
       CODI_REFERENCIA, 		MOLDE,
       CODI_INTE_REFERENCIA, 	NOMB_REFERENCIA,
       CONS_REFE_VARIACION, 	CONS_REFE_TIPO_VARIACION,
       NOMB_REFE_TIPO_VARIACION, 	ORDE_COMPRA,
       CONS_REFE_LAVADO, 		CONS_REFE_BORDADO,
       CONS_REFE_ESTAMPADO, 	CONS_REFE_GRUP_TALLAS,
       NOMB_REFE_BORDADO, 		NOMB_REFE_ESTAMPADO,
       NOMB_REFE_LAVADO, 		TOLE_INFERIOR,
       TOLE_SUPERIOR, 			CONS_PEDI_UNIDADES,
       SECU_TALLA,
       TALLA, 			        CONS_GRUP_TALL_DETALLE,
       CONS_REFE_COLOR, 		SECU_COLOR,
       CODI_COLOR, 			    NOMB_COLOR,
       NUME_COLOR, 			    UNIDADES
FROM VIS_PCP_PEDI_UNIDADES
WHERE NOT CONS_PEDI_UNIDADES IN
            (SELECT DISTINCT CONS_PEDI_UNIDADES FROM PCP_PEDI_PLANEACION
            ORDER BY CONS_PEDI_UNIDADES) ;

/*  View: VIS_PCP_PEDI_UNID_TOTALES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_UNID_TOTALES (CONS_PEDIDO, NUME_PEDIDO, NOMB_REFE_TEMPORADA, 
    CONS_TERCERO, NOMB_TERCERO, FECH_PEDIDO, FECH_ENTREGA, NOMB_COME_VENDEDOR, 
    NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, CONS_PEDI_REFERENCIA, 
    CONS_REFERENCIA, CODI_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_VARIACION, 
    CONS_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, ORDE_COMPRA, 
    NOMB_REFE_LAVADO, NOMB_REFE_BORDADO, NOMB_REFE_ESTAMPADO, TOLE_INFERIOR, 
    TOLE_SUPERIOR, UNIDADES)
AS

SELECT CONS_PEDIDO, NUME_PEDIDO, NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO,
        FECH_PEDIDO, FECH_ENTREGA, NOMB_COME_VENDEDOR,
        NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, CONS_PEDI_REFERENCIA,
        CONS_REFERENCIA, CODI_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_VARIACION,
        CONS_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, ORDE_COMPRA, NOMB_REFE_LAVADO,
        NOMB_REFE_BORDADO, NOMB_REFE_ESTAMPADO, TOLE_INFERIOR, TOLE_SUPERIOR,
        SUM( UNIDADES ) UNIDADES
FROM VIS_PCP_PEDI_UNIDADES
GROUP BY CONS_PEDIDO, NUME_PEDIDO, NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO,
        FECH_PEDIDO, FECH_ENTREGA, NOMB_COME_VENDEDOR, NOMB_COME_PRIO_PEDIDO,
        COLO_COME_PRIO_PEDIDO, CONS_PEDI_REFERENCIA, CONS_REFERENCIA, CODI_REFERENCIA,
        NOMB_REFERENCIA, CONS_REFE_VARIACION, CONS_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION,
        ORDE_COMPRA, NOMB_REFE_LAVADO, NOMB_REFE_BORDADO, NOMB_REFE_ESTAMPADO, TOLE_INFERIOR,
        TOLE_SUPERIOR ;

/*  View: VIS_PCP_PEDI_PENDIENTES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PEDI_PENDIENTES (CONS_PEDIDO, NUME_PEDIDO, CONS_REFE_TEMPORADA, 
    NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO, FECH_PEDIDO, FECH_ENTREGA, 
    OBSERVACIONES, CONS_COME_VENDEDOR, NOMB_COME_VENDEDOR, CONS_COME_PRIO_PEDIDO, 
    NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, CONS_DESPACHAR_A, CONS_FACTURAR_A, 
    FECH_SISTEMA, USUA_SISTEMA)
AS

Select CONS_PEDIDO, NUME_PEDIDO, CONS_REFE_TEMPORADA, NOMB_REFE_TEMPORADA,
    CONS_TERCERO, NOMB_TERCERO, FECH_PEDIDO, FECH_ENTREGA, OBSERVACIONES,
    CONS_COME_VENDEDOR, NOMB_COME_VENDEDOR, CONS_COME_PRIO_PEDIDO,
    NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, CONS_DESPACHAR_A,
    CONS_FACTURAR_A, FECH_SISTEMA, USUA_SISTEMA
FROM VIS_PCP_PEDIDOS
     WHERE NOT CONS_PEDIDO
     IN (SELECT DISTINCT RE.CONS_PEDIDO
        FROM PCP_PEDI_REFERENCIAS RE,
        PCP_PEDI_UNIDADES UN
        WHERE UN.CONS_PEDI_REFERENCIA = UN.CONS_PEDI_REFERENCIA AND 
              UN.CONS_PEDI_UNIDADES IN
            (SELECT CONS_PEDI_UNIDADES FROM PCP_PEDI_PLANEACION
            ORDER BY CONS_PEDI_UNIDADES)
            ORDER BY UN.CONS_PEDI_REFERENCIA) ;

/*  View: VIS_PCP_PLAN_DEPE_PROCESOS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PLAN_DEPE_PROCESOS (CONS_PROCESO, CONS_PROC_SIGUIENTE, 
    CODI_PROCESO, NOMB_PROCESO, REGI_SISTEMA, CONS_PROD_PAQU_TIPO, 
    CONT_TIQUETES, PLAN_DETALLADA, DURA_ESTIMADA, VALO_DURA_ESTIMADA, 
    IZQUIERDA, ARRIBA, SECU_NIVEL)
AS

SELECT PCP_PLAN_DEPE_PROCESOS.CONS_PROCESO, PCP_PLAN_DEPE_PROCESOS.CONS_PROC_SIGUIENTE,
    P.CODI_PROCESO, P.NOMB_PROCESO,
    P.REGI_SISTEMA, P.CONS_PROD_PAQU_TIPO,
    P.CONT_TIQUETES, P.PLAN_DETALLADA,
    P.DURA_ESTIMADA, P.VALO_DURA_ESTIMADA,
    P.IZQUIERDA, P.ARRIBA, P.SECU_NIVEL
FROM PCP_PROCESOS
   INNER JOIN PCP_PLAN_DEPE_PROCESOS ON (P.CONS_PROCESO = PCP_PLAN_DEPE_PROCESOS.CONS_PROCESO) ;

/*  View: VIS_PCP_PROD_CAPAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_CAPAS (CONS_PROD_ESPIGA, CONS_PROD_LOTE, CONS_REFE_MATERIAL, 
    CONS_PROCESO, NUME_ESPIGA, CONS_REFE_COLOR, CAPAS)
AS

SELECT C.CONS_PROD_ESPIGA, PCP_PROD_ESPIGAS.CONS_PROD_LOTE,
    PCP_PROD_ESPIGAS.CONS_REFE_MATERIAL, PCP_PROD_ESPIGAS.CONS_PROCESO,
    PCP_PROD_ESPIGAS.NUME_ESPIGA, C.CONS_REFE_COLOR, C.CAPAS
FROM PCP_PROD_CAPAS C
   INNER JOIN PCP_PROD_ESPIGAS ON (C.CONS_PROD_ESPIGA = PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA) ;

/*  View: VIS_PCP_PROD_DIST_PAQUETES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_DIST_PAQUETES (CONS_PROD_LOTE, NUME_LOTE, CONS_PROCESO, 
    CONS_PROD_PAQU_TIPO, NUME_PAQUETE, CONS_REFE_COLOR, SECU_COLOR, CONS_COLOR, 
    CODI_COLOR, NOMB_COLOR, NUME_COLOR, CONS_GRUP_TALL_DETALLE, SECU_TALLA, TALLA, CANT_UNIDADES)
AS

SELECT P.CONS_PROD_LOTE, L.NUME_LOTE,
    P.CONS_PROCESO, P.CONS_PROD_PAQU_TIPO,
    P.NUME_PAQUETE, P.CONS_REFE_COLOR,
    GLO_REFE_COLORES.SECU_COLOR, GLO_REFE_COLORES.CONS_COLOR,
    GLO_COLORES.CODI_COLOR, GLO_COLORES.NOMB_COLOR,
    GLO_REFE_COLORES.NUME_COLOR, P.CONS_GRUP_TALL_DETALLE,
    D.SECU_TALLA, D.TALLA,
    P.CANT_UNIDADES
FROM PCP_PROD_LOTES L
   INNER JOIN PCP_PROD_DIST_PAQUETES P ON (L.CONS_PROD_LOTE = P.CONS_PROD_LOTE)
   INNER JOIN GLO_GRUP_TALL_DETALLE D ON (P.CONS_GRUP_TALL_DETALLE = D.CONS_GRUP_TALL_DETALLE)
   INNER JOIN GLO_REFE_COLORES ON (P.CONS_REFE_COLOR = GLO_REFE_COLORES.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR) ;

/*  View: VIS_PCP_PROD_ESPI_COLORES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ESPI_COLORES (CONS_PROD_ORDEN, CONS_PROD_LOTE, 
    CONS_PROD_ESPIGA, CONS_REFE_MATERIAL, CONS_REFE_COLOR, SECU_COLOR, 
    NOMB_COLOR, NUME_COLOR)
AS

SELECT PCP_PROD_ORDENES.CONS_PROD_ORDEN, PCP_PROD_LOTES.CONS_PROD_LOTE,
    PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA, PCP_PROD_ESPIGAS.CONS_REFE_MATERIAL,
    PCP_PROD_UNIDADES.CONS_REFE_COLOR, GLO_REFE_COLORES.SECU_COLOR,
    GLO_COLORES.NOMB_COLOR, GLO_REFE_COLORES.NUME_COLOR
FROM GLO_REFE_COLORES
   INNER JOIN PCP_PROD_UNIDADES ON (GLO_REFE_COLORES.CONS_REFE_COLOR = PCP_PROD_UNIDADES.CONS_REFE_COLOR)
   INNER JOIN PCP_PROD_ESPIGAS ON (PCP_PROD_UNIDADES.CONS_PROD_ESPIGA = PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA)
   INNER JOIN PCP_PROD_LOTES ON (PCP_PROD_ESPIGAS.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_ORDENES ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR);

/*  View: VIS_PCP_PROD_ESPI_TALLAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ESPI_TALLAS (CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_PROD_ESPIGA, 
    CONS_REFE_MATERIAL, CONS_GRUP_TALL_DETALLE, SECU_TALLA, TALLA)
AS

SELECT PCP_PROD_ORDENES.CONS_PROD_ORDEN, PCP_PROD_LOTES.CONS_PROD_LOTE,
    PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA, PCP_PROD_ESPIGAS.CONS_REFE_MATERIAL,
    PCP_PROD_UNIDADES.CONS_GRUP_TALL_DETALLE, D.SECU_TALLA,
    D.TALLA
FROM GLO_GRUP_TALL_DETALLE D
   INNER JOIN PCP_PROD_UNIDADES ON (D.CONS_GRUP_TALL_DETALLE = PCP_PROD_UNIDADES.CONS_GRUP_TALL_DETALLE)
   INNER JOIN PCP_PROD_ESPIGAS ON (PCP_PROD_UNIDADES.CONS_PROD_ESPIGA = PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA)
   INNER JOIN PCP_PROD_LOTES ON (PCP_PROD_ESPIGAS.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_ORDENES ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN) ;

/*  View: VIS_PCP_PROD_ESPI_UNIDADES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ESPI_UNIDADES (CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_PROD_ESPIGA, 
    CONS_REFE_MATERIAL, CONS_REFE_COLOR, CONS_GRUP_TALL_DETALLE, CANT_TALLAS, CANT_UNIDADES)
AS

SELECT PCP_PROD_ORDENES.CONS_PROD_ORDEN, PCP_PROD_LOTES.CONS_PROD_LOTE,
    PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA, PCP_PROD_ESPIGAS.CONS_REFE_MATERIAL,
    U.CONS_REFE_COLOR, U.CONS_GRUP_TALL_DETALLE,
    U.CANT_TALLAS, U.CANT_UNIDADES
FROM PCP_PROD_UNIDADES U
   INNER JOIN PCP_PROD_ESPIGAS ON (U.CONS_PROD_ESPIGA = PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA)
   INNER JOIN PCP_PROD_LOTES ON (PCP_PROD_ESPIGAS.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_ORDENES ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN) ;

/*  View: VIS_PCP_PROD_LIST_OPER_CORT_IMP, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_LIST_OPER_CORT_IMP (CONS_PROD_LOTE, CONS_REFE_MATERIAL, 
    SECU_OPERACION, CONS_PROCESO, CODI_PROCESO, NOMB_PROCESO, CODI_OPERACION, 
    NOMB_OPERACION, CONS_CORT_UNID_MEDIDA, NOMB_CORT_UNID_MEDIDA, PUESTOS, 
    UNID_POR_TIQUETE, NUME_TIQUETES, TIEM_OPERACION, TIEM_TOTAL)
AS

SELECT OC.CONS_PROD_LOTE, OC.CONS_REFE_MATERIAL,
    OC.SECU_OPERACION, OC.CONS_PROCESO,
    PCP_PROCESOS.CODI_PROCESO, PCP_PROCESOS.NOMB_PROCESO,
    OC.CODI_OPERACION, OC.NOMB_OPERACION,
    OC.CONS_CORT_UNID_MEDIDA, SIS_CORT_UNID_MEDIDA.NOMB_CORT_UNID_MEDIDA,
    OC.PUESTOS, OC.UNID_POR_TIQUETE,
    OC.NUME_TIQUETES,
    OC.TIEM_OPERACION,  OC.TIEM_TOTAL
FROM PCP_PROD_LIST_OPER_CORTE OC
   INNER JOIN PCP_PROCESOS ON (OC.CONS_PROCESO = PCP_PROCESOS.CONS_PROCESO)
   INNER JOIN SIS_CORT_UNID_MEDIDA ON (OC.CONS_CORT_UNID_MEDIDA = SIS_CORT_UNID_MEDIDA.CONS_CORT_UNID_MEDIDA);
/*  View: VIS_PCP_PROD_LIST_OPER_COSTURA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_LIST_OPER_COSTURA (CONS_PROD_LOTE, SECU_OPERACION, 
    CODI_OPER_COSTURA, NOMB_OPER_COSTURA, TIEMPO, FRECUENCIA, CONS_PROCESO, 
    NOMB_PROCESO, CONS_PROD_PAQU_TIPO, CONS_RECU_FAMILIA, CODI_RECU_FAMILIA, 
    NOMB_RECU_FAMILIA, CODI_PROCESO, CONS_OPER_COST_TIPO, CODI_OPER_COST_TIPO, 
    NOMB_OPER_COST_TIPO, CONS_COMP_GRUPO, CODI_COMP_GRUPO, NOMB_COMP_GRUPO)
AS

SELECT LOC.CONS_PROD_LOTE, LOC.SECU_OPERACION,
    LOC.CODI_OPER_COSTURA, LOC.NOMB_OPER_COSTURA,
    LOC.TIEMPO, LOC.FRECUENCIA,
    OC.CONS_PROCESO, PCP_PROCESOS.NOMB_PROCESO,
    PCP_PROCESOS.CONS_PROD_PAQU_TIPO, OC.CONS_RECU_FAMILIA,
    GLO_RECU_FAMILIAS.CODI_RECU_FAMILIA, GLO_RECU_FAMILIAS.NOMB_RECU_FAMILIA,
    PCP_PROCESOS.CODI_PROCESO, OC.CONS_OPER_COST_TIPO,
    PCP_OPER_COST_TIPOS.CODI_OPER_COST_TIPO, PCP_OPER_COST_TIPOS.NOMB_OPER_COST_TIPO,
    OC.CONS_COMP_GRUPO, PCP_COMP_GRUPOS.CODI_COMP_GRUPO,
    PCP_COMP_GRUPOS.NOMB_COMP_GRUPO
FROM PCP_COMP_GRUPOS
   INNER JOIN PCP_OPER_COSTURA OC ON (PCP_COMP_GRUPOS.CONS_COMP_GRUPO = OC.CONS_COMP_GRUPO)
   INNER JOIN GLO_RECU_FAMILIAS ON (OC.CONS_RECU_FAMILIA = GLO_RECU_FAMILIAS.CONS_RECU_FAMILIA)
   INNER JOIN PCP_PROD_LIST_OPER_COSTURA LOC ON (OC.CODI_OPER_COSTURA = LOC.CODI_OPER_COSTURA)
   INNER JOIN PCP_PROCESOS ON (OC.CONS_PROCESO = PCP_PROCESOS.CONS_PROCESO)
   INNER JOIN PCP_OPER_COST_TIPOS ON (OC.CONS_OPER_COST_TIPO = PCP_OPER_COST_TIPOS.CONS_OPER_COST_TIPO);

/*  View: VIS_PCP_PROD_LOTE_UNID_CORTADAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_LOTE_UNID_CORTADAS (CONS_PROD_ORDEN, CONS_PROD_LOTE, UNID_CORTADAS)
AS

SELECT O.CONS_PROD_ORDEN, PCP_PROD_LOTES.CONS_PROD_LOTE,
    SUM( U.CANT_UNIDADES )
FROM PCP_PROD_LOTE_UNIDADES U
   RIGHT OUTER JOIN PCP_PROD_LOTES ON (U.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   RIGHT OUTER JOIN PCP_PROD_ORDENES O ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = O.CONS_PROD_ORDEN)
GROUP BY PCP_PROD_ORDENES.CONS_PROD_ORDEN, PCP_PROD_LOTES.CONS_PROD_LOTE;

/*  View: VIS_PCP_PROD_LOTE_UNID_LOTEADAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_LOTE_UNID_LOTEADAS (CONS_PROD_LOTE, CONS_PROD_ORDEN, UNID_LOTEADAS)
AS

SELECT L.CONS_PROD_LOTE, L.CONS_PROD_ORDEN, SUM( U.CANT_UNIDADES ) UNID_LOTEADAS
FROM PCP_PROD_LOTES L
   LEFT OUTER JOIN PCP_PROD_ESPIGAS E ON (L.CONS_PROD_LOTE = PCP_PROD_ESPIGAS.CONS_PROD_LOTE)
   LEFT OUTER JOIN PCP_PROD_UNIDADES U ON (E.CONS_PROD_ESPIGA = U.CONS_PROD_ESPIGA)
   LEFT OUTER JOIN PCP_REFE_MATERIALES ON (E.CONS_REFE_MATERIAL = PCP_REFE_MATERIALES.CONS_REFE_MATERIAL)
WHERE (PCP_REFE_MATERIALES.ES_MATE_BASICO = 1)
GROUP BY PCP_PROD_LOTES.CONS_PROD_LOTE, PCP_PROD_LOTES.CONS_PROD_ORDEN ;

/*  View: VIS_PCP_PROD_LOTES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_LOTES (CONS_PROD_LOTE, CONS_PROD_ORDEN, NUME_PROD_ORDEN, 
    CONS_REFERENCIA, NUME_LOTE, FINALIZADO, CAPA_SIMULACION, CANT_PAQU_CORTE, 
    CANT_PAQU_CORT_AGRUPAR, CONS_ULTI_PROC_FINALIZADO, CODI_REFERENCIA)
AS

SELECT L.CONS_PROD_LOTE, L.CONS_PROD_ORDEN,
    O.NUME_PROD_ORDEN, O.CONS_REFERENCIA,
    L.NUME_LOTE, L.FINALIZADO,
    L.CAPA_SIMULACION, L.CANT_PAQU_CORTE,
    L.CANT_PAQU_CORT_AGRUPAR, L.CONS_ULTI_PROC_FINALIZADO,
    R.CODI_REFERENCIA
FROM GLO_REFERENCIAS R
   INNER JOIN PCP_PROD_ORDENES O ON (R.CONS_REFERENCIA = O.CONS_REFERENCIA)
   INNER JOIN PCP_PROD_LOTES L ON (O.CONS_PROD_ORDEN = L.CONS_PROD_ORDEN) ;

/*  View: VIS_PCP_PROD_ORDENES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDENES (CONS_PROD_ORDEN, NUME_PROD_ORDEN, CONS_REFERENCIA, 
    CODI_REFERENCIA, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, ANULADA, 
    FECH_SISTEMA, USUA_SISTEMA, FINALIZADO)
AS

SELECT O.CONS_PROD_ORDEN, O.NUME_PROD_ORDEN,
    O.CONS_REFERENCIA, R.CODI_REFERENCIA,
    R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA,
    O.ANULADA, O.FECH_SISTEMA,
    O.USUA_SISTEMA, O.FINALIZADO
FROM PCP_PROD_ORDENES O
   INNER JOIN GLO_REFERENCIAS R ON (O.CONS_REFERENCIA = R.CONS_REFERENCIA) ;

/*  View: VIS_PCP_PROD_ORDE_COLORES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_COLORES (CONS_PROD_ORDEN, CONS_PROD_LOTE, 
    CONS_REFE_COLOR, SECU_COLOR, NOMB_COLOR, NUME_COLOR)
AS

SELECT O.CONS_PROD_ORDEN, U.CONS_PROD_LOTE, 
        U.CONS_REFE_COLOR, GLO_REFE_COLORES.SECU_COLOR, 
        GLO_COLORES.NOMB_COLOR, GLO_REFE_COLORES.NUME_COLOR
FROM GLO_REFE_COLORES
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR)
   INNER JOIN PCP_PROD_LOTE_UNIDADES U ON (GLO_REFE_COLORES.CONS_REFE_COLOR = U.CONS_REFE_COLOR)
   INNER JOIN PCP_PROD_LOTES ON (U.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_ORDENES O ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = O.CONS_PROD_ORDEN) ;

/*  View: VIS_PCP_PROD_ORDE_COMPLETA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_COMPLETA (CONS_PROD_ORDEN, NUME_PROD_ORDEN, ANULADA, 
    FECH_SISTEMA, USUA_SISTEMA, FINALIZADO, CONS_REFERENCIA, CODI_REFERENCIA, 
    CONS_REFE_TEMPORADA, CODI_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, MOLDE, 
    CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CODI_BARRAS, CONS_REFE_MARCA, 
    CODI_REFE_MARCA, NOMB_REFE_MARCA, CONS_REFE_LINEA, CODI_REFE_LINEA, 
    NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, NOMB_REFE_EDAD, 
    CONS_REFE_ESTILO, CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, 
    CODI_REFE_GRUPO, NOMB_REFE_GRUPO, CONS_REFE_SEXO, CODI_SEXO, 
    NOMB_SEXO, CONS_REFE_LAVADO, CODI_REFE_LAVADO, NOMB_REFE_LAVADO, 
    CONS_REFE_BORDADO, CODI_REFE_BORDADO, NOMB_REFE_BORDADO, CONS_REFE_ESTAMPADO, 
    CODI_REFE_ESTAMPADO, NOMB_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, 
    NOMB_GRUP_TALLAS, CONS_REFE_ESTADO, CODI_REFE_ESTADO, NOMB_REFE_ESTADO)
AS

SELECT O.CONS_PROD_ORDEN, 	O.NUME_PROD_ORDEN,
    O.ANULADA, 	 	O.FECH_SISTEMA,
    O.USUA_SISTEMA, 	 	O.FINALIZADO,
    VR.CONS_REFERENCIA, 	VR.CODI_REFERENCIA,
    VR.CONS_REFE_TEMPORADA, 	VR.CODI_REFE_TEMPORADA,
    VR.NOMB_REFE_TEMPORADA, 	VR.MOLDE,
    VR.CODI_INTE_REFERENCIA, 	VR.NOMB_REFERENCIA,
    VR.CODI_BARRAS, 	 	VR.CONS_REFE_MARCA,
    VR.CODI_REFE_MARCA, 	VR.NOMB_REFE_MARCA,
    VR.CONS_REFE_LINEA, 	VR.CODI_REFE_LINEA,
    VR.NOMB_REFE_LINEA, 	VR.CONS_REFE_EDAD,
    VR.CODI_REFE_EDAD, 	 	VR.NOMB_REFE_EDAD,
    VR.CONS_REFE_ESTILO, 	VR.CODI_REFE_ESTILO,
    VR.NOMB_REFE_ESTILO, 	VR.CONS_REFE_GRUPO,
    VR.CODI_REFE_GRUPO, 	VR.NOMB_REFE_GRUPO,
    VR.CONS_REFE_SEXO, 	 	VR.CODI_SEXO,
    VR.NOMB_SEXO, 	 	VR.CONS_REFE_LAVADO,
    VR.CODI_REFE_LAVADO, 	VR.NOMB_REFE_LAVADO,
    VR.CONS_REFE_BORDADO, 	VR.CODI_REFE_BORDADO,
    VR.NOMB_REFE_BORDADO, 	VR.CONS_REFE_ESTAMPADO,
    VR.CODI_REFE_ESTAMPADO, 	VR.NOMB_REFE_ESTAMPADO,
    VR.CONS_REFE_GRUP_TALLAS, 	VR.CODI_GRUP_TALLAS,
    VR.NOMB_GRUP_TALLAS, 	VR.CONS_REFE_ESTADO,
    VR.CODI_REFE_ESTADO, 	VR.NOMB_REFE_ESTADO
FROM VIS_GLO_REFERENCIAS VR
   INNER JOIN PCP_PROD_ORDENES O ON (VR.CONS_REFERENCIA = O.CONS_REFERENCIA) ;

/*  View: VIS_PCP_PROD_ORDE_LOTE_UNIDADES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_LOTE_UNIDADES (CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_REFE_COLOR, SECU_COLOR, NOMB_COLOR, NUME_COLOR, CONS_GRUP_TALL_DETALLE, SECU_TALLA, TALLA, CANT_UNIDADES)
AS

SELECT O.CONS_PROD_ORDEN, U.CONS_PROD_LOTE,
    U.CONS_REFE_COLOR, GLO_REFE_COLORES.SECU_COLOR,
    GLO_COLORES.NOMB_COLOR, GLO_REFE_COLORES.NUME_COLOR,
    U.CONS_GRUP_TALL_DETALLE, D.SECU_TALLA,
    D.TALLA, SUM( U.CANT_UNIDADES )
FROM PCP_PROD_ORDENES O
   INNER JOIN PCP_PROD_LOTES L ON (O.CONS_PROD_ORDEN = L.CONS_PROD_ORDEN)
   INNER JOIN PCP_PROD_LOTE_UNIDADES U ON (L.CONS_PROD_LOTE = U.CONS_PROD_LOTE)
   INNER JOIN GLO_REFE_COLORES ON (U.CONS_REFE_COLOR = GLO_REFE_COLORES.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = GLO_COLORES.CONS_COLOR)
   INNER JOIN GLO_GRUP_TALL_DETALLE D ON (U.CONS_GRUP_TALL_DETALLE = D.CONS_GRUP_TALL_DETALLE)
GROUP BY O.CONS_PROD_ORDEN, U.CONS_PROD_LOTE,
    U.CONS_REFE_COLOR, GLO_REFE_COLORES.SECU_COLOR,
    GLO_COLORES.NOMB_COLOR, GLO_REFE_COLORES.NUME_COLOR,
    U.CONS_GRUP_TALL_DETALLE, D.SECU_TALLA,
    D.TALLA ;

/*  View: VIS_PCP_PROD_ORDE_REFERENCIAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_REFERENCIAS (CONS_PROD_ORDEN, CONS_REFERENCIA, 
    CODI_REFERENCIA, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_VARIACION, 
    CONS_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, CON_ENTREPIERNAS)
AS

SELECT DISTINCT CONS_PROD_ORDEN, CONS_REFERENCIA, CODI_REFERENCIA,
       CODI_INTE_REFERENCIA,NOMB_REFERENCIA,CONS_REFE_VARIACION,
       CONS_REFE_TIPO_VARIACION,
       NOMB_REFE_TIPO_VARIACION, CON_ENTREPIERNAS
FROM VIS_PCP_PEDI_UNID_PLANEADAS ;

/*  View: VIS_PCP_PROD_ORDE_RESPONSABLES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_RESPONSABLES (CONS_PROD_ORDE_RESPONSABLE, CONS_PROD_LOTE, 
    CONS_PROCESO, CODI_PROCESO, NOMB_PROCESO, USUA_RESPONSABLE, FECH_ESTIMADA, 
    HECHO, PORC_AVANCE, OBSERVACIONES, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_PROD_ORDE_RESPONSABLE, R.CONS_PROD_LOTE,
    R.CONS_PROCESO, PCP_PROCESOS.CODI_PROCESO,
    PCP_PROCESOS.NOMB_PROCESO, R.USUA_RESPONSABLE,
    R.FECH_ESTIMADA, R.HECHO,
    R.PORC_AVANCE, R.OBSERVACIONES,
    R.FECH_SISTEMA, R.USUA_SISTEMA
FROM PCP_PROCESOS
   INNER JOIN PCP_PROD_ORDE_RESPONSABLES R ON (PCP_PROCESOS.CONS_PROCESO = R.CONS_PROCESO);

/*  View: VIS_PCP_PROD_ORDE_TALLAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_TALLAS (CONS_PROD_ORDEN, CONS_PROD_LOTE, 
    CONS_GRUP_TALL_DETALLE, SECU_TALLA, TALLA)
AS

SELECT O.CONS_PROD_ORDEN, U.CONS_PROD_LOTE,
    U.CONS_GRUP_TALL_DETALLE,
    D.SECU_TALLA, D.TALLA
FROM PCP_PROD_ORDENES O
   INNER JOIN PCP_PROD_LOTES L ON (O.CONS_PROD_ORDEN = L.CONS_PROD_ORDEN)
   INNER JOIN PCP_PROD_LOTE_UNIDADES U ON (L.CONS_PROD_LOTE = U.CONS_PROD_LOTE)
   INNER JOIN GLO_GRUP_TALL_DETALLE D ON (U.CONS_GRUP_TALL_DETALLE = D.CONS_GRUP_TALL_DETALLE);

/*  View: VIS_PCP_PROD_ORDE_UNID_CORTADAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_UNID_CORTADAS (CONS_PROD_ORDEN, UNID_CORTADAS)
AS

SELECT O.CONS_PROD_ORDEN, SUM( U.CANT_UNIDADES )
FROM PCP_PROD_LOTE_UNIDADES U
   RIGHT OUTER JOIN PCP_PROD_LOTES ON (U.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   RIGHT OUTER JOIN PCP_PROD_ORDENES O ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = O.CONS_PROD_ORDEN)
GROUP BY PCP_PROD_ORDENES.CONS_PROD_ORDEN ;

/*  View: VIS_PCP_PROD_ORDE_UNID_LOTEADAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_UNID_LOTEADAS (CONS_PROD_ORDEN, UNID_LOTEADAS)
AS

SELECT L.CONS_PROD_ORDEN, SUM( U.CANT_UNIDADES ) UNID_LOTEADAS
FROM PCP_PROD_LOTES L
   LEFT OUTER JOIN PCP_PROD_ESPIGAS E ON (L.CONS_PROD_LOTE = E.CONS_PROD_LOTE)
   LEFT OUTER JOIN PCP_PROD_UNIDADES U ON (E.CONS_PROD_ESPIGA = U.CONS_PROD_ESPIGA)
   LEFT OUTER JOIN PCP_REFE_MATERIALES M ON (E.CONS_REFE_MATERIAL = M.CONS_REFE_MATERIAL)
WHERE (M.ES_MATE_BASICO = 1)
GROUP BY L.CONS_PROD_ORDEN;

/*  View: VIS_PCP_PROD_ORDE_UNID_PEDIDAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_UNID_PEDIDAS (CONS_PROD_ORDEN, NUME_PROD_ORDEN, ANULADA, 
    FINALIZADO, FECH_SISTEMA, USUA_SISTEMA, CONS_PEDIDO, NUME_PEDIDO, FECH_PEDIDO, 
    FECH_ENTREGA, CONS_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, CONS_TERCERO, NOMB_TERCERO, 
    CONS_COME_VENDEDOR, NOMB_COME_VENDEDOR, NOMB_COME_PRIO_PEDIDO, COLO_COME_PRIO_PEDIDO, 
    CONS_PEDI_REFERENCIA, CONS_REFERENCIA, CODI_REFERENCIA, CODI_INTE_REFERENCIA, 
    NOMB_REFERENCIA, CONS_REFE_VARIACION, NOMB_REFE_TIPO_VARIACION, ORDE_COMPRA, 
    TOLE_INFERIOR, TOLE_SUPERIOR, UNIDADES)
AS

SELECT
    PLANEA.CONS_PROD_ORDEN, PROD.NUME_PROD_ORDEN,
    PROD.ANULADA, PROD.FINALIZADO,
    PROD.FECH_SISTEMA, PROD.USUA_SISTEMA, 
    P.CONS_PEDIDO, P.NUME_PEDIDO,
    P.FECH_PEDIDO, P.FECH_ENTREGA,
    P.CONS_REFE_TEMPORADA, TRDA.NOMB_REFE_TEMPORADA,
    P.CONS_TERCERO, TERC.NOMB_TERCERO,
    P.CONS_COME_VENDEDOR, VEND.NOMB_COME_VENDEDOR,
    PRIO.NOMB_COME_PRIO_PEDIDO, PRIO.COLOR,
    PERE.CONS_PEDI_REFERENCIA, PERE.CONS_REFERENCIA,
    REFE.CODI_REFERENCIA, REFE.CODI_INTE_REFERENCIA,
    REFE.NOMB_REFERENCIA, PERE.CONS_REFE_VARIACION,
    T.NOMB_REFE_TIPO_VARIACION, PERE.ORDE_COMPRA,
    PERE.TOLE_INFERIOR, PERE.TOLE_SUPERIOR,
    SUM(UNID.UNIDADES)
FROM PCP_PEDIDOS PEDI
   INNER JOIN GLO_REFE_TEMPORADAS TRDA ON (P.CONS_REFE_TEMPORADA = TRDA.CONS_REFE_TEMPORADA)
   INNER JOIN GLO_TERCEROS TERC ON (P.CONS_TERCERO = TERC.CONS_TERCERO)
   INNER JOIN GLO_COME_VENDEDORES VEND ON (P.CONS_COME_VENDEDOR = VEND.CONS_COME_VENDEDOR)
   INNER JOIN GLO_COME_PRIO_PEDIDOS PRIO ON (P.CONS_COME_PRIO_PEDIDO = PRIO.CONS_COME_PRIO_PEDIDO)
   INNER JOIN PCP_PEDI_REFERENCIAS PERE ON (P.CONS_PEDIDO = PERE.CONS_PEDIDO)
   INNER JOIN GLO_REFERENCIAS REFE ON (PERE.CONS_REFERENCIA = REFE.CONS_REFERENCIA)
   INNER JOIN PCP_REFE_VARIACIONES REVA ON (PERE.CONS_REFE_VARIACION = REVA.CONS_REFE_VARIACION)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES T ON (REVA.CONS_REFE_TIPO_VARIACION = T.CONS_REFE_TIPO_VARIACION)
   INNER JOIN PCP_PEDI_UNIDADES UNID ON (PERE.CONS_PEDI_REFERENCIA = UNID.CONS_PEDI_REFERENCIA)
   INNER JOIN PCP_PEDI_PLANEACION PLANEA ON (UNID.CONS_PEDI_UNIDADES = PLANEA.CONS_PEDI_UNIDADES)
   INNER JOIN PCP_PROD_ORDENES PROD ON (PLANEA.CONS_PROD_ORDEN = PROD.CONS_PROD_ORDEN)
GROUP BY
    PLANEA.CONS_PROD_ORDEN, PROD.NUME_PROD_ORDEN,
    PROD.ANULADA, PROD.FINALIZADO,
    PROD.FECH_SISTEMA, PROD.USUA_SISTEMA, 
    P.CONS_PEDIDO, P.NUME_PEDIDO,
    P.FECH_PEDIDO, P.FECH_ENTREGA,
    P.CONS_REFE_TEMPORADA, TRDA.NOMB_REFE_TEMPORADA,
    P.CONS_TERCERO, TERC.NOMB_TERCERO,
    P.CONS_COME_VENDEDOR, VEND.NOMB_COME_VENDEDOR,
    PRIO.NOMB_COME_PRIO_PEDIDO, PRIO.COLOR,
    PERE.CONS_PEDI_REFERENCIA, PERE.CONS_REFERENCIA,
    REFE.CODI_REFERENCIA, REFE.CODI_INTE_REFERENCIA,
    REFE.NOMB_REFERENCIA, PERE.CONS_REFE_VARIACION,
    TIVA.NOMB_REFE_TIPO_VARIACION, PERE.ORDE_COMPRA,
    PERE.TOLE_INFERIOR, PERE.TOLE_SUPERIOR;

/*  View: VIS_PCP_PROD_ORDE_ACTIVAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_ACTIVAS (CONS_PROD_ORDEN, NUME_PROD_ORDEN, CONS_REFERENCIA, 
    CODI_REFERENCIA, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, ANULADA, FINALIZADO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT CONS_PROD_ORDEN, NUME_PROD_ORDEN, CONS_REFERENCIA,
    CODI_REFERENCIA, CODI_INTE_REFERENCIA, NOMB_REFERENCIA,
    ANULADA, FINALIZADO, FECH_SISTEMA, USUA_SISTEMA
FROM VIS_PCP_PROD_ORDENES
WHERE ANULADA = -1 AND FINALIZADO = -1;

/*  View: VIS_PCP_PROD_TOTA_PEDIDO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_TOTA_PEDIDO (CONS_PROD_ORDEN, NUME_PROD_ORDEN, UNID_PEDIDAS)
AS

SELECT O.CONS_PROD_ORDEN, O.NUME_PROD_ORDEN, SUM( PCP_PEDI_UNIDADES.UNIDADES ) 
FROM PCP_PROD_ORDENES O
   LEFT OUTER JOIN PCP_PEDI_PLANEACION P ON (O.CONS_PROD_ORDEN = P.CONS_PROD_ORDEN)
   LEFT OUTER JOIN PCP_PEDI_UNIDADES U ON (P.CONS_PEDI_UNIDADES = U.CONS_PEDI_UNIDADES)
GROUP BY O.CONS_PROD_ORDEN, O.NUME_PROD_ORDEN;

/*  View: VIS_PCP_PROD_UNID_COMPLETO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_UNID_COMPLETO (CONS_PROD_ESPIGA, CONS_PROD_LOTE, NUME_LOTE, 
    CONS_REFE_MATERIAL, CONS_REFE_COLOR, SECU_COLOR, CONS_COLO_GRUPO, 
    CONS_COLO_SUBGRUPO, CONS_COLO_TONO, CODI_COLOR, NOMB_COLOR, 
    MUES_COLOR, NUME_COLOR, CONS_GRUP_TALL_DETALLE, SECU_TALLA, 
    TALLA, TALL_ALTERNATIVA, CANT_TALLAS, CANT_UNIDADES, CONS_PROCESO, 
    CONS_PROD_ORDEN, NUME_PROD_ORDEN, CONS_REFERENCIA)
AS

SELECT U.CONS_PROD_ESPIGA, PCP_PROD_ESPIGAS.CONS_PROD_LOTE,
    PCP_PROD_LOTES.NUME_LOTE, PCP_PROD_ESPIGAS.CONS_REFE_MATERIAL,
    U.CONS_REFE_COLOR, GLO_REFE_COLORES.SECU_COLOR,
    C.CONS_COLO_GRUPO, C.CONS_COLO_SUBGRUPO,
    C.CONS_COLO_TONO, C.CODI_COLOR,
    C.NOMB_COLOR, C.MUES_COLOR,
    GLO_REFE_COLORES.NUME_COLOR, U.CONS_GRUP_TALL_DETALLE,
    D.SECU_TALLA, D.TALLA,
    D.TALL_ALTERNATIVA, U.CANT_TALLAS,
    U.CANT_UNIDADES, PCP_PROD_ESPIGAS.CONS_PROCESO,
    O.CONS_PROD_ORDEN, O.NUME_PROD_ORDEN,
    O.CONS_REFERENCIA
FROM PCP_PROD_ORDENES O
   INNER JOIN PCP_PROD_LOTES ON (O.CONS_PROD_ORDEN = PCP_PROD_LOTES.CONS_PROD_ORDEN)
   INNER JOIN PCP_PROD_ESPIGAS ON (PCP_PROD_LOTES.CONS_PROD_LOTE = PCP_PROD_ESPIGAS.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_UNIDADES U ON (PCP_PROD_ESPIGAS.CONS_PROD_ESPIGA = U.CONS_PROD_ESPIGA)
   INNER JOIN GLO_REFE_COLORES ON (U.CONS_REFE_COLOR = GLO_REFE_COLORES.CONS_REFE_COLOR)
   INNER JOIN GLO_COLORES ON (GLO_REFE_COLORES.CONS_COLOR = C.CONS_COLOR)
   INNER JOIN GLO_GRUP_TALL_DETALLE D ON (U.CONS_GRUP_TALL_DETALLE = D.CONS_GRUP_TALL_DETALLE);

/*  View: VIS_PCP_PROD_UNID_LOTE, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_UNID_LOTE (CONS_PROD_ESPIGA, CONS_PROD_LOTE, CONS_REFE_MATERIAL, CONS_PROCESO, NUME_ESPIGA, CONS_REFE_COLOR, CONS_GRUP_TALL_DETALLE, CANT_TALLAS, CANT_UNIDADES)
AS

SELECT U.CONS_PROD_ESPIGA, E.CONS_PROD_LOTE,
    E.CONS_REFE_MATERIAL, E.CONS_PROCESO,
    E.NUME_ESPIGA, U.CONS_REFE_COLOR,
    U.CONS_GRUP_TALL_DETALLE, U.CANT_TALLAS, U.CANT_UNIDADES
FROM PCP_PROD_UNIDADES U
   INNER JOIN PCP_PROD_ESPIGAS E ON (U.CONS_PROD_ESPIGA = E.CONS_PROD_ESPIGA) ;

/*  View: VIS_PCP_PROD_UNIDADES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_UNIDADES (CONS_PROD_ESPIGA, CONS_PROD_LOTE, CONS_REFE_MATERIAL, CONS_PROCESO, NUME_ESPIGA, CONS_REFE_COLOR, CONS_GRUP_TALL_DETALLE, CANT_TALLAS, CANT_UNIDADES)
AS

SELECT U.CONS_PROD_ESPIGA, E.CONS_PROD_LOTE,
    E.CONS_REFE_MATERIAL, E.CONS_PROCESO,
    E.NUME_ESPIGA, U.CONS_REFE_COLOR, U.CONS_GRUP_TALL_DETALLE,
    U.CANT_TALLAS, U.CANT_UNIDADES
FROM PCP_PROD_UNIDADES U
   INNER JOIN PCP_PROD_ESPIGAS E ON (U.CONS_PROD_ESPIGA = E.CONS_PROD_ESPIGA) ;

/*  View: VIS_PCP_PROG_PROD_OPER_LOTE, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROG_PROD_OPER_LOTE (CONS_PROG_PRODUCCION, CONS_PROD_LOTE, 
    SECU_OPERACION, NOMB_OPERACION, TIEM_OPERACION, PORC_EFIC_INICIAL, 
    PORC_EFIC_FINAL, SECU_GRUP_PROGRAMACION)
AS

SELECT O.CONS_PROG_PRODUCCION, P.CONS_PROD_LOTE,
    O.SECU_OPERACION, O.NOMB_OPERACION,
    O.TIEM_OPERACION, O.PORC_EFIC_INICIAL,
    O.PORC_EFIC_FINAL, O.SECU_GRUP_PROGRAMACION
FROM PCP_PROG_PROD_OPERACIONES O
   INNER JOIN PCP_PROG_PRODUCCION P ON (O.CONS_PROG_PRODUCCION = P.CONS_PROG_PRODUCCION) ;

/*  View: VIS_PCP_PROG_PROD_OPERACIONES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROG_PROD_OPERACIONES (CONS_PROG_PRODUCCION, CONS_PROD_LOTE, 
    SECU_OPERACION, NOMB_OPERACION, TIEM_OPERACION, PORC_EFIC_INICIAL, 
    PORC_EFIC_FINAL, CODI_OPER_COSTURA, NOMB_OPER_COSTURA, CONS_PROCESO, 
    CODI_PROCESO, NOMB_PROCESO, CONS_OPER_COST_TIPO, CODI_OPER_COST_TIPO, 
    NOMB_OPER_COST_TIPO, CONS_COMP_GRUPO, CODI_COMP_GRUPO, NOMB_COMP_GRUPO, 
    CONS_PROD_PAQU_TIPO, CONS_RECU_FAMILIA, CODI_RECU_FAMILIA, NOMB_RECU_FAMILIA, SECU_GRUP_PROGRAMACION)
AS

SELECT VL.CONS_PROG_PRODUCCION, VL.CONS_PROD_LOTE,
    VL.SECU_OPERACION, VL.NOMB_OPERACION,
    VL.TIEM_OPERACION, VL.PORC_EFIC_INICIAL,
    VL.PORC_EFIC_FINAL, VC.CODI_OPER_COSTURA,
    VC.NOMB_OPER_COSTURA, VC.CONS_PROCESO,
    VC.CODI_PROCESO, VC.NOMB_PROCESO,
    VC.CONS_OPER_COST_TIPO, VC.CODI_OPER_COST_TIPO,
    VC.NOMB_OPER_COST_TIPO, VC.CONS_COMP_GRUPO,
    VC.CODI_COMP_GRUPO, VC.NOMB_COMP_GRUPO,
    VC.CONS_PROD_PAQU_TIPO, VC.CONS_RECU_FAMILIA,
    VC.CODI_RECU_FAMILIA, VC.NOMB_RECU_FAMILIA,
    VL.SECU_GRUP_PROGRAMACION
FROM VIS_PCP_PROD_LIST_OPER_COSTURA VC
   INNER JOIN VIS_PCP_PROG_PROD_OPER_LOTE VL ON (VC.CONS_PROD_LOTE = VL.CONS_PROD_LOTE) AND 
            (VC.SECU_OPERACION = VL.SECU_OPERACION);

/*  View: VIS_PCP_PROG_PRODUCCION, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROG_PRODUCCION (CONS_PROG_PRODUCCION, CONS_PROD_LOTE, NUME_LOTE, 
    CONS_PROD_ORDEN, NUME_PROD_ORDEN, CONS_REFERENCIA, CODI_REFERENCIA, 
    ESTA_PROGRAMADO, FECH_PROGRAMACION, USUA_PROGRAMACION, FECH_EJEC_INICIAL, 
    FRAC_EJEC_INICIAL, FECH_EJEC_FINAL, ES_MOVIL, CONS_EMPRESA, CONS_PLANTA, 
    CONS_PLAN_LINEA, CONS_TURNO, TIPO_AGRUPACION, TIPO_BALANCEO, TIEM_UNIDAD, 
    UNID_LOTE, MINU_REQUERIDOS, MINU_CONTRATADOS, MINU_DESCANSO, PERS_DISPONIBLE, 
    PORC_PRESENCIA, PORC_APROVECHAMIENTO, PORC_EFICIENCIA, PORC_BALANCEO, 
    MINU_DISPONIBLES, TIEM_MEDIO, PROD_DIA, PROD_HORA, PAQU_POR_PUESTO, 
    TAMA_PAQUETE, PUES_SIMULTANEOS, TIEM_UNID_REAL, RECO_PRIM_PAQU_MINUTOS, 
    RECO_PRIM_PAQU_DIAS, RECO_ULTI_PAQU_MINUTOS, RECO_ULTI_PAQU_DIAS, 
    RECO_TOTA_DIAS, RECO_TOTA_MINUTOS)
AS

SELECT P.CONS_PROG_PRODUCCION, P.CONS_PROD_LOTE,
    PCP_PROD_LOTES.NUME_LOTE, PCP_PROD_LOTES.CONS_PROD_ORDEN,
    PCP_PROD_ORDENES.NUME_PROD_ORDEN, PCP_PROD_ORDENES.CONS_REFERENCIA,
    GLO_REFERENCIAS.CODI_REFERENCIA, P.ESTA_PROGRAMADO,
    P.FECH_PROGRAMACION, P.USUA_PROGRAMACION,
    P.FECH_EJEC_INICIAL, P.FRAC_EJEC_INICIAL,
    P.FECH_EJEC_FINAL, P.ES_MOVIL,
    P.CONS_EMPRESA, P.CONS_PLANTA,
    P.CONS_PLAN_LINEA, P.CONS_TURNO,
    P.TIPO_AGRUPACION, P.TIPO_BALANCEO,
    P.TIEM_UNIDAD, P.UNID_LOTE,
    P.MINU_REQUERIDOS, P.MINU_CONTRATADOS,
    P.MINU_DESCANSO, P.PERS_DISPONIBLE,
    P.PORC_PRESENCIA, P.PORC_APROVECHAMIENTO,
    P.PORC_EFICIENCIA, P.PORC_BALANCEO,
    P.MINU_DISPONIBLES, P.TIEM_MEDIO,
    P.PROD_DIA, P.PROD_HORA,
    P.PAQU_POR_PUESTO, P.TAMA_PAQUETE,
    P.PUES_SIMULTANEOS, P.TIEM_UNID_REAL,
    P.RECO_PRIM_PAQU_MINUTOS, P.RECO_PRIM_PAQU_DIAS,
    P.RECO_ULTI_PAQU_MINUTOS, P.RECO_ULTI_PAQU_DIAS,
    P.RECO_TOTA_DIAS, P.RECO_TOTA_MINUTOS
FROM PCP_PROG_PRODUCCION P
   INNER JOIN PCP_PROD_LOTES ON (P.CONS_PROD_LOTE = PCP_PROD_LOTES.CONS_PROD_LOTE)
   INNER JOIN PCP_PROD_ORDENES ON (PCP_PROD_LOTES.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN)
   INNER JOIN GLO_REFERENCIAS ON (PCP_PROD_ORDENES.CONS_REFERENCIA = GLO_REFERENCIAS.CONS_REFERENCIA) ;

/*  View: VIS_PCP_PROT_MATE_BASICO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROT_MATE_BASICO (CONS_REFERENCIA, CONS_REFE_VARIACION, 
    CONS_REFE_TIPO_VARIACION, CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA)
AS

SELECT V.CONS_REFERENCIA, V.CONS_REFE_VARIACION,
    V.CONS_REFE_TIPO_VARIACION,
    M.CONS_REFE_MATERIAL, M.CONS_MATE_REFERENCIA
FROM GLO_REFERENCIAS
   INNER JOIN PCP_REFE_VARIACIONES V ON (GLO_REFERENCIAS.CONS_REFERENCIA = V.CONS_REFERENCIA)
   INNER JOIN PCP_REFE_MATERIALES M ON (V.CONS_REFE_VARIACION = M.CONS_REFE_VARIACION)
WHERE GLO_REFERENCIAS.ES_PROTOTIPO = 1 AND M.ES_MATE_BASICO = 1 ;

/*  View: VIS_PCP_PROT_MOST_METODOS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROT_MOST_METODOS (CONS_REFERENCIA, CODI_REFERENCIA, 
    CONS_REFE_TEMPORADA, CODI_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, MOLDE, 
    CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CODI_BARRAS, CONS_REFE_MARCA, 
    CODI_REFE_MARCA, NOMB_REFE_MARCA, CONS_REFE_LINEA, CODI_REFE_LINEA, 
    NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, NOMB_REFE_EDAD, 
    CONS_REFE_ESTILO, CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, 
    CODI_REFE_GRUPO, NOMB_REFE_GRUPO, CONS_REFE_SEXO, CODI_SEXO, NOMB_SEXO, 
    CONS_REFE_LAVADO, CODI_REFE_LAVADO, NOMB_REFE_LAVADO, CONS_REFE_BORDADO, 
    CODI_REFE_BORDADO, NOMB_REFE_BORDADO, CONS_REFE_ESTAMPADO, CODI_REFE_ESTAMPADO, 
    NOMB_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, NOMB_GRUP_TALLAS, 
    CONS_REFE_ESTADO, CODI_REFE_ESTADO, NOMB_REFE_ESTADO, ESTA_EDIT_MAESTRO, 
    ESTA_MOST_METODOS, ESTA_MOST_ORDE_TRABAJO, ESTA_MOST_INVE_MATERIALES, IMAGEN, 
    AJUS_IMAGEN, DESCRIPCION, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT R.CONS_REFERENCIA,	R.CODI_REFERENCIA,
       R.CONS_REFE_TEMPORADA,	T.CODI_REFE_TEMPORADA,
       T.NOMB_REFE_TEMPORADA,	R.MOLDE,
       R.CODI_INTE_REFERENCIA,	R.NOMB_REFERENCIA,
       R.CODI_BARRAS,	R.CONS_REFE_MARCA,
       GLO_REFE_MARCAS.CODI_REFE_MARCA,	GLO_REFE_MARCAS.NOMB_REFE_MARCA,
       R.CONS_REFE_LINEA,	GLO_REFE_LINEAS.CODI_REFE_LINEA,
       GLO_REFE_LINEAS.NOMB_REFE_LINEA,	R.CONS_REFE_EDAD,
       GLO_REFE_EDADES.CODI_REFE_EDAD,	GLO_REFE_EDADES.NOMB_REFE_EDAD,
       R.CONS_REFE_ESTILO,	GLO_REFE_ESTILOS.CODI_REFE_ESTILO,
       GLO_REFE_ESTILOS.NOMB_REFE_ESTILO,	R.CONS_REFE_GRUPO,
       GLO_REFE_GRUPOS.CODI_REFE_GRUPO,	GLO_REFE_GRUPOS.NOMB_REFE_GRUPO,
       R.CONS_REFE_SEXO,	SIS_SEXOS.CODI_SEXO,
       SIS_SEXOS.NOMB_SEXO,	R.CONS_REFE_LAVADO,
       GLO_REFE_LAVADOS.CODI_REFE_LAVADO,	GLO_REFE_LAVADOS.NOMB_REFE_LAVADO,
       R.CONS_REFE_BORDADO,	GLO_REFE_BORDADOS.CODI_REFE_BORDADO,
       GLO_REFE_BORDADOS.NOMB_REFE_BORDADO,	R.CONS_REFE_ESTAMPADO,
       GLO_REFE_ESTAMPADOS.CODI_REFE_ESTAMPADO,	GLO_REFE_ESTAMPADOS.NOMB_REFE_ESTAMPADO,
       R.CONS_REFE_GRUP_TALLAS,	GLO_GRUP_TALLAS.CODI_GRUP_TALLAS,
       GLO_GRUP_TALLAS.NOMB_GRUP_TALLAS,	R.CONS_REFE_ESTADO,
       S.CODI_REFE_ESTADO,	S.NOMB_REFE_ESTADO,
       S.EDIT_MAESTRO,	S.MOST_METODOS,
       S.MOST_ORDE_TRABAJO,	S.MOST_INVE_MATERIALES,
       R.IMAGEN,	R.AJUS_IMAGEN,
       R.DESCRIPCION,	R.FECH_SISTEMA,	R.USUA_SISTEMA
FROM GLO_REFERENCIAS R
   INNER JOIN GLO_REFE_TEMPORADAS T ON (R.CONS_REFE_TEMPORADA = T.CONS_REFE_TEMPORADA)
   INNER JOIN GLO_REFE_MARCAS ON (R.CONS_REFE_MARCA = GLO_REFE_MARCAS.CONS_REFE_MARCA)
   INNER JOIN GLO_REFE_LINEAS ON (R.CONS_REFE_LINEA = GLO_REFE_LINEAS.CONS_REFE_LINEA)
   INNER JOIN GLO_REFE_EDADES ON (R.CONS_REFE_EDAD = GLO_REFE_EDADES.CONS_REFE_EDAD)
   INNER JOIN GLO_REFE_ESTILOS ON (R.CONS_REFE_ESTILO = GLO_REFE_ESTILOS.CONS_REFE_ESTILO)
   INNER JOIN GLO_REFE_GRUPOS ON (R.CONS_REFE_GRUPO = GLO_REFE_GRUPOS.CONS_REFE_GRUPO)
   INNER JOIN SIS_SEXOS ON (R.CONS_REFE_SEXO = SIS_SEXOS.CONS_SEXO)
   INNER JOIN GLO_REFE_LAVADOS ON (R.CONS_REFE_LAVADO = GLO_REFE_LAVADOS.CONS_REFE_LAVADO)
   INNER JOIN GLO_REFE_BORDADOS ON (R.CONS_REFE_BORDADO = GLO_REFE_BORDADOS.CONS_REFE_BORDADO)
   INNER JOIN GLO_REFE_ESTAMPADOS ON (R.CONS_REFE_ESTAMPADO = GLO_REFE_ESTAMPADOS.CONS_REFE_ESTAMPADO)
   INNER JOIN GLO_GRUP_TALLAS ON (R.CONS_REFE_GRUP_TALLAS = GLO_GRUP_TALLAS.CONS_GRUP_TALLAS)
   INNER JOIN GLO_REFE_ESTADOS S ON (R.CONS_REFE_ESTADO = S.CONS_REFE_ESTADO)
   WHERE R.ES_PROTOTIPO = 1 AND S.MOST_METODOS = 1;

/*  View: VIS_PCP_PROT_POR_IMPORTAR, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROT_POR_IMPORTAR (CONS_REFERENCIA, CODI_REFERENCIA, NOMB_REFERENCIA)
AS

Select cons_referencia, codi_referencia, nomb_referencia
    from glo_referencias
    where es_prototipo = 1 and not
    cons_referencia in
        (Select cons_referencia
        from glo_referencias
        where es_prototipo = -1
        order by cons_referencia) ;

/*  View: VIS_PCP_PROT_VARIACIONES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROT_VARIACIONES (CONS_REFE_VARIACION, CONS_REFERENCIA, 
    CODI_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_TIPO_VARIACION, 
    CODI_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION, OBSERVACIONES, 
    FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT V.CONS_REFE_VARIACION, V.CONS_REFERENCIA,
       GLO_REFERENCIAS.CODI_REFERENCIA, GLO_REFERENCIAS.NOMB_REFERENCIA,
       V.CONS_REFE_TIPO_VARIACION, TV.CODI_REFE_TIPO_VARIACION,
       TV.NOMB_REFE_TIPO_VARIACION, V.OBSERVACIONES,
       V.FECH_SISTEMA, V.USUA_SISTEMA
FROM PCP_REFE_VARIACIONES V
   INNER JOIN GLO_REFERENCIAS ON (V.CONS_REFERENCIA = GLO_REFERENCIAS.CONS_REFERENCIA)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES TV ON (V.CONS_REFE_TIPO_VARIACION = TV.CONS_REFE_TIPO_VARIACION)
   WHERE GLO_REFERENCIAS.ES_PROTOTIPO = 1 ;

/*  View: VIS_PCP_PROVEEDORES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROVEEDORES (NOMB_CIUDAD, NOMB_DEPARTAMENTO, NOMB_PAIS, CODI_TERCERO, 
    NOMB_TERCERO, CONS_CIUDAD, CONS_DEPARTAMENTO, CONS_ORIGEN, CONS_TERCERO, 
    IDEN_TERC_DIGI_VERIFICACION, DIRE_TERCERO, CONS_PAIS, CODI_POSTAL, TELEFONO1, 
    TELEFONO2, TELEFONO3, FAX1, FAX2, CELULAR, CORR_ELECTRONICO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT NOMB_CIUDAD, NOMB_DEPARTAMENTO,
       NOMB_PAIS, CODI_TERCERO,
       NOMB_TERCERO, CONS_CIUDAD,
       CONS_DEPARTAMENTO, CONS_ORIGEN,
       CONS_TERCERO, IDEN_TERC_DIGI_VERIFICACION,
       DIRE_TERCERO, CONS_PAIS,
       CODI_POSTAL, TELEFONO1,
       TELEFONO2, TELEFONO3,
       FAX1, FAX2,
       CELULAR, CORR_ELECTRONICO,
       FECH_SISTEMA, USUA_SISTEMA
FROM VIS_GLO_TERCEROS
WHERE cons_tercero > 0 AND 
        cons_tercero  IN 
        (SELECT pcp_terceros.CONS_TERCERO
        FROM pcp_terceros 
        WHERE pcp_terceros.cons_tipo_tercero = 1) ;

/*  View: VIS_PCP_REFE_FICH_TECNICAS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_REFE_FICH_TECNICAS (CONS_REFE_FICHA, CONS_REFE_TIPO_FICHA, 
    NOMB_REFE_TIPO_FICHA, ANULADA, CONS_REFE_VARIACION, CONS_REFE_TIPO_VARIACION, 
    NOMB_REFE_TIPO_VARIACION, CONS_REFERENCIA, CODI_REFERENCIA, CODI_INTE_REFERENCIA, 
    CONS_REFE_LINEA, CODI_REFE_LINEA, NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, 
    NOMB_REFE_EDAD, CONS_REFE_ESTILO, CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, 
    CODI_REFE_GRUPO, NOMB_REFE_GRUPO, CONS_REFE_TEMPORADA, CODI_REFE_TEMPORADA, 
    NOMB_REFE_TEMPORADA, CONS_REFE_MARCA, CODI_REFE_MARCA, NOMB_REFE_MARCA, 
    NOMB_REFERENCIA, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, TALLAS, TALL_MUESTRA, 
    DESCRIPCION, FECH_MODIFICACION, USUA_MODIFICACION, FECH_SISTEMA, USUA_SISTEMA, ES_PROTOTIPO)
AS

SELECT FT.CONS_REFE_FICHA, FT.CONS_REFE_TIPO_FICHA,
       SIS_REFE_TIPO_FICHA.NOMB_REFE_TIPO_FICHA, FT.ANULADA,
       FT.CONS_REFE_VARIACION, V.CONS_REFE_TIPO_VARIACION,
       TV.NOMB_REFE_TIPO_VARIACION, V.CONS_REFERENCIA,
       FT.CODI_REFERENCIA, FT.CODI_INTE_REFERENCIA,
       FT.CONS_REFE_LINEA, GLO_REFE_LINEAS.CODI_REFE_LINEA, GLO_REFE_LINEAS.NOMB_REFE_LINEA,
       FT.CONS_REFE_EDAD,  GLO_REFE_EDADES.CODI_REFE_EDAD, GLO_REFE_EDADES.NOMB_REFE_EDAD,
       FT.CONS_REFE_ESTILO, GLO_REFE_ESTILOS.CODI_REFE_ESTILO, GLO_REFE_ESTILOS.NOMB_REFE_ESTILO,
       FT.CONS_REFE_GRUPO, GLO_REFE_GRUPOS.CODI_REFE_GRUPO, GLO_REFE_GRUPOS.NOMB_REFE_GRUPO,
       FT.CONS_REFE_TEMPORADA, RT.CODI_REFE_TEMPORADA, RT.NOMB_REFE_TEMPORADA,
       FT.CONS_REFE_MARCA, GLO_REFE_MARCAS.CODI_REFE_MARCA, GLO_REFE_MARCAS.NOMB_REFE_MARCA,
       FT.NOMB_REFERENCIA, FT.CONS_REFE_GRUP_TALLAS, GLO_GRUP_TALLAS.CODI_GRUP_TALLAS,
       FT.TALLAS, FT.TALL_MUESTRA, FT.DESCRIPCION,
       FT.FECH_MODIFICACION, FT.USUA_MODIFICACION,
       FT.FECH_SISTEMA, FT.USUA_SISTEMA, GLO_REFERENCIAS.ES_PROTOTIPO
FROM GLO_REFERENCIAS
   INNER JOIN PCP_REFE_VARIACIONES V ON (GLO_REFERENCIAS.CONS_REFERENCIA = V.CONS_REFERENCIA)
   INNER JOIN PCP_REFE_FICH_TECNICAS FT ON (V.CONS_REFE_VARIACION = FT.CONS_REFE_VARIACION)
   INNER JOIN SIS_REFE_TIPO_FICHA ON (FT.CONS_REFE_TIPO_FICHA = SIS_REFE_TIPO_FICHA.CONS_REFE_TIPO_FICHA)
   INNER JOIN GLO_REFE_LINEAS ON (FT.CONS_REFE_LINEA = GLO_REFE_LINEAS.CONS_REFE_LINEA)
   INNER JOIN GLO_REFE_EDADES ON (FT.CONS_REFE_EDAD = GLO_REFE_EDADES.CONS_REFE_EDAD)
   INNER JOIN GLO_REFE_ESTILOS ON (FT.CONS_REFE_ESTILO = GLO_REFE_ESTILOS.CONS_REFE_ESTILO)
   INNER JOIN GLO_REFE_GRUPOS ON (FT.CONS_REFE_GRUPO = GLO_REFE_GRUPOS.CONS_REFE_GRUPO)
   INNER JOIN GLO_REFE_TEMPORADAS RT ON (FT.CONS_REFE_TEMPORADA = RT.CONS_REFE_TEMPORADA)
   INNER JOIN GLO_REFE_MARCAS ON (FT.CONS_REFE_MARCA = GLO_REFE_MARCAS.CONS_REFE_MARCA)
   INNER JOIN GLO_GRUP_TALLAS ON (FT.CONS_REFE_GRUP_TALLAS = GLO_GRUP_TALLAS.CONS_GRUP_TALLAS)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES TV ON (V.CONS_REFE_TIPO_VARIACION = TV.CONS_REFE_TIPO_VARIACION) ;

/*  View: VIS_PCP_REFE_INSUMOS, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_REFE_INSUMOS (CONS_REFE_INSUMO, CONS_REFE_VARIACION, CONS_INSU_REFERENCIA, CODI_INSU_REFERENCIA, NOMB_INSU_REFERENCIA, CONSUMO)
AS

SELECT I.CONS_REFE_INSUMO, I.CONS_REFE_VARIACION,
       I.CONS_INSU_REFERENCIA, PCP_INSU_REFERENCIAS.CODI_INSU_REFERENCIA,
       R.NOMB_INSU_REFERENCIA, I.CONSUMO
FROM PCP_REFE_INSUMOS I
   INNER JOIN PCP_INSU_REFERENCIAS R ON (I.CONS_INSU_REFERENCIA = R.CONS_INSU_REFERENCIA);

/*  View: VIS_PCP_REFE_MATE_BASICO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_REFE_MATE_BASICO (CONS_REFERENCIA, CONS_REFE_VARIACION, 
    CONS_REFE_TIPO_VARIACION, CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA)
AS

SELECT V.CONS_REFERENCIA, V.CONS_REFE_VARIACION,
    V.CONS_REFE_TIPO_VARIACION,
    M.CONS_REFE_MATERIAL, M.CONS_MATE_REFERENCIA
FROM GLO_REFERENCIAS R
   INNER JOIN PCP_REFE_VARIACIONES V ON (R.CONS_REFERENCIA = V.CONS_REFERENCIA)
   INNER JOIN PCP_REFE_MATERIALES M ON (V.CONS_REFE_VARIACION = M.CONS_REFE_VARIACION)
WHERE R.ES_PROTOTIPO = -1 AND M.ES_MATE_BASICO = 1 ;

/*  View: VIS_PCP_REFE_MATERIALES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_REFE_MATERIALES (CONS_REFE_MATERIAL, CONS_REFE_VARIACION, 
    CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA, CONSUMO)
AS

SELECT M.CONS_REFE_MATERIAL, M.CONS_REFE_VARIACION,
       M.CONS_MATE_REFERENCIA, M.CODI_MATE_REFERENCIA,
       M.NOMB_MATE_REFERENCIA, M.CONSUMO
FROM PCP_REFE_MATERIALES M
   INNER JOIN PCP_MATE_REFERENCIAS ON (M.CONS_MATE_REFERENCIA = M.CONS_MATE_REFERENCIA) ;

/*  View: VIS_PCP_REFE_VARIACIONES, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_REFE_VARIACIONES (CONS_REFE_VARIACION, CONS_REFERENCIA, 
    CODI_REFERENCIA, NOMB_REFERENCIA, CONS_REFE_TIPO_VARIACION, CODI_REFE_TIPO_VARIACION, 
    NOMB_REFE_TIPO_VARIACION, OBSERVACIONES, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT V.CONS_REFE_VARIACION, V.CONS_REFERENCIA,
       R.CODI_REFERENCIA, R.NOMB_REFERENCIA,
       V.CONS_REFE_TIPO_VARIACION, TV.CODI_REFE_TIPO_VARIACION,
       TV.NOMB_REFE_TIPO_VARIACION, V.OBSERVACIONES,
       V.FECH_SISTEMA, V.USUA_SISTEMA
FROM PCP_REFE_VARIACIONES V
   INNER JOIN GLO_REFERENCIAS R ON (V.CONS_REFERENCIA = R.CONS_REFERENCIA)
   INNER JOIN PCP_REFE_TIPO_VARIACIONES TV ON (V.CONS_REFE_TIPO_VARIACION = TV.CONS_REFE_TIPO_VARIACION)
   WHERE R.ES_PROTOTIPO = -1 ;

/*  View: VIS_SIS_COST_GRUP_REPORTA, Owner: SYSDBA  */
CREATE VIEW VIS_SIS_COST_GRUP_REPORTA (CONS_COST_GRUPO, CODI_COST_GRUPO, NOMB_COST_GRUPO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT CONS_COST_GRUPO, CODI_COST_GRUPO, NOMB_COST_GRUPO, FECH_SISTEMA, USUA_SISTEMA
FROM SIS_COST_GRUPOS
WHERE CONS_COST_GRUPO IN (3, 4, 5, 6);

/*  View: VIS_SIS_REFE_TIPO_FICHA, Owner: SYSDBA  */
CREATE VIEW VIS_SIS_REFE_TIPO_FICHA (CONS_REFE_TIPO_FICHA, NOMB_REFE_TIPO_FICHA)
AS

SELECT CONS_REFE_TIPO_FICHA, NOMB_REFE_TIPO_FICHA
FROM SIS_REFE_TIPO_FICHA
WHERE ANULADA = -1 AND CONS_REFE_TIPO_FICHA <> 99;

/*  View: VIS_SIS_SEXO_PERSONAL, Owner: SYSDBA  */
CREATE VIEW VIS_SIS_SEXO_PERSONAL (CONS_SEXO, CODI_SEXO, NOMB_SEXO, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT
    CONS_SEXO,
    CODI_SEXO,
    NOMB_SEXO,
    FECH_SISTEMA,
    USUA_SISTEMA FROM SIS_SEXOS
    WHERE CONS_SEXO IN (1, 2);

/*  View: VIS_PCP_FORM_PAGO_VALO_MINUTO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_FORM_PAGO_VALO_MINUTO (CONS_TABL_AUXI_DETALLE, CONS_TABL_AUXILIAR, 
    CODI_TABL_AUXILIAR, TEXT_TABL_AUXI_DETALLE, ADIC_VARC, ADIC_INTE, ADIC_REAL)
AS

SELECT CONS_TABL_AUXI_DETALLE, CONS_TABL_AUXILIAR,
    CODI_TABL_AUXILIAR, TEXT_TABL_AUXI_DETALLE, ADIC_VARC,
    ADIC_INTE, ADIC_REAL 
FROM VIS_SIS_TABL_AUXI_DETALLE
WHERE CODI_TABL_AUXILIAR = 'AUXI_PCP_001';

/*  View: VIS_SIS_USUA_INFO_EDITABLES, Owner: SYSDBA  */
CREATE VIEW VIS_SIS_USUA_INFO_EDITABLES (CONS_USUA_INFORME, CONS_USUA_MODULO, 
    USUARIO, MODULO, NOMB_USUA_INFORME, CONTROLES, ORDE_1, ORDE_ASCE_1, 
    ORDE_2, ORDE_ASCE_2, ORDE_3, ORDE_ASCE_3, ORDE_EJECUCION, FECH_SISTEMA, USUA_SISTEMA)
AS

SELECT I.CONS_USUA_INFORME, I.CONS_USUA_MODULO,
    M.USUARIO, M.MODULO,
    I.NOMB_USUA_INFORME, I.CONTROLES,
    I.ORDE_1, I.ORDE_ASCE_1,
    I.ORDE_2, I.ORDE_ASCE_2,
    I.ORDE_3, I.ORDE_ASCE_3,
    I.ORDE_EJECUCION,
    I.FECH_SISTEMA, I.USUA_SISTEMA
FROM SIS_USUA_INFORMES I
   INNER JOIN SIS_USUA_MODULOS M ON (I.CONS_USUA_MODULO = M.CONS_USUA_MODULO) ;

/*  View: VIS_PCP_PROD_TOTA_LOTEADO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_TOTA_LOTEADO (CONS_PROD_ORDEN, NUME_PROD_ORDEN, UNID_PEDIDAS, UNID_LOTEADAS)
AS

SELECT VP.CONS_PROD_ORDEN, VP.NUME_PROD_ORDEN, VP.UNID_PEDIDAS,
    SUM( VL.UNID_LOTEADAS ) 
FROM VIS_PCP_PROD_TOTA_PEDIDO VP
   LEFT OUTER JOIN VIS_PCP_PROD_ORDE_UNID_LOTEADAS VL ON (VP.CONS_PROD_ORDEN = VL.CONS_PROD_ORDEN)
GROUP BY VP.CONS_PROD_ORDEN, VP.NUME_PROD_ORDEN, VP.UNID_PEDIDAS ;

/*  View: VIS_PCP_PROD_TOTA_CORTADO, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_TOTA_CORTADO (CONS_PROD_ORDEN, NUME_PROD_ORDEN, UNID_PEDIDAS, 
    UNID_LOTEADAS, UNID_CORTADAS)
AS

SELECT VIS_PCP_PROD_TOTA_LOTEADO.CONS_PROD_ORDEN, VIS_PCP_PROD_TOTA_LOTEADO.NUME_PROD_ORDEN, 
    VIS_PCP_PROD_TOTA_LOTEADO.UNID_PEDIDAS, VIS_PCP_PROD_TOTA_LOTEADO.UNID_LOTEADAS, 
    VIS_PCP_PROD_ORDE_UNID_CORTADAS.UNID_CORTADAS
FROM VIS_PCP_PROD_ORDE_UNID_CORTADAS
   RIGHT OUTER JOIN VIS_PCP_PROD_TOTA_LOTEADO ON (VIS_PCP_PROD_ORDE_UNID_CORTADAS.CONS_PROD_ORDEN = VIS_PCP_PROD_TOTA_LOTEADO.CONS_PROD_ORDEN);

/*  View: VIS_PCP_PROD_ORDE_UNID_COMPLETA, Owner: SYSDBA  */
CREATE VIEW VIS_PCP_PROD_ORDE_UNID_COMPLETA (CONS_PROD_ORDEN, NUME_PROD_ORDEN, NUME_PROD_ORDEN1, UNID_PEDIDAS, UNID_LOTEADAS, UNID_CORTADAS, ANULADA, FECH_SISTEMA, USUA_SISTEMA, FINALIZADO, CONS_REFERENCIA, CODI_REFERENCIA, CONS_REFE_TEMPORADA, CODI_REFE_TEMPORADA, NOMB_REFE_TEMPORADA, MOLDE, CODI_INTE_REFERENCIA, NOMB_REFERENCIA, CODI_BARRAS, CONS_REFE_MARCA, CODI_REFE_MARCA, NOMB_REFE_MARCA, CONS_REFE_LINEA, CODI_REFE_LINEA, NOMB_REFE_LINEA, CONS_REFE_EDAD, CODI_REFE_EDAD, NOMB_REFE_EDAD, CONS_REFE_ESTILO, CODI_REFE_ESTILO, NOMB_REFE_ESTILO, CONS_REFE_GRUPO, CODI_REFE_GRUPO, NOMB_REFE_GRUPO, CONS_REFE_SEXO, CODI_SEXO, NOMB_SEXO, CONS_REFE_LAVADO, CODI_REFE_LAVADO, NOMB_REFE_LAVADO, CONS_REFE_BORDADO, CODI_REFE_BORDADO, NOMB_REFE_BORDADO, CONS_REFE_ESTAMPADO, CODI_REFE_ESTAMPADO, NOMB_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CODI_GRUP_TALLAS, NOMB_GRUP_TALLAS, CONS_REFE_ESTADO, CODI_REFE_ESTADO, NOMB_REFE_ESTADO)
AS


SELECT VIS_PCP_PROD_ORDE_COMPLETA.CONS_PROD_ORDEN, VIS_PCP_PROD_ORDE_COMPLETA.NUME_PROD_ORDEN, VIS_PCP_PROD_TOTA_CORTADO.NUME_PROD_ORDEN, VIS_PCP_PROD_TOTA_CORTADO.UNID_PEDIDAS, VIS_PCP_PROD_TOTA_CORTADO.UNID_LOTEADAS, VIS_PCP_PROD_TOTA_CORTADO.UNID_CORTADAS, VIS_PCP_PROD_ORDE_COMPLETA.ANULADA, VIS_PCP_PROD_ORDE_COMPLETA.FECH_SISTEMA, VIS_PCP_PROD_ORDE_COMPLETA.USUA_SISTEMA, VIS_PCP_PROD_ORDE_COMPLETA.FINALIZADO, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFERENCIA, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFERENCIA, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_TEMPORADA, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_TEMPORADA, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_TEMPORADA, VIS_PCP_PROD_ORDE_COMPLETA.MOLDE, VIS_PCP_PROD_ORDE_COMPLETA.CODI_INTE_REFERENCIA, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFERENCIA, VIS_PCP_PROD_ORDE_COMPLETA.CODI_BARRAS, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_MARCA, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_MARCA, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_MARCA, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_LINEA, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_LINEA, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_LINEA, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_EDAD, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_EDAD, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_EDAD, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_ESTILO, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_ESTILO, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_ESTILO, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_GRUPO, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_GRUPO, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_GRUPO, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_SEXO, VIS_PCP_PROD_ORDE_COMPLETA.CODI_SEXO, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_SEXO, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_LAVADO, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_LAVADO, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_LAVADO, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_BORDADO, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_BORDADO, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_BORDADO, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_ESTAMPADO, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_ESTAMPADO, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_ESTAMPADO, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_GRUP_TALLAS, VIS_PCP_PROD_ORDE_COMPLETA.CODI_GRUP_TALLAS, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_GRUP_TALLAS, VIS_PCP_PROD_ORDE_COMPLETA.CONS_REFE_ESTADO, VIS_PCP_PROD_ORDE_COMPLETA.CODI_REFE_ESTADO, VIS_PCP_PROD_ORDE_COMPLETA.NOMB_REFE_ESTADO

FROM VIS_PCP_PROD_ORDE_COMPLETA

   LEFT OUTER JOIN VIS_PCP_PROD_TOTA_CORTADO ON (VIS_PCP_PROD_ORDE_COMPLETA.CONS_PROD_ORDEN = VIS_PCP_PROD_TOTA_CORTADO.CONS_PROD_ORDEN)

;

ALTER TABLE PCP_FORM_PAGO_BONOS ADD 
        CHECK (INDICADOR IN (1,2,3));

ALTER TABLE PCP_INVE_INVE_ENTR_PIEZAS ADD 
        CHECK (Calidad in ('A','B','C'));

ALTER TABLE PCP_INVE_MATE_ENTR_PIEZAS ADD 
        CHECK (Calidad in ('A','B','C'));

ALTER TABLE C08_GP_INSUMOS ADD 
        CHECK (TIPO_MOVIMIENTO IN

(0,1,2));

ALTER TABLE GLO_OPCIONES ADD 
        CHECK (TAMANO IN (60,80,120));

ALTER TABLE C08_GP_MATERIALES ADD 
        CHECK (TIPO_MOVIMIENTO IN (0,1,2));

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (SALU_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (SALU_EMPLEADO BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (PENS_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (PENS_EMPLEADO BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (CAJA_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (TOTA_PARAFISCALES BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (PRIMA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (PRIM_EXTRA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (VACACIONES BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (CESANTIAS BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (INTE_CESANTIAS BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (OTROS BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (TOTA_PRESTACIONES BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (SENA_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (ARP_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRES_HISTORIAL ADD 
        CHECK (ICBF_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (SALU_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (SALU_EMPLEADO BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (PENS_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (PENS_EMPLEADO BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (CAJA_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (TOTA_PARAFISCALES BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (PRIMA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (PRIM_EXTRA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (VACACIONES BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (CESANTIAS BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (INTE_CESANTIAS BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (OTROS BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (TOTA_PRESTACIONES BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (SENA_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (ARP_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE GLO_PERS_PRESTACIONES ADD 
        CHECK (ICBF_EMPRESA BETWEEN 0 AND 100);

ALTER TABLE C08_MIDA_EQUI_CENT_COSTOS ADD 
        CHECK (TIPO_CENT_COSTOS IN

('ADM', 'DIR', 'IND'));

ALTER TABLE C08_MIDA_NVD_PCP ADD 
        CHECK (COD_CEN_COSTOS

IN ('ADM', 'DIR', 'IND'));

ALTER TABLE PCP_CONF_MENU_ADICIONALES ADD 
        CHECK (TIPO_ADICIONAL BETWEEN 0 AND 3);

ALTER TABLE PCP_CONT_NOVE_DEFE_FABRICACION ADD 
        CHECK (CANT_UNID_DEFECTUOSAS > 0);

ALTER TABLE PCP_INVE_INVE_ENTR_PIEZAS ADD 
        CONSTRAINT PCP_INVE_INSU_ENTR_PIEZ_CHK_CAL CHECK (Calidad in ('A','B','C'));

ALTER TABLE PCP_INVE_MATE_ENTR_PIEZAS ADD 
        CONSTRAINT PCP_INVE_MATE_ENTR_PIEZ_CHK_CAL CHECK (Calidad in ('A','B','C'));

/*   Exceptions  */
CREATE EXCEPTION EXC_BAS_0001 'El registro que intenta modificar es del sistema.';
CREATE EXCEPTION EXC_BAS_0002 'Esta tabla solo puede tener un registro.';
CREATE EXCEPTION EXC_BAS_0003 'El valor de este campo no puede ser negativo';
CREATE EXCEPTION EXC_BAS_0004 'La fecha dada no es válida.';
CREATE EXCEPTION EXC_BAS_0005 'La fecha dada pertenece al pasado.';
CREATE EXCEPTION EXC_BAS_0006 'El valor del campo no puede ser nulo.';
CREATE EXCEPTION EXC_BAS_0007 'Estos dos campos no pueden tener el mismo valor.';
CREATE EXCEPTION EXC_BAS_0008 'El registro no se encuentra.';
CREATE EXCEPTION EXC_BAS_0010 'El registro.';
CREATE EXCEPTION EXC_PCP_0001 'La fecha final no puede ser menor que la fecha inicial.';
CREATE EXCEPTION EXC_PCP_0002 'Se requiere un motivo para el estampado.';
CREATE EXCEPTION EXC_PCP_0003 'No se puede borrar la talla.  Debe borrar desde la última talla del grupo.';
CREATE EXCEPTION EXC_PCP_0004 'Debe dar una nueva ubicación del recurso.';
CREATE EXCEPTION EXC_PCP_0005 'El recurso seleccionado ya fue ingresado al sistema';
CREATE EXCEPTION EXC_PCP_0006 'La fecha de entrega del pedido no puede ser menor que la de solicitud.';
CREATE EXCEPTION EXC_PCP_0007 'El valor mínimo del nivel salarial, no puede ser menor que el máximo.';
CREATE EXCEPTION EXC_PCP_0008 'El valor del salario está fuera del rango del nivel.';
CREATE EXCEPTION EXC_PCP_0009 'El código CST es un código registrado de Softconf Limitada';
CREATE EXCEPTION EXC_PCP_0010 'La variación destino debe tener algún valor.';
CREATE EXCEPTION EXC_PCP_0011 'Existen etapas de producción posteriores, que ya fueron finalizadas.';
CREATE EXCEPTION EXC_PCP_0012 'La longitud del código de barras no es correcta.';
CREATE EXCEPTION EXC_PCP_0013 'La fecha de inicio del proceso no es válida.';
CREATE EXCEPTION EXC_PCP_0014 'La orden de producción se marcó como FINALIZADA.';
CREATE EXCEPTION EXC_PCP_0015 'El proceso de loteo de la orden de producción fue finalizado.';
CREATE EXCEPTION EXC_PCP_0016 'El lote de producción se marcó como FINALIZADO.';
CREATE EXCEPTION EXC_PCP_0017 'El proceso de liquidación de la orden de corte ya fue finalizado.';
CREATE EXCEPTION EXC_PCP_0018 'El proceso de creación de operaciones de costura ya fue finalizado.';
CREATE EXCEPTION EXC_PCP_0019 'El proceso de tiquetes de control de costura ya fue finalizado.';
CREATE EXCEPTION EXC_PCP_0020 'El proceso de creación operaciones de corte ya fue finalizado.';
CREATE EXCEPTION EXC_PCP_0021 'No se puede mover hacia arriba el primer registro.';
CREATE EXCEPTION EXC_PCP_0022 'No se puede mover hacia abajo el 򬴩mo registro.';
CREATE EXCEPTION EXC_PCP_0023 'La referencia ya tiene asignado un material b⴩co en la lista de materiales.';
CREATE EXCEPTION EXC_PCP_0024 'Se ha alcanzado el m⹩mo n򭥲o de tipos de distribuci󮠤e paquetes.';
CREATE EXCEPTION EXC_PCP_0025 'El rango inicial no puede ser mayor que el rango final.';
CREATE EXCEPTION EXC_PCP_0026 'El rango inicial se cruza con otro rango definido.';
CREATE EXCEPTION EXC_PCP_0027 'El rango final se cruza con otro rango definido.';
CREATE EXCEPTION EXC_PCP_0028 'El sistema de pago seleccionado no estᡡctivo.';
CREATE EXCEPTION EXC_PCP_0029 'El c󤩧o de barras no pertenece a un tiquete de control de corte.';
CREATE EXCEPTION EXC_PCP_0030 'El agrupador de paquetes de corte no es v⭩do o no fue definido.';
CREATE EXCEPTION EXC_PCP_0031 'La variaciónt⯤ar no puede ser eliminada.';
CREATE EXCEPTION EXC_PCP_0032 'La eficiencia final NO puede ser menor que la eficiencia inicial.';
CREATE EXCEPTION EXC_PCP_0033 'El tiempo ciclo NO se puede eliminar porque estᡳiendo utilizado.';
CREATE EXCEPTION EXC_PCP_0034 'El c󤩧o CST NO se puede eliminar porque estᡳiendo utilizado.';
CREATE EXCEPTION EXC_PCP_0035 'El nombre estᡡsignado al c󤩧o ';
CREATE EXCEPTION EXC_PCP_0036 'La fecha de finalizaci󮠤e la curva de aprendizaje no es v⭩da.';
CREATE EXCEPTION EXC_PCP_0037 'El rango de fechas no se puede cruzar con una curva de aprendizaje.';
CREATE EXCEPTION EXC_PCP_0038 'No se pueden registrar novedades del personal inactivo.';
CREATE EXCEPTION EXC_PCP_0039 'Los tiquetes de curva de aprendizaje no se pueden reportar como NO ESTANDAR.';
CREATE EXCEPTION EXC_PCP_0040 'Debe asociar una orden de producci󮠡l concepto NO ESTDAR.';
CREATE EXCEPTION EXC_TEXTO 'Error:';
COMMIT WORK;
SET AUTODDL OFF;
SET TERM ^ ;

/*  Stored procedures  */
CREATE PROCEDURE CONS_GLO_ACCE_MOVI_TRASLADO RETURNS (
	
    CONS_ACCESORIO INTEGER,
    CONS_ACCE_GRUPO INTEGER,
    CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_ACCE_TIPO INTEGER,
    CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_FAMILIA INTEGER,
    CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_MARCA INTEGER,
    CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
    NUME_INVE_ACCESORIOS VARCHAR(20) CHARACTER SET NONE,
    NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
    DIME_ENTRADA NUMERIC(15, 2),
    DIME_SALIDA NUMERIC(15, 2),
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    FECH_INICIAL TIMESTAMP,
    CONS_PLAN_ANTERIOR INTEGER,
    CODI_PLAN_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLAN_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINE_ANTERIOR INTEGER,
    CONS_LINE_ANTERIOR INTEGER,
    CODI_LINE_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINE_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECC_ANTERIOR INTEGER,
    CONS_SECC_ANTERIOR INTEGER,
    CODI_SECC_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECC_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
    USO VARCHAR(240) CHARACTER SET NONE,
    CONS_RECU_FAMI_ANTERIOR INTEGER,
    CODI_RECU_FAMI_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMI_ANTERIOR VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CONS_GLO_PERS_INFO_TIPO_ESTADO (PE_TIPO_ESTADO SMALLINT)
RETURNS (
	ESTADO VARCHAR(12) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CANTIDAD SMALLINT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CONS_GLO_PERS_NIVE_SALARIAL RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
APELLIDOS VARCHAR(62) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
SALARIO INTEGER,
FECH_NIVE_SALARIAL TIMESTAMP,
CODI_PERS_NIVE_SALA_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
SALA_ANTERIOR INTEGER,
FECH_NIVE_SALA_ANTERIOR TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CONS_GLO_RECU_ANTIGUEDAD RETURNS (
	CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
CONS_RECU_GRUPO INTEGER,
CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO INTEGER,
CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
CLASE VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
ANTIGUEDAD INTEGER,
TIEM_FECHA TIMESTAMP,
CONS_TIPO_DOCUMENTO INTEGER,
CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CONS_GLO_RECU_MOVI_TRASLADO RETURNS (
	CONS_RECURSO INTEGER,
CONS_RECU_GRUPO INTEGER,
CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO INTEGER,
CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
CONS_PLAN_ANTERIOR INTEGER,
CODI_PLAN_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
NOMB_PLAN_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINE_ANTERIOR INTEGER,
CONS_LINE_ANTERIOR INTEGER,
CODI_LINE_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
NOMB_LINE_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECC_ANTERIOR INTEGER,
CONS_SECC_ANTERIOR INTEGER,
CODI_SECC_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
NOMB_SECC_ANTERIOR VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CONS_PERS_INFO_ESTADO (PE_ESTADO VARCHAR(12) CHARACTER SET NONE,
PE_CONS_PERS_TIPO_MOVIMIENTO INTEGER)
RETURNS (
	NUMERO SMALLINT,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
APELLIDOS VARCHAR(62) CHARACTER SET NONE,
NOMB_PERSONAL VARCHAR(40) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
DIAS SMALLINT,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_CLI_CONT_NOVE_PAGO (PE_CONS_CONT_NOVE_DIARIA INTEGER,
PE_FECHA TIMESTAMP,
PE_NUME_LECTURA INTEGER,
PE_CONS_PERSONAL INTEGER,
PE_CONS_EMPRESA INTEGER,
PE_CONS_AREA INTEGER,
PE_CONS_PLAN_LINEA INTEGER,
PE_CONS_LINE_SECCION INTEGER,
PE_CONS_TURNO INTEGER,
PE_MINU_CONTRATADOS INTEGER,
PE_MINU_AUSENTISMOS INTEGER,
PE_MINU_EXTRAS INTEGER,
PE_MINU_PRESENCIALES INTEGER,
PE_MINU_IMPRODUCTIVOS INTEGER,
PE_MINU_TRABAJADOS INTEGER,
PE_MINU_TIQU_CORTE NUMERIC(15, 5),
PE_MINU_TIQU_FABRICACION NUMERIC(15, 5),
PE_MINU_ABONADOS NUMERIC(15, 5),
PE_MINU_OBTENIDOS NUMERIC(15, 5),
PE_INDI_1 NUMERIC(15, 5),
PE_INDI_2 NUMERIC(15, 5),
PE_INDI_3 NUMERIC(15, 5))
RETURNS (
	VALO_HORA_PRODUCCION NUMERIC(15, 5),
VALO_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_GANA_PRODUCCION NUMERIC(15, 5),
VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
VALO_BONO_PRODUCCION NUMERIC(15, 5),
VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_EN_BAJA RETURNS (
	CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(20) CHARACTER SET NONE,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
NOMB_ACCE_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_ESTADO (PE_CONS_ACCESORIO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_ESTADO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CODI_ACCE_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_INFO_GENERAL RETURNS (
	CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(20) CHARACTER SET NONE,
CONS_ACCE_GRUPO INTEGER,
CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
PRESTAMO VARCHAR(20) CHARACTER SET NONE,
USO VARCHAR(240) CHARACTER SET NONE,
MATE_RECOMENDADO VARCHAR(240) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
ANTIGUEDAD INTEGER,
TIEM_FECHA TIMESTAMP,
CONS_TIPO_DOCUMENTO INTEGER,
CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NUME_SERI_RECURSO VARCHAR(20) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
DIME_ENTRADA NUMERIC(15, 2),
DIME_SALIDA NUMERIC(15, 2),
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CODI_ACCE_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_INFO_PLANTAS RETURNS (
	CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CANTIDAD INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_INFO_TRASLADOS RETURNS (
	CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(20) CHARACTER SET NONE,
CONS_ACCE_GRUPO INTEGER,
CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_INFO_TRAS_UBIC (PE_CONS_ACCESORIO INTEGER)
RETURNS (
	FECH_INICIAL TIMESTAMP,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CODI_ACCE_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_MOVIMIENTO RETURNS (
	CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CONS_TIPO_DOCUMENTO INTEGER,
CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
CONS_SOLICITA INTEGER,
CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
CONS_ENTREGA INTEGER,
CODI_ENTREGA VARCHAR(12) CHARACTER SET NONE,
NOMB_ENTREGA VARCHAR(102) CHARACTER SET NONE,
CONS_RECIBE INTEGER,
CODI_RECIBE VARCHAR(12) CHARACTER SET NONE,
NOMB_RECIBE VARCHAR(102) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(12) CHARACTER SET NONE,
CONS_ACCE_GRUPO INTEGER,
CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(12) CHARACTER SET NONE,
USO VARCHAR(240) CHARACTER SET NONE,
MATE_RECOMENDADO VARCHAR(240) CHARACTER SET NONE,
IMAGEN BLOB,
DETA_IMAGEN BLOB,
DIME_ENTRADA NUMERIC(15, 2),
DIME_SALIDA NUMERIC(15, 2))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_TIEM_ANTIGUEDAD (PE_CONS_ACCESORIO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
TIEM_FECHA TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_UBICACION (PE_CONS_ACCE_MOVIMIENTO INTEGER)
RETURNS (
	CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCESORIO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_ACCE_UBIC_UNIDAD (PE_CONS_ACCESORIO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCESORIO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_GRUP_TALLAS RETURNS (
	CONS_GRUP_TALLAS INTEGER,
CODI_GRUP_TALLAS VARCHAR(12) CHARACTER SET NONE,
NOMB_GRUP_TALLAS VARCHAR(60) CHARACTER SET NONE,
TALLAS VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_ACTIVO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CONS_PERS_CARGO INTEGER,
CONS_PERS_CENT_COSTO INTEGER,
CONS_COST_GRUPO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_ACTI_DIRECCION RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CONS_PERS_CARGO INTEGER,
CONS_PERS_CENT_COSTO INTEGER,
CONS_COST_GRUPO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_ANTIGUEDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_AVIS_VENC_CONTRATO RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
DIAS_VENC_CONTRATO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_CONF_SALA_UNIDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_CONF_UNIDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO INTEGER,
DURACION NUMERIC(15, 5),
DIAS_VENC_CONTRATO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_ESTADO (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_ESTADO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER,
CODI_FAMI_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_FAMI_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_FAMILIARES (PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PERS_FAMILIAR INTEGER,
    CONS_PERS_TIPO_DOCUMENTO INTEGER,
    CODI_PERS_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_PERS_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
    NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
    PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    NOMBRES VARCHAR(39) CHARACTER SET NONE,
    CONS_SEXO INTEGER,
    CODI_SEXO VARCHAR(12) CHARACTER SET NONE,
    NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
    CONS_PARENTESCO INTEGER,
    CODI_PARENTESCO VARCHAR(12) CHARACTER SET NONE,
    NOMB_PARENTESCO VARCHAR(60) CHARACTER SET NONE,
    FECH_NACIMIENTO TIMESTAMP,
    CONS_PAIS INTEGER,
    CODI_PAIS VARCHAR(12) CHARACTER SET NONE,
    NOMB_PAIS VARCHAR(60) CHARACTER SET NONE,
    CONS_DEPARTAMENTO INTEGER,
    CODI_DEPARTAMENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_DEPARTAMENTO VARCHAR(60) CHARACTER SET NONE,
    CONS_CIUDAD INTEGER,
    CODI_CIUDAD VARCHAR(12) CHARACTER SET NONE,
    NOMB_CIUDAD VARCHAR(60) CHARACTER SET NONE,
    DIRECCION VARCHAR(240) CHARACTER SET NONE,
    TELE_RESIDENCIA VARCHAR(20) CHARACTER SET NONE,
    TELE_OTRO VARCHAR(20) CHARACTER SET NONE,
    TELE_MOVIL VARCHAR(20) CHARACTER SET NONE,
    OCUPACION VARCHAR(60) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    DIRE_EMPRESA VARCHAR(240) CHARACTER SET NONE,
    TELE_EMPRESA VARCHAR(20) CHARACTER SET NONE,
    CORR_ELECTRONICO VARCHAR(120) CHARACTER SET NONE,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_GENE_FECH_COMPLETO (PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    NOMBRES VARCHAR(40) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CARGO INTEGER,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CENT_COSTO INTEGER,
    NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
    CONS_COST_GRUPO INTEGER,
    NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_PAIS INTEGER,
    CODI_PAIS VARCHAR(12) CHARACTER SET NONE,
    NOMB_PAIS VARCHAR(60) CHARACTER SET NONE,
    CONS_DEPARTAMENTO INTEGER,
    CODI_DEPARTAMENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_DEPARTAMENTO VARCHAR(60) CHARACTER SET NONE,
    CONS_CIUDAD INTEGER,
    CODI_CIUDAD VARCHAR(12) CHARACTER SET NONE,
    NOMB_CIUDAD VARCHAR(60) CHARACTER SET NONE,
    DIRECCION VARCHAR(60) CHARACTER SET NONE,
    TELE_RESIDENCIA VARCHAR(30) CHARACTER SET NONE,
    TELE_OTRO VARCHAR(30) CHARACTER SET NONE,
    TELE_MOVIL VARCHAR(30) CHARACTER SET NONE,
    FECH_NACIMIENTO TIMESTAMP,
    MES_NACIMIENTO VARCHAR(15) CHARACTER SET NONE,
    EDAD INTEGER,
    CONS_PAIS_NACIMIENTO INTEGER,
    CODI_PAIS_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_PAIS_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
    CONS_DEPA_NACIMIENTO INTEGER,
    CODI_DEPA_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_DEPA_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
    CONS_CIUD_NACIMIENTO INTEGER,
    CODI_CIUD_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_CIUD_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
    NOMB_PERS_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
    NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    FECH_EXPE_DOCUMENTO TIMESTAMP,
    LUGA_EXPE_DOCUMENTO VARCHAR(30) CHARACTER SET NONE,
    NUME_PASAPORTE VARCHAR(12) CHARACTER SET NONE,
    FECH_EXPE_PASAPORTE TIMESTAMP,
    LUGA_EXPE_PASAPORTE VARCHAR(30) CHARACTER SET NONE,
    FECH_VENC_PASAPORTE TIMESTAMP,
    NUME_LIBR_MILITAR VARCHAR(30) CHARACTER SET NONE,
    FECH_EXPE_LIBR_MILITAR TIMESTAMP,
    NUME_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
    FECH_EXPE_CONDUCCION TIMESTAMP,
    LUGA_EXPE_CONDUCCION VARCHAR(30) CHARACTER SET NONE,
    FECH_VENC_CONDUCCION TIMESTAMP,
    CATE_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
    NUME_SEGU_SOCIAL VARCHAR(12) CHARACTER SET NONE,
    NUME_HIJOS INTEGER,
    NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
    NOMB_ESTA_CIVIL VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_GENE_UNIDAD (PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PAIS INTEGER,
CODI_PAIS VARCHAR(12) CHARACTER SET NONE,
NOMB_PAIS VARCHAR(60) CHARACTER SET NONE,
CONS_DEPARTAMENTO INTEGER,
CODI_DEPARTAMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_DEPARTAMENTO VARCHAR(60) CHARACTER SET NONE,
CONS_CIUDAD INTEGER,
CODI_CIUDAD VARCHAR(12) CHARACTER SET NONE,
NOMB_CIUDAD VARCHAR(60) CHARACTER SET NONE,
DIRECCION VARCHAR(60) CHARACTER SET NONE,
TELE_RESIDENCIA VARCHAR(30) CHARACTER SET NONE,
TELE_OTRO VARCHAR(30) CHARACTER SET NONE,
TELE_MOVIL VARCHAR(30) CHARACTER SET NONE,
FECH_NACIMIENTO TIMESTAMP,
MES_NACIMIENTO VARCHAR(15) CHARACTER SET NONE,
EDAD INTEGER,
CONS_PAIS_NACIMIENTO INTEGER,
CODI_PAIS_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PAIS_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_DEPA_NACIMIENTO INTEGER,
CODI_DEPA_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_DEPA_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_CIUD_NACIMIENTO INTEGER,
CODI_CIUD_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_CIUD_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_DOCUMENTO TIMESTAMP,
LUGA_EXPE_DOCUMENTO VARCHAR(30) CHARACTER SET NONE,
NUME_PASAPORTE VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_PASAPORTE TIMESTAMP,
LUGA_EXPE_PASAPORTE VARCHAR(30) CHARACTER SET NONE,
FECH_VENC_PASAPORTE TIMESTAMP,
NUME_LIBR_MILITAR VARCHAR(30) CHARACTER SET NONE,
FECH_EXPE_LIBR_MILITAR TIMESTAMP,
NUME_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_CONDUCCION TIMESTAMP,
LUGA_EXPE_CONDUCCION VARCHAR(30) CHARACTER SET NONE,
FECH_VENC_CONDUCCION TIMESTAMP,
CATE_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
NUME_SEGU_SOCIAL VARCHAR(12) CHARACTER SET NONE,
NUME_HIJOS INTEGER,
NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
NOMB_ESTA_CIVIL VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_HIST_MOVIMIENTOS (PE_CONS_PERSONAL INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_PERS_MOVIMIENTO INTEGER,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
ES_ANULADO INTEGER,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER,
CODI_FAMI_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_FAMI_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_ESTADO INTEGER,
CODI_ESTADO VARCHAR(12) CHARACTER SET NONE,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_MOVI_TIPO_DOCUMENTO INTEGER,
CODI_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
CONS_SOLICITA INTEGER,
CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
CONS_APROBO INTEGER,
CODI_APROBO VARCHAR(12) CHARACTER SET NONE,
NOMB_APROBO VARCHAR(102) CHARACTER SET NONE,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_INFO_GENERAL RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(20) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(20) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO VARCHAR(20) CHARACTER SET NONE,
CONS_PERS_MOVIMIENTO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
DIAS_VENC_CONTRATO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_INFO_GENE_ACTIVOS RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
APELLIDOS VARCHAR(62) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO VARCHAR(20) CHARACTER SET NONE,
CONS_PERS_MOVIMIENTO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
TIEMPO VARCHAR(12) CHARACTER SET NONE,
TIEM_FECHA TIMESTAMP,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
DIAS_VENC_CONTRATO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_INFO_GENE_UNIDAD (PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(20) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(20) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO VARCHAR(20) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_INFO_HISTORIAL RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
APELLIDOS VARCHAR(61) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
ANTIGUEDAD INTEGER,
ULTI_SALARIO INTEGER,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
DURACION INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
IMAGEN BLOB)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_MOVIMIENTO RETURNS (
	CONS_PERS_MOVIMIENTO INTEGER,
CONS_PERSONAL INTEGER,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_PERS_MOVI_TIPO_DOCUMENTO INTEGER,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
CONS_SOLICITA INTEGER,
CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
CONS_APROBO INTEGER,
CODI_APROBO VARCHAR(12) CHARACTER SET NONE,
NOMB_APROBO VARCHAR(102) CHARACTER SET NONE,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
CODI_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_MOVI_APROBAR (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_MOVI_SOLICITAR (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_NUME_OPERARIOS (PE_FECHA TIMESTAMP,
PE_CONS_EMPRESA INTEGER,
PE_CONS_PLANTA INTEGER,
PE_CONS_PLAN_LINEA INTEGER,
PE_CONS_LINE_SECCION INTEGER,
PE_CONS_TURNO INTEGER)
RETURNS (
	NUME_OPERARIOS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_TIEM_CONTRATACION (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
TIEM_FECHA TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBICACION RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBICA_UNIDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERS_MOVIMIENTO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_ACTIVO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_ACTI_FOTO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
IMAGEN BLOB,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_FECHA (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CONS_PERS_CARGO INTEGER,
CONS_PERS_CENT_COSTO INTEGER,
CONS_COST_GRUPO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_FECH_COMPLETO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_FECH_COMPL_UN (PE_FECHA TIMESTAMP,
PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_FECH_UNIDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CONS_PERS_CARGO INTEGER,
CONS_PERS_CENT_COSTO INTEGER,
CONS_COST_GRUPO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_INACTIVO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_PERS_UBIC_PERSONAL RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
APELLIDOS VARCHAR(62) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER,
CODI_FAMI_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_FAMI_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO INTEGER,
NOMB_TURNO VARCHAR(30) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_EN_BAJA RETURNS (
	CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(102) CHARACTER SET NONE,
CONS_RECU_TIPO_MOVIMIENTO INTEGER,
NOMB_RECU_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_ESTADO (PE_CONS_RECURSO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_ESTADO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MOVIMIENTO INTEGER,
CONS_RECU_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_INFO_GENERAL RETURNS (
	CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
CONS_RECU_GRUPO INTEGER,
CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO INTEGER,
CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
CLASE VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
ANTIGUEDAD INTEGER,
CONS_TIPO_DOCUMENTO INTEGER,
CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_INFO_PLANTAS RETURNS (
	CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
CANTIDAD INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_INFO_TRASLADOS RETURNS (
	CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
CONS_RECU_GRUPO INTEGER,
CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO INTEGER,
CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_INFO_TRAS_UBIC (PE_CONS_RECURSO INTEGER)
RETURNS (
	FECH_INICIAL TIMESTAMP,
CONS_RECU_TIPO_MOVIMIENTO INTEGER,
CODI_RECU_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_MOVIMIENTO RETURNS (
	CONS_RECU_MOVIMIENTO INTEGER,
CONS_RECU_TIPO_MOVIMIENTO INTEGER,
CONS_TIPO_DOCUMENTO INTEGER,
CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
CONS_SOLICITA INTEGER,
CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
CONS_ENTREGA INTEGER,
CODI_ENTREGA VARCHAR(12) CHARACTER SET NONE,
NOMB_ENTREGA VARCHAR(102) CHARACTER SET NONE,
CONS_RECIBE INTEGER,
CODI_RECIBE VARCHAR(12) CHARACTER SET NONE,
NOMB_RECIBE VARCHAR(102) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE,
CONS_RECU_GRUPO INTEGER,
CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO INTEGER,
CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
IMAGEN BLOB,
DETA_IMAGEN BLOB,
CLASE VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_TIEM_ANTIGUEDAD (PE_CONS_RECURSO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
TIEM_FECHA TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_UBICACION (PE_CONS_RECU_MOVIMIENTO INTEGER)
RETURNS (
	CONS_RECU_MOVIMIENTO INTEGER,
CONS_RECURSO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_RECU_UBIC_UNIDAD (PE_CONS_RECURSO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_RECU_MOVIMIENTO INTEGER,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_RECURSO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_REFERENCIAS RETURNS (
	CONS_REFERENCIA INTEGER,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
MOLDE VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CODI_BARRAS VARCHAR(30) CHARACTER SET NONE,
CONS_REFE_VARIACION INTEGER,
CONS_REFE_TIPO_VARIACION INTEGER,
CODI_REFE_TIPO_VARIACION VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_TIPO_VARIACION VARCHAR(30) CHARACTER SET NONE,
CONS_REFE_MARCA INTEGER,
CODI_REFE_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_LINEA INTEGER,
CODI_REFE_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_EDAD INTEGER,
CODI_REFE_EDAD VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_ESTILO INTEGER,
CODI_REFE_ESTILO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_GRUPO INTEGER,
CODI_REFE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_SEXO INTEGER,
CODI_SEXO VARCHAR(12) CHARACTER SET NONE,
NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_LAVADO INTEGER,
CODI_REFE_LAVADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_LAVADO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_BORDADO INTEGER,
CODI_REFE_BORDADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_BORDADO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_ESTAMPADO INTEGER,
CODI_REFE_ESTAMPADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTAMPADO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_ESTADO INTEGER,
CODI_REFE_ESTADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTADO VARCHAR(60) CHARACTER SET NONE,
GRUP_TALLAS VARCHAR(100) CHARACTER SET NONE,
IMAGEN BLOB,
DESCRIPCION VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_REFE_UNIDAD (PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	CONS_REFERENCIA INTEGER,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
MOLDE VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CODI_BARRAS VARCHAR(30) CHARACTER SET NONE,
CONS_REFE_VARIACION INTEGER,
CONS_REFE_TIPO_VARIACION INTEGER,
CODI_REFE_TIPO_VARIACION VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_TIPO_VARIACION VARCHAR(30) CHARACTER SET NONE,
CONS_REFE_MARCA INTEGER,
CODI_REFE_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_LINEA INTEGER,
CODI_REFE_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_EDAD INTEGER,
CODI_REFE_EDAD VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_ESTILO INTEGER,
CODI_REFE_ESTILO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_GRUPO INTEGER,
CODI_REFE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_SEXO INTEGER,
CODI_SEXO VARCHAR(12) CHARACTER SET NONE,
NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_LAVADO INTEGER,
CODI_REFE_LAVADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_LAVADO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_BORDADO INTEGER,
CODI_REFE_BORDADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_BORDADO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_ESTAMPADO INTEGER,
CODI_REFE_ESTAMPADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTAMPADO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_ESTADO INTEGER,
CODI_REFE_ESTADO VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_TEMPORADA INTEGER,
CODI_REFE_TEMPORADA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_TEMPORADA VARCHAR(60) CHARACTER SET NONE,
GRUP_TALLAS VARCHAR(100) CHARACTER SET NONE,
IMAGEN BLOB,
DESCRIPCION VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_GLO_TALL_GRUPO (CONS_GRUP_TALLAS INTEGER)
RETURNS (
	TALLAS VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_COMP_VARI_ARBOL RETURNS (
	CONS_CONSULTA INTEGER,
PADR_CONSULTA INTEGER,
CONS_COMP_GRUPO INTEGER,
CONS_COMP_VARIACION VARCHAR(120) CHARACTER SET NONE,
NOMB_COMP_VARIACION VARCHAR(120) CHARACTER SET NONE,
IMAGEN BLOB,
INDE_IMAGEN INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_DIARIAS (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
TIPO_REGISTRO INTEGER,
CONS_CONT_NOVE_DIARIA INTEGER,
NUME_LECTURA INTEGER,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
MINU_CONTRATADOS INTEGER,
MINU_AUSENTISMOS INTEGER,
MINU_EXTRAS INTEGER,
MINU_PRESENCIALES INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
MINU_TRABAJADOS INTEGER,
MINU_TIQU_CORTE NUMERIC(15, 5),
MINU_TIQU_FABRICACION NUMERIC(15, 5),
MINU_ABONADOS NUMERIC(15, 5),
MINU_OBTENIDOS NUMERIC(15, 5),
INDI_1 NUMERIC(15, 5),
INDI_2 NUMERIC(15, 5),
INDI_3 NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_DIAR_EFIC_IN (PE_CONS_PERSONAL INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	FECH_LECTURA TIMESTAMP,
MINU_CONTRATADOS INTEGER,
MINU_TRAB_ESTANDAR INTEGER,
MINU_TRAB_NO_ESTANDAR INTEGER,
MINU_TRAB_CURVA INTEGER,
MINU_TRABAJADOS INTEGER,
MINU_EXTR_ESTANDAR INTEGER,
MINU_EXTR_NO_ESTANDAR INTEGER,
MINU_EXTRAS INTEGER,
MINU_AUSE_ESTANDAR INTEGER,
MINU_AUSE_NO_ESTANDAR INTEGER,
MINU_AUSENTISMOS INTEGER,
MINU_IMPR_ESTANDAR INTEGER,
MINU_IMPR_NO_ESTANDAR INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
MINU_PROD_ESTANDAR NUMERIC(15, 3),
MINU_PROD_CORTE NUMERIC(15, 3),
MINU_PROD_FABRICACION NUMERIC(15, 3),
MINU_PROD_NO_ESTANDAR NUMERIC(15, 3),
MINU_PROD_CURVA NUMERIC(15, 3),
MINU_PRODUCIDOS NUMERIC(15, 3),
INDI_1_ESTANDAR NUMERIC(15, 3),
INDI_2_ESTANDAR NUMERIC(15, 3),
INDI_3_ESTANDAR NUMERIC(15, 3),
INDI_1_NO_ESTANDAR NUMERIC(15, 3),
INDI_2_NO_ESTANDAR NUMERIC(15, 3),
INDI_3_NO_ESTANDAR NUMERIC(15, 3),
INDI_1_TOTAL NUMERIC(15, 3),
INDI_2_TOTAL NUMERIC(15, 3),
INDI_3_TOTAL NUMERIC(15, 3))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_DIAR_PAGO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
TIPO_REGISTRO INTEGER,
CONS_CONT_NOVE_DIARIA INTEGER,
NUME_LECTURA INTEGER,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
MINU_CONTRATADOS INTEGER,
MINU_AUSENTISMOS INTEGER,
MINU_EXTRAS INTEGER,
MINU_PRESENCIALES INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
MINU_TRABAJADOS INTEGER,
MINU_TIQU_CORTE NUMERIC(15, 5),
MINU_TIQU_FABRICACION NUMERIC(15, 5),
MINU_ABONADOS NUMERIC(15, 5),
MINU_OBTENIDOS NUMERIC(15, 5),
INDI_1 NUMERIC(15, 5),
INDI_2 NUMERIC(15, 5),
INDI_3 NUMERIC(15, 5),
CONS_FORM_PAGO INTEGER,
NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
CODI_FORM_PAGO VARCHAR(12) CHARACTER SET NONE,
VALO_HORA_PRODUCCION NUMERIC(15, 5),
VALO_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_GANA_PRODUCCION NUMERIC(15, 5),
VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
VALO_BONO_PRODUCCION NUMERIC(15, 5),
VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_DIAR_PAGO_RA (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
TIPO_REGISTRO INTEGER,
CONS_CONT_NOVE_DIARIA INTEGER,
NUME_LECTURA INTEGER,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
MINU_CONTRATADOS INTEGER,
MINU_AUSENTISMOS INTEGER,
MINU_EXTRAS INTEGER,
MINU_PRESENCIALES INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
MINU_TRABAJADOS INTEGER,
MINU_TIQU_CORTE NUMERIC(15, 5),
MINU_TIQU_FABRICACION NUMERIC(15, 5),
MINU_ABONADOS NUMERIC(15, 5),
MINU_OBTENIDOS NUMERIC(15, 5),
INDI_1 NUMERIC(15, 5),
INDI_2 NUMERIC(15, 5),
INDI_3 NUMERIC(15, 5),
CONS_FORM_PAGO INTEGER,
NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
CODI_FORM_PAGO VARCHAR(12) CHARACTER SET NONE,
VALO_HORA_PRODUCCION NUMERIC(15, 5),
VALO_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_GANA_PRODUCCION NUMERIC(15, 5),
VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
VALO_BONO_PRODUCCION NUMERIC(15, 5),
VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_EFIC_PROM_UN (PE_CONS_PERSONAL INTEGER,
PE_FECH_LECTURA TIMESTAMP)
RETURNS (
	EFIC_PROMEDIO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_IMPRODUCTIVOS (PE_CONS_CONT_NOVE_DIARIA INTEGER)
RETURNS (
	CONS_CONT_NOVE_IMPRODUCTIVO INTEGER,
CONS_IMPRODUCTIVO INTEGER,
CODI_IMPRODUCTIVO VARCHAR(12) CHARACTER SET NONE,
CONS_IMPR_FAMILIA INTEGER,
NOMB_IMPRODUCTIVO VARCHAR(60) CHARACTER SET NONE,
CONS_SUB_IMPRODUCTIVO INTEGER,
CODI_SUB_IMPRODUCTIVO VARCHAR(12) CHARACTER SET NONE,
NOMB_SUB_IMPRODUCTIVO VARCHAR(60) CHARACTER SET NONE,
CONS_PROD_ORDEN INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
CODI_IMPR_FAMILIA VARCHAR(12) CHARACTER SET NONE,
CONS_RECURSO INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
VALO_HORA NUMERIC(15, 5),
VALO_MINIMO NUMERIC(15, 5),
ESTANDAR INTEGER,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_PAGO_RANG_CO (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
MINU_CONTRATADOS INTEGER,
MINU_AUSENTISMOS INTEGER,
MINU_EXTRAS INTEGER,
MINU_PRESENCIALES INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
MINU_TRABAJADOS INTEGER,
MINU_TIQU_CORTE NUMERIC(15, 5),
MINU_TIQU_FABRICACION NUMERIC(15, 5),
MINU_ABONADOS NUMERIC(15, 5),
MINU_OBTENIDOS NUMERIC(15, 5),
INDI_1 NUMERIC(15, 5),
INDI_2 NUMERIC(15, 5),
INDI_3 NUMERIC(15, 5),
VALO_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_GANA_PRODUCCION NUMERIC(15, 5),
VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
VALO_BONO_PRODUCCION NUMERIC(15, 5),
VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_PAGO_RANG_RE (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
MINU_CONTRATADOS INTEGER,
MINU_AUSENTISMOS INTEGER,
MINU_EXTRAS INTEGER,
MINU_PRESENCIALES INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
MINU_TRABAJADOS INTEGER,
MINU_TIQU_CORTE NUMERIC(15, 5),
MINU_TIQU_FABRICACION NUMERIC(15, 5),
MINU_ABONADOS NUMERIC(15, 5),
MINU_OBTENIDOS NUMERIC(15, 5),
INDI_1 NUMERIC(15, 5),
INDI_2 NUMERIC(15, 5),
INDI_3 NUMERIC(15, 5),
VALO_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_GANA_PRODUCCION NUMERIC(15, 5),
VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
VALO_BONO_PRODUCCION NUMERIC(15, 5),
VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_NOVE_VALO_HORA_UN (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP,
PE_CONS_VALO_HORA INTEGER)
RETURNS (
	VALO_HORA NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_CONT_REPO_PAGO_BRUTO (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_EN_HORAS INTEGER)
RETURNS (
	FECHA TIMESTAMP,
CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
REPORTA INTEGER,
TIEM_TRAB_ESTANDAR NUMERIC(15, 5),
TIEM_TRAB_NO_ESTANDAR NUMERIC(15, 5),
TIEM_TRAB_TOTAL NUMERIC(15, 5),
TIEM_PROD_ESTANDAR NUMERIC(15, 5),
TIEM_PROD_NO_ESTANDAR NUMERIC(15, 5),
TIEM_PROD_TOTAL NUMERIC(15, 5),
EFIC_ESTANDAR NUMERIC(15, 5),
EFIC_NO_ESTANDAR NUMERIC(15, 5),
EFIC_TOTAL NUMERIC(15, 5),
VALO_GANA_PROD_ESTANDAR NUMERIC(15, 5),
VALO_GANA_PROD_NO_ESTANDAR NUMERIC(15, 5),
VALO_GANA_PROD_TOTAL NUMERIC(15, 5),
VALO_AJUS_MINI_ESTANDAR NUMERIC(15, 5),
VALO_AJUS_MINI_NO_ESTANDAR NUMERIC(15, 5),
VALO_AJUS_MINI_TOTAL NUMERIC(15, 5),
VALO_BONO_PROD_ESTANDAR NUMERIC(15, 5),
VALO_BONO_PROD_NO_ESTANDAR NUMERIC(15, 5),
VALO_BONO_PROD_TOTAL NUMERIC(15, 5),
TIEM_EXTR_ESTANDAR NUMERIC(15, 5),
TIEM_EXTR_NO_ESTANDAR NUMERIC(15, 5),
TIEM_EXTR_TOTAL NUMERIC(15, 5),
VALO_BONO_EXTR_ESTANDAR NUMERIC(15, 5),
VALO_BONO_EXTR_NO_ESTANDAR NUMERIC(15, 5),
VALO_BONO_EXTR_TOTAL NUMERIC(15, 5),
VALO_DEVE_ESTANDAR NUMERIC(15, 5),
VALO_DEVE_NO_ESTANDAR NUMERIC(15, 5),
VALO_DEVE_TOTAL NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_FORM_PAGO_BONOS RETURNS (
	CONS_FORM_PAGO_BONO INTEGER,
CODI_FORM_PAGO_BONO VARCHAR(12) CHARACTER SET NONE,
NOMB_FORM_PAGO_BONO VARCHAR(60) CHARACTER SET NONE,
INDICADOR INTEGER,
NOMB_INDICADOR VARCHAR(60) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
ES_PORCENTUAL INTEGER,
VALO_BONIFICACION NUMERIC(15, 5),
META_EFICIENCIA NUMERIC(15, 5),
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_FORM_PAGO_BONO_PERSONAL (PE_CONS_PERSONAL INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_FORM_PAGO_BONO_PERSONAL INTEGER,
FECH_INICIAL TIMESTAMP,
CONS_FORM_PAGO_BONO INTEGER,
CODI_FORM_PAGO_BONO VARCHAR(12) CHARACTER SET NONE,
NOMB_FORM_PAGO_BONO VARCHAR(60) CHARACTER SET NONE,
INDICADOR INTEGER,
NOMB_INDICADOR VARCHAR(60) CHARACTER SET NONE,
ES_PORCENTUAL INTEGER,
VALO_BONIFICACION NUMERIC(15, 5),
META_EFICIENCIA NUMERIC(15, 5),
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_FORM_PAGO_DIAS_CALC_PR RETURNS (
	DIAS_CALC_PROMEDIOS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_FORM_PAGO_PERSONAL (PE_CONS_PERSONAL INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_FORM_PAGO_PERSONAL INTEGER,
FECH_INICIAL TIMESTAMP,
VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
CONS_SIS_FORM_PAGO INTEGER,
NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
PARA_1 VARCHAR(60) CHARACTER SET NONE,
PARA_2 VARCHAR(60) CHARACTER SET NONE,
PARA_3 VARCHAR(60) CHARACTER SET NONE,
CONS_FORM_PAGO_APRENDIZAJE INTEGER,
CODI_FORM_PAGO_APRENDIZAJE VARCHAR(12) CHARACTER SET NONE,
NOMB_FORM_PAGO_APRENDIZAJE VARCHAR(60) CHARACTER SET NONE,
FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
CONS_OPER_COSTURA INTEGER,
CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
NOMB_OPER_COSTURA VARCHAR(30) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_FORM_PAGO_PERS_FECHA (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
CONS_SIS_FORM_PAGO INTEGER,
NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
PARA_1 VARCHAR(60) CHARACTER SET NONE,
PARA_2 VARCHAR(60) CHARACTER SET NONE,
PARA_3 VARCHAR(60) CHARACTER SET NONE,
CONS_FORM_PAGO_APRENDIZAJE INTEGER,
FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
CONS_OPER_COSTURA INTEGER,
CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
NOMB_OPER_COSTURA VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_FORM_PAGO_PERS_FECH_UN (PE_FECHA TIMESTAMP,
PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PERSONAL INTEGER,
VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
CONS_SIS_FORM_PAGO INTEGER,
NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
PARA_1 VARCHAR(60) CHARACTER SET NONE,
PARA_2 VARCHAR(60) CHARACTER SET NONE,
PARA_3 VARCHAR(60) CHARACTER SET NONE,
CONS_FORM_PAGO_APRENDIZAJE INTEGER,
FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
CONS_OPER_COSTURA INTEGER,
CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
NOMB_OPER_COSTURA VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_HORA_CURVA (PE_CONS_PERSONAL INTEGER,
PE_FECH_INICIO TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	HORA_PRODUCIDA NUMERIC(15, 5),
HORA_TRABAJADA NUMERIC(15, 5),
HORA_PROD_ESTANDAR NUMERIC(15, 5),
MINU_CONTRATADOS NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_HORA_EXTRA (PE_CANTIDAD NUMERIC(15, 5),
PE_TIPO INTEGER)
RETURNS (
	PORCENTAJE NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_METO_LIST_OPER_CORT_R (PE_CONS_REFE_VARIACION INTEGER,
PE_CONS_REFE_MATERIAL INTEGER)
RETURNS (
	CONS_PROCESO INTEGER,
CODI_PROCESO VARCHAR(12) CHARACTER SET NONE,
NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
TIEM_PROCESO NUMERIC(15, 5),
COST_MINUTO NUMERIC(15, 5),
COST_PROCESO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_METO_OPER_COST_DEPE_0 (PE_VALOR INTEGER)
RETURNS (
	CONS_CONSULTA INTEGER,
PADR_CONSULTA INTEGER,
CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
INDE_IMAGEN INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_METO_OPER_COST_DEPE_1 (PE_VALOR INTEGER)
RETURNS (
	CONS_CONSULTA INTEGER,
PADR_CONSULTA INTEGER,
CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
INDE_IMAGEN INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_OPCI_INDICADORES RETURNS (
	CONS_INDICADOR INTEGER,
NOMB_INDICADOR VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_EXPL_COMPLETO (PE_CONS_PEDIDO INTEGER)
RETURNS (
	TIPO INTEGER,
CONS_PEDI_REFERENCIA INTEGER,
NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_EXPL_INSUMOS (PE_CONS_PEDIDO INTEGER,
PE_ES_FABRICACION INTEGER)
RETURNS (
	CONS_PEDI_REFERENCIA INTEGER,
NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
CONS_REFE_INSUMO INTEGER,
CONS_INSU_REFERENCIA INTEGER,
CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_GRUPO INTEGER,
CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_SUBGRUPO INTEGER,
CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_FABRICACION INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_EXPL_MATERIALES (PE_CONS_PEDIDO INTEGER,
PE_ES_PRINCIPAL INTEGER)
RETURNS (
	CONS_PEDI_REFERENCIA INTEGER,
NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD NUMERIC(15, 5),
REQUERIMIENTO NUMERIC(15, 5),
CONS_TOTAL NUMERIC(15, 5),
COST_UNIDAD NUMERIC(15, 5),
COST_TOTAL NUMERIC(15, 5),
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE NUMERIC(15, 5),
DISPONIBLE NUMERIC(15, 5),
ENTREGADO NUMERIC(15, 5),
DIFERENCIA NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_REFE_EXPL_COMPLETO (PE_CONS_PEDI_REFERENCIA INTEGER)
RETURNS (
	TIPO INTEGER,
CONS_PEDIDO INTEGER,
CONS_PEDI_REFERENCIA INTEGER,
NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_REFE_EXPL_COMP_FI RETURNS (
	TIPO INTEGER,
CONS_PEDIDO INTEGER,
CONS_PEDI_REFERENCIA INTEGER,
NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_REFE_EXPL_FILT_MA RETURNS (
	TIPO INTEGER,
CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_REFE_EXPL_FILT_PEM RETURNS (
	TIPO INTEGER,
CONS_PEDIDO INTEGER,
CONS_PEDI_REFERENCIA INTEGER,
NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_REFE_EXPL_INSUMOS (PE_CONS_PEDI_REFERENCIA INTEGER,
PE_ES_FABRICACION INTEGER)
RETURNS (
	CONS_REFE_INSUMO INTEGER,
CONS_INSU_REFERENCIA INTEGER,
CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_GRUPO INTEGER,
CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_SUBGRUPO INTEGER,
CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_FABRICACION INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_REFE_EXPL_MATE (PE_CONS_PEDI_REFERENCIA INTEGER,
PE_ES_PRINCIPAL INTEGER)
RETURNS (
	CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_SUMA_UNIDADES (PE_CONS_PEDIDO INTEGER,
PE_CONS_PEDI_REFERENCIA INTEGER)
RETURNS (
	UNIDADES INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PEDI_UNID_COLOR (PE_CONS_PEDI_REFERENCIA INTEGER,
PE_CONS_REFE_COLOR INTEGER)
RETURNS (
	CONS_GRUP_TALL_DETALLE INTEGER,
TALLA VARCHAR(12) CHARACTER SET NONE,
UNIDADES INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PERMISOS (PE_USUARIO VARCHAR(20) CHARACTER SET NONE,
PE_GRUPO VARCHAR(20) CHARACTER SET NONE)
RETURNS (
	USUARIO VARCHAR(20) CHARACTER SET NONE,
MENU VARCHAR(50) CHARACTER SET NONE,
ESCRITURA INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PERS_CURVA RETURNS (
	CONS_FORM_PAGO_PERSONAL INTEGER,
CONS_PERSONAL INTEGER,
FECH_INICIAL TIMESTAMP,
VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
CONS_SIS_FORM_PAGO INTEGER,
NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
PARA_1 VARCHAR(60) CHARACTER SET NONE,
PARA_2 VARCHAR(60) CHARACTER SET NONE,
PARA_3 VARCHAR(60) CHARACTER SET NONE,
CONS_FORM_PAGO_APRENDIZAJE INTEGER,
CODI_FORM_PAGO_APRENDIZAJE VARCHAR(12) CHARACTER SET NONE,
NOMB_FORM_PAGO_APRENDIZAJE VARCHAR(60) CHARACTER SET NONE,
FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
EFIC_INICIAL NUMERIC(15, 5),
EFIC_FINAL NUMERIC(15, 5),
EFIC_PRIM_DIA NUMERIC(15, 5),
VALO_BONO_INICIAL NUMERIC(15, 5),
VALO_BONO_FINAL NUMERIC(15, 5),
VALO_BONO_PRIM_DIA NUMERIC(15, 5),
CONS_OPER_COSTURA INTEGER,
CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
NOMB_OPER_COSTURA VARCHAR(30) CHARACTER SET NONE,
NUME_DIAS_SEMANA INTEGER,
NUME_SEMANAS INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
ES_PORCENTUAL INTEGER,
CONS_TURNO INTEGER,
PAGO_DIARIO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PLAN_DIAS_NO_LABO_LINE (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_CONS_EMPRESA INTEGER,
PE_CONS_PLANTA INTEGER,
PE_CONS_LINEA INTEGER)
RETURNS (
	FECHA TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PLAN_DIAS_NO_LABO_PLAN (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_CONS_EMPRESA INTEGER,
PE_CONS_PLANTA INTEGER)
RETURNS (
	FECHA TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PLAN_DIAS_NO_LABO_SECC (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_CONS_EMPRESA INTEGER,
PE_CONS_PLANTA INTEGER,
PE_CONS_LINEA INTEGER,
PE_CONS_SECCION INTEGER)
RETURNS (
	FECHA TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROCESOS RETURNS (
	CONS_CONSULTA INTEGER,
CONS_PROCESO INTEGER,
CODI_PROCESO VARCHAR(12) CHARACTER SET NONE,
NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
REGI_SISTEMA INTEGER,
CONS_PROC_SIGUIENTE INTEGER,
RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
ANAL_METODOS INTEGER,
CONS_PROD_PAQU_TIPO INTEGER,
CONT_TIQUETES INTEGER,
PLAN_DETALLADA INTEGER,
DURA_ESTIMADA INTEGER,
VALO_DURA_ESTIMADA INTEGER,
CONS_PUNT_CONT_INICIAL INTEGER,
CONS_PUNT_CONT_FINAL INTEGER,
IZQUIERDA INTEGER,
ARRIBA INTEGER,
OBSERVACIONES VARCHAR(250) CHARACTER SET NONE,
SECU_NIVEL INTEGER,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_DATO_BASI_TIQU_C (PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE)
RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
CONS_TIQU_CONTROL INTEGER,
CONS_PROD_ORDEN INTEGER,
CONS_PROD_LOTE INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
NUME_LOTE INTEGER,
NUME_PAQUETE INTEGER,
SECU_OPERACION INTEGER,
CODI_OPERACION VARCHAR(12) CHARACTER SET NONE,
NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
CONS_REFE_MATERIAL INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
NOMB_CORT_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
TIEM_OPERACION NUMERIC(15, 5),
TIEM_TOTAL NUMERIC(15, 5),
NUME_TIQUETES INTEGER,
UNID_POR_TIQUETE INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_DATO_BASI_TIQU_F (PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE)
RETURNS (
	CONS_PROD_PAQU_TIPO INTEGER,
NOMB_PROD_PAQU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_PROD_ORDEN INTEGER,
CONS_PROD_LOTE INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
NUME_LOTE INTEGER,
CONS_PROCESO INTEGER,
NUME_PAQUETE INTEGER,
CONS_GRUP_TALL_DETALLE INTEGER,
CONS_REFE_COLOR INTEGER,
SECU_OPERACION INTEGER,
CODI_OPERACION VARCHAR(12) CHARACTER SET NONE,
NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
TIEM_OPERACION NUMERIC(15, 5),
CANT_UNIDADES INTEGER,
CONS_PUNT_CONTROL INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_DEPE_ETAPAS RETURNS (
	CONS_PROD_ETAP_PCP INTEGER,
NOMB_PROD_ETAP_PCP VARCHAR(60) CHARACTER SET NONE,
CONS_PROD_ETAPA INTEGER,
NOMB_PROD_ETAPA VARCHAR(60) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_EXPL_COMPLETO (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	TIPO INTEGER,
CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD FLOAT,
REQUERIMIENTO FLOAT,
CONS_TOTAL FLOAT,
COST_UNIDAD FLOAT,
COST_TOTAL FLOAT,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE FLOAT,
DISPONIBLE FLOAT,
ENTREGADO FLOAT,
DIFERENCIA FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_EXPL_INSUMOS (PE_CONS_PROD_ORDEN INTEGER,
PE_ES_FABRICACION INTEGER)
RETURNS (
	CONS_REFE_INSUMO INTEGER,
CONS_INSU_REFERENCIA INTEGER,
CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_GRUPO INTEGER,
CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_SUBGRUPO INTEGER,
CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_FABRICACION INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD NUMERIC(15, 5),
REQUERIMIENTO NUMERIC(15, 5),
CONS_TOTAL NUMERIC(15, 5),
COST_UNIDAD NUMERIC(15, 5),
COST_TOTAL NUMERIC(15, 5),
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE NUMERIC(15, 5),
DISPONIBLE NUMERIC(15, 5),
ENTREGADO NUMERIC(15, 5),
DIFERENCIA NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_EXPL_MATERIALES (PE_CONS_PROD_ORDEN INTEGER,
PE_ES_PRINCIPAL INTEGER)
RETURNS (
	CONS_REFE_MATERIAL INTEGER,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
CONS_UNIDAD NUMERIC(15, 5),
REQUERIMIENTO NUMERIC(15, 5),
CONS_TOTAL NUMERIC(15, 5),
COST_UNIDAD NUMERIC(15, 5),
COST_TOTAL NUMERIC(15, 5),
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER,
EXISTENTE NUMERIC(15, 5),
DISPONIBLE NUMERIC(15, 5),
ENTREGADO NUMERIC(15, 5),
DIFERENCIA NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_LOTE_DIST_PAQUETES (PE_CONS_PROD_LOTE INTEGER)
RETURNS (
	NUME_LOTE INTEGER,
CONS_PROD_PAQU_TIPO INTEGER,
NUME_PAQUETE INTEGER,
TALLA VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
NUME_COLOR VARCHAR(12) CHARACTER SET NONE,
CANT_UNIDADES INTEGER,
DESDE INTEGER,
HASTA INTEGER,
CONSECUTIVO VARCHAR(15) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_LOTE_ENCABEZADO (PE_CONS_PROD_LOTE INTEGER)
RETURNS (
	NUME_LOTE INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
UNIDADES INTEGER,
NOMB_CLIENTE VARCHAR(60) CHARACTER SET NONE,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
MOLDE VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_TEMPORADA VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
PEDIDOS VARCHAR(100) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_DIST_PAQUETES (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	NUME_LOTE INTEGER,
CONS_PROD_PAQU_TIPO INTEGER,
NUME_PAQUETE INTEGER,
TALLA VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
NUME_COLOR VARCHAR(12) CHARACTER SET NONE,
CANT_UNIDADES INTEGER,
DESDE INTEGER,
HASTA INTEGER,
CONSECUTIVO VARCHAR(15) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_ENCABEZADO (PE_CONS_PROD_ORDEN INTEGER,
PE_SUMA_UNIDADES INTEGER)
RETURNS (
	NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
UNIDADES INTEGER,
NOMB_CLIENTE VARCHAR(60) CHARACTER SET NONE,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
MOLDE VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_TEMPORADA VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
PEDIDOS VARCHAR(100) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_FECHA (PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_PROD_ORDEN INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
CONS_PROD_LOTE INTEGER,
NUME_LOTE INTEGER,
ANULADA INTEGER,
FINALIZADO INTEGER,
FECH_CREACION TIMESTAMP,
USUA_CREACION VARCHAR(20) CHARACTER SET NONE,
CONS_REFERENCIA INTEGER,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
UNIDADES INTEGER,
CONS_PROC_FINALIZADO INTEGER,
NOMB_PROC_FINALIZADO VARCHAR(60) CHARACTER SET NONE,
NOMB_PROC_ACTUAL VARCHAR(60) CHARACTER SET NONE,
FECH_FINA_PROC_FINALIZADO TIMESTAMP,
FECH_ESTI_PROC_FINALIZADO TIMESTAMP,
FECH_ESTI_FINALIZACION TIMESTAMP,
DIFE_DIAS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_LOTES (PE_CONS_PROD_LOTE INTEGER)
RETURNS (
	CONS_PROC_FINALIZADO INTEGER,
NOMB_PROC_FINALIZADO VARCHAR(60) CHARACTER SET NONE,
NOMB_PROC_ACTUAL VARCHAR(60) CHARACTER SET NONE,
FECH_ESTIMADA TIMESTAMP,
FECH_SISTEMA TIMESTAMP,
DIFE_DIAS INTEGER,
FECH_ESTI_FINALIZACION TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_LOTE_ETAPA (PE_CONS_PROD_ORDEN INTEGER,
PE_ETAPA INTEGER)
RETURNS (
	NUME_LOTE VARCHAR(12) CHARACTER SET NONE,
TEXT_LOTE VARCHAR(12) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_PEDIDOS (PE_CONS_PROD_ORDEN INTEGER,
PE_SEPA_COMAS INTEGER)
RETURNS (
	PEDIDOS VARCHAR(100) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_REFERENCIA (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	CONS_REFERENCIA INTEGER,
CONS_REFE_VARIACION INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_RESPONSABLES (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	CONS_PROD_ORDE_RESPONSABLE INTEGER,
CONS_PROD_LOTE INTEGER,
NUME_LOTE INTEGER,
CONS_PROCESO INTEGER,
NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
USUA_RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
FECH_ESTIMADA TIMESTAMP,
HECHO INTEGER,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
PORC_AVANCE INTEGER,
OBSERVACIONES VARCHAR(1000) CHARACTER SET NONE,
ALARMA INTEGER,
DIFE_DIAS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_RESP_LOTE (PE_CONS_PROD_LOTE INTEGER)
RETURNS (
	CONS_PROD_ORDE_RESPONSABLE INTEGER,
CONS_PROCESO INTEGER,
NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
USUA_RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
FECH_ESTIMADA TIMESTAMP,
HECHO INTEGER,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
PORC_AVANCE INTEGER,
OBSERVACIONES VARCHAR(1000) CHARACTER SET NONE,
ALARMA INTEGER,
DIFE_DIAS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_TERCERO (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	CONS_PROD_ORDEN INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
CONS_PEDIDO INTEGER,
NUME_PEDIDO VARCHAR(20) CHARACTER SET NONE,
CONS_TERCERO INTEGER,
CODI_TERCERO VARCHAR(12) CHARACTER SET NONE,
IDEN_TERCERO VARCHAR(30) CHARACTER SET NONE,
NOMB_TERCERO VARCHAR(120) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_UNIDAD (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	CONS_PROD_ORDEN INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
CONS_PROD_LOTE INTEGER,
NUME_LOTE INTEGER,
ANULADA INTEGER,
FINALIZADO INTEGER,
FECH_CREACION TIMESTAMP,
USUA_CREACION VARCHAR(20) CHARACTER SET NONE,
CONS_REFERENCIA INTEGER,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
UNIDADES INTEGER,
CONS_PROC_FINALIZADO INTEGER,
NOMB_PROC_FINALIZADO VARCHAR(60) CHARACTER SET NONE,
NOMB_PROC_ACTUAL VARCHAR(60) CHARACTER SET NONE,
FECH_FINA_PROC_FINALIZADO TIMESTAMP,
FECH_ESTI_PROC_FINALIZADO TIMESTAMP,
FECH_ESTI_FINALIZACION TIMESTAMP,
DIFE_DIAS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_ORDE_VARIACIONES (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	CONS_REFERENCIA INTEGER,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_VARIACION INTEGER,
CODI_REFE_VARIACION VARCHAR(12) CHARACTER SET NONE,
NOMB_REFE_VARIACION VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_TIEM_LOTE (PE_CONS_PROD_LOTE INTEGER)
RETURNS (
	TIEMPO DOUBLE PRECISION)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_UNID_COLO_ETAPA (PE_CONS_PROD_ORDEN INTEGER,
PE_NUME_LOTE INTEGER,
PE_CONS_REFE_COLOR INTEGER,
PE_ETAP_PCP INTEGER)
RETURNS (
	CONS_GRUP_TALL_DETALLE INTEGER,
TALLA VARCHAR(12) CHARACTER SET NONE,
UNIDADES INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_PROD_UNID_ETAPA (PE_CONS_PROD_ORDEN INTEGER,
PE_NUME_LOTE INTEGER,
PE_ETAP_PCP INTEGER)
RETURNS (
	CONS_REFE_COLOR INTEGER,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
NUME_COLOR VARCHAR(6) CHARACTER SET NONE,
CONS_GRUP_TALL_DETALLE INTEGER,
TALLA VARCHAR(12) CHARACTER SET NONE,
UNIDADES INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_COLO_DEPE_0 (PE_VALOR INTEGER)
RETURNS (
	CONS_CONSULTA INTEGER,
PADR_CONSULTA INTEGER,
CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
INDE_IMAGEN INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_FICH_LIST_REFE (PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	CONS_REFE_TIPO_FICHA INTEGER,
NOMB_REFE_TIPO_FICHA VARCHAR(60) CHARACTER SET NONE,
CANTIDAD INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_FICH_POR_REFE (PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	CONS_REFE_TIPO_FICHA INTEGER,
NOMB_REFE_TIPO_FICHA VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_FICHA INTEGER,
FECH_MODIFICACION TIMESTAMP,
USUA_MODIFICACION VARCHAR(20) CHARACTER SET NONE,
FECH_CREACION TIMESTAMP,
USUA_CREACION VARCHAR(20) CHARACTER SET NONE,
ANULADA INTEGER,
PREDETERMINADA INTEGER,
ES_PADRE INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_INSUMOS (PE_CONS_REFE_VARIACION INTEGER,
PE_ES_FABRICACION INTEGER)
RETURNS (
	CONS_REFE_INSUMO INTEGER,
CONS_INSU_GRUPO INTEGER,
CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_SUBGRUPO INTEGER,
CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_INSU_REFERENCIA INTEGER,
CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
ES_FABRICACION INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONSUMO NUMERIC(15, 5),
COST_ESTIMADO NUMERIC(15, 5),
CONS_MONEDA INTEGER,
SIMB_MONEDA VARCHAR(12) CHARACTER SET NONE,
TALL_PROMEDIO VARCHAR(12) CHARACTER SET NONE,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_INSU_COLO_CONSUMO (PE_CONS_REFE_INSUMO INTEGER,
PE_ASIG_REFERENCIA INTEGER,
PE_CONS_REFE_COLOR INTEGER,
PE_CONS_COLOR INTEGER)
RETURNS (
	CONS_UNIDAD NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_INSU_COLO_TALL (PE_CONS_REFE_INSUMO INTEGER,
PE_ASIG_REFERENCIA INTEGER,
PE_CONS_REFE_COLOR INTEGER,
PE_CONS_COLOR INTEGER,
PE_CONS_GRUP_TALL_DETALLE INTEGER)
RETURNS (
	CONS_UNIDAD NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_INSU_COLO_USADOS (PE_CONS_REFE_INSUMO INTEGER)
RETURNS (
	ASIG_REFERENCIA INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
NUME_COLOR VARCHAR(6) CHARACTER SET NONE,
MUES_COLOR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_MATERIALES (PE_CONS_REFE_VARIACION INTEGER,
PE_ES_PRINCIPAL INTEGER)
RETURNS (
	CONS_REFE_MATERIAL INTEGER,
CONS_MATE_GRUPO INTEGER,
CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_SUBGRUPO INTEGER,
CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_MATE_REFERENCIA INTEGER,
CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
ES_PRINCIPAL INTEGER,
CONS_PROVEEDOR INTEGER,
CODI_PROVEEDOR INTEGER,
NOMB_PROVEEDOR INTEGER,
CONSUMO NUMERIC(15, 5),
COST_ESTIMADO NUMERIC(15, 5),
CONS_MONEDA INTEGER,
SIMB_MONEDA VARCHAR(12) CHARACTER SET NONE,
TALL_PROMEDIO VARCHAR(12) CHARACTER SET NONE,
CONS_UNID_MEDIDA INTEGER,
CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
COMBINACION INTEGER,
TALLAJE INTEGER,
TIEN_OBSERVACIONES INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_MATE_COLO_CONSUMO (PE_CONS_REFE_MATERIAL INTEGER,
PE_ASIG_REFERENCIA INTEGER,
PE_CONS_REFE_COLOR INTEGER,
PE_CONS_COLOR INTEGER)
RETURNS (
	CONS_UNIDAD NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_MATE_COLO_SELE (PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	TIPO_MATERIAL INTEGER,
CONS_REFE_MATERIAL INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLO_COMBINADO INTEGER,
CONSUMO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_MATE_COLO_TALL (PE_CONS_REFE_MATERIAL INTEGER,
PE_ASIG_REFERENCIA INTEGER,
PE_CONS_REFE_COLOR INTEGER,
PE_CONS_COLOR INTEGER,
PE_CONS_GRUP_TALL_DETALLE INTEGER)
RETURNS (
	CONS_UNIDAD NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_MATE_COLO_USADOS (PE_CONS_REFE_MATERIAL INTEGER)
RETURNS (
	ASIG_REFERENCIA INTEGER,
CONS_REFE_COLOR INTEGER,
CONS_COLOR INTEGER,
CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
NUME_COLOR VARCHAR(6) CHARACTER SET NONE,
MUES_COLOR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_MATE_TALL_SELE (PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	TIPO_MATERIAL INTEGER,
CONS_REFE_MATERIAL INTEGER,
CONS_GRUP_TALL_DETALLE INTEGER,
CONSUMO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_REFE_VARI_DEPE_0 (PE_VALOR INTEGER)
RETURNS (
	CONS_CONSULTA INTEGER,
PADR_CONSULTA INTEGER,
CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
INDE_IMAGEN INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCP_SEMA_CURVA (PE_CONS_PERSONAL INTEGER,
PE_FECH_INICIO TIMESTAMP,
PE_NUME_DIAS INTEGER)
RETURNS (
	SEMANA INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PCT_MINU_TURNO (PE_CONS_TURNO INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	MINU_TURNO NUMERIC(15, 2))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_PERM_TABLAS (PE_TABLAS VARCHAR(500) CHARACTER SET NONE,
PE_CANT_TABLAS INTEGER,
PE_TIPO VARCHAR(5) CHARACTER SET NONE)
RETURNS (
	PERMISO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE CON_SIS_TRADUCCION (PE_FRASE VARCHAR(240) CHARACTER SET NONE,
PE_LENGUAJE INTEGER,
PE_LENG_ANTERIOR INTEGER)
RETURNS (
	TRADUCCION VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_GLO_CERO_IZQUIERDA (PE_VALOR INTEGER,
PE_LONGITUD INTEGER)
RETURNS (
	RESULTADO VARCHAR(15) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_GLO_GENE_SECUENCIA (TABLA VARCHAR(50) CHARACTER SET NONE,
CAMPO VARCHAR(50) CHARACTER SET NONE)
RETURNS (
	SECUENCIA INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_GLO_PERM_USUARIO (PE_NOMB_OBJETO VARCHAR(31) CHARACTER SET NONE)
RETURNS (
	S INTEGER,
I INTEGER,
U INTEGER,
D INTEGER,
R INTEGER,
X INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_GLO_PERS_NOMB_TIPO_TURNO (PE_TIPO_TURNO INTEGER)
RETURNS (
	NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_PCP_CONF_OBJETOS_IU (PE_CONS_CONF_OBJETO INTEGER,
PE_TIPO INTEGER,
PE_NOMB_OBJETO VARCHAR(60) CHARACTER SET NONE,
PE_DESC_OBJETO VARCHAR(1000) CHARACTER SET NONE,
PE_MENU_PADRE VARCHAR(240) CHARACTER SET NONE,
PE_NOMB_MENU_PADRE VARCHAR(240) CHARACTER SET NONE,
PE_ESTA_ACTIVO INTEGER,
PE_BASE_DATOS VARCHAR(60) CHARACTER SET NONE,
PE_TEXT_SQL VARCHAR(3000) CHARACTER SET NONE)
RETURNS (
	CONS_CONF_OBJETO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_PCP_PLAN_ES_DIA_HABIL (PE_FECHA TIMESTAMP)
RETURNS (
	RESULTADO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_PCP_PLAN_SIGU_DIA_HABIL (PE_FECHA TIMESTAMP)
RETURNS (
	RESULTADO TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_SIS_USUA_INFORMES_I (PE_CONS_USUA_MODULO INTEGER,
PE_NOMB_USUA_INFORME VARCHAR(60) CHARACTER SET NONE)
RETURNS (
	CONS_USUA_INFORME INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE FUN_SIS_USUA_MODULOS_IU_INFO (PE_MODULO VARCHAR(100) CHARACTER SET NONE)
RETURNS (
	CONS_USUA_MODULO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PAS_DATETOSTR (PEFECHA TIMESTAMP)
RETURNS (
	FECHA VARCHAR(12) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PAS_LENGTH (PE_TEXTO VARCHAR(100) CHARACTER SET NONE)
RETURNS (
	LONGITUD INTEGER,
TEXTO VARCHAR(100) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PAS_POSICION (PE_TEXT_1 VARCHAR(500) CHARACTER SET NONE,
PE_TEXT_2 VARCHAR(500) CHARACTER SET NONE)
RETURNS (
	POSICION INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PCP_PROG_PRODUCCION_U (CONS_PROG_PRODUCCION INTEGER,
CONS_PROD_LOTE INTEGER,
ESTA_PROGRAMADO INTEGER,
FECH_PROGRAMACION TIMESTAMP,
USUA_PROGRAMACION VARCHAR(20) CHARACTER SET NONE,
FECH_EJEC_INICIAL TIMESTAMP,
FRAC_EJEC_INICIAL FLOAT,
FECH_EJEC_FINAL TIMESTAMP,
ES_MOVIL INTEGER,
CONS_EMPRESA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_TURNO INTEGER,
TIPO_AGRUPACION INTEGER,
TIPO_BALANCEO INTEGER,
TIEM_UNIDAD FLOAT,
UNID_LOTE INTEGER,
MINU_CONTRATADOS INTEGER,
MINU_DESCANSO INTEGER,
PERS_DISPONIBLE INTEGER,
PORC_PRESENCIA FLOAT,
PORC_APROVECHAMIENTO FLOAT,
PORC_EFICIENCIA FLOAT,
TIEM_MEDIO FLOAT,
PROD_DIA INTEGER,
PROD_HORA INTEGER,
PAQU_POR_PUESTO INTEGER,
TAMA_PAQUETE INTEGER,
PUES_SIMULTANEOS INTEGER,
TIEM_UNID_REAL FLOAT,
RECO_PRIM_PAQU_MINUTOS FLOAT,
RECO_PRIM_PAQU_DIAS FLOAT,
RECO_ULTI_PAQU_MINUTOS FLOAT,
RECO_ULTI_PAQU_DIAS FLOAT)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_C08_GP_INSUMOS (PE_CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
PE_CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
PE_CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
PE_CODI_UNID_MEDI_PLAN VARCHAR(12) CHARACTER SET NONE,
PE_CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
PE_NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_DESC_BREVE VARCHAR(20) CHARACTER SET NONE,
PE_TIPO_MOVIMIENTO INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_C08_GP_MATERIALES (PE_CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
PE_CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
PE_CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
PE_CODI_UNID_MEDI_PLAN VARCHAR(12) CHARACTER SET NONE,
PE_CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
PE_NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_DESC_BREVE VARCHAR(20) CHARACTER SET NONE,
PE_TIPO_MOVIMIENTO INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_C08_GP_PAITEMS_IU (PAPROJNUMBER VARCHAR(15) CHARACTER SET NONE,
PACOSTCATID VARCHAR(15) CHARACTER SET NONE,
ITEMNMBR VARCHAR(31) CHARACTER SET NONE,
PABASE_QTY FLOAT,
UOFM VARCHAR(9) CHARACTER SET NONE,
OUMSCHDL VARCHAR(11) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_C08_GP_PROD_ITEM_COSTOS (PE_CONS_PROD_ORDEN INTEGER,
PE_PAPROJNUMBER VARCHAR(15) CHARACTER SET NONE,
PE_PACOSTCATID VARCHAR(15) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_C08_GP_PROY_ITEM_COSTOS (PE_CONS_PEDIDO INTEGER,
PE_PAPROJNUMBER VARCHAR(15) CHARACTER SET NONE,
PE_PACOSTCATID VARCHAR(15) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_C08_MIDA_INGRESO AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_ACCE_MODI_BAJAS (PE_CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
PE_CONS_TIPO_DOCUMENTO INTEGER,
PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_CONS_SOLICITA INTEGER,
PE_CONS_ACCESORIO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_ACCE_MODI_TRASLADOS (PE_CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
PE_CONS_ACCESORIO INTEGER,
PE_CONS_TIPO_DOCUMENTO INTEGER,
PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
PE_CONS_SOLICITA INTEGER,
PE_CONS_ENTREGA INTEGER,
PE_CONS_RECIBE INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_CONS_UBIC_TIPO INTEGER,
PE_CONS_EMPRESA INTEGER,
PE_CONS_AREA INTEGER,
PE_CONS_PLANTA INTEGER,
PE_CONS_PLAN_LINEA INTEGER,
PE_CONS_LINE_SECCION INTEGER,
PE_CONS_BODEGA INTEGER,
PE_OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
PE_CONS_RECURSO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_GRUP_TALL_DETA_DUPLICAR (PE_CONS_GRUP_TALLAS_ORIGEN INTEGER,
PE_CONS_GRUP_TALLAS_DESTINO VARCHAR(12) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_GRUP_TALL_DETA_ELIMINAR (PE_CONS_GRUP_TALLAS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_HERR_IMAGENES_IU (CONS_HERR_IMAGEN INTEGER,
CONS_HERR_IMAG_CATEGORIA INTEGER,
CONS_HERR_IMAG_VISTA INTEGER,
NOMB_HERR_IMAGEN VARCHAR(60) CHARACTER SET NONE,
IMAGEN BLOB,
AJUS_IMAGEN INTEGER,
CONS_REFE_ESTILO INTEGER,
CONS_REFE_MARCA INTEGER,
CONS_REFE_TEMPORADA INTEGER,
OBSERVACIONES VARCHAR(5000) CHARACTER SET NONE,
PALA_CLAVES VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_PERS_MODI_BAJAS (PE_CONS_PERS_TIPO_MOVIMIENTO INTEGER,
PE_CONS_PERS_MOVI_TIPO_DOCU INTEGER,
PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_CONS_PERSONAL INTEGER,
PE_CONS_SOLICITA INTEGER,
PE_CONS_APROBO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_PERS_MODI_CONFIDENCIAL (PE_CONS_PERS_MOVI_TIPO_DOCU INTEGER,
PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_CONS_PERSONAL INTEGER,
PE_CONS_PERS_TIPO_CONTRATO INTEGER,
PE_CONS_PERI_PAGO INTEGER,
PE_CONS_PERS_NIVE_SALARIAL INTEGER,
PE_VALO_SALARIO INTEGER,
PE_INCR_SALARIO NUMERIC(15, 3),
PE_INCR_NIVEL INTEGER,
PE_NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
PE_AUXI_TRANSPORTE NUMERIC(15, 3),
PE_AUXI_SALARIAL NUMERIC(15, 3),
PE_DIAS_VENC_CONTRATO INTEGER,
PE_APLI_INCENTIVO INTEGER,
PE_CONS_SOLICITA INTEGER,
PE_CONS_APROBO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_PERS_MODI_TRASLADOS (PE_CONS_PERS_TIPO_MOVIMIENTO INTEGER,
PE_CONS_PERS_MOVI_TIPO_DOCU INTEGER,
PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_CONS_PERSONAL INTEGER,
PE_CONS_UBIC_TIPO INTEGER,
PE_CONS_EMPRESA INTEGER,
PE_CONS_AREA INTEGER,
PE_CONS_PLANTA INTEGER,
PE_CONS_PLAN_LINEA INTEGER,
PE_CONS_LINE_SECCION INTEGER,
PE_CONS_BODEGA INTEGER,
PE_OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
PE_CONS_TURNO INTEGER,
PE_CONS_SOLICITA INTEGER,
PE_CONS_APROBO INTEGER,
PE_CONS_PERS_CARGO INTEGER,
PE_CONS_PERS_CENT_COSTO INTEGER,
PE_CONS_COST_GRUPO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_POST_EVENT (PE_NOMB_EVENTO VARCHAR(50) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_RECU_MODI_BAJAS (PE_CONS_RECU_TIPO_MOVIMIENTO INTEGER,
PE_CONS_TIPO_DOCUMENTO INTEGER,
PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_CONS_SOLICITA INTEGER,
PE_CONS_RECURSO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_RECU_MODI_TRASLADOS (PE_CONS_RECU_TIPO_MOVIMIENTO INTEGER,
PE_CONS_RECURSO INTEGER,
PE_CONS_TIPO_DOCUMENTO INTEGER,
PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
PE_CONS_SOLICITA INTEGER,
PE_CONS_ENTREGA INTEGER,
PE_CONS_RECIBE INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP,
PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
PE_CONS_UBIC_TIPO INTEGER,
PE_CONS_EMPRESA INTEGER,
PE_CONS_AREA INTEGER,
PE_CONS_PLANTA INTEGER,
PE_CONS_PLAN_LINEA INTEGER,
PE_CONS_LINE_SECCION INTEGER,
PE_CONS_BODEGA INTEGER,
PE_OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_REFE_CAMB_ESTADO_INSERT (CONS_REFERENCIA INTEGER,
CONS_ESTA_ANTERIOR INTEGER,
CONS_ESTA_NUEVO INTEGER,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_REFE_COLO_BAJAR (PE_CONS_REFE_COLOR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_REFE_COLO_SUBIR (PE_CONS_REFE_COLOR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_REFE_DUPLICAR (PE_CONS_REFERENCIA INTEGER,
PE_CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
PE_ES_PROTOTIPO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_GLO_REFE_IMPO_PROTOTIPO (PE_CONS_PROTOTIPO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONF_OBJE_DUPLICAR (PE_CONS_CONF_OBJETO INTEGER,
PE_NOMB_OBJETO VARCHAR(60) CHARACTER SET NONE,
PE_MENU_PADRE VARCHAR(60) CHARACTER SET NONE)
RETURNS (
	CONS_CONF_OBJETO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_ABON_IU (CONS_CONT_NOVE_ABONADO INTEGER,
CONS_CONT_NOVE_DIARIA INTEGER,
CONS_ABONADO INTEGER,
CONS_PROD_ORDEN INTEGER,
MINU_TRABAJADOS INTEGER,
MINU_ABONADOS NUMERIC(15, 5),
TIQUETES INTEGER,
VALO_HORA NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_CURVA_IU (CONS_CONT_NOVE_DIARIA INTEGER,
MINU_CURVA INTEGER,
CURV_ESTANDAR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_DEFE_FABR_I (CONS_CALI_DEFECTO INTEGER,
CONS_PROD_LOTE INTEGER,
CONS_PROCESO INTEGER,
CONS_PROD_PAQU_TIPO INTEGER,
NUME_PAQUETE INTEGER,
SECU_OPERACION INTEGER,
FECH_DEFECTO TIMESTAMP,
CONS_CONT_NOVE_DIARIA INTEGER,
CONS_PERS_ASIGNADO INTEGER,
CANT_UNID_DEFECTUOSAS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_DIARIAS_U (CONS_CONT_NOVE_DIARIA INTEGER,
CONS_PERSONAL INTEGER,
FECH_LECTURA TIMESTAMP,
NUME_LECTURA INTEGER,
CONS_EMPRESA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_TURNO INTEGER,
HORA_INICIO TIMESTAMP,
HORA_FINAL TIMESTAMP,
MINU_CONTRATADOS INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_HORA_EXTR_IU (CONS_CONT_NOVE_HORA_EXTRA INTEGER,
CONS_CONT_NOVE_DIARIA INTEGER,
CONS_HORA_EXTRA INTEGER,
CONS_PROD_ORDEN INTEGER,
MINU_EXTRAS INTEGER,
ESTANDAR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_IMPR_IU (CONS_CONT_NOVE_IMPRODUCTIVO INTEGER,
CONS_CONT_NOVE_DIARIA INTEGER,
CONS_IMPRODUCTIVO INTEGER,
CONS_SUB_IMPRODUCTIVO INTEGER,
CONS_RECURSO INTEGER,
CONS_PROD_ORDEN INTEGER,
MINU_IMPRODUCTIVOS INTEGER,
ESTANDAR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_PAGO_IU (CONS_CONT_NOVE_DIARIA INTEGER,
CONS_FORM_PAGO INTEGER,
CODI_FORM_PAGO VARCHAR(12) CHARACTER SET NONE,
VALO_HORA_PRODUCCION NUMERIC(15, 5),
VALO_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_PAGO_MINIMO NUMERIC(15, 5),
VALO_MINI_GARA_ESTANDAR NUMERIC(15, 5),
VALO_MINI_GARA_NO_ESTANDAR NUMERIC(15, 5),
VALO_GANA_ESTANDAR NUMERIC(15, 5),
VALO_GANA_NO_ESTANDAR NUMERIC(15, 5),
VALO_AJUS_AL_MINI_ESTANDAR NUMERIC(15, 5),
VALO_AJUS_AL_MINI_NO_ESTANDAR NUMERIC(15, 5),
VALO_BONO_HORA_EXTRAS NUMERIC(15, 5),
VALO_BONO_PRODUCCION NUMERIC(15, 5),
VALO_BONO_CURVA NUMERIC(15, 5),
VALO_TOTA_DEVENGADO NUMERIC(15, 5),
MINU_TRAB_ESTANDAR NUMERIC(15, 5),
MINU_TRAB_NO_ESTANDAR NUMERIC(15, 5),
MINU_TRAB_CURVA NUMERIC(15, 5),
MINU_EXTR_ESTANDAR NUMERIC(15, 5),
MINU_EXTR_NO_ESTANDAR NUMERIC(15, 5),
MINU_AUSE_ESTANDAR NUMERIC(15, 5),
MINU_AUSE_NO_ESTANDAR NUMERIC(15, 5),
MINU_IMPR_ESTANDAR NUMERIC(15, 5),
MINU_IMPR_NO_ESTANDAR NUMERIC(15, 5),
MINU_PROD_ESTANDAR NUMERIC(15, 5),
MINU_PROD_CORTE NUMERIC(15, 5),
MINU_PROD_FABRICACION NUMERIC(15, 5),
MINU_PROD_NO_ESTANDAR NUMERIC(15, 5),
MINU_PROD_CURVA NUMERIC(15, 5),
CURV_ESTANDAR INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_TIQU_CORT_I (PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
PE_CONS_CONT_NOVE_DIARIA INTEGER)
RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
CONS_CONT_NOVE_TIQU_CORTE INTEGER,
CONS_TIQU_CONTROL INTEGER,
CONS_PROD_ORDEN INTEGER,
CONS_PROD_LOTE INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
NUME_LOTE INTEGER,
NUME_PAQUETE INTEGER,
SECU_OPERACION INTEGER,
NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CANT_PAQUETES INTEGER,
NOMB_CORT_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
TIEM_PAQUETE NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
HUBO_ERROR INTEGER,
MENS_ERROR VARCHAR(200) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_TIQU_FABR_I (PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
PE_CONS_CONT_NOVE_DIARIA INTEGER,
PE_CONS_CONT_NOVE_ABONADO INTEGER)
RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
CONS_CONT_NOVE_TIQU_FABRICACION INTEGER,
CONS_PROD_PAQU_TIPO INTEGER,
NOMB_PROD_PAQU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_PROD_ORDEN INTEGER,
CONS_PROD_LOTE INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
NUME_LOTE INTEGER,
CONS_PROCESO INTEGER,
NUME_PAQUETE INTEGER,
CONS_GRUP_TALL_DETALLE INTEGER,
CONS_REFE_COLOR INTEGER,
SECU_OPERACION INTEGER,
NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
TIEM_OPERACION NUMERIC(15, 5),
CANT_UNIDADES INTEGER,
TIEM_PAQUETE NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
HUBO_ERROR INTEGER,
MENS_ERROR VARCHAR(200) CHARACTER SET NONE,
ES_CURVA INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_CONT_NOVE_TIQU_FABR_IP (PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
PE_CONS_CONT_NOVE_DIARIA INTEGER,
PE_CANT_UNIDADES INTEGER)
RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
CONS_CONT_NOVE_TIQU_FABRICACION INTEGER,
CONS_PROD_PAQU_TIPO INTEGER,
NOMB_PROD_PAQU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_PROD_ORDEN INTEGER,
CONS_PROD_LOTE INTEGER,
NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
NUME_LOTE INTEGER,
CONS_PROCESO INTEGER,
NUME_PAQUETE INTEGER,
CONS_GRUP_TALL_DETALLE INTEGER,
CONS_REFE_COLOR INTEGER,
SECU_OPERACION INTEGER,
NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
TIEM_OPERACION NUMERIC(15, 5),
CANT_UNIDADES INTEGER,
TIEM_PAQUETE NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
HUBO_ERROR INTEGER,
MENS_ERROR VARCHAR(200) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_FILT_USUA_E (PE_TAG_FILTRO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_FORM_PAGO_DIFE_DETA_IU (CONS_FORM_PAGO_DIFERENCIAL INTEGER,
RANG_INICIAL NUMERIC(15, 5),
RANG_FINAL NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_FORM_PAGO_PERSONAL_IU (CONS_PERSONAL INTEGER,
FECH_INICIAL TIMESTAMP,
VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_HORA_PRODUCCION NUMERIC(15, 5),
CONS_SIS_FORM_PAGO INTEGER,
PARA_1 VARCHAR(60) CHARACTER SET NONE,
PARA_2 VARCHAR(60) CHARACTER SET NONE,
PARA_3 VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_PROD_GENE_RESPONSABLES (PE_CONS_PROD_LOTE INTEGER,
PE_FECH_INICIAL TIMESTAMP)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_PROD_IMPO_RUTA_CORTE (PE_CONS_PROD_ORDEN INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_PROD_LOTE_CORTE_IU (CONS_PROD_LOTE INTEGER,
CONS_REFE_MATERIAL INTEGER,
AGRU_PAQUETE INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_PROD_ORDE_ELIM_LOTEO (CONS_PROD_ORDEN INTEGER,
ETAPA INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_PROD_ORDE_LOTE_ELIMINAR (PE_CONS_PROD_LOTE INTEGER,
PE_ELIM_ORDEN INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_PROD_ORDE_RESP_UPDATE (PE_CONS_PROD_ORDE_RESPONSABLE INTEGER,
PE_USUA_RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
PE_PORC_AVANCE INTEGER,
PE_FECH_ESTIMADA TIMESTAMP,
PE_FECH_SISTEMA TIMESTAMP,
PE_OBSERVACIONES VARCHAR(1000) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_02_HOJA_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB,
OBSE_1 VARCHAR(5000) CHARACTER SET NONE,
IMAG_2 BLOB,
IMAG_2_SMALL BLOB,
OBSE_2 VARCHAR(5000) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_03_ESPE_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_04_ESPE_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_05_ESPE_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_06_ESPE_IU (CONS_REFE_FICH_DETALLE INTEGER,
CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB,
OBSE_1 VARCHAR(5000) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_07_MEDI_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_08_MEDI_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB,
COMENTARIOS VARCHAR(5000) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_09_ESPE_IU (CONS_REFE_FICH_DETALLE INTEGER,
CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB,
NOMB_IMAGEN VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_PRED (PE_CONS_REFE_FICHA INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_FICH_TECNICAS_IU (CONS_REFE_FICHA INTEGER,
CONS_REFE_TIPO_FICHA INTEGER,
ANULADA INTEGER,
CONS_REFE_VARIACION INTEGER,
CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
CONS_REFE_LINEA INTEGER,
CONS_REFE_EDAD INTEGER,
CONS_REFE_ESTILO INTEGER,
CONS_REFE_GRUPO INTEGER,
CONS_REFE_TEMPORADA INTEGER,
CONS_REFE_MARCA INTEGER,
NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
CONS_REFE_GRUP_TALLAS INTEGER,
TALLAS VARCHAR(240) CHARACTER SET NONE,
TALL_MUESTRA VARCHAR(12) CHARACTER SET NONE,
DESCRIPCION VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_INSU_TRASLADAR (PE_CONS_REFE_INSUMO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_MATE_COLO_ELIM (PE_CONS_REFE_VARIACION INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_MATE_COLO_INSE (PE_TIPO_MATERIAL INTEGER,
PE_CONS_REFE_MATERIAL INTEGER,
PE_CONS_REFE_COLOR INTEGER,
PE_CONS_COLO_COMBINADO INTEGER,
PE_CONSUMO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_MATE_IMPORTAR (PE_CONS_REFE_ORIGEN INTEGER,
PE_CONS_REFE_VARI_ORIGEN INTEGER,
PE_CONS_REFE_DESTINO INTEGER,
PE_CONS_REFE_VARI_DESTINO INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_MATE_TALL_ELIM (PE_CONS_REFE_VARIACION INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_MATE_TALL_INSE (PE_TIPO_MATERIAL INTEGER,
PE_CONS_REFE_MATERIAL INTEGER,
PE_CONS_GRUP_TALL_DETALLE INTEGER,
PE_CONSUMO NUMERIC(15, 5))
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_REFE_MATE_TRASLADAR (PE_CONS_REFE_MATERIAL INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_PCP_TURN_MINU_DISP_DIA (PECONS_TURNO INTEGER,
PEDIA_SEMANA INTEGER)
RETURNS (
	MINU_DISPONIBLES INTEGER)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_SIST_INSER_FRASE (PE_FRASE VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_SIS_PCP_LOG_I (NOMB_MODU_MENSAJE VARCHAR(60) CHARACTER SET NONE,
TIPO_MENSAJE INTEGER,
TEXT_MENSAJE VARCHAR(500) CHARACTER SET NONE,
ADIC_1 VARCHAR(60) CHARACTER SET NONE,
ADIC_2 VARCHAR(60) CHARACTER SET NONE,
ADIC_3 VARCHAR(60) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_VINC_COME_PEDIDOS (PE_CONS_PEDIDO INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^

CREATE PROCEDURE PRO_VINC_PROD_ORDENES (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 
BEGIN
	SUSPEND;
END ^


ALTER PROCEDURE CONS_GLO_ACCE_MOVI_TRASLADO RETURNS (
	CONS_ACCESORIO INTEGER,
    CONS_ACCE_GRUPO INTEGER,
    CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_ACCE_TIPO INTEGER,
    CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_FAMILIA INTEGER,
    CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_MARCA INTEGER,
    CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
    NUME_INVE_ACCESORIOS VARCHAR(20) CHARACTER SET NONE,
    NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
    DIME_ENTRADA NUMERIC(15, 2),
    DIME_SALIDA NUMERIC(15, 2),
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    FECH_INICIAL TIMESTAMP,
    CONS_PLAN_ANTERIOR INTEGER,
    CODI_PLAN_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLAN_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINE_ANTERIOR INTEGER,
    CONS_LINE_ANTERIOR INTEGER,
    CODI_LINE_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINE_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECC_ANTERIOR INTEGER,
    CONS_SECC_ANTERIOR INTEGER,
    CODI_SECC_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECC_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
    USO VARCHAR(240) CHARACTER SET NONE,
    CONS_RECU_FAMI_ANTERIOR INTEGER,
    CODI_RECU_FAMI_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMI_ANTERIOR VARCHAR(60) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_ACCE_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_CONS_ACCE_MOVI_ANTERIOR INTEGER;

BEGIN

  /* Recorrer los accesorios */
  FOR SELECT A.CONS_ACCESORIO,
       A.CONS_ACCE_GRUPO, G.CODI_ACCE_GRUPO, G.NOMB_ACCE_GRUPO,
       A.CONS_ACCE_TIPO, T.CODI_ACCE_TIPO, T.NOMB_ACCE_TIPO,
       A.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,
       A.NUME_INVE_ACCESORIO, A.NUME_SERIE, A.DIME_ENTRADA, A.DIME_SALIDA,
       A.USO
      FROM GLO_ACCESORIOS A, 
        GLO_ACCE_GRUPOS G, 
        GLO_ACCE_TIPOS T,
        GLO_RECU_MARCAS M
      WHERE A.CONS_ACCE_GRUPO = G.CONS_ACCE_GRUPO AND 
        A.CONS_ACCE_TIPO = T.CONS_ACCE_TIPO AND 
        A.CONS_RECU_MARCA = M.CONS_RECU_MARCA
      ORDER BY A.CONS_ACCESORIO
      INTO :CONS_ACCESORIO,
       :CONS_ACCE_GRUPO, :CODI_ACCE_GRUPO, :NOMB_ACCE_GRUPO,
       :CONS_ACCE_TIPO, :CODI_ACCE_TIPO, :NOMB_ACCE_TIPO,
       :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,
       :NUME_INVE_ACCESORIOS, :NUME_SERIE, :DIME_ENTRADA, :DIME_SALIDA,
       :USO

  DO BEGIN

    /* Verificar que el estado del accesorio no sea baja permanente */
    IF (EXISTS(SELECT CONS_ESTADO
               FROM CON_GLO_ACCE_ESTADO(:CONS_ACCESORIO, 'NOW')
               WHERE CONS_FAMI_MOVIMIENTO <> 4 OR 
                     CONS_FAMI_MOVIMIENTO IS NULL)) THEN
    BEGIN
      /* Consultar la ubicacion actual */
      SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,
       CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,
       CONS_PLAN_LINEA, CONS_LINEA, CODI_LINEA, NOMB_LINEA,
       CONS_LINE_SECCION, CONS_SECCION, CODI_SECCION, NOMB_SECCION,
       FECH_INICIAL, CONS_ACCE_MOVIMIENTO, CONS_RECU_FAMILIA,
       CODI_RECU_FAMILIA, NOMB_RECU_FAMILIA
      FROM CON_GLO_ACCE_UBIC_UNIDAD (:CONS_ACCESORIO, 'NOW')
      INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,
       :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
       :CONS_PLAN_LINEA, :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,
       :CONS_LINE_SECCION, :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,
       :FECH_INICIAL, :VAR_CONS_ACCE_MOVIMIENTO, :CONS_RECU_FAMILIA,
       :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA;

      /* Consultar el consecutivo del movimiento anterior */
      SELECT MAX(CONS_ACCE_MOVIMIENTO)
      FROM GLO_ACCE_MOVIMIENTOS
      WHERE CONS_ACCESORIO = :CONS_ACCESORIO AND 
            CONS_ACCE_MOVIMIENTO < :VAR_CONS_ACCE_MOVIMIENTO AND 
            CONS_ACCE_MOVIMIENTO NOT IN(
                    SELECT CONS_ACCE_MOVIMIENTO
                    FROM GLO_ACCE_MOVI_ANULADOS)
      INTO :VAR_CONS_ACCE_MOVI_ANTERIOR;


      /* Consultar la ubicación exterior del recurso */
      SELECT CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,
       CONS_PLAN_LINEA, CONS_LINEA, CODI_LINEA, NOMB_LINEA,
       CONS_LINE_SECCION, CONS_SECCION, CODI_SECCION, NOMB_SECCION,
       CONS_RECU_FAMILIA, CODI_RECU_FAMILIA, NOMB_RECU_FAMILIA
      FROM CON_GLO_ACCE_UBICACION(:VAR_CONS_ACCE_MOVI_ANTERIOR)
      INTO :CONS_PLAN_ANTERIOR, :CODI_PLAN_ANTERIOR, :NOMB_PLAN_ANTERIOR,
       :CONS_PLAN_LINE_ANTERIOR,
       :CONS_LINE_ANTERIOR, :CODI_LINE_ANTERIOR, :NOMB_LINE_ANTERIOR,
       :CONS_LINE_SECC_ANTERIOR,
       :CONS_SECC_ANTERIOR, :CODI_SECC_ANTERIOR, :NOMB_SECC_ANTERIOR,
       :CONS_RECU_FAMI_ANTERIOR, :CODI_RECU_FAMI_ANTERIOR, :NOMB_RECU_FAMI_ANTERIOR;

      SUSPEND;
    END
  END
END ^

ALTER PROCEDURE CONS_GLO_PERS_INFO_TIPO_ESTADO (PE_TIPO_ESTADO SMALLINT)
RETURNS (
	ESTADO VARCHAR(12) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
    CANTIDAD SMALLINT)
AS 

BEGIN

  /* Verificar si es activo */
  IF (:PE_TIPO_ESTADO = 0 OR :PE_TIPO_ESTADO = 1) THEN BEGIN
    SELECT G.ESTADO, CAST('No Aplica' AS VARCHAR(600))
AS NOMB_PERS_TIPO_MOVIMIENTO,
     1, COUNT(G.CONS_PERSONAL)
    FROM CON_GLO_PERS_INFO_GENERAL G
    WHERE G.ESTADO = 'Activo'
    GROUP BY G.ESTADO
    INTO :ESTADO, :NOMB_PERS_TIPO_MOVIMIENTO, :CONS_PERS_TIPO_MOVIMIENTO, :CANTIDAD;

    SUSPEND;
  END

  /* Verificar si es activo */
  IF (:PE_TIPO_ESTADO = 0 OR :PE_TIPO_ESTADO = 2) THEN BEGIN
    FOR SELECT G.ESTADO, G.CONS_PERS_TIPO_MOVIMIENTO, G.NOMB_PERS_TIPO_MOVIMIENTO,
         COUNT(G.CONS_PERSONAL)
        FROM CON_GLO_PERS_INFO_GENERAL G
        WHERE G.ESTADO = 'Inactivo'
        GROUP BY G.ESTADO, G.CONS_PERS_TIPO_MOVIMIENTO, G.NOMB_PERS_TIPO_MOVIMIENTO
        INTO :ESTADO, :CONS_PERS_TIPO_MOVIMIENTO, :NOMB_PERS_TIPO_MOVIMIENTO, :CANTIDAD

    DO 
      SUSPEND;
  END
END ^

ALTER PROCEDURE CONS_GLO_PERS_NIVE_SALARIAL RETURNS (
	CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    APELLIDOS VARCHAR(62) CHARACTER SET NONE,
    NOMBRES VARCHAR(40) CHARACTER SET NONE,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
    SALARIO INTEGER,
    FECH_NIVE_SALARIAL TIMESTAMP,
    CODI_PERS_NIVE_SALA_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
    SALA_ANTERIOR INTEGER,
    FECH_NIVE_SALA_ANTERIOR TIMESTAMP)
AS 

DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

BEGIN
  /* Recorrer el personal con su ubicación */
  FOR SELECT CONS_PERSONAL, CODI_PERSONAL, APELLIDOS, NOMBRES,
   NOMB_PERS_CARGO, NOMB_PLANTA, NOMB_LINEA, NOMB_SECCION
  FROM CON_GLO_PERS_UBIC_PERSONAL
  INTO :CONS_PERSONAL, :CODI_PERSONAL, :APELLIDOS, :NOMBRES,
   :NOMB_PERS_CARGO, :NOMB_PLANTA, :NOMB_LINEA, :NOMB_SECCION

  DO BEGIN

    /* Consultar el último movimiento */
    SELECT MAX(C.CONS_PERS_MOVIMIENTO)
    FROM GLO_PERS_MOVI_CONFIDENCIAL C, GLO_PERS_MOVIMIENTOS M
    WHERE C.CONS_PERS_MOVIMIENTO = M.CONS_PERS_MOVIMIENTO AND 
            M.CONS_PERSONAL = :CONS_PERSONAL AND 
            M.CONS_PERS_MOVIMIENTO NOT IN(
                 SELECT CONS_PERS_MOVIMIENTO
                 FROM GLO_PERS_MOVI_ANULADOS)
    INTO :VAR_CONS_PERS_MOVIMIENTO;

    /* Consultar el salario actual */
    SELECT M.FECH_INICIAL, S.CODI_PERS_NIVE_SALARIAL, C.VALO_SALARIO
    FROM GLO_PERS_MOVI_CONFIDENCIAL C, 
            GLO_PERS_NIVE_SALARIALES S,
            GLO_PERS_MOVIMIENTOS M
    WHERE C.CONS_PERS_MOVIMIENTO = M.CONS_PERS_MOVIMIENTO AND 
           C.CONS_PERS_NIVE_SALARIAL = S.CONS_PERS_NIVE_SALARIAL AND 
            M.CONS_PERS_MOVIMIENTO = :VAR_CONS_PERS_MOVIMIENTO
    INTO :FECH_NIVE_SALARIAL, :CODI_PERS_NIVE_SALARIAL, :SALARIO;

    /* Consultar el anterior movimiento */
    SELECT MAX(C.CONS_PERS_MOVIMIENTO)
    FROM GLO_PERS_MOVI_CONFIDENCIAL C, 
        GLO_PERS_MOVIMIENTOS M
    WHERE C.CONS_PERS_MOVIMIENTO = M.CONS_PERS_MOVIMIENTO AND 
            M.CONS_PERSONAL = :CONS_PERSONAL AND 
            M.CONS_PERS_MOVIMIENTO < :VAR_CONS_PERS_MOVIMIENTO AND 
            M.CONS_PERS_MOVIMIENTO NOT IN(
                 SELECT CONS_PERS_MOVIMIENTO
                 FROM GLO_PERS_MOVI_ANULADOS)
    INTO :VAR_CONS_PERS_MOVIMIENTO;

    /* Verificar si tiene salario anterior */
    IF (:VAR_CONS_PERS_MOVIMIENTO IS NULL) THEN BEGIN
      CODI_PERS_NIVE_SALA_ANTERIOR = (:CODI_PERS_NIVE_SALARIAL);
      FECH_NIVE_SALA_ANTERIOR = (:FECH_NIVE_SALARIAL);
      SALA_ANTERIOR = (:SALARIO);
    END
    ELSE
      /* Consultar el salario anterior */
      SELECT M.FECH_INICIAL, S.CODI_PERS_NIVE_SALARIAL, C.VALO_SALARIO
      FROM GLO_PERS_MOVI_CONFIDENCIAL C, 
            GLO_PERS_NIVE_SALARIALES S,
            GLO_PERS_MOVIMIENTOS M
      WHERE C.CONS_PERS_MOVIMIENTO = M.CONS_PERS_MOVIMIENTO AND 
            C.CONS_PERS_NIVE_SALARIAL = S.CONS_PERS_NIVE_SALARIAL AND 
            M.CONS_PERS_MOVIMIENTO = :VAR_CONS_PERS_MOVIMIENTO
      INTO :FECH_NIVE_SALARIAL, :CODI_PERS_NIVE_SALARIAL, :SALARIO;

    SUSPEND;
  END
END ^

ALTER PROCEDURE CONS_GLO_RECU_ANTIGUEDAD RETURNS (
	CONS_RECURSO INTEGER,
    CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
    CONS_RECU_GRUPO INTEGER,
    CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_TIPO INTEGER,
    CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_FAMILIA INTEGER,
    CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_MARCA INTEGER,
    CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
    CLASE VARCHAR(60) CHARACTER SET NONE,
    NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
    FECH_INGRESO TIMESTAMP,
    TIEMPO VARCHAR(12) CHARACTER SET NONE,
    ANO SMALLINT,
    MES SMALLINT,
    DIA SMALLINT,
    ANTIGUEDAD INTEGER,
    TIEM_FECHA TIMESTAMP,
    CONS_TIPO_DOCUMENTO INTEGER,
    CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
    NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    CODI_AREA VARCHAR(12) CHARACTER SET NONE,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_TEMPORAL TIMESTAMP;

BEGIN

  -- Verifico que tenga permiso sobre las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_RECURSOS,GLO_RECU_GRUPOS,' ||
              'GLO_RECU_TIPOS,GLO_RECU_FAMILIAS,GLO_RECU_MARCAS', 5, 'S')
             WHERE PERMISO = 1)) THEN

    -- Consultamos los recursos
    FOR SELECT R.CONS_RECURSO, R.CODI_RECURSO, R.CODI_INTE_RECURSO,
     R.CONS_RECU_GRUPO, G.CODI_RECU_GRUPO, G.NOMB_RECU_GRUPO,
     R.CONS_RECU_TIPO, T.CODI_RECU_TIPO, T.NOMB_RECU_TIPO,
     R.CONS_RECU_FAMILIA, F.CODI_RECU_FAMILIA, F.NOMB_RECU_FAMILIA,
     R.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,
     R.CLASE, R.NUME_SERIE
    FROM GLO_RECURSOS R, GLO_RECU_GRUPOS G, GLO_RECU_TIPOS T,
     GLO_RECU_FAMILIAS F, GLO_RECU_MARCAS M
    WHERE (R.CONS_RECU_GRUPO = F.CONS_RECU_GRUPO AND 
            R.CONS_RECU_TIPO = F.CONS_RECU_TIPO AND 
            R.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA) AND 
        (F.CONS_RECU_GRUPO = T.CONS_RECU_GRUPO AND 
            F.CONS_RECU_TIPO = T.CONS_RECU_TIPO) AND 
        T.CONS_RECU_GRUPO = G.CONS_RECU_GRUPO AND 
        R.CONS_RECU_MARCA = M.CONS_RECU_MARCA
    ORDER BY R.CONS_RECURSO
    INTO :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO,
     :CONS_RECU_GRUPO, :CODI_RECU_GRUPO, :NOMB_RECU_GRUPO,
     :CONS_RECU_TIPO, :CODI_RECU_TIPO, :NOMB_RECU_TIPO,
     :CONS_RECU_FAMILIA, :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA,
     :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,
     :CLASE, :NUME_SERIE

    DO BEGIN
      -- Verifico que tenga permiso sobre las tablas
      IF (EXISTS(SELECT PERMISO
                 FROM CON_PERM_TABLAS('CON_GLO_RECU_UBIC_UNIDAD', 1, 'X')
                 WHERE PERMISO = 1)) THEN
        -- Consultamos la ubicación del Recurso
        SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,
         CONS_AREA, CODI_AREA, NOMB_AREA,
         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,
         CONS_LINEA, CODI_LINEA, NOMB_LINEA,
         CONS_SECCION, CODI_SECCION, NOMB_SECCION,
         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,
         OTRA_UBICACION
        FROM CON_GLO_RECU_UBIC_UNIDAD(:CONS_RECURSO, NULL)
        INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,
         :CONS_AREA, :CODI_AREA, :NOMB_AREA,
         :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,
         :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,
         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,
         :OTRA_UBICACION;

      -- Verifico que tenga permiso sobre las tablas

      IF (EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('CON_GLO_RECU_ESTADO', 1, 'X')

                 WHERE PERMISO = 1)) THEN

        -- Consultamos el estado del Recurso

        SELECT ESTADO, CONS_RECU_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO

        FROM CON_GLO_RECU_ESTADO(:CONS_RECURSO, NULL)

        INTO :ESTADO, :CONS_RECU_TIPO_MOVIMIENTO, :CONS_FAMI_MOVIMIENTO;



      VAR_CONS_RECU_MOVIMIENTO = NULL;

      -- Verifico que tenga permiso sobre las tablas

      IF (EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('GLO_RECU_MOVIMIENTOS,' ||

                  'GLO_RECU_TIPO_MOVIMIENTO,GLO_RECU_MOVI_ANULADOS', 3, 'S')

                 WHERE PERMISO = 1)) THEN

      -- Buscamos el 򬴩mo movimiento de ingreso del Recurso

      SELECT MAX(M.CONS_RECU_MOVIMIENTO)

      FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_TIPO_MOVIMIENTO T

      WHERE M.CONS_RECURSO = :CONS_RECURSO

       AND M.CONS_RECU_TIPO_MOVIMIENTO = T.CONS_RECU_TIPO_MOVIMIENTO

       AND T.CONS_FAMI_MOVIMIENTO = 1

       AND M.CONS_RECU_MOVIMIENTO NOT IN(

           SELECT CONS_RECU_MOVIMIENTO

           FROM GLO_RECU_MOVI_ANULADOS)

      INTO :VAR_CONS_RECU_MOVIMIENTO;



      -- Consultamos la fecha y el documento de ingreso del Recurso

      IF (:VAR_CONS_RECU_MOVIMIENTO IS NOT NULL AND

          -- Verifico que tenga permiso sobre las tablas

          EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('GLO_TIPO_DOCUMENTO', 1, 'S')

                 WHERE PERMISO = 1)) THEN

        SELECT M.FECH_INICIAL, M.NUME_DOCUMENTO,

         M.CONS_TIPO_DOCUMENTO, T.CODI_TIPO_DOCUMENTO,

         T.NOMB_TIPO_DOCUMENTO

        FROM GLO_RECU_MOVIMIENTOS M, GLO_TIPO_DOCUMENTO T

        WHERE M.CONS_TIPO_DOCUMENTO = T.CONS_TIPO_DOCUMENTO

         AND M.CONS_RECU_MOVIMIENTO = :VAR_CONS_RECU_MOVIMIENTO

        INTO :FECH_INGRESO, :NUME_DOCUMENTO,

         :CONS_TIPO_DOCUMENTO, :CODI_TIPO_DOCUMENTO,

         :NOMB_TIPO_DOCUMENTO;



      ANTIGUEDAD = 0;

      -- Asignamos la antiguedad del Recurso

      IF (:FECH_INGRESO IS NOT NULL) THEN

      BEGIN

        VAR_TEMPORAL = 'NOW';

        ANTIGUEDAD = (:VAR_TEMPORAL - :FECH_INGRESO);

      END



      /* Calcular el tiempo de contrataci󮪯

      SELECT TIEMPO, ANO, MES, DIA, TIEM_FECHA

      FROM CON_GLO_RECU_TIEM_ANTIGUEDAD(:CONS_RECURSO, 'NOW')

      INTO :TIEMPO, :ANO, :MES, :DIA, :TIEM_FECHA;



      /* Devolver el registro */

      SUSPEND;

    END

END ^

ALTER PROCEDURE CONS_GLO_RECU_MOVI_TRASLADO RETURNS (
	CONS_RECURSO INTEGER,
CONS_RECU_GRUPO INTEGER,
CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_TIPO INTEGER,
CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
CONS_PLAN_ANTERIOR INTEGER,
CODI_PLAN_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
NOMB_PLAN_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINE_ANTERIOR INTEGER,
CONS_LINE_ANTERIOR INTEGER,
CODI_LINE_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
NOMB_LINE_ANTERIOR VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECC_ANTERIOR INTEGER,
CONS_SECC_ANTERIOR INTEGER,
CODI_SECC_ANTERIOR VARCHAR(12) CHARACTER SET NONE,
NOMB_SECC_ANTERIOR VARCHAR(60) CHARACTER SET NONE)
AS 


DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;

DECLARE VARIABLE VAR_CONS_RECU_MOVI_ANTERIOR INTEGER;

BEGIN

  /* Recorrer los recursos */

  FOR SELECT R.CONS_RECURSO,

   R.CONS_RECU_GRUPO, G.CODI_RECU_GRUPO, G.NOMB_RECU_GRUPO,

   R.CONS_RECU_TIPO, T.CODI_RECU_TIPO, T.NOMB_RECU_TIPO,

   R.CONS_RECU_FAMILIA, F.CODI_RECU_FAMILIA, F.NOMB_RECU_FAMILIA,

   R.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,

   R.CODI_INTE_RECURSO

  FROM GLO_RECURSOS R, GLO_RECU_GRUPOS G, GLO_RECU_TIPOS T,

   GLO_RECU_FAMILIAS F, GLO_RECU_MARCAS M

  WHERE R.CONS_RECU_GRUPO = G.CONS_RECU_GRUPO

   AND R.CONS_RECU_TIPO = T.CONS_RECU_TIPO

   AND R.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA

   AND R.CONS_RECU_MARCA = M.CONS_RECU_MARCA

  ORDER BY R.CONS_RECURSO

  INTO :CONS_RECURSO,

   :CONS_RECU_GRUPO, :CODI_RECU_GRUPO, :NOMB_RECU_GRUPO,

   :CONS_RECU_TIPO, :CODI_RECU_TIPO, :NOMB_RECU_TIPO,

   :CONS_RECU_FAMILIA, :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA,

   :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,

   :CODI_INTE_RECURSO

  DO BEGIN

    /* Verificar que el estado del recurso no sea baja permanente */

    IF (EXISTS(SELECT CONS_ESTADO

               FROM CON_GLO_RECU_ESTADO(:CONS_RECURSO, 'NOW')

               WHERE CONS_FAMI_MOVIMIENTO <> 4

                OR CONS_FAMI_MOVIMIENTO IS NULL)) THEN

    BEGIN

      /* Consultar la ubicacion actual */

      SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

       CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,

       CONS_PLAN_LINEA, CONS_LINEA, CODI_LINEA, NOMB_LINEA,

       CONS_LINE_SECCION, CONS_SECCION, CODI_SECCION, NOMB_SECCION,

       FECH_INICIAL, CONS_RECU_MOVIMIENTO

      FROM CON_GLO_RECU_UBIC_UNIDAD(:CONS_RECURSO, 'NOW')

      INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

       :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

       :CONS_PLAN_LINEA, :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,

       :CONS_LINE_SECCION, :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,

       :FECH_INICIAL, :VAR_CONS_RECU_MOVIMIENTO;



      /* Consultar el consecutivo del movimiento anterior */

      SELECT MAX(CONS_RECU_MOVIMIENTO)

      FROM GLO_RECU_MOVIMIENTOS

      WHERE CONS_RECURSO = :CONS_RECURSO

       AND CONS_RECU_MOVIMIENTO < :VAR_CONS_RECU_MOVIMIENTO

       AND CONS_RECU_MOVIMIENTO NOT IN(

        SELECT CONS_RECU_MOVIMIENTO

        FROM GLO_RECU_MOVI_ANULADOS)

      INTO :VAR_CONS_RECU_MOVI_ANTERIOR;



      /* Consultar la ubicaci󮠡nterior del recurso */

      SELECT CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,

       CONS_PLAN_LINEA, CONS_LINEA, CODI_LINEA, NOMB_LINEA,

       CONS_LINE_SECCION, CONS_SECCION, CODI_SECCION, NOMB_SECCION

      FROM CON_GLO_RECU_UBICACION(:VAR_CONS_RECU_MOVI_ANTERIOR)

      INTO :CONS_PLAN_ANTERIOR, :CODI_PLAN_ANTERIOR, :NOMB_PLAN_ANTERIOR,

       :CONS_PLAN_LINE_ANTERIOR,

       :CONS_LINE_ANTERIOR, :CODI_LINE_ANTERIOR, :NOMB_LINE_ANTERIOR,

       :CONS_LINE_SECC_ANTERIOR,

       :CONS_SECC_ANTERIOR, :CODI_SECC_ANTERIOR, :NOMB_SECC_ANTERIOR;



      /* Devolver el registro */

      SUSPEND;

    END

  END

END ^

ALTER PROCEDURE CONS_PERS_INFO_ESTADO (PE_ESTADO VARCHAR(12) CHARACTER SET NONE,
PE_CONS_PERS_TIPO_MOVIMIENTO INTEGER)
RETURNS (
	NUMERO SMALLINT,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
APELLIDOS VARCHAR(62) CHARACTER SET NONE,
NOMB_PERSONAL VARCHAR(40) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
DIAS SMALLINT,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP)
AS 


DECLARE VARIABLE VAR_PRIM_APELLIDO VARCHAR(30);

DECLARE VARIABLE VAR_SEGU_APELLIDO VARCHAR(30);

DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

DECLARE VARIABLE VAR_FECHA TIMESTAMP;

BEGIN

  /* Verifico si son los activos */

  IF (:PE_ESTADO = 'Activo') THEN

  BEGIN

    /* Inicializar resultados */

    NUMERO = 0;



    /* Consultar el personal activo */

    FOR SELECT G.CODI_PERSONAL, G.PRIM_APELLIDO, G.SEGU_APELLIDO,

     G.NOMBRES, G.NOMB_PLANTA, G.NOMB_LINEA, G.NOMB_SECCION,

     G.FECH_INICIAL, G.FECH_FINAL, G.CONS_PERS_MOVIMIENTO

    FROM CON_GLO_PERS_INFO_GENERAL G

    WHERE G.ESTADO = 'Activo'

    INTO :CODI_PERSONAL, :VAR_PRIM_APELLIDO, :VAR_SEGU_APELLIDO,

     :NOMB_PERSONAL, :NOMB_PLANTA, :NOMB_LINEA, :NOMB_SECCION,

     :FECH_INICIAL, :FECH_FINAL, :VAR_CONS_PERS_MOVIMIENTO

    DO BEGIN

      /* Uno los apellidos */

      APELLIDOS = (:VAR_PRIM_APELLIDO || ' ' || :VAR_SEGU_APELLIDO);



      /* Inicializar variables */

      VAR_FECHA = CAST('NOW' AS TIMESTAMP);



      /* Calcular los d */

      DIAS = (:VAR_FECHA - :FECH_INICIAL);



      /* incrementar el n򭥲o del registro */

      NUMERO = (:NUMERO + 1);



      /* Devolver el registro */

      SUSPEND;

    END

  END

  /* Verifico si son los Inactivos */

  IF (:PE_ESTADO = 'Inactivo') THEN

  BEGIN

    /* Inicializar resultados */

    NUMERO = 0;



    /* Consultar el personal activo */

    FOR SELECT G.CODI_PERSONAL, G.PRIM_APELLIDO, G.SEGU_APELLIDO,

     G.NOMBRES, G.NOMB_PLANTA, G.NOMB_LINEA, G.NOMB_SECCION,

     G.FECH_INICIAL, G.FECH_FINAL, G.CONS_PERS_MOVIMIENTO

    FROM CON_GLO_PERS_INFO_GENERAL G

    WHERE G.ESTADO = 'Inactivo'

     AND G.CONS_PERS_TIPO_MOVIMIENTO = :PE_CONS_PERS_TIPO_MOVIMIENTO

    INTO :CODI_PERSONAL, :VAR_PRIM_APELLIDO, :VAR_SEGU_APELLIDO,

     :NOMB_PERSONAL, :NOMB_PLANTA, :NOMB_LINEA, :NOMB_SECCION,

     :FECH_INICIAL, :FECH_FINAL, :VAR_CONS_PERS_MOVIMIENTO

    DO BEGIN

      /* Uno los apellidos */

      APELLIDOS = (:VAR_PRIM_APELLIDO || ' ' || :VAR_SEGU_APELLIDO);



      /* Inicializar variables */

      VAR_FECHA = CAST('NOW' AS TIMESTAMP);



      /* Calcular los d */

      DIAS = (:VAR_FECHA - :FECH_INICIAL);



      /* incrementar el n򭥲o del registro */

      NUMERO = (:NUMERO + 1);



      /* Devolver el registro */

      SUSPEND;

    END

  END

END ^

ALTER PROCEDURE CON_CLI_CONT_NOVE_PAGO (PE_CONS_CONT_NOVE_DIARIA INTEGER,
PE_FECHA TIMESTAMP,
PE_NUME_LECTURA INTEGER,
PE_CONS_PERSONAL INTEGER,
PE_CONS_EMPRESA INTEGER,
PE_CONS_AREA INTEGER,
PE_CONS_PLAN_LINEA INTEGER,
PE_CONS_LINE_SECCION INTEGER,
PE_CONS_TURNO INTEGER,
PE_MINU_CONTRATADOS INTEGER,
PE_MINU_AUSENTISMOS INTEGER,
PE_MINU_EXTRAS INTEGER,
PE_MINU_PRESENCIALES INTEGER,
PE_MINU_IMPRODUCTIVOS INTEGER,
PE_MINU_TRABAJADOS INTEGER,
PE_MINU_TIQU_CORTE NUMERIC(15, 5),
PE_MINU_TIQU_FABRICACION NUMERIC(15, 5),
PE_MINU_ABONADOS NUMERIC(15, 5),
PE_MINU_OBTENIDOS NUMERIC(15, 5),
PE_INDI_1 NUMERIC(15, 5),
PE_INDI_2 NUMERIC(15, 5),
PE_INDI_3 NUMERIC(15, 5))
RETURNS (
	VALO_HORA_PRODUCCION NUMERIC(15, 5),
VALO_MINI_GARANTIZADO NUMERIC(15, 5),
VALO_GANA_PRODUCCION NUMERIC(15, 5),
VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
VALO_BONO_PRODUCCION NUMERIC(15, 5),
VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 


DECLARE VARIABLE VAR_MINU_MENSUALES INTEGER = 14400;

DECLARE VARIABLE VAR_CURV_1 NUMERIC (15,5) = 0.85;

DECLARE VARIABLE VAR_CURV_2 NUMERIC (15,5) = 1;

DECLARE VARIABLE VAR_VALO_SALARIO NUMERIC (15,5);

DECLARE VARIABLE VAR_VALO_MINU_PRODUCCION NUMERIC (15,5);

DECLARE VARIABLE VAR_EFICIENCIA NUMERIC (15,5);

DECLARE VARIABLE VAR_CONSTANTE NUMERIC (15,5);

DECLARE VARIABLE VAR_PARA_1 NUMERIC (15,5) ;

DECLARE VARIABLE VAR_PARA_2 NUMERIC (15,5) ;

BEGIN

    /*  ESTE PROCEDIMIENTO SE DEBE PERSONALIZAR PARA CADA INSTALACIԎ DE PCP

    QUE UTILICE FORMAS DE PAGO PERSONALIZADAS  */

    VALO_HORA_PRODUCCION = 0;

    VALO_MINI_GARANTIZADO = 0;

    VALO_GANA_PRODUCCION = 0;

    VALO_AJUS_AL_MINIMO = 0;

    VALO_BONO_PRODUCCION = 0;

    VALO_TOTA_DEVENGADO = 0;

    

    /*  -- EJEMPLO DE PERSONALIZACIԎ --  */

    

   /* BUSCAR EL SALARIO DEL OPERARIO */

   SELECT VALO_SALARIO

   FROM CON_GLO_PERS_CONF_SALA_UNIDAD(:PE_CONS_PERSONAL, :PE_FECHA)

   INTO :VAR_VALO_SALARIO;

   IF (:VAR_VALO_SALARIO IS NULL) THEN VAR_VALO_SALARIO = 0;



   /* CALCULAR EL VALOR MINUTO DE PRODUCCION */

   VAR_VALO_MINU_PRODUCCION = :VAR_VALO_SALARIO / :VAR_MINU_MENSUALES;

   /*  CALCULAR EL VALOR HORA PRODUCCION  */

   VALO_HORA_PRODUCCION = :VAR_VALO_MINU_PRODUCCION * 60;

   VALO_MINI_GARANTIZADO = :PE_MINU_CONTRATADOS * :VAR_VALO_MINU_PRODUCCION;



   /* LLEVAR EL VALOR DE LA EFICIENCIA A UN AUXILIAR */

   VAR_EFICIENCIA = :PE_INDI_3 / 100;

   /* RESTRICCION DEL PAGO MAXIMO */

   IF (:VAR_EFICIENCIA > 1.50) THEN VAR_EFICIENCIA = 1.50;



   VALO_GANA_PRODUCCION = 0;

   /* CURVA 1 - EFICIENCIA MAYOR QUE CUR_1 PERO MENOR QUE CUR_2 */

   IF ((:VAR_EFICIENCIA >= :VAR_CURV_1) AND (:VAR_EFICIENCIA < :VAR_CURV_2)) THEN

   BEGIN

           VAR_CONSTANTE = :VAR_EFICIENCIA - :VAR_CURV_1;

           VAR_PARA_1 = (:VALO_MINI_GARANTIZADO * :VAR_CONSTANTE);

           VALO_GANA_PRODUCCION = :VAR_PARA_1;

   END

   /* CURVA 2 - EFICIENCIA MAYOR QUE CUR_2 */

   IF (:VAR_EFICIENCIA >= :VAR_CURV_2) THEN

   BEGIN

           VAR_CONSTANTE = 1.28;

           VAR_PARA_1 = (:PE_MINU_OBTENIDOS - :PE_MINU_CONTRATADOS -

                :PE_MINU_EXTRAS  + :PE_MINU_IMPRODUCTIVOS + :PE_MINU_AUSENTISMOS )*

                (:VAR_CONSTANTE * :VAR_VALO_MINU_PRODUCCION);

           VAR_CONSTANTE = 0.28;

           VAR_PARA_2 = (:PE_MINU_CONTRATADOS + :PE_MINU_EXTRAS - :PE_MINU_IMPRODUCTIVOS - :PE_MINU_AUSENTISMOS)*

                (:VAR_CONSTANTE * :VAR_VALO_MINU_PRODUCCION);



           VALO_GANA_PRODUCCION = :VAR_PARA_1 + :VAR_PARA_2;

   END

   /*  INDICADORES  */

   VALO_AJUS_AL_MINIMO = 0;

   VALO_BONO_PRODUCCION = 0;

   IF (:VALO_GANA_PRODUCCION < 0) THEN VALO_GANA_PRODUCCION = 0;

   VALO_TOTA_DEVENGADO = VALO_GANA_PRODUCCION;

   /*  GENERAR EL REGISTRO  */

   SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_ACCE_EN_BAJA RETURNS (
	CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(20) CHARACTER SET NONE,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
NOMB_ACCE_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE)
AS 


DECLARE VARIABLE VAR_CONS_ACCE_MOVIMIENTO INTEGER;

DECLARE VARIABLE VAR_CONS_ESTADO INTEGER;

BEGIN

  /* Consultamos el accesorio */

  FOR SELECT A.CONS_ACCESORIO, A.NUME_INVE_ACCESORIO,

   G.NOMB_ACCE_GRUPO, T.NOMB_ACCE_TIPO,

   M.NOMB_RECU_MARCA

  FROM GLO_ACCESORIOS A, GLO_ACCE_GRUPOS G,

   GLO_ACCE_TIPOS T, GLO_RECU_MARCAS M

  WHERE (A.CONS_ACCE_GRUPO = T.CONS_ACCE_GRUPO

   AND A.CONS_ACCE_TIPO = T.CONS_ACCE_TIPO)

   AND (T.CONS_ACCE_GRUPO = G.CONS_ACCE_GRUPO)

   AND (A.CONS_RECU_MARCA = M.CONS_RECU_MARCA)

  ORDER BY A.CONS_ACCESORIO

  INTO :CONS_ACCESORIO, :NUME_INVE_ACCESORIO,

   :NOMB_ACCE_GRUPO, :NOMB_ACCE_TIPO,

   :NOMB_RECU_MARCA

  DO BEGIN

    /* Consultamos su estado */

    SELECT CONS_ESTADO

    FROM CON_GLO_ACCE_ESTADO(:CONS_ACCESORIO, NULL)

    INTO :VAR_CONS_ESTADO;



    /* Verifico que se muestre solo el accesorio inactivo */

    IF (:VAR_CONS_ESTADO = -1) THEN

    BEGIN

      /* Buscamos el 򬴩mo movimiento de traslados del accesorio */

      SELECT MAX(T.CONS_ACCE_MOVIMIENTO)

      FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_MOVI_TRASLADOS T

      WHERE M.CONS_ACCE_MOVIMIENTO = T.CONS_ACCE_MOVIMIENTO

       AND M.CONS_ACCESORIO = :CONS_ACCESORIO

      INTO :VAR_CONS_ACCE_MOVIMIENTO;

  

      /* Consultamos los datos de ubicación del 򬴩mo traslado del accesorio */

      SELECT CODI_EMPRESA, NOMB_EMPRESA,

       CODI_AREA, NOMB_AREA, CODI_PLANTA, NOMB_PLANTA,

       CODI_LINEA, NOMB_LINEA, CODI_SECCION, NOMB_SECCION,

       CODI_BODEGA, NOMB_BODEGA, OTRA_UBICACION,

       CONS_RECURSO, CODI_RECURSO, CODI_INTE_RECURSO

      FROM CON_GLO_ACCE_UBICACION(:VAR_CONS_ACCE_MOVIMIENTO)

      INTO :CODI_EMPRESA, :NOMB_EMPRESA,

       :CODI_AREA, :NOMB_AREA, :CODI_PLANTA, :NOMB_PLANTA,

       :CODI_LINEA, :NOMB_LINEA, :CODI_SECCION, :NOMB_SECCION,

       :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,

       :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO;

  

      VAR_CONS_ACCE_MOVIMIENTO = NULL;

      /* Buscamos el 򬴩mo movimiento de baja del accesorio */

      SELECT MAX(B.CONS_ACCE_MOVIMIENTO)

      FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_MOVI_BAJAS B

      WHERE M.CONS_ACCE_MOVIMIENTO = B.CONS_ACCE_MOVIMIENTO

       AND M.CONS_ACCESORIO = :CONS_ACCESORIO

      INTO :VAR_CONS_ACCE_MOVIMIENTO;



      SELECT T.CONS_ACCE_TIPO_MOVIMIENTO, T.NOMB_ACCE_TIPO_MOVIMIENTO,

       M.FECH_INICIAL

      FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_TIPO_MOVIMIENTO T

      WHERE T.CONS_ACCE_TIPO_MOVIMIENTO = M.CONS_ACCE_TIPO_MOVIMIENTO

       AND M.CONS_ACCE_MOVIMIENTO = :VAR_CONS_ACCE_MOVIMIENTO

      INTO :CONS_ACCE_TIPO_MOVIMIENTO, :NOMB_ACCE_TIPO_MOVIMIENTO,

       :FECH_INICIAL;



      SUSPEND;

    END

  END

END ^

ALTER PROCEDURE CON_GLO_ACCE_ESTADO (PE_CONS_ACCESORIO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_ESTADO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CODI_ACCE_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER)
AS 


DECLARE VARIABLE VAR_ESTADO VARCHAR(60);

DECLARE VARIABLE VAR_FECH_INIC_BAJA TIMESTAMP;

DECLARE VARIABLE VAR_FECH_FINA_BAJA TIMESTAMP;

BEGIN

  /* Si esta vacía la fecha se asigna la fecha actual */

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';



  /* Estado por defecto */

  CONS_ESTADO = 1;

  ESTADO = 'Activo';

  VAR_ESTADO = '';



  /* Verifico que si tenga movimientos a la fecha */

  IF (EXISTS(SELECT CONS_ACCE_MOVIMIENTO

             FROM GLO_ACCE_MOVIMIENTOS

             WHERE CONS_ACCESORIO = :PE_CONS_ACCESORIO

              AND FECH_INICIAL <= :PE_FECHA)) THEN

  BEGIN

    /* Buscamos el 򬴩mo movimiento de bajas antes de la fecha */

    SELECT MAX(B.CONS_ACCE_MOVIMIENTO)

    FROM GLO_ACCE_MOVI_BAJAS B, GLO_ACCE_MOVIMIENTOS M

    WHERE M.CONS_ACCE_MOVIMIENTO = B.CONS_ACCE_MOVIMIENTO

     AND M.FECH_INICIAL <= :PE_FECHA

     AND M.CONS_ACCESORIO = :PE_CONS_ACCESORIO

     AND M.CONS_ACCE_MOVIMIENTO NOT IN(

         SELECT CONS_ACCE_MOVIMIENTO

         FROM GLO_ACCE_MOVI_ANULADOS)

    INTO :CONS_ACCE_MOVIMIENTO;



    SELECT FECH_INICIAL, FECH_FINAL

    FROM GLO_ACCE_MOVIMIENTOS

    WHERE CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

    ORDER BY CONS_ACCE_MOVIMIENTO

    INTO :VAR_FECH_INIC_BAJA, :VAR_FECH_FINA_BAJA;



  

    /* Buscamos el tipo de baja */

    IF (:CONS_ACCE_MOVIMIENTO IS NOT NULL) THEN

      IF ((:VAR_FECH_FINA_BAJA IS NOT NULL AND :VAR_FECH_FINA_BAJA >= :PE_FECHA) OR

        (NOT EXISTS(SELECT CONS_ACCE_MOVIMIENTO

               FROM GLO_ACCE_MOVIMIENTOS

               WHERE CONS_ACCESORIO = :PE_CONS_ACCESORIO

                AND FECH_INICIAL BETWEEN :VAR_FECH_INIC_BAJA AND :PE_FECHA

                AND CONS_ACCE_TIPO_MOVIMIENTO = 5

                AND CONS_ACCE_MOVIMIENTO NOT IN (

                    SELECT CONS_ACCE_MOVIMIENTO

                    FROM GLO_ACCE_MOVI_ANULADOS)))) THEN

      BEGIN

        SELECT T.NOMB_ACCE_TIPO_MOVIMIENTO, T.CONS_ACCE_TIPO_MOVIMIENTO,

         T.CODI_ACCE_TIPO_MOVIMIENTO, T.CONS_FAMI_MOVIMIENTO

        FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_TIPO_MOVIMIENTO T

        WHERE M.CONS_ACCE_TIPO_MOVIMIENTO = T.CONS_ACCE_TIPO_MOVIMIENTO

         AND M.CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

        INTO :VAR_ESTADO, :CONS_ACCE_TIPO_MOVIMIENTO, :CODI_ACCE_TIPO_MOVIMIENTO,

         :CONS_FAMI_MOVIMIENTO;

        IF (:VAR_ESTADO <> '' or (:VAR_ESTADO IS NOT NULL)) THEN

        BEGIN

          CONS_ESTADO = -1;

          ESTADO = (:VAR_ESTADO);

        END

      END

  END

  ELSE

  BEGIN

    /* Si no tiene movimientos a la fecha esta inactivo */

    CONS_ESTADO = -2;

    ESTADO = 'Desconocido';

  END

  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_ACCE_INFO_GENERAL RETURNS (
	CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(20) CHARACTER SET NONE,
CONS_ACCE_GRUPO INTEGER,
CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
PRESTAMO VARCHAR(20) CHARACTER SET NONE,
USO VARCHAR(240) CHARACTER SET NONE,
MATE_RECOMENDADO VARCHAR(240) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
ANTIGUEDAD INTEGER,
TIEM_FECHA TIMESTAMP,
CONS_TIPO_DOCUMENTO INTEGER,
CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NUME_SERI_RECURSO VARCHAR(20) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
DIME_ENTRADA NUMERIC(15, 2),
DIME_SALIDA NUMERIC(15, 2),
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CODI_ACCE_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER)
AS 


DECLARE VARIABLE VAR_CONS_ACCE_MOVIMIENTO INTEGER;

DECLARE VARIABLE VAR_TEMPORAL TIMESTAMP;

BEGIN

  -- Verifico que tenga permiso sobre las tablas

  IF (EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('GLO_ACCESORIOS,GLO_ACCE_GRUPOS,' ||

              'GLO_ACCE_TIPOS,GLO_RECU_MARCAS', 4, 'S')

             WHERE PERMISO = 1)) THEN

    -- Consultamos los recursos

    FOR SELECT A.CONS_ACCESORIO, A.NUME_INVE_ACCESORIO,

     A.CONS_ACCE_GRUPO, G.CODI_ACCE_GRUPO, G.NOMB_ACCE_GRUPO,

     A.CONS_ACCE_TIPO, T.CODI_ACCE_TIPO, T.NOMB_ACCE_TIPO,

     A.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,

     A.NUME_SERIE,

     CASE PRESTAMO

       WHEN -1 THEN 'No'

       WHEN 1 THEN 'Si'

       ELSE 'Desconocido'

     END,

     A.USO, A.MATE_RECOMENDADO,

     A.DIME_ENTRADA, A.DIME_SALIDA

    FROM GLO_ACCESORIOS A, GLO_ACCE_GRUPOS G, GLO_ACCE_TIPOS T,

     GLO_RECU_MARCAS M

    WHERE (A.CONS_ACCE_GRUPO = T.CONS_ACCE_GRUPO

     AND A.CONS_ACCE_TIPO = T.CONS_ACCE_TIPO)

     AND T.CONS_ACCE_GRUPO = G.CONS_ACCE_GRUPO

     AND A.CONS_RECU_MARCA = M.CONS_RECU_MARCA

    ORDER BY A.CONS_ACCESORIO

    INTO :CONS_ACCESORIO, :NUME_INVE_ACCESORIO,

     :CONS_ACCE_GRUPO, :CODI_ACCE_GRUPO, :NOMB_ACCE_GRUPO,

     :CONS_ACCE_TIPO, :CODI_ACCE_TIPO, :NOMB_ACCE_TIPO,

     :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,

     :NUME_SERIE, :PRESTAMO, :USO, :MATE_RECOMENDADO,

     :DIME_ENTRADA, :DIME_SALIDA

    DO BEGIN

      -- Verifico que tenga permiso sobre las tablas

      IF (EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('CON_GLO_ACCE_UBIC_UNIDAD', 1, 'X')

                 WHERE PERMISO = 1)) THEN

        -- Consultamos la ubicación del Recurso

        SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

         CONS_AREA, CODI_AREA, NOMB_AREA,

         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,

         CONS_LINEA, CODI_LINEA, NOMB_LINEA,

         CONS_SECCION, CODI_SECCION, NOMB_SECCION,

         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,

         OTRA_UBICACION,

         CONS_RECURSO, CODI_RECURSO, CODI_INTE_RECURSO, NUME_SERIE

        FROM CON_GLO_ACCE_UBIC_UNIDAD(:CONS_ACCESORIO, NULL)

        INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

         :CONS_AREA, :CODI_AREA, :NOMB_AREA,

         :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,

         :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,

         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,

         :OTRA_UBICACION,

         :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO, :NUME_SERI_RECURSO;



      /* Consultar la familia del recurso */

      SELECT CODI_RECU_FAMILIA

      FROM GLO_RECURSOS R, GLO_RECU_FAMILIAS F

      WHERE R.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA

       AND R.CONS_RECURSO = :CONS_RECURSO

      INTO :CODI_RECU_FAMILIA;



      -- Verifico que tenga permiso sobre las tablas

      IF (EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('CON_GLO_ACCE_ESTADO', 1, 'X')

                 WHERE PERMISO = 1)) THEN

        -- Consultamos el estado del Recurso

        SELECT ESTADO, CONS_ACCE_TIPO_MOVIMIENTO, CODI_ACCE_TIPO_MOVIMIENTO,

         CONS_FAMI_MOVIMIENTO

        FROM CON_GLO_ACCE_ESTADO(:CONS_ACCESORIO, NULL)

        INTO :ESTADO, :CONS_ACCE_TIPO_MOVIMIENTO, :CODI_ACCE_TIPO_MOVIMIENTO,

         :CONS_FAMI_MOVIMIENTO;



      VAR_CONS_ACCE_MOVIMIENTO = NULL;

      -- Verifico que tenga permiso sobre las tablas

      IF (EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('GLO_ACCE_MOVIMIENTOS,' ||

                  'GLO_ACCE_TIPO_MOVIMIENTO,GLO_ACCE_MOVI_ANULADOS', 3, 'S')

                 WHERE PERMISO = 1)) THEN

      -- Buscamos el 򬴩mo movimiento de ingreso del Accesorio

      SELECT MAX(M.CONS_ACCE_MOVIMIENTO)

      FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_TIPO_MOVIMIENTO T

      WHERE M.CONS_ACCESORIO = :CONS_ACCESORIO

       AND M.CONS_ACCE_TIPO_MOVIMIENTO = T.CONS_ACCE_TIPO_MOVIMIENTO

       AND T.CONS_FAMI_MOVIMIENTO = 1

       AND M.CONS_ACCE_MOVIMIENTO NOT IN(

           SELECT CONS_ACCE_MOVIMIENTO

           FROM GLO_ACCE_MOVI_ANULADOS)

      INTO :VAR_CONS_ACCE_MOVIMIENTO;



      -- Consultamos la fecha y el documento de ingreso del Recurso

      IF (:VAR_CONS_ACCE_MOVIMIENTO IS NOT NULL AND

          -- Verifico que tenga permiso sobre las tablas

          EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('GLO_TIPO_DOCUMENTO', 1, 'S')

                 WHERE PERMISO = 1)) THEN

        SELECT M.FECH_INICIAL, M.NUME_DOCUMENTO,

         M.CONS_TIPO_DOCUMENTO, T.CODI_TIPO_DOCUMENTO,

         T.NOMB_TIPO_DOCUMENTO

        FROM GLO_ACCE_MOVIMIENTOS M, GLO_TIPO_DOCUMENTO T

        WHERE M.CONS_TIPO_DOCUMENTO = T.CONS_TIPO_DOCUMENTO

         AND M.CONS_ACCE_MOVIMIENTO = :VAR_CONS_ACCE_MOVIMIENTO

        INTO :FECH_INGRESO, :NUME_DOCUMENTO,

         :CONS_TIPO_DOCUMENTO, :CODI_TIPO_DOCUMENTO,

         :NOMB_TIPO_DOCUMENTO;



      ANTIGUEDAD = 0;

      -- Asignamos la antiguedad del Recurso

      IF (:FECH_INGRESO IS NOT NULL) THEN

      BEGIN

        VAR_TEMPORAL = 'NOW';

        ANTIGUEDAD = (:VAR_TEMPORAL - :FECH_INGRESO);

      END

      /* Calcular el tiempo de contrataci󮪯

      SELECT TIEMPO, ANO, MES, DIA, TIEM_FECHA

      FROM CON_GLO_ACCE_TIEM_ANTIGUEDAD(:CONS_ACCESORIO, 'NOW')

      INTO :TIEMPO, :ANO, :MES, :DIA, :TIEM_FECHA;



      /* Devolver el registro */

      SUSPEND;

    END

END ^

ALTER PROCEDURE CON_GLO_ACCE_INFO_PLANTAS RETURNS (
	CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CANTIDAD INTEGER)
AS 


DECLARE VARIABLE VAR_CONS_LINE_SECCION INTEGER;

DECLARE VARIABLE VAR_CONS_ACCE_MOVIMIENTO INTEGER;

BEGIN

  -- Verifico que tengan permiso sobre las tablas

  IF (EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('GLO_EMPRESAS,GLO_PLANTAS,' ||

              'GLO_PLAN_LINEAS,GLO_LINEAS,GLO_LINE_SECCIONES,' ||

              'GLO_SECCIONES,GLO_ACCE_TIPOS,GLO_RECURSOS,' ||

              'GLO_ACCE_MOVIMIENTOS,GLO_ACCE_MOVI_TRASLADOS,' ||

              'GLO_ACCE_MOVI_ANULADOS', 11, 'S')

             WHERE PERMISO = 1) AND

      EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('CON_GLO_ACCE_UBICACION', 1, 'X')

             WHERE PERMISO = 1)) THEN

    -- Consultamos la estructura de la empresa

    FOR SELECT E.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,

     P.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA,

     L.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA,

     S.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,

     SL.CONS_LINE_SECCION

    FROM GLO_EMPRESAS E, GLO_PLANTAS P, GLO_PLAN_LINEAS PL,

     GLO_LINEAS L, GLO_LINE_SECCIONES SL, GLO_SECCIONES S

    WHERE E.CONS_EMPRESA = P.CONS_EMPRESA

     AND (P.CONS_PLANTA = PL.CONS_PLANTA

     AND PL.CONS_LINEA = L.CONS_LINEA)

     AND (PL.CONS_PLAN_LINEA = SL.CONS_PLAN_LINEA

     AND SL.CONS_SECCION = S.CONS_SECCION)

    ORDER BY P.CONS_PLANTA

    INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

     :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

     :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,

     :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,

     :VAR_CONS_LINE_SECCION

    DO BEGIN

      -- Consultamos los tipos de los accesorios

      FOR SELECT CONS_ACCE_TIPO, CODI_ACCE_TIPO,

       NOMB_ACCE_TIPO

      FROM GLO_ACCE_TIPOS

      ORDER BY CONS_ACCE_TIPO

      INTO :CONS_ACCE_TIPO, :CODI_ACCE_TIPO,

       :NOMB_ACCE_TIPO

      DO BEGIN

        CANTIDAD = 0;

        -- Consultamos la cantidad de Accesorio que existen en una ubicacion

        -- de un tipo de Accesorio

        FOR SELECT M.CONS_ACCE_MOVIMIENTO

        FROM GLO_ACCESORIOS A, GLO_ACCE_MOVIMIENTOS M

        WHERE A.CONS_ACCESORIO = M.CONS_ACCESORIO

         AND M.CONS_ACCE_MOVIMIENTO NOT IN (

          SELECT CONS_ACCE_MOVIMIENTO

          FROM GLO_ACCE_MOVI_ANULADOS)

         AND M.CONS_ACCE_MOVIMIENTO = (

          SELECT MAX(T.CONS_ACCE_MOVIMIENTO)

          FROM GLO_ACCE_MOVIMIENTOS MO, GLO_ACCE_MOVI_TRASLADOS T

          WHERE MO.CONS_ACCE_MOVIMIENTO = T.CONS_ACCE_MOVIMIENTO

           AND MO.CONS_ACCESORIO = A.CONS_ACCESORIO)

        ORDER BY M.CONS_ACCE_MOVIMIENTO

        INTO :VAR_CONS_ACCE_MOVIMIENTO

        DO BEGIN

          IF (EXISTS(SELECT CONS_ACCE_MOVIMIENTO

                     FROM CON_GLO_ACCE_UBICACION(:VAR_CONS_ACCE_MOVIMIENTO)

                     WHERE CONS_LINE_SECCION = :VAR_CONS_LINE_SECCION)) THEN

            CANTIDAD = (:CANTIDAD + 1);

        END

        -- Si la cantidad es cero o null no retorno valores

        IF (:CANTIDAD > 0 AND :CANTIDAD IS NOT NULL) THEN

          SUSPEND;

      END

    END

     

END ^

ALTER PROCEDURE CON_GLO_ACCE_INFO_TRASLADOS RETURNS (
	CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(20) CHARACTER SET NONE,
CONS_ACCE_GRUPO INTEGER,
CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE)
AS 


BEGIN

  -- Verifico que tenga permiso sobre las tablas

  IF (EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('GLO_ACCESORIOS,GLO_ACCE_GRUPOS,' ||

              'GLO_ACCE_TIPOS,GLO_RECU_MARCAS' ||

              'GLO_ACCE_MOVIMIENTOS,GLO_ACCE_MOVI_TRASLADOS,' ||

              'GLO_ACCE_MOVI_ANULADOS', 7, 'S')

             WHERE PERMISO = 1)) THEN

    -- Consultamos los accesorios

    FOR SELECT DISTINCT A.CONS_ACCESORIO, A.NUME_SERIE, A.NUME_INVE_ACCESORIO,

     A.CONS_ACCE_GRUPO, G.CODI_ACCE_GRUPO, G.NOMB_ACCE_GRUPO,

     A.CONS_ACCE_TIPO, T.CODI_ACCE_TIPO, T.NOMB_ACCE_TIPO,

     A.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,

     A.NUME_SERIE

    FROM GLO_ACCESORIOS A, GLO_ACCE_GRUPOS G, GLO_ACCE_TIPOS T,

     GLO_RECU_MARCAS M

    WHERE (A.CONS_ACCE_GRUPO = T.CONS_ACCE_GRUPO

     AND A.CONS_ACCE_TIPO = T.CONS_ACCE_TIPO)

     AND T.CONS_ACCE_GRUPO = G.CONS_ACCE_GRUPO

     AND A.CONS_RECU_MARCA = M.CONS_RECU_MARCA

     AND A.CONS_ACCESORIO IN (

      SELECT MO.CONS_ACCESORIO

      FROM GLO_ACCE_MOVIMIENTOS MO, GLO_ACCE_MOVI_TRASLADOS TA

      WHERE MO.CONS_ACCE_MOVIMIENTO = TA.CONS_ACCE_MOVIMIENTO

       AND MO.CONS_ACCE_MOVIMIENTO NOT IN(

        SELECT CONS_ACCE_MOVIMIENTO

        FROM GLO_ACCE_MOVI_ANULADOS))

    ORDER BY A.CONS_ACCESORIO

    INTO :CONS_ACCESORIO, :NUME_SERIE, :NUME_INVE_ACCESORIO,

     :CONS_ACCE_GRUPO, :CODI_ACCE_GRUPO, :NOMB_ACCE_GRUPO,

     :CONS_ACCE_TIPO, :CODI_ACCE_TIPO, :NOMB_ACCE_TIPO,

     :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,

     :NUME_SERIE

    DO SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_ACCE_INFO_TRAS_UBIC (PE_CONS_ACCESORIO INTEGER)
RETURNS (
	FECH_INICIAL TIMESTAMP,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CODI_ACCE_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 


BEGIN

  -- Verifico que tenga permiso sobre las tablas

  IF (EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('GLO_ACCE_MOVIMIENTOS,' ||

              'GLO_ACCE_MOVI_TRASLADOS,GLO_ACCE_MOVI_ANULADOS,' ||

              'GLO_ACCE_TIPO_MOVIMIENTO', 4, 'S')

             WHERE PERMISO = 1)) THEN

    -- Consultamos los traslados del accesorio

    FOR SELECT M.FECH_INICIAL,

     M.CONS_ACCE_TIPO_MOVIMIENTO, TM.CODI_ACCE_TIPO_MOVIMIENTO,

     TM.NOMB_ACCE_TIPO_MOVIMIENTO

    FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_MOVI_TRASLADOS T,

     GLO_ACCE_TIPO_MOVIMIENTO TM

    WHERE M.CONS_ACCE_MOVIMIENTO = T.CONS_ACCE_MOVIMIENTO

     AND M.CONS_ACCE_TIPO_MOVIMIENTO = TM.CONS_ACCE_TIPO_MOVIMIENTO

     AND M.CONS_ACCESORIO = :PE_CONS_ACCESORIO

    ORDER BY M.CONS_ACCE_MOVIMIENTO

    INTO :FECH_INICIAL,

     :CONS_ACCE_TIPO_MOVIMIENTO, :CODI_ACCE_TIPO_MOVIMIENTO,

     :NOMB_ACCE_TIPO_MOVIMIENTO

    DO BEGIN

      -- Verifico que tenga permiso sobre las tablas

      IF (EXISTS(SELECT PERMISO

                 FROM CON_PERM_TABLAS('CON_GLO_ACCE_UBIC_UNIDAD', 1, 'X')

                 WHERE PERMISO = 1)) THEN

      BEGIN

        -- Consultamos la ubicaci󮠡ctual

        SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

         CONS_AREA, CODI_AREA, NOMB_AREA,

         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,

         CONS_LINEA, CODI_LINEA, NOMB_LINEA,

         CONS_SECCION, CODI_SECCION, NOMB_SECCION,

         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,

         OTRA_UBICACION

        FROM CON_GLO_ACCE_UBIC_UNIDAD(:PE_CONS_ACCESORIO, :FECH_INICIAL)

        INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

         :CONS_AREA, :CODI_AREA, :NOMB_AREA,

         :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,

         :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,

         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,

         :OTRA_UBICACION;



        -- Asignamos vacío a la ubicacion No Asignado para el informe

        IF (:CONS_EMPRESA = 0) THEN NOMB_EMPRESA = '';

        IF (:CONS_AREA = 0) THEN    NOMB_AREA = '';

        IF (:CONS_PLANTA = 0) THEN  NOMB_PLANTA = '';

        IF (:CONS_LINEA = 0) THEN   NOMB_LINEA = '';

        IF (:CONS_SECCION = 0) THEN NOMB_SECCION = '';

        IF (:CONS_BODEGA = 0) THEN  NOMB_BODEGA = '';

      END

      SUSPEND;

    END

END ^

ALTER PROCEDURE CON_GLO_ACCE_MOVIMIENTO RETURNS (
	CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
CONS_TIPO_DOCUMENTO INTEGER,
CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
CONS_SOLICITA INTEGER,
CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
CONS_ENTREGA INTEGER,
CODI_ENTREGA VARCHAR(12) CHARACTER SET NONE,
NOMB_ENTREGA VARCHAR(102) CHARACTER SET NONE,
CONS_RECIBE INTEGER,
CODI_RECIBE VARCHAR(12) CHARACTER SET NONE,
NOMB_RECIBE VARCHAR(102) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
CONS_ACCESORIO INTEGER,
NUME_INVE_ACCESORIO VARCHAR(12) CHARACTER SET NONE,
CONS_ACCE_GRUPO INTEGER,
CODI_ACCE_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_ACCE_TIPO INTEGER,
CODI_ACCE_TIPO VARCHAR(12) CHARACTER SET NONE,
NOMB_ACCE_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_RECU_MARCA INTEGER,
CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(12) CHARACTER SET NONE,
USO VARCHAR(240) CHARACTER SET NONE,
MATE_RECOMENDADO VARCHAR(240) CHARACTER SET NONE,
IMAGEN BLOB,
DETA_IMAGEN BLOB,
DIME_ENTRADA NUMERIC(15, 2),
DIME_SALIDA NUMERIC(15, 2))
AS 


DECLARE VARIABLE VAR_CONS_ACCE_MOVIMIENTO INTEGER;

BEGIN

  /* Consultamos el personal en su 򬴩mo movimiento */

  FOR SELECT CONS_ACCESORIO, MAX(CONS_ACCE_MOVIMIENTO)

  FROM GLO_ACCE_MOVIMIENTOS

  WHERE CONS_ACCE_MOVIMIENTO NOT IN(

        SELECT CONS_ACCE_MOVIMIENTO

        FROM GLO_ACCE_MOVI_ANULADOS)

  GROUP BY CONS_ACCESORIO

  INTO :CONS_ACCESORIO, :VAR_CONS_ACCE_MOVIMIENTO

  DO BEGIN

    IF (EXISTS(SELECT CONS_ESTADO

      FROM CON_GLO_ACCE_ESTADO(:CONS_ACCESORIO, NULL)

      WHERE CONS_ESTADO = 1)) THEN

    BEGIN

      /* Consultamos los datos del 򬴩mo movimiento */

      SELECT M.CONS_ACCE_MOVIMIENTO, M.CONS_ACCE_TIPO_MOVIMIENTO,

        M.CONS_ACCESORIO, M.CONS_TIPO_DOCUMENTO, M.NUME_DOCUMENTO,

        M.CONS_SOLICITA, M.CONS_ENTREGA, M.CONS_RECIBE,

        M.FECH_SISTEMA, M.USUA_SISTEMA, M.FECH_INICIAL, M.FECH_FINAL,

        M.OBSERVACIONES,

        TD.CODI_TIPO_DOCUMENTO, TD.NOMB_TIPO_DOCUMENTO

      FROM GLO_ACCE_MOVIMIENTOS M, GLO_TIPO_DOCUMENTO TD

      WHERE M.CONS_TIPO_DOCUMENTO = TD.CONS_TIPO_DOCUMENTO

       AND M.CONS_ACCE_MOVIMIENTO = :VAR_CONS_ACCE_MOVIMIENTO

      ORDER BY M.CONS_ACCE_MOVIMIENTO

      INTO :CONS_ACCE_MOVIMIENTO, :CONS_ACCE_TIPO_MOVIMIENTO,

        :CONS_ACCESORIO, :CONS_TIPO_DOCUMENTO, :NUME_DOCUMENTO,

        :CONS_SOLICITA, :CONS_ENTREGA, :CONS_RECIBE,

        :FECH_SISTEMA, :USUA_SISTEMA, :FECH_INICIAL, :FECH_FINAL,

        :OBSERVACIONES, :CODI_TIPO_DOCUMENTO, :NOMB_TIPO_DOCUMENTO;

  

      /* Consultamos el Accesorio */

      SELECT R.NUME_INVE_ACCESORIO,

       G.CONS_ACCE_GRUPO, G.CODI_ACCE_GRUPO, G.NOMB_ACCE_GRUPO,

       T.CONS_ACCE_TIPO, T.CODI_ACCE_TIPO, T.NOMB_ACCE_TIPO,

       M.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,

       R.NUME_SERIE, R.USO, R.MATE_RECOMENDADO, R.IMAGEN,

       R.DETA_IMAGEN, R.DIME_ENTRADA, R.DIME_SALIDA

      FROM GLO_ACCESORIOS R, GLO_ACCE_GRUPOS G, GLO_ACCE_TIPOS T,

       GLO_RECU_MARCAS M

      WHERE R.CONS_ACCE_GRUPO = G.CONS_ACCE_GRUPO

       AND R.CONS_ACCE_TIPO = T.CONS_ACCE_TIPO

       AND R.CONS_RECU_MARCA = M.CONS_RECU_MARCA

       AND R.CONS_ACCESORIO = :CONS_ACCESORIO

      ORDER BY R.CONS_ACCESORIO

      INTO :NUME_INVE_ACCESORIO,

       :CONS_ACCE_GRUPO, :CODI_ACCE_GRUPO, :NOMB_ACCE_GRUPO,

       :CONS_ACCE_TIPO, :CODI_ACCE_TIPO, :NOMB_ACCE_TIPO,

       :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,

       :NUME_SERIE, :USO, :MATE_RECOMENDADO, :IMAGEN,

       :DETA_IMAGEN, :DIME_ENTRADA, :DIME_SALIDA;



      /* Consultamos el nombre del personal que solicita */

      SELECT CODI_PERSONAL, NOMB_COMPLETO

      FROM GLO_PERSONAL

      WHERE CONS_PERSONAL = :CONS_SOLICITA

      ORDER BY CONS_PERSONAL

      INTO :CODI_SOLICITA, :NOMB_SOLICITA;



      /* Consultamos el nombre del personal que Entrega */

      SELECT CODI_PERSONAL, NOMB_COMPLETO

      FROM GLO_PERSONAL

      WHERE CONS_PERSONAL = :CONS_ENTREGA

      ORDER BY CONS_PERSONAL

      INTO :CODI_ENTREGA, :NOMB_ENTREGA;



      /* Consultamos el nombre del personal que Recibe */

      SELECT CODI_PERSONAL, NOMB_COMPLETO

      FROM GLO_PERSONAL

      WHERE CONS_PERSONAL = :CONS_RECIBE

      ORDER BY CONS_PERSONAL

      INTO :CODI_RECIBE, :NOMB_RECIBE;



      SUSPEND;

    END

  END

END ^

ALTER PROCEDURE CON_GLO_ACCE_TIEM_ANTIGUEDAD (PE_CONS_ACCESORIO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
TIEM_FECHA TIMESTAMP)
AS 


DECLARE VARIABLE VAR_TIEMPO TIMESTAMP;

DECLARE VARIABLE VAR_FECH_INICIAL TIMESTAMP;

DECLARE VARIABLE VAR_FECH_FINAL TIMESTAMP;

BEGIN

  /* Inicializar variables */

  VAR_TIEMPO = CAST('01/01/1900' AS TIMESTAMP);



  /* Recorrer los ingresos y reingresos */

  FOR SELECT M.FECH_INICIAL

  FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_TIPO_MOVIMIENTO T

  WHERE M.CONS_ACCESORIO = :PE_CONS_ACCESORIO

  AND M.FECH_INICIAL <= :PE_FECHA

  AND M.CONS_ACCE_TIPO_MOVIMIENTO = T.CONS_ACCE_TIPO_MOVIMIENTO

  AND T.CONS_FAMI_MOVIMIENTO IN (1, 5)

  AND M.CONS_ACCE_MOVIMIENTO NOT IN(

     SELECT CONS_ACCE_MOVIMIENTO

     FROM GLO_ACCE_MOVI_ANULADOS)

  INTO :VAR_FECH_INICIAL

  DO BEGIN

    /* Inicializar variables */

    VAR_FECH_FINAL = CAST('01/01/1900' AS TIMESTAMP);



    /* Consultar si tiene alguna baja */

    SELECT MIN(M.FECH_INICIAL)

    FROM GLO_ACCE_MOVIMIENTOS M, GLO_ACCE_TIPO_MOVIMIENTO T

    WHERE M.CONS_ACCESORIO = :PE_CONS_ACCESORIO

    AND M.FECH_INICIAL >= :VAR_FECH_INICIAL

    AND M.CONS_ACCE_TIPO_MOVIMIENTO = T.CONS_ACCE_TIPO_MOVIMIENTO

    AND T.CONS_FAMI_MOVIMIENTO IN (3, 4)

    AND M.CONS_ACCE_MOVIMIENTO NOT IN(

       SELECT CONS_ACCE_MOVIMIENTO

       FROM GLO_ACCE_MOVI_ANULADOS)

    INTO :VAR_FECH_FINAL;



    /* Verificar que la variable no este vacía */

    IF (:VAR_FECH_FINAL IS NULL) THEN

      VAR_FECH_FINAL = :PE_FECHA;



    /* Acumular la fecha */

    VAR_TIEMPO = (:VAR_TIEMPO + (:VAR_FECH_FINAL - :VAR_FECH_INICIAL));

  END

  /* Decodificar la acumulación de fecha */
  ANO = EXTRACT(YEAR FROM :VAR_TIEMPO) - 1900;
  MES = EXTRACT(MONTH FROM :VAR_TIEMPO);
  DIA = EXTRACT(DAY FROM :VAR_TIEMPO);

  /* Asignar el tiempo de contratación */
  TIEMPO = CAST(:ANO AS VARCHAR(4)) || '.' ||

    CAST(:MES AS VARCHAR(2)) || '.' || CAST(:DIA AS VARCHAR(4));

  /* Asignar el tiempo en formato fecha */
  TIEM_FECHA = (:VAR_TIEMPO);

  SUSPEND;
END ^

ALTER PROCEDURE CON_GLO_ACCE_UBICACION (PE_CONS_ACCE_MOVIMIENTO INTEGER)
RETURNS (
	CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCESORIO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE)
AS 


DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;

BEGIN

  -- Buscamos el consecutivo del accesorio

  SELECT DISTINCT CONS_ACCESORIO

  FROM GLO_ACCE_MOVIMIENTOS

  WHERE CONS_ACCE_MOVIMIENTO = :PE_CONS_ACCE_MOVIMIENTO

  ORDER BY CONS_ACCE_MOVIMIENTO

  INTO :CONS_ACCESORIO;



  -- Buscamos el 򬴩mo movimiento de traslados

  SELECT MAX(T.CONS_ACCE_MOVIMIENTO)

  FROM GLO_ACCE_MOVI_TRASLADOS T, GLO_ACCE_MOVIMIENTOS M

  WHERE T.CONS_ACCE_MOVIMIENTO = M.CONS_ACCE_MOVIMIENTO

   AND M.CONS_ACCESORIO = :CONS_ACCESORIO

   AND M.CONS_ACCE_MOVIMIENTO NOT IN(

       SELECT CONS_ACCE_MOVIMIENTO

       FROM GLO_ACCE_MOVI_ANULADOS)

  INTO :CONS_ACCE_MOVIMIENTO;



  -- Consultamos Si el traslado fue hecho para planta

  IF (EXISTS(SELECT CONS_RECURSO

             FROM GLO_ACCE_MOVI_TRASLADOS

             WHERE CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

              AND CONS_RECURSO IS NULL)) THEN

    -- Consultamos la ubicación del 򬴩mo movimiento de traslados

    SELECT E.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,

     A.CONS_AREA, A.CODI_AREA, A.NOMB_AREA,

     P.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA,

     L.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA,

     S.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,

     B.CONS_BODEGA, B.CODI_BODEGA, B.NOMB_BODEGA,

     T.OTRA_UBICACION, T.CONS_UBIC_TIPO, T.CONS_PLAN_LINEA,

     T.CONS_LINE_SECCION

    FROM GLO_ACCE_MOVI_TRASLADOS T, GLO_EMPRESAS E, GLO_AREAS A,

     GLO_PLANTAS P, GLO_PLAN_LINEAS PL, GLO_LINEAS L,

     GLO_LINE_SECCIONES LS, GLO_SECCIONES S, GLO_BODEGAS B

    WHERE T.CONS_EMPRESA = E.CONS_EMPRESA

     AND T.CONS_AREA = A.CONS_AREA

     AND T.CONS_PLANTA = P.CONS_PLANTA

     AND (T.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA

     AND PL.CONS_PLANTA = P.CONS_PLANTA

     AND PL.CONS_LINEA = L.CONS_LINEA)

     AND (T.CONS_LINE_SECCION = LS.CONS_LINE_SECCION

     AND LS.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA

     AND LS.CONS_SECCION = S.CONS_SECCION)

     AND T.CONS_BODEGA = B.CONS_BODEGA

     AND T.CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

    INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,

      :CODI_AREA, :NOMB_AREA, :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

      :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_SECCION, :CODI_SECCION,

      :NOMB_SECCION, :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,

      :CONS_UBIC_TIPO, :CONS_PLAN_LINEA, :CONS_LINE_SECCION;

  -- el traslado fue hecho para un recurso

  ELSE

  BEGIN

    -- Consultamos el recurso y el 򬴩mo movimiento del recurso

    SELECT R.CONS_RECURSO, R.CODI_RECURSO, R.CODI_INTE_RECURSO,

     R.NUME_SERIE, R.CONS_RECU_MOVIMIENTO, R.CONS_RECU_FAMILIA,

     R.CODI_RECU_FAMILIA, R.NOMB_RECU_FAMILIA

    FROM CON_GLO_RECU_MOVIMIENTO R, GLO_ACCE_MOVI_TRASLADOS T

    WHERE R.CONS_RECURSO = T.CONS_RECURSO

     AND T.CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

    ORDER BY R.CONS_RECU_MOVIMIENTO

    INTO :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO, :NUME_SERIE,

     :VAR_CONS_RECU_MOVIMIENTO, :CONS_RECU_FAMILIA, :CODI_RECU_FAMILIA,

     :NOMB_RECU_FAMILIA;



    -- Consultamos la ubicación del 򬴩mo movimiento de traslados

    SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

     CONS_AREA, CODI_AREA, NOMB_AREA,

     CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,

     CONS_LINEA, CODI_LINEA, NOMB_LINEA,

     CONS_SECCION, CODI_SECCION, NOMB_SECCION,

     CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,

     OTRA_UBICACION, CONS_UBIC_TIPO, CONS_PLAN_LINEA,

     CONS_LINE_SECCION

    FROM CON_GLO_RECU_UBICACION(:VAR_CONS_RECU_MOVIMIENTO)

    INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,

      :CODI_AREA, :NOMB_AREA, :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

      :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_SECCION, :CODI_SECCION,

      :NOMB_SECCION, :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,

      :CONS_UBIC_TIPO, :CONS_PLAN_LINEA, :CONS_LINE_SECCION;

  END

  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_ACCE_UBIC_UNIDAD (PE_CONS_ACCESORIO INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_ACCE_MOVIMIENTO INTEGER,
CONS_ACCESORIO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_RECURSO INTEGER,
CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE,
CONS_RECU_FAMILIA INTEGER,
CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP)
AS 


DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;

BEGIN

  -- Si el parámetro de entrada fecha está vacío le asigno la fecha actual

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';



  -- Verifico que tenga permiso sobre las tablas

  IF (EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('GLO_ACCE_MOVI_TRASLADOS,' ||

               'GLO_ACCE_MOVIMIENTOS,GLO_ACCE_MOVI_ANULADOS', 3, 'S')

             WHERE PERMISO = 1)) THEN

    -- Buscamos el 򬴩mo movimiento de traslados

    SELECT MAX(T.CONS_ACCE_MOVIMIENTO)

    FROM GLO_ACCE_MOVI_TRASLADOS T, GLO_ACCE_MOVIMIENTOS M

    WHERE T.CONS_ACCE_MOVIMIENTO = M.CONS_ACCE_MOVIMIENTO

     AND M.CONS_ACCESORIO = :PE_CONS_ACCESORIO

     AND M.FECH_INICIAL <= :PE_FECHA

     AND M.CONS_ACCE_MOVIMIENTO NOT IN(

         SELECT CONS_ACCE_MOVIMIENTO

         FROM GLO_ACCE_MOVI_ANULADOS)

    INTO :CONS_ACCE_MOVIMIENTO;



  -- Consultamos Si el traslado fue hecho para planta

  IF (EXISTS(SELECT CONS_RECURSO

             FROM GLO_ACCE_MOVI_TRASLADOS

             WHERE CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

              AND CONS_RECURSO IS NULL)) THEN

  BEGIN

    -- Verifico que tenga permiso sobre las tablas

    IF (EXISTS(SELECT PERMISO

               FROM CON_PERM_TABLAS('GLO_ACCE_MOVI_TRASLADOS,' ||

                 'GLO_EMPRESAS,GLO_AREAS,' ||

                 'GLO_PLANTAS,GLO_PLAN_LINEAS,GLO_LINEAS,' ||

                 'GLO_LINE_SECCIONES,GLO_SECCIONES,GLO_BODEGAS', 9, 'S')

               WHERE PERMISO = 1)) THEN

      -- Consultamos la ubicación del 򬴩mo movimiento de traslados

      SELECT E.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,

       A.CONS_AREA, A.CODI_AREA, A.NOMB_AREA,

       P.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA,

       L.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA,

       S.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,

       B.CONS_BODEGA, B.CODI_BODEGA, B.NOMB_BODEGA,

       T.OTRA_UBICACION, T.CONS_UBIC_TIPO, T.CONS_PLAN_LINEA,

       T.CONS_LINE_SECCION, M.FECH_INICIAL, M.FECH_FINAL,

       M.CONS_ACCESORIO

      FROM GLO_ACCE_MOVI_TRASLADOS T, GLO_EMPRESAS E, GLO_AREAS A,

       GLO_PLANTAS P, GLO_PLAN_LINEAS PL, GLO_LINEAS L,

       GLO_LINE_SECCIONES LS, GLO_SECCIONES S, GLO_BODEGAS B,

       GLO_ACCE_MOVIMIENTOS M

      WHERE T.CONS_EMPRESA = E.CONS_EMPRESA

       AND T.CONS_AREA = A.CONS_AREA

       AND T.CONS_PLANTA = P.CONS_PLANTA

       AND (T.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA

       AND PL.CONS_PLANTA = P.CONS_PLANTA

       AND PL.CONS_LINEA = L.CONS_LINEA)

       AND (T.CONS_LINE_SECCION = LS.CONS_LINE_SECCION

       AND LS.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA

       AND LS.CONS_SECCION = S.CONS_SECCION)

       AND T.CONS_BODEGA = B.CONS_BODEGA

       AND T.CONS_ACCE_MOVIMIENTO = M.CONS_ACCE_MOVIMIENTO

       AND T.CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

      INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,

        :CODI_AREA, :NOMB_AREA, :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

        :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_SECCION, :CODI_SECCION,

        :NOMB_SECCION, :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,

        :CONS_UBIC_TIPO, :CONS_PLAN_LINEA, :CONS_LINE_SECCION,

        :FECH_INICIAL, :FECH_FINAL, :CONS_ACCESORIO;

  END

  -- el traslado fue hecho para un recurso

  ELSE

  BEGIN

    -- Verifico que tenga permiso sobre las tablas

    IF (EXISTS(SELECT PERMISO

               FROM CON_PERM_TABLAS('CON_GLO_RECU_MOVIMIENTO', 1, 'X')

               WHERE PERMISO = 1) AND

        EXISTS(SELECT PERMISO

               FROM CON_PERM_TABLAS('GLO_ACCE_MOVI_TRASLADOS', 1, 'S')

               WHERE PERMISO = 1)) THEN

      -- Consultamos el recurso y el 򬴩mo movimiento del recurso

      SELECT R.CONS_RECURSO, R.CODI_RECURSO, R.CODI_INTE_RECURSO,

       R.NUME_SERIE, R.CONS_RECU_MOVIMIENTO, R.CONS_RECU_FAMILIA,

       R.CODI_RECU_FAMILIA, R.NOMB_RECU_FAMILIA

      FROM CON_GLO_RECU_MOVIMIENTO R, GLO_ACCE_MOVI_TRASLADOS T

      WHERE R.CONS_RECURSO = T.CONS_RECURSO

       AND T.CONS_ACCE_MOVIMIENTO = :CONS_ACCE_MOVIMIENTO

       AND R.FECH_INICIAL <= :PE_FECHA

      ORDER BY R.CONS_RECU_MOVIMIENTO

      INTO :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO, :NUME_SERIE,

       :VAR_CONS_RECU_MOVIMIENTO, :CONS_RECU_FAMILIA,

       :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA;



    -- Verifico que tenga permiso sobre las tablas

    IF (EXISTS(SELECT PERMISO

               FROM CON_PERM_TABLAS('CON_GLO_RECU_UBICACION', 1, 'X')

               WHERE PERMISO = 1)) THEN

      -- Consultamos la ubicación del 򬴩mo movimiento de traslados

      SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

       CONS_AREA, CODI_AREA, NOMB_AREA,

       CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,

       CONS_LINEA, CODI_LINEA, NOMB_LINEA,

       CONS_SECCION, CODI_SECCION, NOMB_SECCION,

       CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,

       OTRA_UBICACION, CONS_UBIC_TIPO, CONS_PLAN_LINEA,

       CONS_LINE_SECCION

      FROM CON_GLO_RECU_UBICACION(:VAR_CONS_RECU_MOVIMIENTO)

      INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,

        :CODI_AREA, :NOMB_AREA, :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

        :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_SECCION, :CODI_SECCION,

        :NOMB_SECCION, :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,

        :CONS_UBIC_TIPO, :CONS_PLAN_LINEA, :CONS_LINE_SECCION;

  END

  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_GRUP_TALLAS RETURNS (
	CONS_GRUP_TALLAS INTEGER,
CODI_GRUP_TALLAS VARCHAR(12) CHARACTER SET NONE,
NOMB_GRUP_TALLAS VARCHAR(60) CHARACTER SET NONE,
TALLAS VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 


begin

  /*  Recorrer el maestro de grupos de tallas  */

  For Select cons_grup_tallas, codi_grup_tallas, nomb_grup_tallas,

    fech_sistema, usua_sistema

  from GLO_GRUP_TALLAS

  Order by nomb_grup_tallas

  Into :cons_grup_tallas, :codi_grup_tallas, :nomb_grup_tallas,

    :fech_sistema, :usua_sistema do

  Begin

        /*  Buscar las tallas como vector  */

        Select tallas

        from CON_GLO_TALL_GRUPO(:CONS_GRUP_TALLAS)

        Into :Tallas;

        suspend;

  End

end ^

ALTER PROCEDURE CON_GLO_PERS_ACTIVO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CONS_PERS_CARGO INTEGER,
CONS_PERS_CENT_COSTO INTEGER,
CONS_COST_GRUPO INTEGER)
AS 


DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

BEGIN

  /*  VALIDAR LA FECHA  */

  IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /* CONSULTAR EL PERSONAL */

  FOR SELECT CONS_PERSONAL, CODI_PERSONAL,

   NOMB_COMPLETO

  FROM GLO_PERSONAL

  ORDER BY CONS_PERSONAL

  INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO

  DO BEGIN

            /* BUSCO EL یTIMO MOVIMIENTO DE TRASLADOS DEL PERSONAL */

            SELECT FIRST 1 T.CONS_PERS_MOVIMIENTO, M.CONS_PERS_TIPO_MOVIMIENTO,

               T.CONS_UBIC_TIPO, T.CONS_EMPRESA, T.CONS_AREA,

               T.CONS_PLANTA, T.CONS_PLAN_LINEA, T.CONS_LINE_SECCION,

               T.CONS_BODEGA, T.OTRA_UBICACION, T.CONS_TURNO,

               T.CONS_PERS_CARGO, T.CONS_PERS_CENT_COSTO,

               T.CONS_COST_GRUPO

            FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_TRASLADOS T

            WHERE M.CONS_PERS_MOVIMIENTO = T.CONS_PERS_MOVIMIENTO

            AND M.CONS_PERSONAL = :CONS_PERSONAL

            AND (M.FECH_INICIAL <= :PE_FECHA AND

                 (M.FECH_FINAL >= :PE_FECHA OR M.FECH_FINAL IS NULL))

            AND M.CONS_PERS_MOVIMIENTO NOT IN(

               SELECT CONS_PERS_MOVIMIENTO

               FROM GLO_PERS_MOVI_ANULADOS)

            ORDER BY T.CONS_PERS_MOVIMIENTO DESC

            INTO :VAR_CONS_PERS_MOVIMIENTO, :CONS_PERS_TIPO_MOVIMIENTO,

               :CONS_UBIC_TIPO, :CONS_EMPRESA, :CONS_AREA,

               :CONS_PLANTA, :CONS_PLAN_LINEA, :CONS_LINE_SECCION,

               :CONS_BODEGA, :OTRA_UBICACION, :CONS_TURNO,

               :CONS_PERS_CARGO, :CONS_PERS_CENT_COSTO,

               :CONS_COST_GRUPO;

             /*  CONSULTAR LA INFORMACIÓN DEL TIPO DE MOVIMIENTO  */

             SELECT T.CONS_FAMI_MOVIMIENTO, T.CONS_ESTADO

             FROM VIS_GLO_PERS_TIPO_MOVIMIENTO T

             WHERE T.CONS_PERS_TIPO_MOVIMIENTO = :CONS_PERS_TIPO_MOVIMIENTO

             INTO :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO;

             /*  SI EL ESTADO ES 1 (ACTIVO) GENERAR EL REGISTRO  */

             IF (:CONS_ESTADO = 1) THEN

                 SUSPEND;

  END

END ^

ALTER PROCEDURE CON_GLO_PERS_ACTI_DIRECCION RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CONS_PERS_CARGO INTEGER,
CONS_PERS_CENT_COSTO INTEGER,
CONS_COST_GRUPO INTEGER)
AS 


BEGIN

  FOR

    SELECT CONS_PERSONAL,

         CODI_PERSONAL,

         NOMB_COMPLETO,

         CONS_PERS_TIPO_MOVIMIENTO,

         CONS_FAMI_MOVIMIENTO,

         CONS_ESTADO,

         CONS_UBIC_TIPO,

         CONS_EMPRESA,

         CONS_AREA,

         CONS_PLANTA,

         CONS_PLAN_LINEA,

         CONS_LINE_SECCION,

         CONS_BODEGA,

         OTRA_UBICACION,

         CONS_TURNO,

         CONS_PERS_CARGO,

         CONS_PERS_CENT_COSTO,

         CONS_COST_GRUPO

    from CON_GLO_PERS_UBIC_FECHA('NOW')

    WHERE CONS_ESTADO = 1

    AND CONS_COST_GRUPO = 2 /*  ADMINISTRACION  */

    INTO :CONS_PERSONAL,

         :CODI_PERSONAL,

         :NOMB_COMPLETO,

         :CONS_PERS_TIPO_MOVIMIENTO,

         :CONS_FAMI_MOVIMIENTO,

         :CONS_ESTADO,

         :CONS_UBIC_TIPO,

         :CONS_EMPRESA,

         :CONS_AREA,

         :CONS_PLANTA,

         :CONS_PLAN_LINEA,

         :CONS_LINE_SECCION,

         :CONS_BODEGA,

         :OTRA_UBICACION,

         :CONS_TURNO,

         :CONS_PERS_CARGO,

         :CONS_PERS_CENT_COSTO,

         :CONS_COST_GRUPO

  DO

  BEGIN

    SUSPEND;

  END

END ^

ALTER PROCEDURE CON_GLO_PERS_ANTIGUEDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP)
AS 


DECLARE VARIABLE VAR_PERS_MOVIMIENTO INTEGER;

DECLARE VARIABLE VAR_PERS_BAJA_PERMANENTE INTEGER;

DECLARE VARIABLE VAR_EXISTE INTEGER;

BEGIN

  -- Inicializo los parámetros de salida

  ANTIGUEDAD = 0;

  FECH_INGRESO = NULL;



  -- Verifico que la fecha no sea null, de lo contrario le asigno NOW

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';

      -- Consultamos la 򬴩ma baja permanente del personal

      SELECT MAX(CONS_PERS_MOVIMIENTO)

      FROM GLO_PERS_MOVIMIENTOS

      WHERE CONS_PERSONAL = :PE_CONS_PERSONAL

       AND FECH_INICIAL <= :PE_FECHA

       AND CONS_PERS_TIPO_MOVIMIENTO IN(

        SELECT CONS_PERS_TIPO_MOVIMIENTO

        FROM GLO_PERS_TIPO_MOVIMIENTO

        WHERE CONS_FAMI_MOVIMIENTO = 4)

      INTO :ANTIGUEDAD; -- :VAR_PERS_BAJA_PERMANENTE;



  -- Si no encontro ninguna baja permanente asigno -1

  IF (:VAR_PERS_BAJA_PERMANENTE IS NULL) THEN

    VAR_PERS_BAJA_PERMANENTE = -1;



  -- Consultamos si tiene permisos sobre las tablas

  IF (EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('GLO_PERS_MOVIMIENTOS,' ||

              'GLO_PERS_TIPO_MOVIMIENTO', 2, 'S')

             WHERE PERMISO = 1)) THEN

      -- Consultamos el 򬴩mo movimiento de ingreso o reingreso del personal

      SELECT MAX(CONS_PERS_MOVIMIENTO)

      FROM GLO_PERS_MOVIMIENTOS

      WHERE CONS_PERSONAL = :PE_CONS_PERSONAL

       AND FECH_INICIAL <= :PE_FECHA

       AND CONS_PERS_MOVIMIENTO >= :VAR_PERS_BAJA_PERMANENTE

       AND CONS_PERS_TIPO_MOVIMIENTO IN(

        SELECT CONS_PERS_TIPO_MOVIMIENTO

        FROM GLO_PERS_TIPO_MOVIMIENTO

        WHERE CONS_FAMI_MOVIMIENTO IN (1, 5))

      INTO :VAR_PERS_MOVIMIENTO;



  -- Consultamos si tiene permisos sobre las tablas

  IF (EXISTS(SELECT PERMISO

             FROM CON_PERM_TABLAS('GLO_PERS_MOVIMIENTOS', 1, 'S')

             WHERE PERMISO = 1)) THEN

    -- Consultamos la fecha de ingreso

    SELECT FECH_INICIAL

    FROM GLO_PERS_MOVIMIENTOS

    WHERE CONS_PERS_MOVIMIENTO = :VAR_PERS_MOVIMIENTO

    INTO :FECH_INGRESO;



  -- Si no tiene fecha de ingreso asigno la fecha del parámetro de entrada

  IF (:FECH_INGRESO IS NULL) THEN

    ANTIGUEDAD = 0;

  ELSE

    -- Asignamos la antiguedad en d

    ANTIGUEDAD = (:PE_FECHA - :FECH_INGRESO);



  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_AVIS_VENC_CONTRATO RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
DIAS_VENC_CONTRATO INTEGER)
AS 


begin

     FOR SELECT CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,

         NOMB_EMPRESA, NOMB_AREA, NOMB_PLANTA, NOMB_LINEA,

         NOMB_SECCION, NOMB_BODEGA, NOMB_PERS_CARGO,

         NOMB_PERS_CENT_COSTO, NOMB_COST_GRUPO, NOMB_PERS_TIPO_CONTRATO,

         NUME_CONTRATO, NOMB_PERI_PAGO,

         ESTADO, CODI_TURNO, TIPO_TURNO, FECH_INGRESO, DURACION,

         DIAS_VENCIMIENTO, FECH_VENCIMIENTO, DIAS_VENC_CONTRATO

     FROM CON_GLO_PERS_INFO_GENERAL

     WHERE DIAS_VENCIMIENTO <= DIAS_VENC_CONTRATO

     INTO :CONS_PERSONAL, :CODI_PERSONAL,  :NOMB_COMPLETO,

         :NOMB_EMPRESA, :NOMB_AREA, :NOMB_PLANTA, :NOMB_LINEA,

         :NOMB_SECCION, :NOMB_BODEGA, :NOMB_PERS_CARGO,

         :NOMB_PERS_CENT_COSTO, :NOMB_COST_GRUPO, :NOMB_PERS_TIPO_CONTRATO,

         :NUME_CONTRATO, :NOMB_PERI_PAGO,

         :ESTADO, :CODI_TURNO, :TIPO_TURNO, :FECH_INGRESO, :DURACION,

         :DIAS_VENCIMIENTO, :FECH_VENCIMIENTO, :DIAS_VENC_CONTRATO

     DO

         SUSPEND;

end ^

ALTER PROCEDURE CON_GLO_PERS_CONF_SALA_UNIDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO INTEGER)
AS 


DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

BEGIN

  /*  VALIDAR LA FECHA DE ENTRADA  */

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';



  /*  BUSCAR EL ULTIMO MOVIMIENTO DE DATOS CONFIDENCIALES  */

  SELECT

  FIRST 1

  C.CONS_PERS_MOVIMIENTO, C.VALO_SALARIO, C.AUXI_TRANSPORTE, C.AUXI_SALARIAL,

     C.APLI_INCENTIVO

  FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_CONFIDENCIAL C

  WHERE M.CONS_PERS_MOVIMIENTO = C.CONS_PERS_MOVIMIENTO

   AND M.CONS_PERSONAL = :PE_CONS_PERSONAL

   AND M.FECH_INICIAL <= :PE_FECHA

   AND M.CONS_PERS_MOVIMIENTO NOT IN(

       SELECT CONS_PERS_MOVIMIENTO

       FROM GLO_PERS_MOVI_ANULADOS)

   ORDER BY M.FECH_INICIAL DESC

  INTO :VAR_CONS_PERS_MOVIMIENTO, :VALO_SALARIO, :AUXI_TRANSPORTE, :AUXI_SALARIAL,

     :APLI_INCENTIVO;

  /*  GENERAR EL REGISTRO  */

  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_CONF_UNIDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO INTEGER,
DURACION NUMERIC(15, 5),
DIAS_VENC_CONTRATO INTEGER)
AS 


DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

BEGIN

  -- Verifico que el parámetro de entrada PE_FECHA este lleno, sino

  -- le asigno NOW

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';



  -- Buscamos el 򬴩mo movimiento de datos confidenciales del personal

  SELECT MAX(C.CONS_PERS_MOVIMIENTO)

  FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_CONFIDENCIAL C

  WHERE M.CONS_PERS_MOVIMIENTO = C.CONS_PERS_MOVIMIENTO

   AND M.CONS_PERSONAL = :PE_CONS_PERSONAL

   AND M.FECH_INICIAL <= :PE_FECHA

   AND M.CONS_PERS_MOVIMIENTO NOT IN(

       SELECT CONS_PERS_MOVIMIENTO

       FROM GLO_PERS_MOVI_ANULADOS)

  INTO :VAR_CONS_PERS_MOVIMIENTO;

  

    SELECT C.CONS_PERS_NIVE_SALARIAL, N.CODI_PERS_NIVE_SALARIAL, N.NOMB_PERS_NIVE_SALARIAL,

     C.CONS_PERS_TIPO_CONTRATO, T.CODI_PERS_TIPO_CONTRATO, T.NOMB_PERS_TIPO_CONTRATO,

     C.CONS_PERI_PAGO, P.CODI_PERI_PAGO, P.NOMB_PERI_PAGO,

     C.NUME_CONTRATO, C.VALO_SALARIO, C.AUXI_TRANSPORTE, C.AUXI_SALARIAL,

     C.APLI_INCENTIVO, C.DIAS_VENC_CONTRATO

    FROM GLO_PERS_MOVI_CONFIDENCIAL C, GLO_PERS_NIVE_SALARIALES N,

     GLO_PERS_TIPO_CONTRATO T, SIS_PERI_PAGO P

    WHERE C.CONS_PERS_MOVIMIENTO = :VAR_CONS_PERS_MOVIMIENTO

     AND C.CONS_PERS_NIVE_SALARIAL = N.CONS_PERS_NIVE_SALARIAL

     AND C.CONS_PERS_TIPO_CONTRATO = T.CONS_PERS_TIPO_CONTRATO

     AND C.CONS_PERI_PAGO = P.CONS_PERI_PAGO

    INTO :CONS_PERS_NIVE_SALARIAL, :CODI_PERS_NIVE_SALARIAL, :NOMB_PERS_NIVE_SALARIAL,

     :CONS_PERS_TIPO_CONTRATO, :CODI_PERS_TIPO_CONTRATO, :NOMB_PERS_TIPO_CONTRATO,

     :CONS_PERI_PAGO, :CODI_PERI_PAGO, :NOMB_PERI_PAGO,

     :NUME_CONTRATO, :VALO_SALARIO, :AUXI_TRANSPORTE, :AUXI_SALARIAL,

     :APLI_INCENTIVO, :DIAS_VENC_CONTRATO;

   

    SELECT T.DURACION * U.DURA_DIAS

    FROM GLO_PERS_TIPO_CONTRATO T, SIS_UNID_MEDI_TIEMPO U

    WHERE T.CONS_PERS_TIPO_CONTRATO = :CONS_PERS_TIPO_CONTRATO

     AND T.CONS_UNID_MEDI_TIEMPO = U.CONS_UNID_MEDI_TIEMPO

    INTO :DURACION;



  IF (:DURACION IS NULL) THEN

    DURACION = 0;



  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_ESTADO (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_ESTADO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER,
CODI_FAMI_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_FAMI_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP)
AS 


DECLARE VARIABLE VAR_CONS_PERS_TIPO_MOVIMIENTO INTEGER;

BEGIN

  /* Si esta vacía la fecha se asigna la fecha actual */

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';





    /* BUSCAR EL یTIMO MOVIMIENTO DE TRASLADOS DEL PERSONAL */

    SELECT FIRST 1 M.CONS_PERS_TIPO_MOVIMIENTO,

     M.FECH_INICIAL, M.FECH_FINAL

    FROM GLO_PERS_MOVIMIENTOS M

    WHERE M.CONS_PERSONAL = :PE_CONS_PERSONAL

    AND (M.FECH_INICIAL <= :PE_FECHA AND

         (M.FECH_FINAL >= :PE_FECHA OR M.FECH_FINAL IS NULL))

    AND M.CONS_PERS_MOVIMIENTO NOT IN(

       SELECT CONS_PERS_MOVIMIENTO

       FROM GLO_PERS_MOVI_ANULADOS)

    ORDER BY M.CONS_PERS_MOVIMIENTO DESC

    INTO :VAR_CONS_PERS_TIPO_MOVIMIENTO, :FECH_INICIAL, :FECH_FINAL;



     /*  CONSULTAR LA INFORMACIÓN DEL TIPO DE MOVIMIENTO  */

     SELECT T.CONS_ESTADO, T.NOMB_PERS_TIPO_MOVIMIENTO,

      T.CODI_PERS_TIPO_MOVIMIENTO, T.CONS_PERS_TIPO_MOVIMIENTO,

      T.CONS_FAMI_MOVIMIENTO, T.CODI_FAMI_MOVIMIENTO, T.NOMB_FAMI_MOVIMIENTO

     FROM VIS_GLO_PERS_TIPO_MOVIMIENTO T

     WHERE T.CONS_PERS_TIPO_MOVIMIENTO = :VAR_CONS_PERS_TIPO_MOVIMIENTO

     INTO :CONS_ESTADO, :NOMB_PERS_TIPO_MOVIMIENTO,

      :CODI_PERS_TIPO_MOVIMIENTO, :CONS_PERS_TIPO_MOVIMIENTO,

      :CONS_FAMI_MOVIMIENTO, :CODI_FAMI_MOVIMIENTO, :NOMB_FAMI_MOVIMIENTO;

     /*  SI ES NULO, NO HA TENIDO MOVIMIENTOS, DARLO POR INACTIVO  */

     IF (:CONS_ESTADO IS NULL) THEN

        CONS_ESTADO = 2;

     /*  TEXTO DEL ESTADO  */

     SELECT

           CASE :CONS_ESTADO

             WHEN 1 THEN 'Activo'

             WHEN 2 THEN 'Inactivo'

             ELSE 'Desconocido'

           END

     FROM RDB$DATABASE

     INTO :ESTADO;

  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_FAMILIARES (PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PERS_FAMILIAR INTEGER,
CONS_PERS_TIPO_DOCUMENTO INTEGER,
CODI_PERS_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(39) CHARACTER SET NONE,
CONS_SEXO INTEGER,
CODI_SEXO VARCHAR(12) CHARACTER SET NONE,
NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
CONS_PARENTESCO INTEGER,
CODI_PARENTESCO VARCHAR(12) CHARACTER SET NONE,
NOMB_PARENTESCO VARCHAR(60) CHARACTER SET NONE,
FECH_NACIMIENTO TIMESTAMP,
CONS_PAIS INTEGER,
CODI_PAIS VARCHAR(12) CHARACTER SET NONE,
NOMB_PAIS VARCHAR(60) CHARACTER SET NONE,
CONS_DEPARTAMENTO INTEGER,
CODI_DEPARTAMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_DEPARTAMENTO VARCHAR(60) CHARACTER SET NONE,
CONS_CIUDAD INTEGER,
CODI_CIUDAD VARCHAR(12) CHARACTER SET NONE,
NOMB_CIUDAD VARCHAR(60) CHARACTER SET NONE,
DIRECCION VARCHAR(240) CHARACTER SET NONE,
TELE_RESIDENCIA VARCHAR(20) CHARACTER SET NONE,
TELE_OTRO VARCHAR(20) CHARACTER SET NONE,
TELE_MOVIL VARCHAR(20) CHARACTER SET NONE,
OCUPACION VARCHAR(60) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
DIRE_EMPRESA VARCHAR(240) CHARACTER SET NONE,
TELE_EMPRESA VARCHAR(20) CHARACTER SET NONE,
CORR_ELECTRONICO VARCHAR(120) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 


BEGIN

  -- Consultamos los familiares del personal

  FOR SELECT CONS_PERS_FAMILIAR, CONS_PERS_TIPO_DOCUMENTO,

   NUME_DOCUMENTO, PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES,

   CONS_SEXO, CONS_PARENTESCO, FECH_NACIMIENTO, CONS_PAIS,

   CONS_DEPARTAMENTO, CONS_CIUDAD, DIRECCION, TELE_RESIDENCIA,

   TELE_OTRO, TELE_MOVIL, OCUPACION, NOMB_EMPRESA, DIRE_EMPRESA,

   TELE_EMPRESA, CORR_ELECTRONICO, FECH_SISTEMA, USUA_SISTEMA

  FROM GLO_PERS_FAMILIAR

  WHERE CONS_PERSONAL = :PE_CONS_PERSONAL

  ORDER BY CONS_PERS_FAMILIAR

  INTO :CONS_PERS_FAMILIAR, :CONS_PERS_TIPO_DOCUMENTO,

   :NUME_DOCUMENTO, :PRIM_APELLIDO, :SEGU_APELLIDO, :NOMBRES,

   :CONS_SEXO, :CONS_PARENTESCO, :FECH_NACIMIENTO, :CONS_PAIS,

   :CONS_DEPARTAMENTO, :CONS_CIUDAD, :DIRECCION, :TELE_RESIDENCIA,

   :TELE_OTRO, :TELE_MOVIL, :OCUPACION, :NOMB_EMPRESA, :DIRE_EMPRESA,

   :TELE_EMPRESA, :CORR_ELECTRONICO, :FECH_SISTEMA, :USUA_SISTEMA

  DO BEGIN

    -- consulto el tipo de documento del familiar

    SELECT CODI_PERS_TIPO_DOCUMENTO, NOMB_PERS_TIPO_DOCUMENTO

    FROM SIS_PERS_TIPO_DOCUMENTO

    WHERE CONS_PERS_TIPO_DOCUMENTO = :CONS_PERS_TIPO_DOCUMENTO

    ORDER BY CONS_PERS_TIPO_DOCUMENTO

    INTO :CODI_PERS_TIPO_DOCUMENTO, :NOMB_PERS_TIPO_DOCUMENTO;



    -- Consultamos el sexo del familiar

    SELECT CODI_SEXO, NOMB_SEXO

    FROM SIS_SEXOS

    WHERE CONS_SEXO = :CONS_SEXO

    ORDER BY CONS_SEXO

    INTO :CODI_SEXO, :NOMB_SEXO;



    -- Consultamos el paraentesco del familiar

    SELECT CODI_PARENTESCO, NOMB_PARENTESCO

    FROM SIS_PARENTESCOS

    WHERE CONS_PARENTESCO = :CONS_PARENTESCO

    ORDER BY CONS_PARENTESCO

    INTO :CODI_PARENTESCO, :NOMB_PARENTESCO;



    -- Consultamos el padel familiar

    SELECT CODI_PAIS, NOMB_PAIS

    FROM GLO_PAISES

    WHERE CONS_PAIS = :CONS_PAIS

    ORDER BY CONS_PAIS

    INTO :CODI_PAIS, :NOMB_PAIS;



    -- Consultamos el departamento del familiar

    SELECT CODI_DEPARTAMENTO, NOMB_DEPARTAMENTO

    FROM GLO_DEPARTAMENTOS

    WHERE CONS_DEPARTAMENTO = :CONS_DEPARTAMENTO

    ORDER BY CONS_DEPARTAMENTO

    INTO :CODI_DEPARTAMENTO, :NOMB_DEPARTAMENTO;



    -- Consultamos la ciudad del familiar

    SELECT CODI_CIUDAD, NOMB_CIUDAD

    FROM GLO_CIUDADES

    WHERE CONS_CIUDAD = :CONS_CIUDAD

    ORDER BY CONS_CIUDAD

    INTO :CODI_CIUDAD, :NOMB_CIUDAD;

    

    SUSPEND;

  END

   

END ^

ALTER PROCEDURE CON_GLO_PERS_GENE_FECH_COMPLETO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_PAIS INTEGER,
CODI_PAIS VARCHAR(12) CHARACTER SET NONE,
NOMB_PAIS VARCHAR(60) CHARACTER SET NONE,
CONS_DEPARTAMENTO INTEGER,
CODI_DEPARTAMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_DEPARTAMENTO VARCHAR(60) CHARACTER SET NONE,
CONS_CIUDAD INTEGER,
CODI_CIUDAD VARCHAR(12) CHARACTER SET NONE,
NOMB_CIUDAD VARCHAR(60) CHARACTER SET NONE,
DIRECCION VARCHAR(60) CHARACTER SET NONE,
TELE_RESIDENCIA VARCHAR(30) CHARACTER SET NONE,
TELE_OTRO VARCHAR(30) CHARACTER SET NONE,
TELE_MOVIL VARCHAR(30) CHARACTER SET NONE,
FECH_NACIMIENTO TIMESTAMP,
MES_NACIMIENTO VARCHAR(15) CHARACTER SET NONE,
EDAD INTEGER,
CONS_PAIS_NACIMIENTO INTEGER,
CODI_PAIS_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PAIS_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_DEPA_NACIMIENTO INTEGER,
CODI_DEPA_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_DEPA_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_CIUD_NACIMIENTO INTEGER,
CODI_CIUD_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_CIUD_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_DOCUMENTO TIMESTAMP,
LUGA_EXPE_DOCUMENTO VARCHAR(30) CHARACTER SET NONE,
NUME_PASAPORTE VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_PASAPORTE TIMESTAMP,
LUGA_EXPE_PASAPORTE VARCHAR(30) CHARACTER SET NONE,
FECH_VENC_PASAPORTE TIMESTAMP,
NUME_LIBR_MILITAR VARCHAR(30) CHARACTER SET NONE,
FECH_EXPE_LIBR_MILITAR TIMESTAMP,
NUME_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_CONDUCCION TIMESTAMP,
LUGA_EXPE_CONDUCCION VARCHAR(30) CHARACTER SET NONE,
FECH_VENC_CONDUCCION TIMESTAMP,
CATE_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
NUME_SEGU_SOCIAL VARCHAR(12) CHARACTER SET NONE,
NUME_HIJOS INTEGER,
NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
NOMB_ESTA_CIVIL VARCHAR(60) CHARACTER SET NONE)
AS 


BEGIN

  /* Verificar que la fecha no este vacía */

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';



  /* Recorrer el personal */

  FOR SELECT CONS_PERSONAL, CODI_PERSONAL,

   PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES,

   NOMB_COMPLETO

  FROM GLO_PERSONAL

  ORDER BY CONS_PERSONAL

  INTO :CONS_PERSONAL, :CODI_PERSONAL,

   :PRIM_APELLIDO, :SEGU_APELLIDO, :NOMBRES,:NOMB_COMPLETO

  DO BEGIN

    /* Consultar la ubicación del personal */

    SELECT CODI_PERSONAL, NOMB_COMPLETO, CONS_PERS_TIPO_MOVIMIENTO,

     CONS_FAMI_MOVIMIENTO, CONS_ESTADO, CONS_UBIC_TIPO,

     CONS_EMPRESA , CONS_AREA , CONS_PLANTA , CONS_PLAN_LINEA,

     CONS_LINE_SECCION, CONS_BODEGA , OTRA_UBICACION , CONS_TURNO ,

     CONS_PERS_CARGO, CONS_PERS_CENT_COSTO, CONS_COST_GRUPO

    FROM CON_GLO_PERS_UBIC_FECH_UNIDAD(:CONS_PERSONAL, :PE_FECHA)

    INTO :CODI_PERSONAL, :NOMB_COMPLETO, :CONS_PERS_TIPO_MOVIMIENTO,

     :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO, :CONS_UBIC_TIPO,

     :CONS_EMPRESA , :CONS_AREA , :CONS_PLANTA , :CONS_PLAN_LINEA,

     :CONS_LINE_SECCION, :CONS_BODEGA , :OTRA_UBICACION , :CONS_TURNO ,

     :CONS_PERS_CARGO, :CONS_PERS_CENT_COSTO, :CONS_COST_GRUPO;



    /* Consultar el estado */

    SELECT NOMB_ESTADO FROM SIS_ESTADOS

    WHERE CONS_ESTADO = :CONS_ESTADO

    INTO :NOMB_ESTADO;



    /* Consultar el tipo de ubicaci󮪯

    SELECT NOMB_UBIC_TIPO FROM SIS_UBIC_TIPOS

    WHERE CONS_UBIC_TIPO = :CONS_UBIC_TIPO

    INTO :NOMB_UBIC_TIPO;



    /* Consultar la empresa */

    SELECT NOMB_EMPRESA FROM GLO_EMPRESAS

    WHERE CONS_EMPRESA = :CONS_EMPRESA

    INTO :NOMB_EMPRESA;



    /* Consultar el area */

    SELECT NOMB_AREA FROM GLO_AREAS

    WHERE CONS_AREA = :CONS_AREA

    INTO :NOMB_AREA;



    /* Consultar la planta */

    SELECT NOMB_PLANTA FROM GLO_PLANTAS

    WHERE CONS_PLANTA = :CONS_PLANTA

    INTO :NOMB_PLANTA;



    /* Consultar la la */

    SELECT NOMB_LINEA

    FROM VIS_GLO_PLAN_LINEAS

    WHERE CONS_PLAN_LINEA = :CONS_PLAN_LINEA

    INTO :NOMB_PLAN_LINEA;



    /* Consultar la secci󮪯

    SELECT NOMB_SECCION FROM VIS_GLO_LINE_SECCIONES

    WHERE CONS_LINE_SECCION = :CONS_LINE_SECCION

    INTO :NOMB_LINE_SECCION;



    /* Consultar la bodega */

    SELECT NOMB_BODEGA FROM GLO_BODEGAS

    WHERE CONS_BODEGA = :CONS_BODEGA

    INTO :NOMB_BODEGA;



    /* Consultar el turno */

    SELECT TURN.CODI_TURNO, FUNC.NOMB_TIPO_TURNO

    FROM GLO_TURNOS TURN,

    FUN_GLO_PERS_NOMB_TIPO_TURNO(TURN.TIPO_TURNO) FUNC

    WHERE TURN.CONS_TURNO = :CONS_TURNO

    INTO :CODI_TURNO, :NOMB_TIPO_TURNO;



    /* Consultar el cargo */

    SELECT NOMB_PERS_CARGO FROM GLO_PERS_CARGOS

    WHERE CONS_PERS_CARGO = :CONS_PERS_CARGO

    INTO :NOMB_PERS_CARGO;



    /* Consultar el centro de costos */

    SELECT NOMB_PERS_CENT_COSTO FROM GLO_PERS_CENT_COSTOS

    WHERE CONS_PERS_CENT_COSTO = :CONS_PERS_CENT_COSTO

    INTO :NOMB_PERS_CENT_COSTO;



    /* Consultar el grupo de centro de costos */

    SELECT NOMB_COST_GRUPO FROM SIS_COST_GRUPOS

    WHERE CONS_COST_GRUPO = :CONS_COST_GRUPO

    INTO :NOMB_COST_GRUPO;



    /* Consultar los datos generales del personal */

    SELECT CONS_PAIS, CODI_PAIS, NOMB_PAIS, CONS_DEPARTAMENTO, CODI_DEPARTAMENTO,

     NOMB_DEPARTAMENTO, CONS_CIUDAD, CODI_CIUDAD, NOMB_CIUDAD, DIRECCION,

     TELE_RESIDENCIA, TELE_OTRO, TELE_MOVIL, FECH_NACIMIENTO, MES_NACIMIENTO,

     EDAD, CONS_PAIS_NACIMIENTO, CODI_PAIS_NACIMIENTO, NOMB_PAIS_NACIMIENTO,

     CONS_DEPA_NACIMIENTO, CODI_DEPA_NACIMIENTO, NOMB_DEPA_NACIMIENTO,

     CONS_CIUD_NACIMIENTO, CODI_CIUD_NACIMIENTO, NOMB_CIUD_NACIMIENTO,

     NOMB_PERS_TIPO_DOCUMENTO, NUME_DOCUMENTO, FECH_EXPE_DOCUMENTO,

     LUGA_EXPE_DOCUMENTO, NUME_PASAPORTE, FECH_EXPE_PASAPORTE, LUGA_EXPE_PASAPORTE,

     FECH_VENC_PASAPORTE, NUME_LIBR_MILITAR, FECH_EXPE_LIBR_MILITAR, NUME_SEGU_SOCIAL,

     NUME_HIJOS, NOMB_SEXO, NOMB_ESTA_CIVIL,

     NUME_CONDUCCION, FECH_EXPE_CONDUCCION, LUGA_EXPE_CONDUCCION,

     FECH_VENC_CONDUCCION, CATE_CONDUCCION

    FROM CON_GLO_PERS_GENE_UNIDAD(:CONS_PERSONAL)

    INTO :CONS_PAIS, :CODI_PAIS, :NOMB_PAIS, :CONS_DEPARTAMENTO, :CODI_DEPARTAMENTO,

     :NOMB_DEPARTAMENTO, :CONS_CIUDAD, :CODI_CIUDAD, :NOMB_CIUDAD, :DIRECCION,

     :TELE_RESIDENCIA, :TELE_OTRO, :TELE_MOVIL, :FECH_NACIMIENTO, :MES_NACIMIENTO,

     :EDAD, :CONS_PAIS_NACIMIENTO, :CODI_PAIS_NACIMIENTO, :NOMB_PAIS_NACIMIENTO,

     :CONS_DEPA_NACIMIENTO, :CODI_DEPA_NACIMIENTO, :NOMB_DEPA_NACIMIENTO,

     :CONS_CIUD_NACIMIENTO, :CODI_CIUD_NACIMIENTO, :NOMB_CIUD_NACIMIENTO,

     :NOMB_PERS_TIPO_DOCUMENTO, :NUME_DOCUMENTO, :FECH_EXPE_DOCUMENTO,

     :LUGA_EXPE_DOCUMENTO, :NUME_PASAPORTE, :FECH_EXPE_PASAPORTE, :LUGA_EXPE_PASAPORTE,

     :FECH_VENC_PASAPORTE, :NUME_LIBR_MILITAR, :FECH_EXPE_LIBR_MILITAR, :NUME_SEGU_SOCIAL,

     :NUME_HIJOS, :NOMB_SEXO, :NOMB_ESTA_CIVIL,

     :NUME_CONDUCCION, :FECH_EXPE_CONDUCCION, :LUGA_EXPE_CONDUCCION,

     :FECH_VENC_CONDUCCION, :CATE_CONDUCCION;



    /* Devolver el registro */

    SUSPEND;

  END

END ^

ALTER PROCEDURE CON_GLO_PERS_GENE_UNIDAD (PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PAIS INTEGER,
CODI_PAIS VARCHAR(12) CHARACTER SET NONE,
NOMB_PAIS VARCHAR(60) CHARACTER SET NONE,
CONS_DEPARTAMENTO INTEGER,
CODI_DEPARTAMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_DEPARTAMENTO VARCHAR(60) CHARACTER SET NONE,
CONS_CIUDAD INTEGER,
CODI_CIUDAD VARCHAR(12) CHARACTER SET NONE,
NOMB_CIUDAD VARCHAR(60) CHARACTER SET NONE,
DIRECCION VARCHAR(60) CHARACTER SET NONE,
TELE_RESIDENCIA VARCHAR(30) CHARACTER SET NONE,
TELE_OTRO VARCHAR(30) CHARACTER SET NONE,
TELE_MOVIL VARCHAR(30) CHARACTER SET NONE,
FECH_NACIMIENTO TIMESTAMP,
MES_NACIMIENTO VARCHAR(15) CHARACTER SET NONE,
EDAD INTEGER,
CONS_PAIS_NACIMIENTO INTEGER,
CODI_PAIS_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PAIS_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_DEPA_NACIMIENTO INTEGER,
CODI_DEPA_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_DEPA_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_CIUD_NACIMIENTO INTEGER,
CODI_CIUD_NACIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_CIUD_NACIMIENTO VARCHAR(60) CHARACTER SET NONE,
NOMB_PERS_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_DOCUMENTO TIMESTAMP,
LUGA_EXPE_DOCUMENTO VARCHAR(30) CHARACTER SET NONE,
NUME_PASAPORTE VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_PASAPORTE TIMESTAMP,
LUGA_EXPE_PASAPORTE VARCHAR(30) CHARACTER SET NONE,
FECH_VENC_PASAPORTE TIMESTAMP,
NUME_LIBR_MILITAR VARCHAR(30) CHARACTER SET NONE,
FECH_EXPE_LIBR_MILITAR TIMESTAMP,
NUME_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
FECH_EXPE_CONDUCCION TIMESTAMP,
LUGA_EXPE_CONDUCCION VARCHAR(30) CHARACTER SET NONE,
FECH_VENC_CONDUCCION TIMESTAMP,
CATE_CONDUCCION VARCHAR(12) CHARACTER SET NONE,
NUME_SEGU_SOCIAL VARCHAR(12) CHARACTER SET NONE,
NUME_HIJOS INTEGER,
NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
NOMB_ESTA_CIVIL VARCHAR(60) CHARACTER SET NONE)
AS 


DECLARE VARIABLE VAR_MES_NACIMIENTO INTEGER;

BEGIN

  /* Consultar los datos generales de un personal */

  SELECT G.CONS_PAIS, G.CONS_DEPARTAMENTO, G.CONS_CIUDAD,

   G.DIRECCION, G.TELE_RESIDENCIA, G.TELE_OTRO, G.TELE_MOVIL,

   G.FECH_NACIMIENTO, G.CONS_PAIS_NACIMIENTO, G.CONS_DEPA_NACIMIENTO,

   G.CONS_CIUD_NACIMIENTO, T.NOMB_PERS_TIPO_DOCUMENTO, G.NUME_DOCUMENTO,

   G.FECH_EXPE_DOCUMENTO, G.LUGA_EXPE_DOCUMENTO, G.NUME_PASAPORTE,

   G.FECH_EXPE_PASAPORTE, G.LUGA_EXPE_PASAPORTE, G.FECH_VENC_PASAPORTE,

   G.NUME_LIBR_MILITAR, G.FECH_EXPE_LIBR_MILITAR, G.NUME_SEGU_SOCIAL,

   G.NUME_HIJOS, S.NOMB_SEXO, E.NOMB_ESTA_CIVIL,

   G.NUME_CONDUCCION, G.FECH_EXPE_CONDUCCION, G.LUGA_EXPE_CONDUCCION,

   G.FECH_VENC_CONDUCCION, G.CATE_CONDUCCION

  FROM GLO_PERS_GENERAL G, SIS_PERS_TIPO_DOCUMENTO T, SIS_SEXOS S,

   SIS_ESTA_CIVIL E

  WHERE G.CONS_PERS_TIPO_DOCUMENTO = T.CONS_PERS_TIPO_DOCUMENTO

   AND G.CONS_SEXO = S.CONS_SEXO

   AND G.CONS_ESTA_CIVIL = E.CONS_ESTA_CIVIL

   AND G.CONS_PERSONAL = :PE_CONS_PERSONAL

  ORDER BY G.CONS_PERSONAL

  INTO :CONS_PAIS, :CONS_DEPARTAMENTO, :CONS_CIUDAD,

   :DIRECCION, :TELE_RESIDENCIA, :TELE_OTRO, :TELE_MOVIL,

   :FECH_NACIMIENTO, :CONS_PAIS_NACIMIENTO, :CONS_DEPA_NACIMIENTO,

   :CONS_CIUD_NACIMIENTO, :NOMB_PERS_TIPO_DOCUMENTO, :NUME_DOCUMENTO,

   :FECH_EXPE_DOCUMENTO, :LUGA_EXPE_DOCUMENTO, :NUME_PASAPORTE,

   :FECH_EXPE_PASAPORTE, :LUGA_EXPE_PASAPORTE, :FECH_VENC_PASAPORTE,

   :NUME_LIBR_MILITAR, :FECH_EXPE_LIBR_MILITAR, :NUME_SEGU_SOCIAL,

   :NUME_HIJOS, :NOMB_SEXO, :NOMB_ESTA_CIVIL,

   :NUME_CONDUCCION, :FECH_EXPE_CONDUCCION, :LUGA_EXPE_CONDUCCION,

   :FECH_VENC_CONDUCCION, :CATE_CONDUCCION;



  /* Inicializar resultados */

  CODI_PAIS = ''; NOMB_PAIS = '';

  CODI_PAIS_NACIMIENTO = ''; NOMB_PAIS_NACIMIENTO = '';

  CODI_DEPARTAMENTO = ''; NOMB_DEPARTAMENTO = '';

  CODI_DEPA_NACIMIENTO = ''; NOMB_DEPA_NACIMIENTO = '';

  CODI_CIUDAD = ''; NOMB_CIUDAD = '';

  CODI_CIUD_NACIMIENTO = ''; NOMB_CIUD_NACIMIENTO = '';



  /* Consultar el pais */

  SELECT CODI_PAIS, NOMB_PAIS FROM GLO_PAISES

  WHERE CONS_PAIS = :CONS_PAIS

  INTO :CODI_PAIS, :NOMB_PAIS;



  /* Consultar el pais  de nacimiento */

  SELECT CODI_PAIS, NOMB_PAIS FROM GLO_PAISES

  WHERE CONS_PAIS = :CONS_PAIS_NACIMIENTO

  INTO :CODI_PAIS_NACIMIENTO, :NOMB_PAIS_NACIMIENTO;



  /* Consultar el departamento */

  SELECT CODI_DEPARTAMENTO, NOMB_DEPARTAMENTO FROM GLO_DEPARTAMENTOS

  WHERE CONS_DEPARTAMENTO = :CONS_DEPARTAMENTO

  INTO :CODI_DEPARTAMENTO, :NOMB_DEPARTAMENTO;



  /* Consultar el departamento de nacimiento */

  SELECT CODI_DEPARTAMENTO, NOMB_DEPARTAMENTO FROM GLO_DEPARTAMENTOS

  WHERE CONS_DEPARTAMENTO = :CONS_DEPA_NACIMIENTO

  INTO :CODI_DEPA_NACIMIENTO, :NOMB_DEPA_NACIMIENTO;



  /* Consultar la ciudad */

  SELECT CODI_CIUDAD, NOMB_CIUDAD FROM GLO_CIUDADES

  WHERE CONS_CIUDAD = :CONS_CIUDAD

  INTO :CODI_CIUDAD, :NOMB_CIUDAD;



  /* Consultar la ciudad de nacimiento */

  SELECT CODI_CIUDAD, NOMB_CIUDAD FROM GLO_CIUDADES

  WHERE CONS_CIUDAD = :CONS_CIUD_NACIMIENTO

  INTO :CODI_CIUD_NACIMIENTO, :NOMB_CIUD_NACIMIENTO;



  /* Consultar el mes de nacimiento */

  VAR_MES_NACIMIENTO = EXTRACT(MONTH FROM :FECH_NACIMIENTO);

  SELECT CASE :VAR_MES_NACIMIENTO

    WHEN 1 THEN 'Enero'

    WHEN 2 THEN 'Febrero'

    WHEN 3 THEN 'Marzo'

    WHEN 4 THEN 'Abril'

    WHEN 5 THEN 'Mayo'

    WHEN 6 THEN 'Junio'

    WHEN 7 THEN 'Julio'

    WHEN 8 THEN 'Agosto'

    WHEN 9 THEN 'Septiembre'

    WHEN 10 THEN 'Octubre'

    WHEN 11 THEN 'Noviembre'

    WHEN 12 THEN 'Diciembre'

  END

  FROM RDB$DATABASE

  INTO :MES_NACIMIENTO;



  /* Calcular la edad */

  EDAD = CAST((('NOW' - :FECH_NACIMIENTO) / 365)
AS INTEGER);



  /* Devolver el registro */

  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_HIST_MOVIMIENTOS (PE_CONS_PERSONAL INTEGER,
PE_FECH_INICIAL TIMESTAMP,
PE_FECH_FINAL TIMESTAMP)
RETURNS (
	CONS_PERS_MOVIMIENTO INTEGER,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
ES_ANULADO INTEGER,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_FAMI_MOVIMIENTO INTEGER,
CODI_FAMI_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_FAMI_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
CONS_ESTADO INTEGER,
CODI_ESTADO VARCHAR(12) CHARACTER SET NONE,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_MOVI_TIPO_DOCUMENTO INTEGER,
CODI_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
CONS_SOLICITA INTEGER,
CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
CONS_APROBO INTEGER,
CODI_APROBO VARCHAR(12) CHARACTER SET NONE,
NOMB_APROBO VARCHAR(102) CHARACTER SET NONE,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 


begin

   /*  VALIDAR LOS RANGOS DE FECHAS  */

   IF (:PE_FECH_INICIAL IS NULL) THEN PE_FECH_INICIAL = '01/01/2000';

   IF (:PE_FECH_FINAL IS NULL) THEN PE_FECH_FINAL = 'NOW';

   /*  CONSULTAR LOS MOVIMIENTOS DEL PERSONAL  */

   FOR SELECT CONS_PERS_MOVIMIENTO, CONS_PERS_TIPO_MOVIMIENTO,

       FECH_INICIAL, FECH_FINAL, CONS_PERS_MOVI_TIPO_DOCUMENTO,

       NUME_DOCUMENTO, CONS_SOLICITA, CONS_APROBO, OBSERVACIONES,

       FECH_SISTEMA, USUA_SISTEMA

   FROM GLO_PERS_MOVIMIENTOS

   WHERE CONS_PERSONAL = :PE_CONS_PERSONAL

   AND FECH_INICIAL BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL

   ORDER BY FECH_INICIAL

   INTO :CONS_PERS_MOVIMIENTO, :CONS_PERS_TIPO_MOVIMIENTO,

        :FECH_INICIAL, :FECH_FINAL, :CONS_PERS_MOVI_TIPO_DOCUMENTO,

        :NUME_DOCUMENTO, :CONS_SOLICITA, :CONS_APROBO,

        :OBSERVACIONES, :FECH_SISTEMA, :USUA_SISTEMA DO

   BEGIN

            /*  BUSCAR INFORMACIÓN DEL TIPO DE MOVIMIENTO  */

            SELECT CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO,

                   CONS_FAMI_MOVIMIENTO, CODI_FAMI_MOVIMIENTO, NOMB_FAMI_MOVIMIENTO,

                   CONS_ESTADO, CODI_ESTADO, NOMB_ESTADO

            FROM VIS_GLO_PERS_TIPO_MOVIMIENTO

            WHERE CONS_PERS_TIPO_MOVIMIENTO = :CONS_PERS_TIPO_MOVIMIENTO

            INTO :CODI_PERS_TIPO_MOVIMIENTO, :NOMB_PERS_TIPO_MOVIMIENTO,

                 :CONS_FAMI_MOVIMIENTO, :CODI_FAMI_MOVIMIENTO, :NOMB_FAMI_MOVIMIENTO,

                 :CONS_ESTADO, :CODI_ESTADO, :NOMB_ESTADO;

            /*  INFORMACIÓN DEL TIPO DE DOCUMENTO  */

            SELECT CODI_PERS_MOVI_TIPO_DOCUMENTO, NOMB_PERS_MOVI_TIPO_DOCUMENTO

            FROM GLO_PERS_MOVI_TIPO_DOCUMENTO

            WHERE CONS_PERS_MOVI_TIPO_DOCUMENTO = :CONS_PERS_MOVI_TIPO_DOCUMENTO

            INTO :CODI_PERS_MOVI_TIPO_DOCUMENTO, :NOMB_PERS_MOVI_TIPO_DOCUMENTO;

            /*  INFORMACION DE QUIEN SOLICITA EL MOVIMIENTO  */

            IF (:CONS_SOLICITA IS NULL) THEN

            BEGIN              

                 CODI_SOLICITA = NULL;

                 NOMB_SOLICITA = NULL;

            END

            ELSE

            BEGIN

                SELECT CODI_PERSONAL, NOMB_COMPLETO

                FROM GLO_PERSONAL

                WHERE CONS_PERSONAL = :CONS_SOLICITA

                INTO :CODI_SOLICITA, :NOMB_SOLICITA;

            END

            /*  INFORMACION DE QUIEN APRUEBA EL MOVIMIENTO  */

            IF (:CONS_APROBO IS NULL) THEN

            BEGIN              

                 CODI_APROBO = NULL;

                 NOMB_APROBO = NULL;

            END

            ELSE

            BEGIN

                SELECT CODI_PERSONAL, NOMB_COMPLETO

                FROM GLO_PERSONAL

                WHERE CONS_PERSONAL = :CONS_APROBO

                INTO :CODI_APROBO, :NOMB_APROBO;

            END

            /*  VERIFICAR SI ESTA ANULADO  */

            IF (EXISTS(SELECT CONS_PERS_MOVI_ANULADO

                FROM GLO_PERS_MOVI_ANULADOS

                WHERE CONS_PERS_MOVIMIENTO = :CONS_PERS_MOVIMIENTO)) THEN

                ES_ANULADO = 1;

            ELSE

                ES_ANULADO = -1;



            /*  GENERAR EL REGISTRO  */

            SUSPEND;

   END

end ^

ALTER PROCEDURE CON_GLO_PERS_INFO_GENERAL RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(20) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(20) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO VARCHAR(20) CHARACTER SET NONE,
CONS_PERS_MOVIMIENTO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
DIAS_VENC_CONTRATO INTEGER)
AS 


DECLARE VARIABLE VAR_TEMPORAL TIMESTAMP;

BEGIN

    -- Consultamos todo el personal

    FOR SELECT CONS_PERSONAL, CODI_PERSONAL, PRIM_APELLIDO,

     SEGU_APELLIDO, NOMBRES, NOMB_COMPLETO

    FROM GLO_PERSONAL

    ORDER BY CONS_PERSONAL

    INTO :CONS_PERSONAL, :CODI_PERSONAL, :PRIM_APELLIDO,

     :SEGU_APELLIDO, :NOMBRES, :NOMB_COMPLETO

    DO BEGIN

        -- Consultamos la ubicación del personal con su estado

        SELECT ESTADO, CONS_PERS_TIPO_MOVIMIENTO,

         CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO,

         FECH_INICIAL, FECH_FINAL,

         CONS_UBIC_TIPO,

         CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

         CONS_AREA, CODI_AREA, NOMB_AREA,

         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA,

         CONS_LINEA, CODI_LINEA, NOMB_LINEA, CONS_LINE_SECCION,

         CONS_SECCION, CODI_SECCION, NOMB_SECCION,

         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,

         OTRA_UBICACION, CONS_TURNO, CODI_TURNO, TIPO_TURNO,

         CONS_PERS_CARGO, CODI_PERS_CARGO, NOMB_PERS_CARGO,

         CONS_PERS_CENT_COSTO, CODI_PERS_CENT_COSTO, NOMB_PERS_CENT_COSTO,

         CONS_COST_GRUPO, CODI_COST_GRUPO, NOMB_COST_GRUPO, CONS_PERS_MOVIMIENTO

        FROM CON_GLO_PERS_UBICA_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :ESTADO, :CONS_PERS_TIPO_MOVIMIENTO,

         :CODI_PERS_TIPO_MOVIMIENTO, :NOMB_PERS_TIPO_MOVIMIENTO,

         :FECH_INICIAL, :FECH_FINAL,

         :CONS_UBIC_TIPO,

         :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

         :CONS_AREA, :CODI_AREA, :NOMB_AREA,

         :CONS_PLANTA, :CODI_PLANTA, NOMB_PLANTA, :CONS_PLAN_LINEA,

         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_LINE_SECCION,

         :CONS_SECCION, CODI_SECCION, :NOMB_SECCION,

         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,

         :OTRA_UBICACION, :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO,

         :CONS_PERS_CARGO, :CODI_PERS_CARGO, :NOMB_PERS_CARGO,

         :CONS_PERS_CENT_COSTO, :CODI_PERS_CENT_COSTO, :NOMB_PERS_CENT_COSTO,

         :CONS_COST_GRUPO, :CODI_COST_GRUPO, :NOMB_COST_GRUPO, :CONS_PERS_MOVIMIENTO;

      

        -- Consultamos los datos confidenciales del Personal

        SELECT CONS_PERS_NIVE_SALARIAL, CODI_PERS_NIVE_SALARIAL, NOMB_PERS_NIVE_SALARIAL,

         CONS_PERS_TIPO_CONTRATO, CODI_PERS_TIPO_CONTRATO, NOMB_PERS_TIPO_CONTRATO,

         CONS_PERI_PAGO, CODI_PERI_PAGO, NOMB_PERI_PAGO,

         NUME_CONTRATO, VALO_SALARIO, AUXI_TRANSPORTE, AUXI_SALARIAL,

         APLI_INCENTIVO, DURACION, DIAS_VENC_CONTRATO

        FROM CON_GLO_PERS_CONF_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :CONS_PERS_NIVE_SALARIAL, :CODI_PERS_NIVE_SALARIAL, :NOMB_PERS_NIVE_SALARIAL,

         :CONS_PERS_TIPO_CONTRATO, :CODI_PERS_TIPO_CONTRATO, :NOMB_PERS_TIPO_CONTRATO,

         :CONS_PERI_PAGO, :CODI_PERI_PAGO, :NOMB_PERI_PAGO,

         :NUME_CONTRATO, :VALO_SALARIO, :AUXI_TRANSPORTE, :AUXI_SALARIAL,

         :APLI_INCENTIVO, :DURACION, :DIAS_VENC_CONTRATO;



        -- Consultamos la antiguedad y la fecha de ingreso

        SELECT ANTIGUEDAD, FECH_INGRESO

        FROM CON_GLO_PERS_ANTIGUEDAD(:CONS_PERSONAL, NULL)

        INTO :ANTIGUEDAD, :FECH_INGRESO;

  

      -- Asignamos los d faltantes del vencimiento del contrato y la

      -- fecha en que se vence

      IF (:DURACION = 0) THEN

      BEGIN

        DIAS_VENCIMIENTO = 0;

        FECH_VENCIMIENTO = NULL;

      END

      ELSE

      BEGIN

        DIAS_VENCIMIENTO = (:DURACION - :ANTIGUEDAD);

        VAR_TEMPORAL = 'NOW';

        FECH_VENCIMIENTO = (:VAR_TEMPORAL + :DIAS_VENCIMIENTO);

      END



      /* Calcular el tiempo de contrataci󮪯

      SELECT TIEMPO, ANO, MES, DIA

      FROM CON_GLO_PERS_TIEM_CONTRATACION(:CONS_PERSONAL, 'NOW')

      INTO :TIEMPO, :ANO, :MES, :DIA;



      /* Devolver el registro */

      SUSPEND;

    END

END ^

ALTER PROCEDURE CON_GLO_PERS_INFO_GENE_ACTIVOS RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
APELLIDOS VARCHAR(62) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO VARCHAR(20) CHARACTER SET NONE,
CONS_PERS_MOVIMIENTO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
TIEMPO VARCHAR(12) CHARACTER SET NONE,
TIEM_FECHA TIMESTAMP,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
DIAS_VENC_CONTRATO INTEGER)
AS 


DECLARE VARIABLE VAR_TEMPORAL TIMESTAMP;

BEGIN

    -- Consultamos todo el personal

    FOR SELECT CONS_PERSONAL, CODI_PERSONAL, PRIM_APELLIDO,

     SEGU_APELLIDO, NOMBRES, NOMB_COMPLETO

    FROM GLO_PERSONAL

    ORDER BY CONS_PERSONAL

    INTO :CONS_PERSONAL, :CODI_PERSONAL, :PRIM_APELLIDO,

     :SEGU_APELLIDO, :NOMBRES, :NOMB_COMPLETO

    DO BEGIN

      /* Verificar si se encuentra dentro de la empresa */

      IF (EXISTS(SELECT ESTADO

                 FROM CON_GLO_PERS_ESTADO(:CONS_PERSONAL, 'NOW')

                 WHERE CONS_FAMI_MOVIMIENTO <> 4)) THEN

      BEGIN

        /* Unir los apellidos */

        APELLIDOS = (:PRIM_APELLIDO || ' ' || :SEGU_APELLIDO);



        /* Consultamos la ubicación del personal con su estado */

        SELECT ESTADO, CONS_PERS_TIPO_MOVIMIENTO,

         CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO,

         FECH_INICIAL, FECH_FINAL,

         CONS_UBIC_TIPO,

         CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

         CONS_AREA, CODI_AREA, NOMB_AREA,

         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA,

         CONS_LINEA, CODI_LINEA, NOMB_LINEA, CONS_LINE_SECCION,

         CONS_SECCION, CODI_SECCION, NOMB_SECCION,

         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,

         OTRA_UBICACION, CONS_TURNO, CODI_TURNO, TIPO_TURNO,

         CONS_PERS_CARGO, CODI_PERS_CARGO, NOMB_PERS_CARGO,

         CONS_PERS_CENT_COSTO, CODI_PERS_CENT_COSTO, NOMB_PERS_CENT_COSTO,

         CONS_COST_GRUPO, CODI_COST_GRUPO, NOMB_COST_GRUPO, CONS_PERS_MOVIMIENTO

        FROM CON_GLO_PERS_UBICA_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :ESTADO, :CONS_PERS_TIPO_MOVIMIENTO,

         :CODI_PERS_TIPO_MOVIMIENTO, :NOMB_PERS_TIPO_MOVIMIENTO,

         :FECH_INICIAL, :FECH_FINAL,

         :CONS_UBIC_TIPO,

         :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

         :CONS_AREA, :CODI_AREA, :NOMB_AREA,

         :CONS_PLANTA, :CODI_PLANTA, NOMB_PLANTA, :CONS_PLAN_LINEA,

         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_LINE_SECCION,

         :CONS_SECCION, CODI_SECCION, :NOMB_SECCION,

         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,

         :OTRA_UBICACION, :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO,

         :CONS_PERS_CARGO, :CODI_PERS_CARGO, :NOMB_PERS_CARGO,

         :CONS_PERS_CENT_COSTO, :CODI_PERS_CENT_COSTO, :NOMB_PERS_CENT_COSTO,

         :CONS_COST_GRUPO, :CODI_COST_GRUPO, :NOMB_COST_GRUPO, :CONS_PERS_MOVIMIENTO;

      

        -- Consultamos los datos confidenciales del Personal

        SELECT CONS_PERS_NIVE_SALARIAL, CODI_PERS_NIVE_SALARIAL, NOMB_PERS_NIVE_SALARIAL,

         CONS_PERS_TIPO_CONTRATO, CODI_PERS_TIPO_CONTRATO, NOMB_PERS_TIPO_CONTRATO,

         CONS_PERI_PAGO, CODI_PERI_PAGO, NOMB_PERI_PAGO,

         NUME_CONTRATO, VALO_SALARIO, AUXI_TRANSPORTE, AUXI_SALARIAL,

         APLI_INCENTIVO, DURACION, DIAS_VENC_CONTRATO

        FROM CON_GLO_PERS_CONF_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :CONS_PERS_NIVE_SALARIAL, :CODI_PERS_NIVE_SALARIAL, :NOMB_PERS_NIVE_SALARIAL,

         :CONS_PERS_TIPO_CONTRATO, :CODI_PERS_TIPO_CONTRATO, :NOMB_PERS_TIPO_CONTRATO,

         :CONS_PERI_PAGO, :CODI_PERI_PAGO, :NOMB_PERI_PAGO,

         :NUME_CONTRATO, :VALO_SALARIO, :AUXI_TRANSPORTE, :AUXI_SALARIAL,

         :APLI_INCENTIVO, :DURACION, :DIAS_VENC_CONTRATO;



        -- Consultamos la antiguedad y la fecha de ingreso

        SELECT ANTIGUEDAD, FECH_INGRESO

        FROM CON_GLO_PERS_ANTIGUEDAD(:CONS_PERSONAL, NULL)

        INTO :ANTIGUEDAD, :FECH_INGRESO;

  

        -- Asignamos los d faltantes del vencimiento del contrato y la

        -- fecha en que se vence

        IF (:DURACION = 0) THEN

        BEGIN

          DIAS_VENCIMIENTO = 0;

          FECH_VENCIMIENTO = NULL;

        END

        ELSE

        BEGIN

          DIAS_VENCIMIENTO = (:DURACION - :ANTIGUEDAD);

          VAR_TEMPORAL = 'NOW';

          FECH_VENCIMIENTO = (:VAR_TEMPORAL + :DIAS_VENCIMIENTO);

        END

  

        /* Calcular el tiempo de contrataci󮪯

        SELECT TIEMPO, ANO, MES, DIA, TIEM_FECHA

        FROM CON_GLO_PERS_TIEM_CONTRATACION(:CONS_PERSONAL, 'NOW')

        INTO :TIEMPO, :ANO, :MES, :DIA, :TIEM_FECHA;



        /* Devolver el registro */

        SUSPEND;

      END

    END

END ^

ALTER PROCEDURE CON_GLO_PERS_INFO_GENE_UNIDAD (PE_CONS_PERSONAL INTEGER)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(20) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(20) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_NIVE_SALARIAL INTEGER,
CODI_PERS_NIVE_SALARIAL VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_NIVE_SALARIAL VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
CONS_PERI_PAGO INTEGER,
CODI_PERI_PAGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
VALO_SALARIO INTEGER,
AUXI_TRANSPORTE INTEGER,
AUXI_SALARIAL INTEGER,
APLI_INCENTIVO VARCHAR(20) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
ANTIGUEDAD INTEGER,
FECH_INGRESO TIMESTAMP,
DURACION NUMERIC(15, 5),
DIAS_VENCIMIENTO INTEGER,
FECH_VENCIMIENTO TIMESTAMP)
AS 


DECLARE VARIABLE VAR_TEMPORAL TIMESTAMP;

BEGIN

    -- Consultamos todo el personal

    FOR SELECT CONS_PERSONAL, CODI_PERSONAL, PRIM_APELLIDO,

     SEGU_APELLIDO, NOMBRES, NOMB_COMPLETO

    FROM GLO_PERSONAL

    WHERE CONS_PERSONAL = :PE_CONS_PERSONAL

    INTO :CONS_PERSONAL, :CODI_PERSONAL, :PRIM_APELLIDO,

     :SEGU_APELLIDO, :NOMBRES, :NOMB_COMPLETO

    DO BEGIN

        -- Consultamos la ubicación del personal con su estado

        SELECT ESTADO, CONS_UBIC_TIPO,

         CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

         CONS_AREA, CODI_AREA, NOMB_AREA,

         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA,

         CONS_LINEA, CODI_LINEA, NOMB_LINEA, CONS_LINE_SECCION,

         CONS_SECCION, CODI_SECCION, NOMB_SECCION,

         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,

         OTRA_UBICACION, CONS_TURNO, CODI_TURNO, TIPO_TURNO,

         CONS_PERS_CARGO, CODI_PERS_CARGO, NOMB_PERS_CARGO,

         CONS_PERS_CENT_COSTO, CODI_PERS_CENT_COSTO, NOMB_PERS_CENT_COSTO,

         CONS_COST_GRUPO, CODI_COST_GRUPO, NOMB_COST_GRUPO

        FROM CON_GLO_PERS_UBICA_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :ESTADO, :CONS_UBIC_TIPO,

         :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

         :CONS_AREA, :CODI_AREA, :NOMB_AREA,

         :CONS_PLANTA, :CODI_PLANTA, NOMB_PLANTA, :CONS_PLAN_LINEA,

         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_LINE_SECCION,

         :CONS_SECCION, CODI_SECCION, :NOMB_SECCION,

         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,

         :OTRA_UBICACION, :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO,

         :CONS_PERS_CARGO, :CODI_PERS_CARGO, :NOMB_PERS_CARGO,

         :CONS_PERS_CENT_COSTO, :CODI_PERS_CENT_COSTO, :NOMB_PERS_CENT_COSTO,

         :CONS_COST_GRUPO, :CODI_COST_GRUPO, :NOMB_COST_GRUPO;

      

        -- Consultamos los datos confidenciales del Personal

        SELECT CONS_PERS_NIVE_SALARIAL, CODI_PERS_NIVE_SALARIAL, NOMB_PERS_NIVE_SALARIAL,

         CONS_PERS_TIPO_CONTRATO, CODI_PERS_TIPO_CONTRATO, NOMB_PERS_TIPO_CONTRATO,

         CONS_PERI_PAGO, CODI_PERI_PAGO, NOMB_PERI_PAGO,

         NUME_CONTRATO, VALO_SALARIO, AUXI_TRANSPORTE, AUXI_SALARIAL,

         APLI_INCENTIVO, DURACION

        FROM CON_GLO_PERS_CONF_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :CONS_PERS_NIVE_SALARIAL, :CODI_PERS_NIVE_SALARIAL, :NOMB_PERS_NIVE_SALARIAL,

         :CONS_PERS_TIPO_CONTRATO, :CODI_PERS_TIPO_CONTRATO, :NOMB_PERS_TIPO_CONTRATO,

         :CONS_PERI_PAGO, :CODI_PERI_PAGO, :NOMB_PERI_PAGO,

         :NUME_CONTRATO, :VALO_SALARIO, :AUXI_TRANSPORTE, :AUXI_SALARIAL,

         :APLI_INCENTIVO, :DURACION;



        -- Consultamos la antiguedad y la fecha de ingreso

        SELECT ANTIGUEDAD, FECH_INGRESO

        FROM CON_GLO_PERS_ANTIGUEDAD(:CONS_PERSONAL, NULL)

        INTO :ANTIGUEDAD, :FECH_INGRESO;

  

      -- Asignamos los d faltantes del vencimiento del contrato y la

      -- fecha en que se vence

      IF (:DURACION = 0) THEN

      BEGIN

        DIAS_VENCIMIENTO = 0;

        FECH_VENCIMIENTO = NULL;

      END

      ELSE

      BEGIN

        DIAS_VENCIMIENTO = (:DURACION - :ANTIGUEDAD);

        VAR_TEMPORAL = 'NOW';

        FECH_VENCIMIENTO = (:VAR_TEMPORAL + :DIAS_VENCIMIENTO);

      END

  

      SUSPEND;

    END

END ^

ALTER PROCEDURE CON_GLO_PERS_INFO_HISTORIAL RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
APELLIDOS VARCHAR(61) CHARACTER SET NONE,
FECH_INGRESO TIMESTAMP,
ANTIGUEDAD INTEGER,
ULTI_SALARIO INTEGER,
CONS_PERS_TIPO_CONTRATO INTEGER,
CODI_PERS_TIPO_CONTRATO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_CONTRATO VARCHAR(60) CHARACTER SET NONE,
DURACION INTEGER,
FECH_VENCIMIENTO TIMESTAMP,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
IMAGEN BLOB)
AS 


DECLARE VARIABLE VAR_PRIM_APELLIDO VARCHAR(30);

DECLARE VARIABLE VAR_SEGU_APELLIDO VARCHAR(30);

DECLARE VARIABLE VAR_DIAS_VENCIMIENTO INTEGER;

DECLARE VARIABLE VAR_TEMPORAL TIMESTAMP;

BEGIN

  VAR_TEMPORAL = 'NOW';

    -- Consultamos el personal

    FOR SELECT CONS_PERSONAL, CODI_PERSONAL, NOMBRES,

     PRIM_APELLIDO, SEGU_APELLIDO

    FROM GLO_PERSONAL

    ORDER BY CONS_PERSONAL

    INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMBRES,

     :VAR_PRIM_APELLIDO, :VAR_SEGU_APELLIDO

    DO BEGIN

      -- Almaceno los dos apellidos en un solo campo

      APELLIDOS = (:VAR_PRIM_APELLIDO || ' ' || :VAR_SEGU_APELLIDO);

        -- Consultamos la ubicación del personal

        SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,

         CONS_AREA, CODI_AREA, NOMB_AREA,

         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,

         CONS_LINEA, CODI_LINEA, NOMB_LINEA,

         CONS_SECCION, CODI_SECCION, NOMB_SECCION,

         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA, OTRA_UBICACION,

         CONS_PERS_CARGO, CODI_PERS_CARGO, NOMB_PERS_CARGO

        FROM CON_GLO_PERS_UBICA_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

         :CONS_AREA, :CODI_AREA, :NOMB_AREA,

         :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,

         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,

         :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,

         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,

         :CONS_PERS_CARGO, :CODI_PERS_CARGO, :NOMB_PERS_CARGO;

      -- Verifico que tenga permiso sobre las tablas

        SELECT IMAGEN

        FROM GLO_PERS_GENERAL

        WHERE CONS_PERSONAL = :CONS_PERSONAL

        ORDER BY CONS_PERSONAL

        INTO :IMAGEN;

        -- Consultamos la antiguedad y la fecha de ingreso

        SELECT ANTIGUEDAD, FECH_INGRESO

        FROM CON_GLO_PERS_ANTIGUEDAD(:CONS_PERSONAL, NULL)

        INTO :ANTIGUEDAD, :FECH_INGRESO;

        -- Consultamos los datos confidenciales del Personal

        SELECT CONS_PERS_TIPO_CONTRATO, CODI_PERS_TIPO_CONTRATO, NOMB_PERS_TIPO_CONTRATO,

         VALO_SALARIO, DURACION

        FROM CON_GLO_PERS_CONF_UNIDAD(:CONS_PERSONAL, NULL)

        INTO :CONS_PERS_TIPO_CONTRATO, :CODI_PERS_TIPO_CONTRATO, :NOMB_PERS_TIPO_CONTRATO,

         :ULTI_SALARIO, :DURACION;



      -- Asignamos la fecha en que se vence el contrato

      IF (:DURACION = 0) THEN

        FECH_VENCIMIENTO = NULL;

      ELSE

      BEGIN

        VAR_DIAS_VENCIMIENTO = 0;

        VAR_DIAS_VENCIMIENTO = (:DURACION - :ANTIGUEDAD);

        VAR_TEMPORAL = 'NOW';

        FECH_VENCIMIENTO = (:VAR_TEMPORAL + :VAR_DIAS_VENCIMIENTO);

      END



      SUSPEND;

    END

END ^

ALTER PROCEDURE CON_GLO_PERS_MOVIMIENTO RETURNS (
	CONS_PERS_MOVIMIENTO INTEGER,
CONS_PERSONAL INTEGER,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_PERS_MOVI_TIPO_DOCUMENTO INTEGER,
NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
CONS_SOLICITA INTEGER,
CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
CONS_APROBO INTEGER,
CODI_APROBO VARCHAR(12) CHARACTER SET NONE,
NOMB_APROBO VARCHAR(102) CHARACTER SET NONE,
OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
FECH_SISTEMA TIMESTAMP,
USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
CODI_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_MOVI_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE)
AS 


DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

BEGIN

  -- Consultamos el personal en su 򬴩mo movimiento

  FOR SELECT CONS_PERSONAL, MAX(CONS_PERS_MOVIMIENTO)

  FROM GLO_PERS_MOVIMIENTOS

  WHERE CONS_PERS_MOVIMIENTO NOT IN (

        SELECT CONS_PERS_MOVIMIENTO

        FROM GLO_PERS_MOVI_ANULADOS)

  GROUP BY CONS_PERSONAL

  INTO :CONS_PERSONAL, :VAR_CONS_PERS_MOVIMIENTO

  DO BEGIN



    -- Consultamos que el personal este activo

    IF (EXISTS(SELECT CONS_ESTADO

      FROM CON_GLO_PERS_ESTADO(:CONS_PERSONAL, NULL)

      WHERE CONS_ESTADO = 1)) THEN

    BEGIN

      -- Consultamos los datos del 򬴩mo movimiento

      SELECT M.CONS_PERS_MOVIMIENTO, M.CONS_PERSONAL, M.CONS_PERS_TIPO_MOVIMIENTO,

       M.FECH_INICIAL, M.FECH_FINAL, M.CONS_PERS_MOVI_TIPO_DOCUMENTO,

       M.NUME_DOCUMENTO, M.OBSERVACIONES, M.FECH_SISTEMA,

       M.USUA_SISTEMA, M.CONS_SOLICITA, M.CONS_APROBO,

       TD.CODI_PERS_MOVI_TIPO_DOCUMENTO, TD.NOMB_PERS_MOVI_TIPO_DOCUMENTO,

       P.CODI_PERSONAL, P.NOMB_COMPLETO, P.PRIM_APELLIDO,

       P.SEGU_APELLIDO, P.NOMBRES

      FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_TIPO_DOCUMENTO TD,

       GLO_PERSONAL P

      WHERE M.CONS_PERS_MOVI_TIPO_DOCUMENTO = TD.CONS_PERS_MOVI_TIPO_DOCUMENTO

       AND M.CONS_PERSONAL = P.CONS_PERSONAL

       AND M.CONS_PERS_MOVIMIENTO = :VAR_CONS_PERS_MOVIMIENTO

      ORDER BY P.CODI_PERSONAL

      INTO :CONS_PERS_MOVIMIENTO, :CONS_PERSONAL, :CONS_PERS_TIPO_MOVIMIENTO,

        :FECH_INICIAL, :FECH_FINAL, :CONS_PERS_MOVI_TIPO_DOCUMENTO,

        :NUME_DOCUMENTO, :OBSERVACIONES, :FECH_SISTEMA,

        :USUA_SISTEMA, :CONS_SOLICITA, :CONS_APROBO,

        :CODI_PERS_MOVI_TIPO_DOCUMENTO,

        :NOMB_PERS_MOVI_TIPO_DOCUMENTO, :CODI_PERSONAL, :NOMB_COMPLETO,

        :PRIM_APELLIDO, :SEGU_APELLIDO, :NOMBRES;

  

      -- Consultamos el personal que solicit󠥬 movimiento

      SELECT CODI_PERSONAL, NOMB_COMPLETO

      FROM GLO_PERSONAL

      WHERE CONS_PERSONAL = :CONS_SOLICITA

      ORDER BY CONS_PERSONAL

      INTO :CODI_SOLICITA, NOMB_SOLICITA;



      -- Consultamos el personal que aprob󠥬 movimiento

      SELECT CODI_PERSONAL, NOMB_COMPLETO

      FROM GLO_PERSONAL

      WHERE CONS_PERSONAL = :CONS_APROBO

      ORDER BY CONS_PERSONAL

      INTO :CODI_APROBO, NOMB_APROBO;



      SUSPEND;

    END

  END

END ^

ALTER PROCEDURE CON_GLO_PERS_MOVI_APROBAR (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE)
AS 


DECLARE VARIABLE VAR_CONS_ESTADO INTEGER;

begin

  /*  VALIDAR LA FECHA DE ENTRADA  */

  IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /*  RECORRER EL PERSONAL QUE TIENE EL PERMISO  */

  FOR SELECT CONS_PERSONAL

  FROM GLO_PERS_SISTEMA PERS

  WHERE PERS.PERS_MOVI_APROBAR = 1

  ORDER BY CONS_PERSONAL

  INTO :CONS_PERSONAL

  DO BEGIN

     /*  INICIALIZAR VARIABLES - POR SEGURIDAD  */

     NOMB_COMPLETO = NULL;

     VAR_CONS_ESTADO = NULL;

     /*  VERIFICAR SI ESTA ACTIVO  */

     SELECT CONS_ESTADO

     FROM CON_GLO_PERS_UBIC_FECH_UNIDAD(:CONS_PERSONAL, :PE_FECHA)

     INTO :VAR_CONS_ESTADO;

     IF (:VAR_CONS_ESTADO = 1) THEN

     BEGIN

        /*  BUSCAR EL NOMBRE  */

        SELECT NOMB_COMPLETO

        FROM GLO_PERSONAL

        WHERE CONS_PERSONAL = :CONS_PERSONAL

        INTO :NOMB_COMPLETO;

        /*  GENERAR EL REGISTRO  */

        SUSPEND;

     END

  END

end ^

ALTER PROCEDURE CON_GLO_PERS_MOVI_SOLICITAR (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE)
AS 


DECLARE VARIABLE VAR_CONS_ESTADO INTEGER;

begin

  /*  VALIDAR LA FECHA DE ENTRADA  */

  IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /*  RECORRER EL PERSONAL QUE TIENE EL PERMISO  */

  FOR SELECT CONS_PERSONAL

  FROM GLO_PERS_SISTEMA PERS

  WHERE PERS.PERS_MOVI_SOLICITAR = 1

  ORDER BY CONS_PERSONAL

  INTO :CONS_PERSONAL

  DO BEGIN

     /*  INICIALIZAR VARIABLES - POR SEGURIDAD  */

     NOMB_COMPLETO = NULL;

     VAR_CONS_ESTADO = NULL;

     /*  VERIFICAR SI ESTA ACTIVO  */

     SELECT CONS_ESTADO

     FROM CON_GLO_PERS_UBIC_FECH_UNIDAD(:CONS_PERSONAL, :PE_FECHA)

     INTO :VAR_CONS_ESTADO;

     IF (:VAR_CONS_ESTADO = 1) THEN

     BEGIN

        /*  BUSCAR EL NOMBRE  */

        SELECT NOMB_COMPLETO

        FROM GLO_PERSONAL

        WHERE CONS_PERSONAL = :CONS_PERSONAL

        INTO :NOMB_COMPLETO;

        /*  GENERAR EL REGISTRO  */

        SUSPEND;

     END

  END

end ^

ALTER PROCEDURE CON_GLO_PERS_NUME_OPERARIOS (PE_FECHA TIMESTAMP,
PE_CONS_EMPRESA INTEGER,
PE_CONS_PLANTA INTEGER,
PE_CONS_PLAN_LINEA INTEGER,
PE_CONS_LINE_SECCION INTEGER,
PE_CONS_TURNO INTEGER)
RETURNS (
	NUME_OPERARIOS INTEGER)
AS 


BEGIN

    /*  VALIDAR LOS DATOS DE ENTRADA  */

    IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

    IF (:PE_CONS_PLANTA = -1) THEN PE_CONS_PLANTA = NULL;

    IF (:PE_CONS_PLAN_LINEA = -1) THEN PE_CONS_PLAN_LINEA = NULL;

    IF (:PE_CONS_LINE_SECCION = -1) THEN PE_CONS_LINE_SECCION = NULL;

    IF (:PE_CONS_TURNO = -1) THEN PE_CONS_TURNO = NULL;

    

    /*  -- -- -- -- -- -SECCIONES -- -- -- -- -- -- -- -- -- -- - */

    /*  CONSULTA DE UNA SECCION ESPECIFICA (TODOS LOS TURNOS)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (NOT :PE_CONS_PLANTA IS NULL) AND (NOT :PE_CONS_PLAN_LINEA IS NULL)

            AND (NOT :PE_CONS_LINE_SECCION IS NULL) AND (:PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        AND CONS_PLANTA = :PE_CONS_PLANTA

        AND CONS_PLAN_LINEA = :PE_CONS_PLAN_LINEA

        AND CONS_LINE_SECCION = :PE_CONS_LINE_SECCION

        INTO :NUME_OPERARIOS;

    END

    ELSE

    /*  CONSULTA UNA SECCION ESPECIFICA (TURNO ESPECIFICO)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (NOT :PE_CONS_PLANTA IS NULL) AND (NOT :PE_CONS_PLAN_LINEA IS NULL)

            AND (NOT :PE_CONS_LINE_SECCION IS NULL) AND (NOT :PE_CONS_TURNO IS NULL)) THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        AND CONS_PLANTA = :PE_CONS_PLANTA

        AND CONS_PLAN_LINEA = :PE_CONS_PLAN_LINEA

        AND CONS_LINE_SECCION = :PE_CONS_LINE_SECCION

        AND CONS_TURNO = :PE_CONS_TURNO

        INTO :NUME_OPERARIOS;

    END

    

    /*  -- -- -- -- -- -LINEAS -- -- -- -- -- -- -- -- -- -- - */

    /*  CONSULTA DE UNA LINEA ESPECIFICA (TODOS LOS TURNOS)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (NOT :PE_CONS_PLANTA IS NULL) AND (NOT :PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (:PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        AND CONS_PLANTA = :PE_CONS_PLANTA

        AND CONS_PLAN_LINEA = :PE_CONS_PLAN_LINEA

        INTO :NUME_OPERARIOS;

    END

    ELSE

    /*  CONSULTA UNA LINEA ESPECIFICA (TURNO ESPECIFICO)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (NOT :PE_CONS_PLANTA IS NULL) AND (NOT :PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (NOT :PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        AND CONS_PLANTA = :PE_CONS_PLANTA

        AND CONS_PLAN_LINEA = :PE_CONS_PLAN_LINEA

        AND CONS_TURNO = :PE_CONS_TURNO

        INTO :NUME_OPERARIOS;

    END

    

    /*  -- -- -- -- -- -PLANTAS -- -- -- -- -- -- -- -- -- -- - */

    /*  CONSULTA DE UNA PLANTA ESPECIFICA (TODOS LOS TURNOS)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (NOT :PE_CONS_PLANTA IS NULL) AND (:PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (:PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        AND CONS_PLANTA = :PE_CONS_PLANTA

        INTO :NUME_OPERARIOS;

    END

    ELSE

    /*  CONSULTA UNA PLANTA ESPECIFICA (TURNO ESPECIFICO)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (NOT :PE_CONS_PLANTA IS NULL) AND (:PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (NOT :PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        AND CONS_PLANTA = :PE_CONS_PLANTA

        AND CONS_TURNO = :PE_CONS_TURNO

        INTO :NUME_OPERARIOS;

    END

        

    /*  -- -- -- -- -- -EMPRESAS -- -- -- -- -- -- -- -- -- -- - */

    /*  CONSULTA DE UNA EMPRESA ESPECIFICA (TODOS LOS TURNOS)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (:PE_CONS_PLANTA IS NULL) AND (:PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (:PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        INTO :NUME_OPERARIOS;

    END

    ELSE

    /*  CONSULTA UNA EMPRESA ESPECIFICA (TURNO ESPECIFICO)  */

    IF ((NOT :PE_CONS_EMPRESA IS NULL) AND (:PE_CONS_PLANTA IS NULL) AND (:PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (NOT :PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_EMPRESA = :PE_CONS_EMPRESA

        AND CONS_TURNO = :PE_CONS_TURNO

        INTO :NUME_OPERARIOS;

    END

    

    /*  -- -- -- -- -- -TODO EL PERSONAL -- -- -- -- -- -- -- -- -- -- - */

    /*  CONSULTA DE TODO EL PERSONAL (TODOS LOS TURNOS)  */

    IF ((:PE_CONS_EMPRESA IS NULL) AND (:PE_CONS_PLANTA IS NULL) AND (:PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (:PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        INTO :NUME_OPERARIOS;

    END

    ELSE

    /*  CONSULTA DE TODO EL PERSONAL (TURNO ESPECIFICO)  */

    IF ((:PE_CONS_EMPRESA IS NULL) AND (:PE_CONS_PLANTA IS NULL) AND (:PE_CONS_PLAN_LINEA IS NULL)

            AND (:PE_CONS_LINE_SECCION IS NULL) AND (NOT :PE_CONS_TURNO IS NULL))  THEN

    BEGIN

        SELECT COUNT(*)

        FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)

        WHERE CONS_TURNO = :PE_CONS_TURNO

        INTO :NUME_OPERARIOS;

    END

    

        

    

    /*  GENERAR EL RESULTADO  */

    IF (:NUME_OPERARIOS IS NULL) THEN NUME_OPERARIOS = 0;

    SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_TIEM_CONTRATACION (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	TIEMPO VARCHAR(12) CHARACTER SET NONE,
ANO SMALLINT,
MES SMALLINT,
DIA SMALLINT,
TIEM_FECHA TIMESTAMP)
AS 


DECLARE VARIABLE VAR_TIEMPO TIMESTAMP;

DECLARE VARIABLE VAR_FECH_INICIAL TIMESTAMP;

DECLARE VARIABLE VAR_FECH_FINAL TIMESTAMP;

BEGIN

  /* Inicializar variables */

  VAR_TIEMPO = CAST('01/01/1900' AS TIMESTAMP);



  /* Recorrer los ingresos y reingresos */

  FOR SELECT M.FECH_INICIAL

  FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_TIPO_MOVIMIENTO T

  WHERE M.CONS_PERSONAL = :PE_CONS_PERSONAL

  AND M.FECH_INICIAL <= :PE_FECHA

  AND M.CONS_PERS_TIPO_MOVIMIENTO = T.CONS_PERS_TIPO_MOVIMIENTO

  AND T.CONS_FAMI_MOVIMIENTO IN (1, 5)

  AND M.CONS_PERS_MOVIMIENTO NOT IN(

     SELECT CONS_PERS_MOVIMIENTO

     FROM GLO_PERS_MOVI_ANULADOS)

  INTO :VAR_FECH_INICIAL

  DO BEGIN

    /* Inicializar variables */

    VAR_FECH_FINAL = CAST('01/01/1900' AS TIMESTAMP);



    /* Consultar si tiene alguna baja */

    SELECT MIN(M.FECH_INICIAL)

    FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_TIPO_MOVIMIENTO T

    WHERE M.CONS_PERSONAL = :PE_CONS_PERSONAL

    AND M.FECH_INICIAL >= :VAR_FECH_INICIAL

    AND M.CONS_PERS_TIPO_MOVIMIENTO = T.CONS_PERS_TIPO_MOVIMIENTO

    AND T.CONS_FAMI_MOVIMIENTO IN (3, 4)

    AND M.CONS_PERS_MOVIMIENTO NOT IN(

       SELECT CONS_PERS_MOVIMIENTO

       FROM GLO_PERS_MOVI_ANULADOS)

    INTO :VAR_FECH_FINAL;



    /* Verificar que la variable no este vacía */

    IF (:VAR_FECH_FINAL IS NULL) THEN

      VAR_FECH_FINAL = :PE_FECHA;



    /* Acumular la fecha */

    VAR_TIEMPO = (:VAR_TIEMPO + (:VAR_FECH_FINAL - :VAR_FECH_INICIAL));

  END

  /* Decodificar la acumulaci󮠤e fecha */

  ANO = EXTRACT(YEAR FROM :VAR_TIEMPO) - 1900;

  MES = EXTRACT(MONTH FROM :VAR_TIEMPO);

  DIA = EXTRACT(DAY FROM :VAR_TIEMPO);



  /* Asignar el tiempo de contrataci󮪯

  TIEMPO = CAST(:ANO AS VARCHAR(4)) || '.' ||

    CAST(:MES AS VARCHAR(2)) || '.' || CAST(:DIA AS VARCHAR(4));



  /* Asignar el tiempo en formato fecha */

  TIEM_FECHA = (:VAR_TIEMPO);



  /* Devolver el registro */

  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_UBICACION RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CONS_AREA INTEGER,
CONS_PLANTA INTEGER,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_BODEGA INTEGER,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER)
AS 


DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

DECLARE VARIABLE VAR_CONS_ESTADO INTEGER;

BEGIN

  /* Consultamos el personal */

  FOR SELECT CONS_PERSONAL, CODI_PERSONAL,

   PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES,

   NOMB_COMPLETO

  FROM GLO_PERSONAL

  ORDER BY CONS_PERSONAL

  INTO :CONS_PERSONAL, :CODI_PERSONAL,

  :PRIM_APELLIDO, :SEGU_APELLIDO, :NOMBRES, :NOMB_COMPLETO

  DO BEGIN

    /* Consultamos su estado */

    SELECT CONS_ESTADO, ESTADO

    FROM CON_GLO_PERS_ESTADO(:CONS_PERSONAL, NULL)

    INTO :VAR_CONS_ESTADO, :ESTADO;



    /* Verifico que se muestre solo el personal inactivo */

    IF (:VAR_CONS_ESTADO = -1) THEN

    BEGIN

      /* Buscamos el 򬴩mo movimiento de traslados del personal */

      SELECT MAX(T.CONS_PERS_MOVIMIENTO)

      FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_TRASLADOS T

      WHERE M.CONS_PERS_MOVIMIENTO = T.CONS_PERS_MOVIMIENTO

       AND M.CONS_PERSONAL = :CONS_PERSONAL

       AND M.CONS_PERS_MOVIMIENTO NOT IN(

           SELECT CONS_PERS_MOVIMIENTO

           FROM GLO_PERS_MOVI_ANULADOS)

      INTO :VAR_CONS_PERS_MOVIMIENTO;

  

      /* Consultamos los datos de ubicación del 򬴩mo traslado del personal */

      SELECT CONS_UBIC_TIPO, CONS_EMPRESA, CONS_AREA,

       CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION,

       CONS_BODEGA, OTRA_UBICACION, CONS_TURNO

      FROM GLO_PERS_MOVI_TRASLADOS

      WHERE CONS_PERS_MOVIMIENTO = :VAR_CONS_PERS_MOVIMIENTO

      ORDER BY CONS_PERS_MOVIMIENTO

      INTO :CONS_UBIC_TIPO, :CONS_EMPRESA, :CONS_AREA,

       :CONS_PLANTA, :CONS_PLAN_LINEA, :CONS_LINE_SECCION,

       :CONS_BODEGA, :OTRA_UBICACION, :CONS_TURNO;

  

      SUSPEND;

    END

  END

   

END ^

ALTER PROCEDURE CON_GLO_PERS_UBICA_UNIDAD (PE_CONS_PERSONAL INTEGER,
PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERS_MOVIMIENTO INTEGER,
ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
FECH_INICIAL TIMESTAMP,
FECH_FINAL TIMESTAMP,
CONS_UBIC_TIPO INTEGER,
CONS_EMPRESA INTEGER,
CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
CODI_AREA VARCHAR(12) CHARACTER SET NONE,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_LINEA INTEGER,
CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_SECCION INTEGER,
CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
CONS_LINE_SECCION INTEGER,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
TIPO_TURNO VARCHAR(20) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
CODI_PERS_CENT_COSTO VARCHAR(12) CHARACTER SET NONE,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
CODI_COST_GRUPO VARCHAR(12) CHARACTER SET NONE,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 


BEGIN

  -- Verifico que el parámetro de entrada PE_FECHA este lleno, sino

  -- le asigno NOW

  IF (:PE_FECHA IS NULL) THEN

    PE_FECHA = 'NOW';

    

  /* Consultamos el estado del personal */

  SELECT ESTADO, CONS_PERS_TIPO_MOVIMIENTO,

   CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO,

   FECH_INICIAL, FECH_FINAL

  FROM CON_GLO_PERS_ESTADO(:PE_CONS_PERSONAL, :PE_FECHA)

  INTO :ESTADO, :CONS_PERS_TIPO_MOVIMIENTO,

   :CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO,

   :FECH_INICIAL, :FECH_FINAL;



  /* Buscamos el 򬴩mo movimiento de traslados del personal */

  SELECT MAX(T.CONS_PERS_MOVIMIENTO)

  FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_TRASLADOS T

  WHERE M.CONS_PERS_MOVIMIENTO = T.CONS_PERS_MOVIMIENTO

   AND M.CONS_PERSONAL = :PE_CONS_PERSONAL

   AND M.FECH_INICIAL <= :PE_FECHA

   AND M.CONS_PERS_MOVIMIENTO NOT IN(

       SELECT CONS_PERS_MOVIMIENTO

       FROM GLO_PERS_MOVI_ANULADOS)

  INTO :CONS_PERS_MOVIMIENTO;



  /* Consultamos los datos de ubicación del 򬴩mo traslado del personal */

  SELECT T.CONS_UBIC_TIPO,

   T.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,

   T.CONS_AREA, A.CODI_AREA, A.NOMB_AREA,

   T.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA, T.CONS_PLAN_LINEA,

   L.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA, T.CONS_LINE_SECCION,

   S.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,

   T.CONS_BODEGA, B.CODI_BODEGA, B.NOMB_BODEGA,

   T.OTRA_UBICACION, T.CONS_TURNO, TU.CODI_TURNO,

   CASE TU.TIPO_TURNO

     WHEN 0 THEN 'Completo'

     WHEN 1 THEN 'Ma񡮡'

     WHEN 2 THEN 'Tarde'

     WHEN 3 THEN 'Noche'

     WHEN 4 THEN 'Unica'

     ELSE 'Desconocido'

   END,

   T.CONS_PERS_CARGO, C.CODI_PERS_CARGO, C.NOMB_PERS_CARGO,

   T.CONS_PERS_CENT_COSTO, PC.CODI_PERS_CENT_COSTO, PC.NOMB_PERS_CENT_COSTO,

   T.CONS_COST_GRUPO, G.CODI_COST_GRUPO, G.NOMB_COST_GRUPO

  FROM GLO_PERS_MOVI_TRASLADOS T, GLO_EMPRESAS E, GLO_AREAS A,

   GLO_PLANTAS P, GLO_PLAN_LINEAS PL, GLO_LINEAS L,

   GLO_LINE_SECCIONES LS, GLO_SECCIONES S, GLO_TURNOS TU,

   GLO_BODEGAS B, GLO_PERS_CARGOS C, GLO_PERS_CENT_COSTOS PC,

   SIS_COST_GRUPOS G

  WHERE T.CONS_PERS_MOVIMIENTO = :CONS_PERS_MOVIMIENTO

   AND T.CONS_EMPRESA = E.CONS_EMPRESA

   AND T.CONS_AREA = A.CONS_AREA

   AND T.CONS_BODEGA = B.CONS_BODEGA

   AND T.CONS_PLANTA = P.CONS_PLANTA

   AND (T.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA

   AND PL.CONS_PLANTA = P.CONS_PLANTA

   AND PL.CONS_LINEA = L.CONS_LINEA)

   AND (T.CONS_LINE_SECCION = LS.CONS_LINE_SECCION

   AND LS.CONS_SECCION = S.CONS_SECCION

   AND LS.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA

   AND PL.CONS_PLANTA = P.CONS_PLANTA)

   AND T.CONS_TURNO = TU.CONS_TURNO

   AND T.CONS_PERS_CARGO = C.CONS_PERS_CARGO

   AND T.CONS_PERS_CENT_COSTO = PC.CONS_PERS_CENT_COSTO

   AND T.CONS_COST_GRUPO = G.CONS_COST_GRUPO

  INTO :CONS_UBIC_TIPO,

   :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,

   :CONS_AREA, :CODI_AREA, :NOMB_AREA,

   :CONS_PLANTA, :CODI_PLANTA, NOMB_PLANTA, :CONS_PLAN_LINEA,

   :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_LINE_SECCION,

   :CONS_SECCION, CODI_SECCION, :NOMB_SECCION,

   :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,

   :OTRA_UBICACION, :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO,

   :CONS_PERS_CARGO, :CODI_PERS_CARGO, :NOMB_PERS_CARGO,

   :CONS_PERS_CENT_COSTO, :CODI_PERS_CENT_COSTO, :NOMB_PERS_CENT_COSTO,

   :CONS_COST_GRUPO, :CODI_COST_GRUPO, :NOMB_COST_GRUPO;



  SUSPEND;

END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_ACTIVO (PE_FECHA TIMESTAMP)
RETURNS (
	CONS_PERSONAL INTEGER,
CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
NOMBRES VARCHAR(40) CHARACTER SET NONE,
NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
CONS_PERS_TIPO_MOVIMIENTO INTEGER,
CONS_FAMI_MOVIMIENTO INTEGER,
CONS_ESTADO INTEGER,
NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
CONS_UBIC_TIPO INTEGER,
NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
CONS_EMPRESA INTEGER,
NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
CONS_AREA INTEGER,
NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
CONS_PLANTA INTEGER,
NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
CONS_PLAN_LINEA INTEGER,
NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
CONS_LINE_SECCION INTEGER,
NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
CONS_BODEGA INTEGER,
NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
CONS_TURNO INTEGER,
CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CARGO INTEGER,
NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
CONS_PERS_CENT_COSTO INTEGER,
NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
CONS_COST_GRUPO INTEGER,
NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 


BEGIN

  /*  VALIDAR LA FECHA  */

  IF (PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /*  SELECCIONAR  */

  FOR

    SELECT CONS_PERSONAL,

         CODI_PERSONAL,

         PRIM_APELLIDO,

         SEGU_APELLIDO,

         NOMBRES,

         NOMB_COMPLETO,

         CONS_PERS_TIPO_MOVIMIENTO,

         CONS_FAMI_MOVIMIENTO,

         CONS_ESTADO,

         NOMB_ESTADO,

         CONS_UBIC_TIPO,

         NOMB_UBIC_TIPO,

         CONS_EMPRESA,

         NOMB_EMPRESA,

         CONS_AREA,

         NOMB_AREA,

         CONS_PLANTA,

         NOMB_PLANTA,

         CONS_PLAN_LINEA,

         NOMB_PLAN_LINEA,

         CONS_LINE_SECCION,

         NOMB_LINE_SECCION,

         CONS_BODEGA,

         NOMB_BODEGA,

         OTRA_UBICACION,

         CONS_TURNO,

         CODI_TURNO,

         NOMB_TIPO_TURNO,

         CONS_PERS_CARGO,

         NOMB_PERS_CARGO,

         CONS_PERS_CENT_COSTO,

         NOMB_PERS_CENT_COSTO,

         CONS_COST_GRUPO,

         NOMB_COST_GRUPO

    FROM CON_GLO_PERS_UBIC_FECH_COMPLETO(:PE_FECHA)

    WHERE CONS_ESTADO = 1

    INTO :CONS_PERSONAL,

         :CODI_PERSONAL,

         :PRIM_APELLIDO,

         :SEGU_APELLIDO,

         :NOMBRES,

         :NOMB_COMPLETO,

         :CONS_PERS_TIPO_MOVIMIENTO,

         :CONS_FAMI_MOVIMIENTO,

         :CONS_ESTADO,

         :NOMB_ESTADO,

         :CONS_UBIC_TIPO,

         :NOMB_UBIC_TIPO,

         :CONS_EMPRESA,

         :NOMB_EMPRESA,

         :CONS_AREA,

         :NOMB_AREA,

         :CONS_PLANTA,

         :NOMB_PLANTA,

         :CONS_PLAN_LINEA,

         :NOMB_PLAN_LINEA,

         :CONS_LINE_SECCION,

         :NOMB_LINE_SECCION,

         :CONS_BODEGA,

         :NOMB_BODEGA,

         :OTRA_UBICACION,

         :CONS_TURNO,

         :CODI_TURNO,

         :NOMB_TIPO_TURNO,

         :CONS_PERS_CARGO,

         :NOMB_PERS_CARGO,

         :CONS_PERS_CENT_COSTO,

         :NOMB_PERS_CENT_COSTO,

         :CONS_COST_GRUPO,

         :NOMB_COST_GRUPO

  DO

  BEGIN

    SUSPEND;

  END

END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_ACTI_FOTO (PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    NOMBRES VARCHAR(40) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    IMAGEN BLOB,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CARGO INTEGER,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CENT_COSTO INTEGER,
    NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
    CONS_COST_GRUPO INTEGER,
    NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  /*  VALIDAR LA FECHA  */
  IF (PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /*  SELECCIONAR  */
  FOR
    SELECT CONS_PERSONAL,   CODI_PERSONAL,      PRIM_APELLIDO,      SEGU_APELLIDO,
         NOMBRES,           NOMB_COMPLETO,      CONS_PERS_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO,
         CONS_ESTADO,       NOMB_ESTADO,        CONS_UBIC_TIPO,     NOMB_UBIC_TIPO,
         CONS_EMPRESA,      NOMB_EMPRESA,       CONS_AREA,          NOMB_AREA, 
         CONS_PLANTA,       NOMB_PLANTA,        CONS_PLAN_LINEA,    NOMB_PLAN_LINEA,
         CONS_LINE_SECCION, NOMB_LINE_SECCION,  CONS_BODEGA,        NOMB_BODEGA,
         OTRA_UBICACION,    CONS_TURNO,         CODI_TURNO,         NOMB_TIPO_TURNO,
         CONS_PERS_CARGO,   NOMB_PERS_CARGO,    CONS_PERS_CENT_COSTO, NOMB_PERS_CENT_COSTO,
         CONS_COST_GRUPO,   NOMB_COST_GRUPO
    FROM CON_GLO_PERS_UBIC_FECH_COMPLETO(:PE_FECHA)
    WHERE CONS_ESTADO = 1
    INTO :CONS_PERSONAL,    :CODI_PERSONAL,     :PRIM_APELLIDO,     :SEGU_APELLIDO,
         :NOMBRES,          :NOMB_COMPLETO,     :CONS_PERS_TIPO_MOVIMIENTO, :CONS_FAMI_MOVIMIENTO,
         :CONS_ESTADO,      :NOMB_ESTADO,       :CONS_UBIC_TIPO,    :NOMB_UBIC_TIPO,
         :CONS_EMPRESA,     :NOMB_EMPRESA,      :CONS_AREA,         :NOMB_AREA,
         :CONS_PLANTA,      :NOMB_PLANTA,       :CONS_PLAN_LINEA,   :NOMB_PLAN_LINEA,
         :CONS_LINE_SECCION, :NOMB_LINE_SECCION, :CONS_BODEGA,      :NOMB_BODEGA,
         :OTRA_UBICACION,   :CONS_TURNO,        :CODI_TURNO,        :NOMB_TIPO_TURNO,
         :CONS_PERS_CARGO,  :NOMB_PERS_CARGO,   :CONS_PERS_CENT_COSTO,
         :NOMB_PERS_CENT_COSTO, :CONS_COST_GRUPO, :NOMB_COST_GRUPO
  DO
  BEGIN
    /*  SELECCIONAR LA IMAGEN  */
    SELECT IMAGEN
    FROM GLO_PERS_GENERAL
    WHERE CONS_PERSONAL = :CONS_PERSONAL
    INTO :IMAGEN;

    SUSPEND;
  END
END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_FECHA (
    PE_FECHA TIMESTAMP)
    RETURNS (
	CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    CONS_UBIC_TIPO INTEGER,
    CONS_EMPRESA INTEGER,
    CONS_AREA INTEGER,
    CONS_PLANTA INTEGER,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINE_SECCION INTEGER,
    CONS_BODEGA INTEGER,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CONS_PERS_CARGO INTEGER,
    CONS_PERS_CENT_COSTO INTEGER,
    CONS_COST_GRUPO INTEGER)
AS 

BEGIN
  /*  VALIDAR LA FECHA  */
  IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /* CONSULTAR EL PERSONAL */
  FOR SELECT CONS_PERSONAL, CODI_PERSONAL,
   NOMB_COMPLETO
  FROM GLO_PERSONAL
  ORDER BY CONS_PERSONAL
  INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO

  DO BEGIN
      /*  SELECCIONAR DE LA CONSULTA POR UNIDAD */
      SELECT CODI_PERSONAL, NOMB_COMPLETO, CONS_PERS_TIPO_MOVIMIENTO,
          CONS_FAMI_MOVIMIENTO, CONS_ESTADO, CONS_UBIC_TIPO,
          CONS_EMPRESA, CONS_AREA, CONS_PLANTA, CONS_PLAN_LINEA,
          CONS_LINE_SECCION, CONS_BODEGA, OTRA_UBICACION, CONS_TURNO ,
          CONS_PERS_CARGO, CONS_PERS_CENT_COSTO, CONS_COST_GRUPO
      FROM CON_GLO_PERS_UBIC_FECH_UNIDAD(:CONS_PERSONAL, :PE_FECHA)
      INTO
          :CODI_PERSONAL, :NOMB_COMPLETO, :CONS_PERS_TIPO_MOVIMIENTO,
          :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO, :CONS_UBIC_TIPO,
          :CONS_EMPRESA, :CONS_AREA, :CONS_PLANTA, :CONS_PLAN_LINEA,
          :CONS_LINE_SECCION, :CONS_BODEGA, :OTRA_UBICACION, :CONS_TURNO ,
          :CONS_PERS_CARGO, :CONS_PERS_CENT_COSTO, :CONS_COST_GRUPO;
    
      SUSPEND;
  END
END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_FECH_COMPLETO (
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    NOMBRES VARCHAR(40) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CARGO INTEGER,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CENT_COSTO INTEGER,
    NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
    CONS_COST_GRUPO INTEGER,
    NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  /* Verificar que la fecha no este vacía */
  IF (:PE_FECHA IS NULL) THEN
    PE_FECHA = 'NOW';

  /* Recorrer el personal */
  FOR SELECT CONS_PERSONAL, CODI_PERSONAL, PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES, NOMB_COMPLETO
      FROM GLO_PERSONAL
      ORDER BY CONS_PERSONAL
      INTO :CONS_PERSONAL, :CODI_PERSONAL, :PRIM_APELLIDO, :SEGU_APELLIDO, :NOMBRES,:NOMB_COMPLETO
  DO BEGIN
    /* Consultar la ubicación del personal */
    SELECT CODI_PERSONAL, NOMB_COMPLETO, CONS_PERS_TIPO_MOVIMIENTO,
     CONS_FAMI_MOVIMIENTO, CONS_ESTADO, CONS_UBIC_TIPO,
     CONS_EMPRESA , CONS_AREA , CONS_PLANTA , CONS_PLAN_LINEA,
     CONS_LINE_SECCION, CONS_BODEGA , OTRA_UBICACION , CONS_TURNO ,
     CONS_PERS_CARGO, CONS_PERS_CENT_COSTO, CONS_COST_GRUPO
    FROM CON_GLO_PERS_UBIC_FECH_UNIDAD(:CONS_PERSONAL, :PE_FECHA)
    INTO :CODI_PERSONAL, :NOMB_COMPLETO, :CONS_PERS_TIPO_MOVIMIENTO,
     :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO, :CONS_UBIC_TIPO,
     :CONS_EMPRESA , :CONS_AREA , :CONS_PLANTA , :CONS_PLAN_LINEA,
     :CONS_LINE_SECCION, :CONS_BODEGA , :OTRA_UBICACION , :CONS_TURNO ,
     :CONS_PERS_CARGO, :CONS_PERS_CENT_COSTO, :CONS_COST_GRUPO;

    /* Consultar el estado */
    SELECT NOMB_ESTADO FROM SIS_ESTADOS
    WHERE CONS_ESTADO = :CONS_ESTADO
    INTO :NOMB_ESTADO;

    /* Consultar el tipo de ubicación */
    SELECT NOMB_UBIC_TIPO FROM SIS_UBIC_TIPOS
    WHERE CONS_UBIC_TIPO = :CONS_UBIC_TIPO
    INTO :NOMB_UBIC_TIPO;

    /* Consultar la empresa */
    SELECT NOMB_EMPRESA FROM GLO_EMPRESAS
    WHERE CONS_EMPRESA = :CONS_EMPRESA
    INTO :NOMB_EMPRESA;

    /* Consultar el area */
    SELECT NOMB_AREA FROM GLO_AREAS
    WHERE CONS_AREA = :CONS_AREA
    INTO :NOMB_AREA;

    /* Consultar la planta */
    SELECT NOMB_PLANTA FROM GLO_PLANTAS
    WHERE CONS_PLANTA = :CONS_PLANTA
    INTO :NOMB_PLANTA;

    /* Consultar la la */
    SELECT NOMB_LINEA
    FROM VIS_GLO_PLAN_LINEAS
    WHERE CONS_PLAN_LINEA = :CONS_PLAN_LINEA
    INTO :NOMB_PLAN_LINEA;

    /* Consultar la sección */
    SELECT NOMB_SECCION FROM VIS_GLO_LINE_SECCIONES
    WHERE CONS_LINE_SECCION = :CONS_LINE_SECCION
    INTO :NOMB_LINE_SECCION;

    /* Consultar la bodega */
    SELECT NOMB_BODEGA FROM GLO_BODEGAS
    WHERE CONS_BODEGA = :CONS_BODEGA
    INTO :NOMB_BODEGA;

    /* Consultar el turno */
    SELECT TURN.CODI_TURNO, FUNC.NOMB_TIPO_TURNO
    FROM GLO_TURNOS TURN,
    FUN_GLO_PERS_NOMB_TIPO_TURNO(TURN.TIPO_TURNO) FUNC
    WHERE TURN.CONS_TURNO = :CONS_TURNO
    INTO :CODI_TURNO, :NOMB_TIPO_TURNO;

    /* Consultar el cargo */
    SELECT NOMB_PERS_CARGO FROM GLO_PERS_CARGOS
    WHERE CONS_PERS_CARGO = :CONS_PERS_CARGO
    INTO :NOMB_PERS_CARGO;

    /* Consultar el centro de costos */
    SELECT NOMB_PERS_CENT_COSTO FROM GLO_PERS_CENT_COSTOS
    WHERE CONS_PERS_CENT_COSTO = :CONS_PERS_CENT_COSTO
    INTO :NOMB_PERS_CENT_COSTO;

    /* Consultar el grupo de centro de costos */
    SELECT NOMB_COST_GRUPO FROM SIS_COST_GRUPOS
    WHERE CONS_COST_GRUPO = :CONS_COST_GRUPO
    INTO :NOMB_COST_GRUPO;

    SUSPEND;
  END
END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_FECH_COMPL_UN (
    PE_FECHA TIMESTAMP,
    PE_CONS_PERSONAL INTEGER)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    NOMBRES VARCHAR(40) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CARGO INTEGER,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CENT_COSTO INTEGER,
    NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
    CONS_COST_GRUPO INTEGER,
    NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  /*  VALIDAR LA FECHA  */
  IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /* CONSULTAR EL PERSONAL */
  FOR SELECT CONS_PERSONAL, CODI_PERSONAL, PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES, NOMB_COMPLETO
      FROM GLO_PERSONAL
      WHERE CONS_PERSONAL = :PE_CONS_PERSONAL
      ORDER BY CONS_PERSONAL
      INTO :CONS_PERSONAL, :CODI_PERSONAL, :PRIM_APELLIDO, :SEGU_APELLIDO, :NOMBRES,:NOMB_COMPLETO

  DO BEGIN
      /*  SELECCIONAR DE LA CONSULTA POR UNIDAD */
      SELECT CODI_PERSONAL, NOMB_COMPLETO, CONS_PERS_TIPO_MOVIMIENTO,
          CONS_FAMI_MOVIMIENTO, CONS_ESTADO, CONS_UBIC_TIPO,
          CONS_EMPRESA , CONS_AREA , CONS_PLANTA , CONS_PLAN_LINEA,
          CONS_LINE_SECCION, CONS_BODEGA , OTRA_UBICACION , CONS_TURNO ,
          CONS_PERS_CARGO, CONS_PERS_CENT_COSTO, CONS_COST_GRUPO
      FROM CON_GLO_PERS_UBIC_FECH_UNIDAD(:CONS_PERSONAL, :PE_FECHA)
      INTO
          :CODI_PERSONAL, :NOMB_COMPLETO, :CONS_PERS_TIPO_MOVIMIENTO,
          :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO, :CONS_UBIC_TIPO,
          :CONS_EMPRESA , :CONS_AREA , :CONS_PLANTA , :CONS_PLAN_LINEA,
          :CONS_LINE_SECCION, :CONS_BODEGA , :OTRA_UBICACION , :CONS_TURNO ,
          :CONS_PERS_CARGO, :CONS_PERS_CENT_COSTO, :CONS_COST_GRUPO;

      /*  SELECCIONAR LOS NOMBRES DE LOS REGISTROS QUE SOLO  ESTADO  */
      SELECT NOMB_ESTADO FROM SIS_ESTADOS
      WHERE CONS_ESTADO = :CONS_ESTADO
      INTO :NOMB_ESTADO;

      /*  TIPO DE UBICACION  */
      SELECT NOMB_UBIC_TIPO FROM SIS_UBIC_TIPOS
      WHERE CONS_UBIC_TIPO = :CONS_UBIC_TIPO
      INTO :NOMB_UBIC_TIPO;

       /*  EMPRESA  */
       SELECT NOMB_EMPRESA FROM GLO_EMPRESAS
       WHERE CONS_EMPRESA = :CONS_EMPRESA
       INTO :NOMB_EMPRESA;

       /*  AREA  */
       SELECT NOMB_AREA FROM GLO_AREAS
       WHERE CONS_AREA = :CONS_AREA
       INTO :NOMB_AREA;

       /*  PLANTA  */
       SELECT NOMB_PLANTA FROM GLO_PLANTAS
       WHERE CONS_PLANTA = :CONS_PLANTA
       INTO :NOMB_PLANTA;

       /*  PLAN_LINEA  */
       SELECT NOMB_LINEA
       FROM VIS_GLO_PLAN_LINEAS
       WHERE CONS_PLAN_LINEA = :CONS_PLAN_LINEA
       INTO :NOMB_PLAN_LINEA;

       /*  LINE_SECCION  */
       SELECT NOMB_SECCION FROM VIS_GLO_LINE_SECCIONES
       WHERE CONS_LINE_SECCION = :CONS_LINE_SECCION
       INTO :NOMB_LINE_SECCION;

       /*  BODEGA  */
       SELECT NOMB_BODEGA FROM GLO_BODEGAS
       WHERE CONS_BODEGA = :CONS_BODEGA
       INTO :NOMB_BODEGA;

       /*  TURNO  */
       SELECT TURN.CODI_TURNO, FUNC.NOMB_TIPO_TURNO
       FROM GLO_TURNOS TURN,
       FUN_GLO_PERS_NOMB_TIPO_TURNO(TURN.TIPO_TURNO) FUNC
       WHERE TURN.CONS_TURNO = :CONS_TURNO
       INTO :CODI_TURNO, :NOMB_TIPO_TURNO;

       /*  CARGO  */
       SELECT NOMB_PERS_CARGO FROM GLO_PERS_CARGOS
       WHERE CONS_PERS_CARGO = :CONS_PERS_CARGO
       INTO :NOMB_PERS_CARGO;

       /*  CENTRO DE COSTOS  */
       SELECT NOMB_PERS_CENT_COSTO FROM GLO_PERS_CENT_COSTOS
       WHERE CONS_PERS_CENT_COSTO = :CONS_PERS_CENT_COSTO
       INTO :NOMB_PERS_CENT_COSTO;

       /*  GRUPO DE CENTRO DE COSTOS  */
       SELECT NOMB_COST_GRUPO FROM SIS_COST_GRUPOS
       WHERE CONS_COST_GRUPO = :CONS_COST_GRUPO
       INTO :NOMB_COST_GRUPO;

       SUSPEND;
  END

END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_FECH_UNIDAD (
    PE_CONS_PERSONAL INTEGER,
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    CONS_UBIC_TIPO INTEGER,
    CONS_EMPRESA INTEGER,
    CONS_AREA INTEGER,
    CONS_PLANTA INTEGER,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINE_SECCION INTEGER,
    CONS_BODEGA INTEGER,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CONS_PERS_CARGO INTEGER,
    CONS_PERS_CENT_COSTO INTEGER,
    CONS_COST_GRUPO INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;

BEGIN
  /*  VALIDAR LA FECHA  */
  IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /* CONSULTAR EL PERSONAL */
  FOR SELECT CONS_PERSONAL, CODI_PERSONAL,
   NOMB_COMPLETO
  FROM GLO_PERSONAL
  WHERE CONS_PERSONAL = :PE_CONS_PERSONAL
  INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO
  DO BEGIN
            /* BUSCO EL ÚLTIMO MOVIMIENTO DE TRASLADOS DEL PERSONAL */
            SELECT FIRST 1 T.CONS_PERS_MOVIMIENTO, M.CONS_PERS_TIPO_MOVIMIENTO,
               T.CONS_UBIC_TIPO, T.CONS_EMPRESA, T.CONS_AREA,
               T.CONS_PLANTA, T.CONS_PLAN_LINEA, T.CONS_LINE_SECCION,
               T.CONS_BODEGA, T.OTRA_UBICACION, T.CONS_TURNO,
               T.CONS_PERS_CARGO, T.CONS_PERS_CENT_COSTO,
               T.CONS_COST_GRUPO
            FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_TRASLADOS T
            WHERE M.CONS_PERS_MOVIMIENTO = T.CONS_PERS_MOVIMIENTO AND 
                    M.CONS_PERSONAL = :CONS_PERSONAL AND 
                    (M.FECH_INICIAL <= :PE_FECHA AND 
                    (M.FECH_FINAL >= :PE_FECHA OR M.FECH_FINAL IS NULL)) AND 
                    M.CONS_PERS_MOVIMIENTO NOT IN(
                                       SELECT CONS_PERS_MOVIMIENTO
                                       FROM GLO_PERS_MOVI_ANULADOS)
            ORDER BY T.CONS_PERS_MOVIMIENTO DESC
            INTO :VAR_CONS_PERS_MOVIMIENTO, :CONS_PERS_TIPO_MOVIMIENTO,
               :CONS_UBIC_TIPO, :CONS_EMPRESA, :CONS_AREA,
               :CONS_PLANTA, :CONS_PLAN_LINEA, :CONS_LINE_SECCION,
               :CONS_BODEGA, :OTRA_UBICACION, :CONS_TURNO,
               :CONS_PERS_CARGO, :CONS_PERS_CENT_COSTO,
               :CONS_COST_GRUPO;

             /*  CONSULTAR LA INFORMACIÓN DEL TIPO DE MOVIMIENTO  */
             SELECT T.CONS_FAMI_MOVIMIENTO, T.CONS_ESTADO
             FROM VIS_GLO_PERS_TIPO_MOVIMIENTO T
             WHERE T.CONS_PERS_TIPO_MOVIMIENTO = :CONS_PERS_TIPO_MOVIMIENTO
             INTO :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO;

      SUSPEND;
  END
END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_INACTIVO (
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CARGO INTEGER,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CENT_COSTO INTEGER,
    NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
    CONS_COST_GRUPO INTEGER,
    NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN

  /*  VALIDAR LA FECHA  */
  IF (PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

  /*  SELECCIONAR  */
  FOR
    SELECT CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,
         CONS_PERS_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO, CONS_ESTADO,
         NOMB_ESTADO, CONS_UBIC_TIPO, NOMB_UBIC_TIPO,
         CONS_EMPRESA, NOMB_EMPRESA, CONS_AREA,
         NOMB_AREA, CONS_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA,
         NOMB_PLAN_LINEA, CONS_LINE_SECCION, NOMB_LINE_SECCION, CONS_BODEGA,
         NOMB_BODEGA, OTRA_UBICACION, CONS_TURNO, CODI_TURNO,
         NOMB_TIPO_TURNO, CONS_PERS_CARGO, NOMB_PERS_CARGO, CONS_PERS_CENT_COSTO,
         NOMB_PERS_CENT_COSTO, CONS_COST_GRUPO, NOMB_COST_GRUPO
    FROM CON_GLO_PERS_UBIC_FECH_COMPLETO(:PE_FECHA)
    WHERE CONS_ESTADO = 2
    INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO, 
         :CONS_PERS_TIPO_MOVIMIENTO, :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO, 
         :NOMB_ESTADO, :CONS_UBIC_TIPO, :NOMB_UBIC_TIPO, 
         :CONS_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,
         :NOMB_AREA, :CONS_PLANTA, :NOMB_PLANTA, :CONS_PLAN_LINEA,
         :NOMB_PLAN_LINEA, :CONS_LINE_SECCION, :NOMB_LINE_SECCION, :CONS_BODEGA,
         :NOMB_BODEGA, :OTRA_UBICACION, :CONS_TURNO, :CODI_TURNO,
         :NOMB_TIPO_TURNO, :CONS_PERS_CARGO, :NOMB_PERS_CARGO, :CONS_PERS_CENT_COSTO,
         :NOMB_PERS_CENT_COSTO, :CONS_COST_GRUPO, :NOMB_COST_GRUPO
  DO BEGIN

    SUSPEND;
  END
END ^

ALTER PROCEDURE CON_GLO_PERS_UBIC_PERSONAL RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    APELLIDOS VARCHAR(62) CHARACTER SET NONE,
    NOMBRES VARCHAR(40) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CODI_PERS_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_PERS_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CODI_FAMI_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_FAMI_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    CODI_AREA VARCHAR(12) CHARACTER SET NONE,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
    TIPO_TURNO INTEGER,
    NOMB_TURNO VARCHAR(30) CHARACTER SET NONE,
    CONS_PERS_CARGO INTEGER,
    CODI_PERS_CARGO VARCHAR(12) CHARACTER SET NONE,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_CONS_ESTADO INTEGER;

BEGIN

  /* Consultamos el personal */
  FOR SELECT CONS_PERSONAL, CODI_PERSONAL, PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES, NOMB_COMPLETO
  FROM GLO_PERSONAL
  ORDER BY CONS_PERSONAL
  INTO :CONS_PERSONAL, :CODI_PERSONAL, :PRIM_APELLIDO, :SEGU_APELLIDO, :NOMBRES, :NOMB_COMPLETO

  DO BEGIN
    /* Unir los apellidos */
    APELLIDOS = (:PRIM_APELLIDO || ' ' || :SEGU_APELLIDO);

    /* Consultamos su estado */
    SELECT CONS_ESTADO, ESTADO, CONS_PERS_TIPO_MOVIMIENTO,
     CODI_PERS_TIPO_MOVIMIENTO, NOMB_PERS_TIPO_MOVIMIENTO,
     CONS_FAMI_MOVIMIENTO, CODI_FAMI_MOVIMIENTO, NOMB_FAMI_MOVIMIENTO
    FROM CON_GLO_PERS_ESTADO (:CONS_PERSONAL, NULL)
    INTO :VAR_CONS_ESTADO, :ESTADO, :CONS_PERS_TIPO_MOVIMIENTO,
     :CODI_PERS_TIPO_MOVIMIENTO, :NOMB_PERS_TIPO_MOVIMIENTO,
     :CONS_FAMI_MOVIMIENTO, :CODI_FAMI_MOVIMIENTO, :NOMB_FAMI_MOVIMIENTO;

    /* Verifico que se muestre solo el personal inactivo */
    IF (:CONS_FAMI_MOVIMIENTO <> 4) THEN BEGIN

      /* Buscamos el último movimiento de traslados del personal */
      SELECT MAX(T.CONS_PERS_MOVIMIENTO)
      FROM GLO_PERS_MOVIMIENTOS M, GLO_PERS_MOVI_TRASLADOS T
      WHERE M.CONS_PERS_MOVIMIENTO = T.CONS_PERS_MOVIMIENTO AND 
            M.CONS_PERSONAL = :CONS_PERSONAL AND 
            M.CONS_PERS_MOVIMIENTO NOT IN(
                   SELECT CONS_PERS_MOVIMIENTO
                   FROM GLO_PERS_MOVI_ANULADOS)
      INTO :VAR_CONS_PERS_MOVIMIENTO;

  
      /* Consultamos los datos de ubicación del último traslado del personal */
      SELECT T.CONS_UBIC_TIPO, T.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,
       T.CONS_AREA, A.CODI_AREA, A.NOMB_AREA,
       T.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA,
       T.CONS_PLAN_LINEA, PL.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA,
       T.CONS_LINE_SECCION, LS.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,
       T.CONS_BODEGA, B.CODI_BODEGA, B.NOMB_BODEGA,
       T.OTRA_UBICACION, T.CONS_TURNO, TU.CODI_TURNO, TU.TIPO_TURNO,
       CASE TU.TIPO_TURNO
         WHEN 0 THEN 'Completo'
         WHEN 1 THEN 'Mañana'
         WHEN 2 THEN 'Tarde'
         WHEN 3 THEN 'Noche'
         WHEN 4 THEN 'Unica'
         ELSE 'Desconocido'
       END,
       T.CONS_PERS_CARGO, C.CODI_PERS_CARGO, C.NOMB_PERS_CARGO
      FROM GLO_PERS_MOVI_TRASLADOS T, 
            GLO_EMPRESAS E, 
            GLO_AREAS A,
            GLO_PLANTAS P, 
            GLO_PLAN_LINEAS PL, 
            GLO_LINEAS L, 
            GLO_LINE_SECCIONES LS,
            GLO_SECCIONES S, 
            GLO_BODEGAS B, 
            GLO_TURNOS TU, 
            GLO_PERS_CARGOS C
      WHERE T.CONS_EMPRESA = E.CONS_EMPRESA AND 
            T.CONS_AREA = A.CONS_AREA AND 
            T.CONS_PLANTA = P.CONS_PLANTA AND 
            (T.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA AND 
                PL.CONS_LINEA = L.CONS_LINEA) AND 
                (T.CONS_LINE_SECCION = LS.CONS_LINE_SECCION AND 
                    LS.CONS_SECCION = S.CONS_SECCION) AND 
                T.CONS_BODEGA = B.CONS_BODEGA AND 
                T.CONS_TURNO = TU.CONS_TURNO AND 
                T.CONS_PERS_CARGO = C.CONS_PERS_CARGO AND 
                T.CONS_PERS_MOVIMIENTO = :VAR_CONS_PERS_MOVIMIENTO
      ORDER BY T.CONS_PERS_MOVIMIENTO
      INTO :CONS_UBIC_TIPO, :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,
       :CONS_AREA, :CODI_AREA, :NOMB_AREA,
       :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
       :CONS_PLAN_LINEA, :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,
       :CONS_LINE_SECCION, :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,
       :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, 
       :OTRA_UBICACION, :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO,
       :NOMB_TURNO, 
       :CONS_PERS_CARGO, :CODI_PERS_CARGO, :NOMB_PERS_CARGO;

      SUSPEND;
    END
  END
END ^

ALTER PROCEDURE CON_GLO_RECU_EN_BAJA RETURNS (
	
    CONS_RECURSO INTEGER,
    CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_RECURSO VARCHAR(102) CHARACTER SET NONE,
    CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    NOMB_RECU_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
    FECH_INICIAL TIMESTAMP,
    NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
    NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CODI_AREA VARCHAR(12) CHARACTER SET NONE,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_CONS_ESTADO INTEGER;

BEGIN
  /* Consultamos el recurso */
  FOR SELECT R.CONS_RECURSO, R.CODI_RECURSO, R.CODI_INTE_RECURSO,
   G.NOMB_RECU_GRUPO, T.NOMB_RECU_TIPO, F.NOMB_RECU_FAMILIA, M.NOMB_RECU_MARCA
  FROM GLO_RECURSOS R, 
        GLO_RECU_GRUPOS G,
        GLO_RECU_TIPOS T, 
        GLO_RECU_FAMILIAS F, 
        GLO_RECU_MARCAS M
  WHERE (R.CONS_RECU_GRUPO = F.CONS_RECU_GRUPO AND 
        R.CONS_RECU_TIPO = F.CONS_RECU_TIPO AND 
        R.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA) AND 
        (F.CONS_RECU_GRUPO = T.CONS_RECU_GRUPO AND 
         F.CONS_RECU_TIPO = T.CONS_RECU_TIPO) AND 
        (T.CONS_RECU_GRUPO = G.CONS_RECU_GRUPO) AND 
        (R.CONS_RECU_MARCA = M.CONS_RECU_MARCA)
  ORDER BY F.CONS_RECU_FAMILIA
  INTO :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO,
   :NOMB_RECU_GRUPO, :NOMB_RECU_TIPO, :NOMB_RECU_FAMILIA, :NOMB_RECU_MARCA

  DO BEGIN
    /* Consultamos su estado */
    SELECT CONS_ESTADO
    FROM CON_GLO_RECU_ESTADO(:CONS_RECURSO, NULL)
    INTO :VAR_CONS_ESTADO;

    /* Verifico que se muestre solo el recurso inactivo */
    IF (:VAR_CONS_ESTADO = -1) THEN BEGIN

      /* Buscamos el último movimiento de traslados del recurso */
      SELECT MAX(T.CONS_RECU_MOVIMIENTO)
      FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_MOVI_TRASLADOS T
      WHERE M.CONS_RECU_MOVIMIENTO = T.CONS_RECU_MOVIMIENTO AND 
            M.CONS_RECURSO = :CONS_RECURSO
      INTO :VAR_CONS_RECU_MOVIMIENTO;

      /* Consultamos los datos de ubicación del último traslado del recurso */
      SELECT E.CODI_EMPRESA, E.NOMB_EMPRESA,
       A.CODI_AREA, A.NOMB_AREA, P.CODI_PLANTA, P.NOMB_PLANTA,
       L.CODI_LINEA, L.NOMB_LINEA, S.CODI_SECCION, S.NOMB_SECCION,
       B.CODI_BODEGA, B.NOMB_BODEGA, T.OTRA_UBICACION
      FROM GLO_RECU_MOVI_TRASLADOS T, GLO_EMPRESAS E, GLO_AREAS A,
       GLO_PLANTAS P, GLO_PLAN_LINEAS PL, GLO_LINEAS L,
       GLO_LINE_SECCIONES LS, GLO_SECCIONES S, GLO_BODEGAS B
      WHERE T.CONS_EMPRESA = E.CONS_EMPRESA AND 
            T.CONS_AREA = A.CONS_AREA AND 
            T.CONS_PLANTA = P.CONS_PLANTA AND 
            (T.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA AND 
                PL.CONS_PLANTA = P.CONS_PLANTA AND 
                PL.CONS_LINEA = L.CONS_LINEA) AND 
            (T.CONS_LINE_SECCION = LS.CONS_LINE_SECCION AND 
                LS.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA AND 
                PL.CONS_PLANTA = P.CONS_PLANTA AND 
                PL.CONS_LINEA = L.CONS_LINEA AND 
                LS.CONS_SECCION = S.CONS_SECCION) AND 
            T.CONS_BODEGA = B.CONS_BODEGA AND 
            T.CONS_RECU_MOVIMIENTO = :VAR_CONS_RECU_MOVIMIENTO
      INTO :CODI_EMPRESA, :NOMB_EMPRESA,
       :CODI_AREA, :NOMB_AREA, :CODI_PLANTA, :NOMB_PLANTA,
       :CODI_LINEA, :NOMB_LINEA, :CODI_SECCION, :NOMB_SECCION,
       :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION;

      VAR_CONS_RECU_MOVIMIENTO = NULL;

      /* Buscamos el último movimiento de baja del recurso */

      SELECT MAX(B.CONS_RECU_MOVIMIENTO)
      FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_MOVI_BAJAS B
      WHERE M.CONS_RECU_MOVIMIENTO = B.CONS_RECU_MOVIMIENTO AND 
            M.CONS_RECURSO = :CONS_RECURSO
      INTO :VAR_CONS_RECU_MOVIMIENTO;

      SELECT T.CONS_RECU_TIPO_MOVIMIENTO, T.NOMB_RECU_TIPO_MOVIMIENTO, M.FECH_INICIAL
      FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_TIPO_MOVIMIENTO T
      WHERE T.CONS_RECU_TIPO_MOVIMIENTO = M.CONS_RECU_TIPO_MOVIMIENTO AND 
            M.CONS_RECU_MOVIMIENTO = :VAR_CONS_RECU_MOVIMIENTO
      INTO :CONS_RECU_TIPO_MOVIMIENTO, :NOMB_RECU_TIPO_MOVIMIENTO, :FECH_INICIAL;

      SUSPEND;
    END
  END
END ^

ALTER PROCEDURE CON_GLO_RECU_ESTADO (
    PE_CONS_RECURSO INTEGER,
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_ESTADO INTEGER,
    ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_MOVIMIENTO INTEGER,
    CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER)
AS 

DECLARE VARIABLE VAR_ESTADO VARCHAR(60);
DECLARE VARIABLE VAR_FECH_INIC_BAJA TIMESTAMP;
DECLARE VARIABLE VAR_FECH_FINA_BAJA TIMESTAMP;

BEGIN
  /* Si esta vacía la fecha se asigna la fecha actual */
  IF (:PE_FECHA IS NULL) THEN
    PE_FECHA = 'NOW';

  /* Estado por defecto */
  CONS_ESTADO = 1;
  ESTADO = 'Activo';
  VAR_ESTADO = '';

  /* Verifico que si tenga movimientos a la fecha */

  IF (EXISTS(SELECT CONS_RECU_MOVIMIENTO
             FROM GLO_RECU_MOVIMIENTOS
             WHERE CONS_RECURSO = :PE_CONS_RECURSO AND 
            FECH_INICIAL <= :PE_FECHA)) THEN BEGIN
    /* Buscamos el último movimiento de bajas antes de la fecha */
    SELECT MAX(B.CONS_RECU_MOVIMIENTO)
    FROM GLO_RECU_MOVI_BAJAS B, GLO_RECU_MOVIMIENTOS M
    WHERE M.CONS_RECU_MOVIMIENTO = B.CONS_RECU_MOVIMIENTO AND 
            M.FECH_INICIAL <= :PE_FECHA AND 
            M.CONS_RECURSO = :PE_CONS_RECURSO AND 
            M.CONS_RECU_MOVIMIENTO NOT IN(
                     SELECT CONS_RECU_MOVIMIENTO
                     FROM GLO_RECU_MOVI_ANULADOS)
    INTO :CONS_RECU_MOVIMIENTO;

    SELECT M.FECH_INICIAL, M.FECH_FINAL,
     M.CONS_RECU_TIPO_MOVIMIENTO, T.CONS_FAMI_MOVIMIENTO
    FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_TIPO_MOVIMIENTO T
    WHERE M.CONS_RECU_TIPO_MOVIMIENTO = T.CONS_RECU_TIPO_MOVIMIENTO AND 
            M.CONS_RECU_MOVIMIENTO = :CONS_RECU_MOVIMIENTO
    INTO :VAR_FECH_INIC_BAJA, :VAR_FECH_FINA_BAJA, 
        :CONS_RECU_TIPO_MOVIMIENTO, :CONS_FAMI_MOVIMIENTO;

    /* Buscamos el tipo de baja */

    IF (:CONS_RECU_MOVIMIENTO IS NOT NULL) THEN
      IF ((:VAR_FECH_FINA_BAJA IS NOT NULL AND :VAR_FECH_FINA_BAJA >= :PE_FECHA) OR
        (NOT EXISTS(SELECT CONS_RECU_MOVIMIENTO
               FROM GLO_RECU_MOVIMIENTOS
               WHERE CONS_RECURSO = :PE_CONS_RECURSO AND 
                    (FECH_INICIAL BETWEEN :VAR_FECH_INIC_BAJA AND :PE_FECHA) AND 
                     CONS_RECU_TIPO_MOVIMIENTO = 5 AND CONS_RECU_MOVIMIENTO NOT IN (
                    SELECT CONS_RECU_MOVIMIENTO
                    FROM GLO_RECU_MOVI_ANULADOS))
        )
      ) THEN BEGIN
        SELECT T.NOMB_RECU_TIPO_MOVIMIENTO
        FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_TIPO_MOVIMIENTO T
        WHERE M.CONS_RECU_TIPO_MOVIMIENTO = T.CONS_RECU_TIPO_MOVIMIENTO AND 
                M.CONS_RECU_MOVIMIENTO = :CONS_RECU_MOVIMIENTO
        INTO :VAR_ESTADO;

        IF (:VAR_ESTADO <> '' or (:VAR_ESTADO IS NOT NULL)) THEN BEGIN
          CONS_ESTADO = -1;
          ESTADO = (:VAR_ESTADO);
        END
      END
  END
  ELSE BEGIN

    /* Si no tiene movimientos a la fecha esta inactivo */
    CONS_ESTADO = -2;
    ESTADO = 'Desconocido';

  END

  SUSPEND;
END ^

ALTER PROCEDURE CON_GLO_RECU_INFO_GENERAL RETURNS (
	
    CONS_RECURSO INTEGER,
    CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
    CONS_RECU_GRUPO INTEGER,
    CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_TIPO INTEGER,
    CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_FAMILIA INTEGER,
    CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_MARCA INTEGER,
    CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
    CLASE VARCHAR(60) CHARACTER SET NONE,
    NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
    FECH_INGRESO TIMESTAMP,
    ANTIGUEDAD INTEGER,
    CONS_TIPO_DOCUMENTO INTEGER,
    CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
    NUME_DOCUMENTO VARCHAR(20) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    CODI_AREA VARCHAR(12) CHARACTER SET NONE,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_TEMPORAL TIMESTAMP;

BEGIN

  -- Verifico que tenga permiso sobre las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_RECURSOS,GLO_RECU_GRUPOS,' ||
              'GLO_RECU_TIPOS,GLO_RECU_FAMILIAS,GLO_RECU_MARCAS', 5, 'S')
             WHERE PERMISO = 1)) THEN

    -- Consultamos los recursos
    FOR SELECT R.CONS_RECURSO, R.CODI_RECURSO, R.CODI_INTE_RECURSO,
         R.CONS_RECU_GRUPO, G.CODI_RECU_GRUPO, G.NOMB_RECU_GRUPO,
         R.CONS_RECU_TIPO, T.CODI_RECU_TIPO, T.NOMB_RECU_TIPO,
         R.CONS_RECU_FAMILIA, F.CODI_RECU_FAMILIA, F.NOMB_RECU_FAMILIA,
         R.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,
         R.CLASE, R.NUME_SERIE
    FROM GLO_RECURSOS R, 
         GLO_RECU_GRUPOS G, 
         GLO_RECU_TIPOS T,
         GLO_RECU_FAMILIAS F, 
         GLO_RECU_MARCAS M
    WHERE (R.CONS_RECU_GRUPO = F.CONS_RECU_GRUPO AND 
            R.CONS_RECU_TIPO = F.CONS_RECU_TIPO AND 
            R.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA) AND 
            (F.CONS_RECU_GRUPO = T.CONS_RECU_GRUPO AND 
                F.CONS_RECU_TIPO = T.CONS_RECU_TIPO) AND 
            T.CONS_RECU_GRUPO = G.CONS_RECU_GRUPO AND 
            R.CONS_RECU_MARCA = M.CONS_RECU_MARCA
    ORDER BY R.CONS_RECURSO
    INTO :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO,
     :CONS_RECU_GRUPO, :CODI_RECU_GRUPO, :NOMB_RECU_GRUPO,
     :CONS_RECU_TIPO, :CODI_RECU_TIPO, :NOMB_RECU_TIPO,
     :CONS_RECU_FAMILIA, :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA,
     :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,
     :CLASE, :NUME_SERIE

    DO BEGIN

      -- Verifico que tenga permiso sobre las tablas
      IF (EXISTS(SELECT PERMISO
                 FROM CON_PERM_TABLAS('CON_GLO_RECU_UBIC_UNIDAD', 1, 'X')
                 WHERE PERMISO = 1)) THEN

        -- Consultamos la ubicación del Recurso

        SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,
             CONS_AREA, CODI_AREA, NOMB_AREA,
             CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,
             CONS_LINEA, CODI_LINEA, NOMB_LINEA,
             CONS_SECCION, CODI_SECCION, NOMB_SECCION,
             CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,
             OTRA_UBICACION
        FROM CON_GLO_RECU_UBIC_UNIDAD(:CONS_RECURSO, NULL)
        INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,
             :CONS_AREA, :CODI_AREA, :NOMB_AREA,
             :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
             :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,
             :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,
             :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,
             :OTRA_UBICACION;

      -- Verifico que tenga permiso sobre las tablas
      IF (EXISTS(SELECT PERMISO
                 FROM CON_PERM_TABLAS('CON_GLO_RECU_ESTADO', 1, 'X')
                 WHERE PERMISO = 1)) THEN
        -- Consultamos el estado del Recurso
        SELECT ESTADO, CONS_RECU_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO
        FROM CON_GLO_RECU_ESTADO(:CONS_RECURSO, NULL)
        INTO :ESTADO, :CONS_RECU_TIPO_MOVIMIENTO, :CONS_FAMI_MOVIMIENTO;

      VAR_CONS_RECU_MOVIMIENTO = NULL;

      -- Verifico que tenga permiso sobre las tablas
      IF (EXISTS(SELECT PERMISO
                 FROM CON_PERM_TABLAS('GLO_RECU_MOVIMIENTOS,' ||
                  'GLO_RECU_TIPO_MOVIMIENTO,GLO_RECU_MOVI_ANULADOS', 3, 'S')
                 WHERE PERMISO = 1)) THEN

      -- Buscamos el último movimiento de ingreso del Recurso
      SELECT MAX(M.CONS_RECU_MOVIMIENTO)
      FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_TIPO_MOVIMIENTO T
      WHERE M.CONS_RECURSO = :CONS_RECURSO AND 
            M.CONS_RECU_TIPO_MOVIMIENTO = T.CONS_RECU_TIPO_MOVIMIENTO AND 
            T.CONS_FAMI_MOVIMIENTO = 1 AND 
            M.CONS_RECU_MOVIMIENTO NOT IN(
                       SELECT CONS_RECU_MOVIMIENTO
                       FROM GLO_RECU_MOVI_ANULADOS)
      INTO :VAR_CONS_RECU_MOVIMIENTO;

      -- Consultamos la fecha y el documento de ingreso del Recurso
      IF (:VAR_CONS_RECU_MOVIMIENTO IS NOT NULL AND
          -- Verifico que tenga permiso sobre las tablas
          EXISTS(SELECT PERMISO
                 FROM CON_PERM_TABLAS('GLO_TIPO_DOCUMENTO', 1, 'S')
                 WHERE PERMISO = 1)) THEN
        SELECT M.FECH_INICIAL, M.NUME_DOCUMENTO,
             M.CONS_TIPO_DOCUMENTO, T.CODI_TIPO_DOCUMENTO,
             T.NOMB_TIPO_DOCUMENTO
        FROM GLO_RECU_MOVIMIENTOS M, GLO_TIPO_DOCUMENTO T
        WHERE M.CONS_TIPO_DOCUMENTO = T.CONS_TIPO_DOCUMENTO AND 
                M.CONS_RECU_MOVIMIENTO = :VAR_CONS_RECU_MOVIMIENTO
        INTO :FECH_INGRESO, :NUME_DOCUMENTO,
         :CONS_TIPO_DOCUMENTO, :CODI_TIPO_DOCUMENTO,
         :NOMB_TIPO_DOCUMENTO;

      ANTIGUEDAD = 0;

      -- Asignamos la antiguedad del Recurso
      IF (:FECH_INGRESO IS NOT NULL) THEN BEGIN

        VAR_TEMPORAL = 'NOW';
        ANTIGUEDAD = (:VAR_TEMPORAL - :FECH_INGRESO);

      END

      SUSPEND;
    END
END ^

ALTER PROCEDURE CON_GLO_RECU_INFO_PLANTAS RETURNS (
	
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_FAMILIA INTEGER,
    CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    CANTIDAD INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_LINE_SECCION INTEGER;
DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;

BEGIN

  -- Verifico que tengan permiso sobre las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_EMPRESAS,GLO_PLANTAS,' ||
              'GLO_PLAN_LINEAS,GLO_LINEAS,GLO_LINE_SECCIONES,' ||
              'GLO_SECCIONES,GLO_RECU_FAMILIAS,GLO_RECURSOS,' ||
              'GLO_RECU_MOVIMIENTOS,GLO_RECU_MOVI_TRASLADOS,' ||
              'GLO_RECU_MOVI_ANULADOS', 11, 'S')
             WHERE PERMISO = 1)) THEN
    -- Consultamos la estructura de la empresa
    FOR SELECT E.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,
         P.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA,
         L.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA,
         S.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,
         SL.CONS_LINE_SECCION
    FROM GLO_EMPRESAS E, GLO_PLANTAS P, GLO_PLAN_LINEAS PL,
     GLO_LINEAS L, GLO_LINE_SECCIONES SL, GLO_SECCIONES S
    WHERE E.CONS_EMPRESA = P.CONS_EMPRESA AND 
        (P.CONS_PLANTA = PL.CONS_PLANTA AND 
            PL.CONS_LINEA = L.CONS_LINEA) AND 
        (PL.CONS_PLAN_LINEA = SL.CONS_PLAN_LINEA AND 
            SL.CONS_SECCION = S.CONS_SECCION)
    ORDER BY P.CONS_PLANTA
    INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,
     :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
     :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,
     :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,
     :VAR_CONS_LINE_SECCION

    DO BEGIN
      -- Consultamos las familias de los recursos
      FOR SELECT CONS_RECU_FAMILIA, CODI_RECU_FAMILIA, NOMB_RECU_FAMILIA
      FROM GLO_RECU_FAMILIAS
      ORDER BY CONS_RECU_FAMILIA
      INTO :CONS_RECU_FAMILIA, :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA

      DO BEGIN

        CANTIDAD = 0;

        -- Consultamos la cantidad de Recurso que existen en una ubicacion de una familia de Recurso
        FOR SELECT M.CONS_RECU_MOVIMIENTO
        FROM GLO_RECURSOS R, GLO_RECU_MOVIMIENTOS M
        WHERE R.CONS_RECURSO = M.CONS_RECURSO AND 
                R.CONS_RECU_FAMILIA = :CONS_RECU_FAMILIA AND 
                M.CONS_RECU_MOVIMIENTO NOT IN ( SELECT CONS_RECU_MOVIMIENTO FROM GLO_RECU_MOVI_ANULADOS) AND 
                M.CONS_RECU_MOVIMIENTO = (
                      SELECT MAX(T.CONS_RECU_MOVIMIENTO)
                      FROM GLO_RECU_MOVIMIENTOS MO, GLO_RECU_MOVI_TRASLADOS T
                      WHERE MO.CONS_RECU_MOVIMIENTO = T.CONS_RECU_MOVIMIENTO AND 
                            MO.CONS_RECURSO = R.CONS_RECURSO)
                    ORDER BY M.CONS_RECU_MOVIMIENTO
        INTO :VAR_CONS_RECU_MOVIMIENTO

        DO BEGIN
          IF (EXISTS(SELECT CONS_RECU_MOVIMIENTO
                     FROM GLO_RECU_MOVI_TRASLADOS
                     WHERE CONS_RECU_MOVIMIENTO = :VAR_CONS_RECU_MOVIMIENTO AND 
                    CONS_LINE_SECCION = :VAR_CONS_LINE_SECCION)) THEN

            CANTIDAD = (:CANTIDAD + 1);
        END
        -- Si la cantidad es cero o null no retorno valores
        IF (:CANTIDAD > 0 AND :CANTIDAD IS NOT NULL) THEN

          SUSPEND;

      END
    END
END ^

ALTER PROCEDURE CON_GLO_RECU_INFO_TRASLADOS RETURNS (
	
    CONS_RECURSO INTEGER,
    CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_RECURSO VARCHAR(20) CHARACTER SET NONE,
    CONS_RECU_GRUPO INTEGER,
    CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_TIPO INTEGER,
    CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_FAMILIA INTEGER,
    CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_MARCA INTEGER,
    CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
    NUME_SERIE VARCHAR(20) CHARACTER SET NONE)
AS 

BEGIN

  -- Verifico que tenga permiso sobre las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_RECURSOS,GLO_RECU_GRUPOS,' ||
              'GLO_RECU_TIPOS,GLO_RECU_FAMILIAS,GLO_RECU_MARCAS' ||
              'GLO_RECU_MOVIMIENTOS,GLO_RECU_MOVI_TRASLADOS,' ||
              'GLO_RECU_MOVI_ANULADOS', 8, 'S')
             WHERE PERMISO = 1)) THEN

    -- Consultamos los recursos
    FOR SELECT DISTINCT R.CONS_RECURSO, R.CODI_RECURSO, R.CODI_INTE_RECURSO,
     R.CONS_RECU_GRUPO, G.CODI_RECU_GRUPO, G.NOMB_RECU_GRUPO,
     R.CONS_RECU_TIPO, T.CODI_RECU_TIPO, T.NOMB_RECU_TIPO,
     R.CONS_RECU_FAMILIA, F.CODI_RECU_FAMILIA, F.NOMB_RECU_FAMILIA,
     R.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,
     R.NUME_SERIE

    FROM GLO_RECURSOS R, GLO_RECU_GRUPOS G, GLO_RECU_TIPOS T,
     GLO_RECU_FAMILIAS F, GLO_RECU_MARCAS M
    WHERE (R.CONS_RECU_GRUPO = F.CONS_RECU_GRUPO AND 
        R.CONS_RECU_TIPO = F.CONS_RECU_TIPO AND 
        R.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA) AND 
        (F.CONS_RECU_GRUPO = T.CONS_RECU_GRUPO AND 
            F.CONS_RECU_TIPO = T.CONS_RECU_TIPO) AND 
        T.CONS_RECU_GRUPO = G.CONS_RECU_GRUPO AND 
        R.CONS_RECU_MARCA = M.CONS_RECU_MARCA AND 
        R.CONS_RECURSO IN (
              SELECT MO.CONS_RECURSO
              FROM GLO_RECU_MOVIMIENTOS MO, GLO_RECU_MOVI_TRASLADOS TA
              WHERE MO.CONS_RECU_MOVIMIENTO = TA.CONS_RECU_MOVIMIENTO AND 
                    MO.CONS_RECU_MOVIMIENTO NOT IN(
                SELECT CONS_RECU_MOVIMIENTO
                FROM GLO_RECU_MOVI_ANULADOS))
            ORDER BY R.CONS_RECURSO
            INTO :CONS_RECURSO, :CODI_RECURSO, :CODI_INTE_RECURSO,
                 :CONS_RECU_GRUPO, :CODI_RECU_GRUPO, :NOMB_RECU_GRUPO,
                 :CONS_RECU_TIPO, :CODI_RECU_TIPO, :NOMB_RECU_TIPO,
                 :CONS_RECU_FAMILIA, :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA,
                 :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,
                 :NUME_SERIE
    DO 
        SUSPEND;
END ^

ALTER PROCEDURE CON_GLO_RECU_INFO_TRAS_UBIC (
    PE_CONS_RECURSO INTEGER)
RETURNS (
	
    FECH_INICIAL TIMESTAMP,
    CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    CODI_RECU_TIPO_MOVIMIENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_TIPO_MOVIMIENTO VARCHAR(60) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    CODI_AREA VARCHAR(12) CHARACTER SET NONE,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  -- Verifico que tenga permiso sobre las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_RECU_MOVIMIENTOS,' ||
              'GLO_RECU_MOVI_TRASLADOS,GLO_RECU_MOVI_ANULADOS,' ||
              'GLO_RECU_TIPO_MOVIMIENTO', 4, 'S')
             WHERE PERMISO = 1)) THEN

    -- Consultamos los traslados del recursos
    FOR SELECT M.FECH_INICIAL,
        M.CONS_RECU_TIPO_MOVIMIENTO, TM.CODI_RECU_TIPO_MOVIMIENTO,
        TM.NOMB_RECU_TIPO_MOVIMIENTO
    FROM GLO_RECU_MOVIMIENTOS M, 
        GLO_RECU_MOVI_TRASLADOS T,
        GLO_RECU_TIPO_MOVIMIENTO TM
    WHERE M.CONS_RECU_MOVIMIENTO = T.CONS_RECU_MOVIMIENTO AND 
            M.CONS_RECU_TIPO_MOVIMIENTO = TM.CONS_RECU_TIPO_MOVIMIENTO AND 
            M.CONS_RECURSO = :PE_CONS_RECURSO
    ORDER BY M.CONS_RECU_MOVIMIENTO
    INTO :FECH_INICIAL,
     :CONS_RECU_TIPO_MOVIMIENTO, :CODI_RECU_TIPO_MOVIMIENTO,
     :NOMB_RECU_TIPO_MOVIMIENTO

    DO BEGIN

      -- Verifico que tenga permiso sobre las tablas
      IF (EXISTS(SELECT PERMISO
                 FROM CON_PERM_TABLAS('CON_GLO_RECU_UBIC_UNIDAD', 1, 'X')
                 WHERE PERMISO = 1)) THEN BEGIN

        -- Consultamos la ubicación actual 
        SELECT CONS_EMPRESA, CODI_EMPRESA, NOMB_EMPRESA,
         CONS_AREA, CODI_AREA, NOMB_AREA,
         CONS_PLANTA, CODI_PLANTA, NOMB_PLANTA,
         CONS_LINEA, CODI_LINEA, NOMB_LINEA,
         CONS_SECCION, CODI_SECCION, NOMB_SECCION,
         CONS_BODEGA, CODI_BODEGA, NOMB_BODEGA,
         OTRA_UBICACION
        FROM CON_GLO_RECU_UBIC_UNIDAD(:PE_CONS_RECURSO, :FECH_INICIAL)
        INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA,
         :CONS_AREA, :CODI_AREA, :NOMB_AREA,
         :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
         :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA,
         :CONS_SECCION, :CODI_SECCION, :NOMB_SECCION,
         :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA,
         :OTRA_UBICACION;

        -- Asignamos vacío a la ubicacion No Asignado para el informe
        IF (:CONS_EMPRESA = 0) THEN NOMB_EMPRESA = '';
        IF (:CONS_AREA = 0) THEN    NOMB_AREA = '';
        IF (:CONS_PLANTA = 0) THEN  NOMB_PLANTA = '';
        IF (:CONS_LINEA = 0) THEN   NOMB_LINEA = '';
        IF (:CONS_SECCION = 0) THEN NOMB_SECCION = '';
        IF (:CONS_BODEGA = 0) THEN  NOMB_BODEGA = '';
      END

      SUSPEND;
    END
END ^

ALTER PROCEDURE CON_GLO_RECU_MOVIMIENTO RETURNS (
	
    CONS_RECU_MOVIMIENTO INTEGER,
    CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    CONS_TIPO_DOCUMENTO INTEGER,
    CODI_TIPO_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_DOCUMENTO VARCHAR(60) CHARACTER SET NONE,
    NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    CONS_SOLICITA INTEGER,
    CODI_SOLICITA VARCHAR(12) CHARACTER SET NONE,
    NOMB_SOLICITA VARCHAR(102) CHARACTER SET NONE,
    CONS_ENTREGA INTEGER,
    CODI_ENTREGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_ENTREGA VARCHAR(102) CHARACTER SET NONE,
    CONS_RECIBE INTEGER,
    CODI_RECIBE VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECIBE VARCHAR(102) CHARACTER SET NONE,
    FECH_INICIAL TIMESTAMP,
    FECH_FINAL TIMESTAMP,
    OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
    CONS_RECURSO INTEGER,
    CODI_RECURSO VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_RECURSO VARCHAR(12) CHARACTER SET NONE,
    CONS_RECU_GRUPO INTEGER,
    CODI_RECU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_TIPO INTEGER,
    CODI_RECU_TIPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_FAMILIA INTEGER,
    CODI_RECU_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_FAMILIA VARCHAR(60) CHARACTER SET NONE,
    CONS_RECU_MARCA INTEGER,
    CODI_RECU_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_RECU_MARCA VARCHAR(60) CHARACTER SET NONE,
    NUME_SERIE VARCHAR(20) CHARACTER SET NONE,
    IMAGEN BLOB,
    DETA_IMAGEN BLOB,
    CLASE VARCHAR(60) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_RECU_MOVIMIENTO INTEGER;

BEGIN

  /* Consultamos el personal en su último movimiento */
  FOR SELECT CONS_RECURSO, MAX(CONS_RECU_MOVIMIENTO)
  FROM GLO_RECU_MOVIMIENTOS
  WHERE CONS_RECU_MOVIMIENTO NOT IN(
        SELECT CONS_RECU_MOVIMIENTO
        FROM GLO_RECU_MOVI_ANULADOS)
  GROUP BY CONS_RECURSO
  INTO :CONS_RECURSO, :VAR_CONS_RECU_MOVIMIENTO

  DO BEGIN
    IF (EXISTS(SELECT CONS_ESTADO
      FROM CON_GLO_RECU_ESTADO(:CONS_RECURSO, NULL)
      WHERE CONS_ESTADO = 1)) THEN BEGIN
      /* Consultamos los datos del último movimiento */
      SELECT M.CONS_RECU_MOVIMIENTO, M.CONS_RECU_TIPO_MOVIMIENTO,
            M.CONS_RECURSO, M.CONS_TIPO_DOCUMENTO, M.NUME_DOCUMENTO,
            M.CONS_SOLICITA, M.CONS_ENTREGA, M.CONS_RECIBE,
            M.FECH_SISTEMA, M.USUA_SISTEMA, M.FECH_INICIAL, M.FECH_FINAL,
            M.OBSERVACIONES,
            TD.CODI_TIPO_DOCUMENTO, TD.NOMB_TIPO_DOCUMENTO
      FROM GLO_RECU_MOVIMIENTOS M, 
            GLO_TIPO_DOCUMENTO TD
      WHERE M.CONS_TIPO_DOCUMENTO = TD.CONS_TIPO_DOCUMENTO AND 
            M.CONS_RECU_MOVIMIENTO = :VAR_CONS_RECU_MOVIMIENTO
      ORDER BY M.CONS_RECU_MOVIMIENTO
      INTO :CONS_RECU_MOVIMIENTO, :CONS_RECU_TIPO_MOVIMIENTO,
            :CONS_RECURSO, :CONS_TIPO_DOCUMENTO, :NUME_DOCUMENTO,
            :CONS_SOLICITA, :CONS_ENTREGA, :CONS_RECIBE,
            :FECH_SISTEMA, :USUA_SISTEMA, :FECH_INICIAL, :FECH_FINAL,
            :OBSERVACIONES, :CODI_TIPO_DOCUMENTO, :NOMB_TIPO_DOCUMENTO;

      /* Consultamos el Recurso */
      SELECT R.CODI_RECURSO, R.CODI_INTE_RECURSO,
       G.CONS_RECU_GRUPO, G.CODI_RECU_GRUPO, G.NOMB_RECU_GRUPO,
       T.CONS_RECU_TIPO, T.CODI_RECU_TIPO, T.NOMB_RECU_TIPO,
       F.CONS_RECU_FAMILIA, F.CODI_RECU_FAMILIA, F.NOMB_RECU_FAMILIA,
       M.CONS_RECU_MARCA, M.CODI_RECU_MARCA, M.NOMB_RECU_MARCA,
       R.NUME_SERIE, R.IMAGEN, R.DETA_IMAGEN, R.CLASE
      FROM GLO_RECURSOS R, 
            GLO_RECU_GRUPOS G, 
            GLO_RECU_TIPOS T,
            GLO_RECU_FAMILIAS F, 
            GLO_RECU_MARCAS M
      WHERE R.CONS_RECU_GRUPO = G.CONS_RECU_GRUPO AND 
            R.CONS_RECU_TIPO = T.CONS_RECU_TIPO AND 
            R.CONS_RECU_FAMILIA = F.CONS_RECU_FAMILIA AND 
            R.CONS_RECU_MARCA = M.CONS_RECU_MARCA AND 
            R.CONS_RECURSO = :CONS_RECURSO
      ORDER BY R.CODI_RECURSO
      INTO :CODI_RECURSO, :CODI_INTE_RECURSO,
           :CONS_RECU_GRUPO, :CODI_RECU_GRUPO, :NOMB_RECU_GRUPO,
           :CONS_RECU_TIPO, :CODI_RECU_TIPO, :NOMB_RECU_TIPO,
           :CONS_RECU_FAMILIA, :CODI_RECU_FAMILIA, :NOMB_RECU_FAMILIA,
           :CONS_RECU_MARCA, :CODI_RECU_MARCA, :NOMB_RECU_MARCA,
           :NUME_SERIE, :IMAGEN, :DETA_IMAGEN, :CLASE;

      /* Consultamos el nombre del personal que solicita */
      SELECT CODI_PERSONAL, NOMB_COMPLETO
      FROM GLO_PERSONAL
      WHERE CONS_PERSONAL = :CONS_SOLICITA
      ORDER BY CONS_PERSONAL
      INTO :CODI_SOLICITA, :NOMB_SOLICITA;

      /* Consultamos el nombre del personal que Entrega */
      SELECT CODI_PERSONAL, NOMB_COMPLETO
      FROM GLO_PERSONAL
      WHERE CONS_PERSONAL = :CONS_ENTREGA
      ORDER BY CONS_PERSONAL
      INTO :CODI_ENTREGA, :NOMB_ENTREGA;

      /* Consultamos el nombre del personal que Recibe */
      SELECT CODI_PERSONAL, NOMB_COMPLETO
      FROM GLO_PERSONAL
      WHERE CONS_PERSONAL = :CONS_RECIBE
      ORDER BY CONS_PERSONAL
      INTO :CODI_RECIBE, :NOMB_RECIBE;

      SUSPEND;
    END
  END
END ^

ALTER PROCEDURE CON_GLO_RECU_TIEM_ANTIGUEDAD (
    PE_CONS_RECURSO INTEGER,
    PE_FECHA TIMESTAMP)
RETURNS (
	
    TIEMPO VARCHAR(12) CHARACTER SET NONE,
    ANO SMALLINT,
    MES SMALLINT,
    DIA SMALLINT,
    TIEM_FECHA TIMESTAMP)
AS 

DECLARE VARIABLE VAR_TIEMPO TIMESTAMP;
DECLARE VARIABLE VAR_FECH_INICIAL TIMESTAMP;
DECLARE VARIABLE VAR_FECH_FINAL TIMESTAMP;

BEGIN
  /* Inicializar variables */
  VAR_TIEMPO = CAST('01/01/1900' AS TIMESTAMP);

  /* Recorrer los ingresos y reingresos */
  FOR SELECT M.FECH_INICIAL
  FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_TIPO_MOVIMIENTO T
  WHERE M.CONS_RECURSO = :PE_CONS_RECURSO AND 
        M.FECH_INICIAL <= :PE_FECHA AND 
        M.CONS_RECU_TIPO_MOVIMIENTO = T.CONS_RECU_TIPO_MOVIMIENTO AND 
        T.CONS_FAMI_MOVIMIENTO IN (1, 5) AND 
        M.CONS_RECU_MOVIMIENTO NOT IN(
                 SELECT CONS_RECU_MOVIMIENTO
                 FROM GLO_RECU_MOVI_ANULADOS)
  INTO :VAR_FECH_INICIAL

  DO BEGIN
    /* Inicializar variables */
    VAR_FECH_FINAL = CAST('01/01/1900' AS TIMESTAMP);

    /* Consultar si tiene alguna baja */
    SELECT MIN(M.FECH_INICIAL)
    FROM GLO_RECU_MOVIMIENTOS M, GLO_RECU_TIPO_MOVIMIENTO T
    WHERE M.CONS_RECURSO = :PE_CONS_RECURSO AND 
            M.FECH_INICIAL >= :VAR_FECH_INICIAL AND 
            M.CONS_RECU_TIPO_MOVIMIENTO = T.CONS_RECU_TIPO_MOVIMIENTO AND 
            T.CONS_FAMI_MOVIMIENTO IN (3, 4) AND 
            M.CONS_RECU_MOVIMIENTO NOT IN(
                   SELECT CONS_RECU_MOVIMIENTO
                   FROM GLO_RECU_MOVI_ANULADOS)
    INTO :VAR_FECH_FINAL;

    /* Verificar que la variable no este vacía */
    IF (:VAR_FECH_FINAL IS NULL) THEN
      VAR_FECH_FINAL = :PE_FECHA;

    /* Acumular la fecha */
    VAR_TIEMPO = (:VAR_TIEMPO + (:VAR_FECH_FINAL - :VAR_FECH_INICIAL));
  END

  /* Decodificar la acumulaci󮠤e fecha */
  ANO = EXTRACT(YEAR FROM :VAR_TIEMPO) - 1900;
  MES = EXTRACT(MONTH FROM :VAR_TIEMPO);
  DIA = EXTRACT(DAY FROM :VAR_TIEMPO);

  /* Asignar el tiempo de contratación */
  TIEMPO = CAST(:ANO AS VARCHAR(4)) || '.' ||
    CAST(:MES AS VARCHAR(2)) || '.' || CAST(:DIA AS VARCHAR(4));

  /* Asignar el tiempo en formato fecha */
  TIEM_FECHA = (:VAR_TIEMPO);

  SUSPEND;
END ^

ALTER PROCEDURE CON_GLO_RECU_UBICACION (
    PE_CONS_RECU_MOVIMIENTO INTEGER)
RETURNS (
	
    CONS_RECU_MOVIMIENTO INTEGER,
    CONS_RECURSO INTEGER,
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    CODI_AREA VARCHAR(12) CHARACTER SET NONE,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINE_SECCION INTEGER)
AS 

BEGIN
  -- Buscamos el consecutivo del recurso
  SELECT DISTINCT CONS_RECURSO
  FROM GLO_RECU_MOVIMIENTOS
  WHERE CONS_RECU_MOVIMIENTO = :PE_CONS_RECU_MOVIMIENTO
  ORDER BY CONS_RECU_MOVIMIENTO
  INTO :CONS_RECURSO;

  -- Consultamos la ubicación del último movimiento de traslados
  SELECT T.CONS_RECU_MOVIMIENTO, E.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,
       A.CONS_AREA, A.CODI_AREA, A.NOMB_AREA,
       P.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA,
       L.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA,
       S.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,
       B.CONS_BODEGA, B.CODI_BODEGA, B.NOMB_BODEGA,
       T.OTRA_UBICACION, T.CONS_UBIC_TIPO, T.CONS_PLAN_LINEA,
       T.CONS_LINE_SECCION
  FROM GLO_RECU_MOVI_TRASLADOS T, 
        GLO_EMPRESAS E, 
        GLO_AREAS A,
        GLO_PLANTAS P, 
        GLO_PLAN_LINEAS PL, 
        GLO_LINEAS L,
        GLO_LINE_SECCIONES LS, 
        GLO_SECCIONES S, 
        GLO_BODEGAS B
  WHERE T.CONS_EMPRESA = E.CONS_EMPRESA AND 
        T.CONS_AREA = A.CONS_AREA AND 
        T.CONS_PLANTA = P.CONS_PLANTA AND 
        (T.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA AND 
            PL.CONS_PLANTA = P.CONS_PLANTA AND 
            PL.CONS_LINEA = L.CONS_LINEA) AND 
        (T.CONS_LINE_SECCION = LS.CONS_LINE_SECCION AND 
            LS.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA AND 
            LS.CONS_SECCION = S.CONS_SECCION) AND 
        T.CONS_BODEGA = B.CONS_BODEGA AND 
        T.CONS_RECU_MOVIMIENTO = :PE_CONS_RECU_MOVIMIENTO
  INTO :CONS_RECU_MOVIMIENTO, :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,
        :CODI_AREA, :NOMB_AREA, :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
        :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_SECCION, :CODI_SECCION,
        :NOMB_SECCION, :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,
        :CONS_UBIC_TIPO, :CONS_PLAN_LINEA, :CONS_LINE_SECCION;

  SUSPEND;
END ^

ALTER PROCEDURE CON_GLO_RECU_UBIC_UNIDAD (
    PE_CONS_RECURSO INTEGER,
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_RECU_MOVIMIENTO INTEGER,
    FECH_INICIAL TIMESTAMP,
    FECH_FINAL TIMESTAMP,
    CONS_RECURSO INTEGER,
    CONS_EMPRESA INTEGER,
    CODI_EMPRESA VARCHAR(12) CHARACTER SET NONE,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    CODI_AREA VARCHAR(12) CHARACTER SET NONE,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    CODI_PLANTA VARCHAR(12) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINEA INTEGER,
    CODI_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_SECCION INTEGER,
    CODI_SECCION VARCHAR(12) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    CODI_BODEGA VARCHAR(12) CHARACTER SET NONE,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINE_SECCION INTEGER)
AS 

BEGIN
  IF (:PE_FECHA IS NULL) THEN
    PE_FECHA = 'NOW';

  -- Verifico que tengan permisos las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_RECU_MOVIMIENTOS,GLO_RECU_MOVI_TRASLADOS' ||
              'GLO_RECU_MOVI_ANULADOS', 3, 'S')
             WHERE PERMISO = 1)) THEN

    -- Buscamos el último movimiento de traslados
    SELECT MAX(T.CONS_RECU_MOVIMIENTO)
    FROM GLO_RECU_MOVI_TRASLADOS T, GLO_RECU_MOVIMIENTOS M
    WHERE T.CONS_RECU_MOVIMIENTO = M.CONS_RECU_MOVIMIENTO AND 
            M.CONS_RECURSO = :PE_CONS_RECURSO AND 
            M.FECH_INICIAL <= :PE_FECHA AND 
            M.CONS_RECU_MOVIMIENTO NOT IN(
                 SELECT CONS_RECU_MOVIMIENTO
                 FROM GLO_RECU_MOVI_ANULADOS)
    INTO :CONS_RECU_MOVIMIENTO;

  -- Verifico que tengan permisos las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_RECU_MOVI_TRASLADOS' ||
              'GLO_EMPRESAS,GLO_AREAS,GLO_PLANTAS,GLO_PLAN_LINEAS' ||
              'GLO_LINEAS,GLO_LINE_SECCIONES,GLO_SECCIONES,GLO_BODEGAS', 9, 'S')
             WHERE PERMISO = 1)) THEN
    -- Consultamos la ubicación del 򬴩mo movimiento de traslados
    SELECT E.CONS_EMPRESA, E.CODI_EMPRESA, E.NOMB_EMPRESA,
     A.CONS_AREA, A.CODI_AREA, A.NOMB_AREA,
     P.CONS_PLANTA, P.CODI_PLANTA, P.NOMB_PLANTA,
     L.CONS_LINEA, L.CODI_LINEA, L.NOMB_LINEA,
     S.CONS_SECCION, S.CODI_SECCION, S.NOMB_SECCION,
     B.CONS_BODEGA, B.CODI_BODEGA, B.NOMB_BODEGA,
     T.OTRA_UBICACION, T.CONS_UBIC_TIPO, T.CONS_PLAN_LINEA,
     T.CONS_LINE_SECCION, M.FECH_INICIAL, M.FECH_FINAL, M.CONS_RECURSO
    FROM GLO_RECU_MOVI_TRASLADOS T, 
         GLO_EMPRESAS E, 
         GLO_AREAS A,
         GLO_PLANTAS P, 
         GLO_PLAN_LINEAS PL, 
         GLO_LINEAS L,
         GLO_LINE_SECCIONES LS, 
         GLO_SECCIONES S, 
         GLO_BODEGAS B,
         GLO_RECU_MOVIMIENTOS M
    WHERE M.CONS_RECU_MOVIMIENTO = T.CONS_RECU_MOVIMIENTO AND 
            T.CONS_EMPRESA = E.CONS_EMPRESA AND 
            T.CONS_AREA = A.CONS_AREA AND 
            T.CONS_PLANTA = P.CONS_PLANTA AND 
            (T.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA AND 
                PL.CONS_PLANTA = P.CONS_PLANTA AND 
                PL.CONS_LINEA = L.CONS_LINEA) AND 
            (T.CONS_LINE_SECCION = LS.CONS_LINE_SECCION AND 
                LS.CONS_PLAN_LINEA = PL.CONS_PLAN_LINEA AND 
                LS.CONS_SECCION = S.CONS_SECCION) AND 
            T.CONS_BODEGA = B.CONS_BODEGA AND 
            T.CONS_RECU_MOVIMIENTO = :CONS_RECU_MOVIMIENTO
    INTO :CONS_EMPRESA, :CODI_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,
          :CODI_AREA, :NOMB_AREA, :CONS_PLANTA, :CODI_PLANTA, :NOMB_PLANTA,
          :CONS_LINEA, :CODI_LINEA, :NOMB_LINEA, :CONS_SECCION, :CODI_SECCION,
          :NOMB_SECCION, :CONS_BODEGA, :CODI_BODEGA, :NOMB_BODEGA, :OTRA_UBICACION,
          :CONS_UBIC_TIPO, :CONS_PLAN_LINEA, :CONS_LINE_SECCION,
          :FECH_INICIAL, :FECH_FINAL, :CONS_RECURSO;

    SUSPEND;
END ^

ALTER PROCEDURE CON_GLO_REFERENCIAS RETURNS (
	
    CONS_REFERENCIA INTEGER,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    MOLDE VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CODI_BARRAS VARCHAR(30) CHARACTER SET NONE,
    CONS_REFE_VARIACION INTEGER,
    CONS_REFE_TIPO_VARIACION INTEGER,
    CODI_REFE_TIPO_VARIACION VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_TIPO_VARIACION VARCHAR(30) CHARACTER SET NONE,
    CONS_REFE_MARCA INTEGER,
    CODI_REFE_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_LINEA INTEGER,
    CODI_REFE_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_EDAD INTEGER,
    CODI_REFE_EDAD VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_ESTILO INTEGER,
    CODI_REFE_ESTILO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_GRUPO INTEGER,
    CODI_REFE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_SEXO INTEGER,
    CODI_SEXO VARCHAR(12) CHARACTER SET NONE,
    NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_LAVADO INTEGER,
    CODI_REFE_LAVADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_LAVADO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_BORDADO INTEGER,
    CODI_REFE_BORDADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_BORDADO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_ESTAMPADO INTEGER,
    CODI_REFE_ESTAMPADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTAMPADO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_ESTADO INTEGER,
    CODI_REFE_ESTADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTADO VARCHAR(60) CHARACTER SET NONE,
    GRUP_TALLAS VARCHAR(100) CHARACTER SET NONE,
    IMAGEN BLOB,
    DESCRIPCION VARCHAR(240) CHARACTER SET NONE,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_REFE_GRUP_TALLA INTEGER;
DECLARE VARIABLE VAR_TALL_TEMPORAL VARCHAR(12);

BEGIN
  -- VERIFICO QUE TENGA PERMISOS SOBRE LAS TABLAS
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_REFERENCIAS,PCP_REFE_TIPO_VARIACIONES,' ||
              'PCP_REFE_VARIACIONES,GLO_REFE_MARCAS,GLO_REFE_LINEAS,' ||
              'GLO_REFE_EDADES,GLO_REFE_ESTILOS,GLO_REFE_GRUPOS,' ||
              'SIS_SEXOS,GLO_REFE_LAVADOS,GLO_REFE_BORDADOS,' ||
              'GLO_REFE_ESTAMPADOS,GLO_REFE_ESTADOS', 13, 'S')
             WHERE PERMISO = 1)) THEN

    -- CONSULTO LAS REFERENCIAS CON SUS VARIACIONES
    FOR SELECT R.CONS_REFERENCIA, R.CODI_REFERENCIA, R.MOLDE,
     R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA, R.CODI_BARRAS,
     V.CONS_REFE_TIPO_VARIACION, V.CODI_REFE_TIPO_VARIACION, V.NOMB_REFE_TIPO_VARIACION,
     M.CONS_REFE_MARCA, M.CODI_REFE_MARCA, M.NOMB_REFE_MARCA,
     L.CONS_REFE_LINEA, L.CODI_REFE_LINEA, L.NOMB_REFE_LINEA,
     E.CONS_REFE_EDAD, E.CODI_REFE_EDAD, E.NOMB_REFE_EDAD,
     ES.CONS_REFE_ESTILO, ES.CODI_REFE_ESTILO, ES.NOMB_REFE_ESTILO,
     G.CONS_REFE_GRUPO, G.CODI_REFE_GRUPO, G.NOMB_REFE_GRUPO,
     S.CONS_SEXO, S.CODI_SEXO, S.NOMB_SEXO,
     LA.CONS_REFE_LAVADO, LA.CODI_REFE_LAVADO, LA.NOMB_REFE_LAVADO,
     B.CONS_REFE_BORDADO, B.CODI_REFE_BORDADO, B.NOMB_REFE_BORDADO,
     ET.CONS_REFE_ESTAMPADO, ET.CODI_REFE_ESTAMPADO, ET.NOMB_REFE_ESTAMPADO,
     EST.CONS_REFE_ESTADO, EST.CODI_REFE_ESTADO, EST.NOMB_REFE_ESTADO,
     R.CONS_REFE_GRUP_TALLAS, R.IMAGEN, R.DESCRIPCION,
     R.FECH_SISTEMA, R.USUA_SISTEMA, RV.CONS_REFE_VARIACION
    FROM GLO_REFERENCIAS R, 
        PCP_REFE_TIPO_VARIACIONES V, 
        PCP_REFE_VARIACIONES RV,
        GLO_REFE_MARCAS M, 
        GLO_REFE_LINEAS L,
        GLO_REFE_EDADES E, 
        GLO_REFE_ESTILOS ES, 
        GLO_REFE_GRUPOS G, 
        SIS_SEXOS S,
        GLO_REFE_LAVADOS LA, 
        GLO_REFE_BORDADOS B, 
        GLO_REFE_ESTAMPADOS ET,
        GLO_REFE_ESTADOS EST
    WHERE R.ES_PROTOTIPO = -1 AND 
          R.CONS_REFERENCIA w RV.CONS_REFERENCIA AND 
          RV.CONS_REFE_TIPO_VARIACION = V.CONS_REFE_TIPO_VARIACION AND 
          R.CONS_REFE_MARCA = M.CONS_REFE_MARCA AND 
          R.CONS_REFE_LINEA = L.CONS_REFE_LINEA AND 
          R.CONS_REFE_EDAD = E.CONS_REFE_EDAD AND 
          R.CONS_REFE_ESTILO = ES.CONS_REFE_ESTILO AND 
          R.CONS_REFE_GRUPO = G.CONS_REFE_GRUPO AND 
          R.CONS_REFE_SEXO = S.CONS_SEXO AND 
          R.CONS_REFE_LAVADO = LA.CONS_REFE_LAVADO AND 
          R.CONS_REFE_BORDADO = B.CONS_REFE_BORDADO AND 
          R.CONS_REFE_ESTAMPADO = ET.CONS_REFE_ESTAMPADO AND 
          R.CONS_REFE_ESTADO = EST.CONS_REFE_ESTADO
    ORDER BY NOMB_REFERENCIA
    INTO :CONS_REFERENCIA, :CODI_REFERENCIA, :MOLDE,
         :CODI_INTE_REFERENCIA, :NOMB_REFERENCIA, :CODI_BARRAS,
         :CONS_REFE_TIPO_VARIACION, :CODI_REFE_TIPO_VARIACION, :NOMB_REFE_TIPO_VARIACION,
         :CONS_REFE_MARCA, :CODI_REFE_MARCA, :NOMB_REFE_MARCA,
         :CONS_REFE_LINEA, :CODI_REFE_LINEA, :NOMB_REFE_LINEA,
         :CONS_REFE_EDAD, :CODI_REFE_EDAD, :NOMB_REFE_EDAD,
         :CONS_REFE_ESTILO, :CODI_REFE_ESTILO, :NOMB_REFE_ESTILO,
         :CONS_REFE_GRUPO, :CODI_REFE_GRUPO, :NOMB_REFE_GRUPO,
         :CONS_SEXO, :CODI_SEXO, :NOMB_SEXO,
         :CONS_REFE_LAVADO, :CODI_REFE_LAVADO, :NOMB_REFE_LAVADO,
         :CONS_REFE_BORDADO, :CODI_REFE_BORDADO, :NOMB_REFE_BORDADO,
         :CONS_REFE_ESTAMPADO, :CODI_REFE_ESTAMPADO, :NOMB_REFE_ESTAMPADO,
         :CONS_REFE_ESTADO, :CODI_REFE_ESTADO, :NOMB_REFE_ESTADO,
         :VAR_CONS_REFE_GRUP_TALLA, :IMAGEN, :DESCRIPCION,
         :FECH_SISTEMA, :USUA_SISTEMA, :CONS_REFE_VARIACION

    DO BEGIN

      GRUP_TALLAS = '';

      -- VERIFICO QUE TENGA PERMISOS SOBRE LAS TABLAS
      IF (EXISTS(SELECT PERMISO
                 FROM CON_PERM_TABLAS('GLO_GRUP_TALL_DETALLE', 1, 'S')
                 WHERE PERMISO = 1)) THEN
        IF (:VAR_CONS_REFE_GRUP_TALLA IS NOT NULL) THEN
          -- CONSULTO LAS TALLAS DE LA REFERENCIA
          FOR SELECT  TALLA
          FROM GLO_GRUP_TALL_DETALLE
          WHERE CONS_GRUP_TALLAS = :VAR_CONS_REFE_GRUP_TALLA
          ORDER BY CONS_GRUP_TALL_DETALLE
          INTO :VAR_TALL_TEMPORAL

          DO BEGIN
            IF (:GRUP_TALLAS = '') THEN
              GRUP_TALLAS = (:GRUP_TALLAS || :VAR_TALL_TEMPORAL);
            ELSE
              GRUP_TALLAS = (:GRUP_TALLAS || ',' || :VAR_TALL_TEMPORAL);
          END

      SUSPEND;
    END
END ^

ALTER PROCEDURE CON_GLO_REFE_UNIDAD (
    PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	
    CONS_REFERENCIA INTEGER,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    MOLDE VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CODI_BARRAS VARCHAR(30) CHARACTER SET NONE,
    CONS_REFE_VARIACION INTEGER,
    CONS_REFE_TIPO_VARIACION INTEGER,
    CODI_REFE_TIPO_VARIACION VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_TIPO_VARIACION VARCHAR(30) CHARACTER SET NONE,
    CONS_REFE_MARCA INTEGER,
    CODI_REFE_MARCA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_LINEA INTEGER,
    CODI_REFE_LINEA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_EDAD INTEGER,
    CODI_REFE_EDAD VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_ESTILO INTEGER,
    CODI_REFE_ESTILO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_GRUPO INTEGER,
    CODI_REFE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_SEXO INTEGER,
    CODI_SEXO VARCHAR(12) CHARACTER SET NONE,
    NOMB_SEXO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_LAVADO INTEGER,
    CODI_REFE_LAVADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_LAVADO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_BORDADO INTEGER,
    CODI_REFE_BORDADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_BORDADO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_ESTAMPADO INTEGER,
    CODI_REFE_ESTAMPADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTAMPADO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_ESTADO INTEGER,
    CODI_REFE_ESTADO VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_TEMPORADA INTEGER,
    CODI_REFE_TEMPORADA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_TEMPORADA VARCHAR(60) CHARACTER SET NONE,
    GRUP_TALLAS VARCHAR(100) CHARACTER SET NONE,
    IMAGEN BLOB,
    DESCRIPCION VARCHAR(240) CHARACTER SET NONE,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_REFE_GRUP_TALLA INTEGER;
DECLARE VARIABLE VAR_TALL_TEMPORAL VARCHAR(12);

BEGIN

  -- Verifico que tenga permisos sobre las tablas
  IF (EXISTS(SELECT PERMISO
             FROM CON_PERM_TABLAS('GLO_REFERENCIAS,PCP_REFE_TIPO_VARIACIONES,' ||
              'PCP_REFE_VARIACIONES,GLO_REFE_MARCAS,GLO_REFE_LINEAS,' ||
              'GLO_REFE_EDADES,GLO_REFE_ESTILOS,GLO_REFE_GRUPOS,' ||
              'SIS_SEXOS,GLO_REFE_LAVADOS,GLO_REFE_BORDADOS,' ||
              'GLO_REFE_ESTAMPADOS,GLO_REFE_ESTADOS,GLO_REFE_TEMPORADAS' , 14, 'S')
             WHERE PERMISO = 1)) THEN

    -- Consultamos las referencias con sus variaciones
    SELECT R.CONS_REFERENCIA, R.CODI_REFERENCIA, R.MOLDE,
         R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA, R.CODI_BARRAS,
         V.CONS_REFE_TIPO_VARIACION, V.CODI_REFE_TIPO_VARIACION, V.NOMB_REFE_TIPO_VARIACION,
         M.CONS_REFE_MARCA, M.CODI_REFE_MARCA, M.NOMB_REFE_MARCA,
         L.CONS_REFE_LINEA, L.CODI_REFE_LINEA, L.NOMB_REFE_LINEA,
         E.CONS_REFE_EDAD, E.CODI_REFE_EDAD, E.NOMB_REFE_EDAD,
         ES.CONS_REFE_ESTILO, ES.CODI_REFE_ESTILO, ES.NOMB_REFE_ESTILO,
         G.CONS_REFE_GRUPO, G.CODI_REFE_GRUPO, G.NOMB_REFE_GRUPO,
         S.CONS_SEXO, S.CODI_SEXO, S.NOMB_SEXO,
         LA.CONS_REFE_LAVADO, LA.CODI_REFE_LAVADO, LA.NOMB_REFE_LAVADO,
         B.CONS_REFE_BORDADO, B.CODI_REFE_BORDADO, B.NOMB_REFE_BORDADO,
         ET.CONS_REFE_ESTAMPADO, ET.CODI_REFE_ESTAMPADO, ET.NOMB_REFE_ESTAMPADO,
         EST.CONS_REFE_ESTADO, EST.CODI_REFE_ESTADO, EST.NOMB_REFE_ESTADO,
         T.CONS_REFE_TEMPORADA, T.CODI_REFE_TEMPORADA, T.NOMB_REFE_TEMPORADA,
         R.CONS_REFE_GRUP_TALLAS, R.IMAGEN, R.DESCRIPCION,
         R.FECH_SISTEMA, R.USUA_SISTEMA, RV.CONS_REFE_VARIACION
    FROM GLO_REFERENCIAS R, PCP_REFE_TIPO_VARIACIONES V, PCP_REFE_VARIACIONES RV,
         GLO_REFE_MARCAS M, GLO_REFE_LINEAS L,
         GLO_REFE_EDADES E, GLO_REFE_ESTILOS ES, GLO_REFE_GRUPOS G, SIS_SEXOS S,
         GLO_REFE_LAVADOS LA, GLO_REFE_BORDADOS B, GLO_REFE_ESTAMPADOS ET,
         GLO_REFE_ESTADOS EST, GLO_REFE_TEMPORADAS T
    WHERE R.ES_PROTOTIPO = -1 AND 
            R.CONS_REFERENCIA = RV.CONS_REFERENCIA AND 
            RV.CONS_REFE_TIPO_VARIACION = V.CONS_REFE_TIPO_VARIACION AND 
            R.CONS_REFE_MARCA = M.CONS_REFE_MARCA AND 
            R.CONS_REFE_LINEA = L.CONS_REFE_LINEA AND 
            R.CONS_REFE_EDAD = E.CONS_REFE_EDAD AND 
            R.CONS_REFE_ESTILO = ES.CONS_REFE_ESTILO AND 
            R.CONS_REFE_GRUPO = G.CONS_REFE_GRUPO AND 
            R.CONS_REFE_SEXO = S.CONS_SEXO AND 
            R.CONS_REFE_LAVADO = LA.CONS_REFE_LAVADO AND 
            R.CONS_REFE_BORDADO = B.CONS_REFE_BORDADO AND 
            R.CONS_REFE_ESTAMPADO = ET.CONS_REFE_ESTAMPADO AND 
            R.CONS_REFE_ESTADO = EST.CONS_REFE_ESTADO AND 
            R.CONS_REFE_TEMPORADA = T.CONS_REFE_TEMPORADA AND 
            RV.CONS_REFE_VARIACION = :PE_CONS_REFE_VARIACION
    ORDER BY NOMB_REFERENCIA
    INTO :CONS_REFERENCIA, :CODI_REFERENCIA, :MOLDE,
         :CODI_INTE_REFERENCIA, :NOMB_REFERENCIA, :CODI_BARRAS,
         :CONS_REFE_TIPO_VARIACION, :CODI_REFE_TIPO_VARIACION, :NOMB_REFE_TIPO_VARIACION,
         :CONS_REFE_MARCA, :CODI_REFE_MARCA, :NOMB_REFE_MARCA,
         :CONS_REFE_LINEA, :CODI_REFE_LINEA, :NOMB_REFE_LINEA,
         :CONS_REFE_EDAD, :CODI_REFE_EDAD, :NOMB_REFE_EDAD,
         :CONS_REFE_ESTILO, :CODI_REFE_ESTILO, :NOMB_REFE_ESTILO,
         :CONS_REFE_GRUPO, :CODI_REFE_GRUPO, :NOMB_REFE_GRUPO,
         :CONS_SEXO, :CODI_SEXO, :NOMB_SEXO,
         :CONS_REFE_LAVADO, :CODI_REFE_LAVADO, :NOMB_REFE_LAVADO,
         :CONS_REFE_BORDADO, :CODI_REFE_BORDADO, :NOMB_REFE_BORDADO,
         :CONS_REFE_ESTAMPADO, :CODI_REFE_ESTAMPADO, :NOMB_REFE_ESTAMPADO,
         :CONS_REFE_ESTADO, :CODI_REFE_ESTADO, :NOMB_REFE_ESTADO,
         :CONS_REFE_TEMPORADA, :CODI_REFE_TEMPORADA, :NOMB_REFE_TEMPORADA,
         :VAR_CONS_REFE_GRUP_TALLA, :IMAGEN, :DESCRIPCION,
         :FECH_SISTEMA, :USUA_SISTEMA, :CONS_REFE_VARIACION;

    -- Inicializo variable
    GRUP_TALLAS = '';

    -- Verifico que tenga permisos sobre las tablas
    IF (EXISTS(SELECT PERMISO
               FROM CON_PERM_TABLAS('GLO_GRUP_TALL_DETALLE', 1, 'S')
               WHERE PERMISO = 1)) THEN
      IF (:VAR_CONS_REFE_GRUP_TALLA IS NOT NULL) THEN
        -- Consultamos las tallas de la referencia
        FOR SELECT  TALLA
        FROM GLO_GRUP_TALL_DETALLE
        WHERE CONS_GRUP_TALLAS = :VAR_CONS_REFE_GRUP_TALLA
        ORDER BY CONS_GRUP_TALL_DETALLE
        INTO :VAR_TALL_TEMPORAL

        DO BEGIN
          -- Si es la primera talla no le adicion la coma
          IF (:GRUP_TALLAS = '') THEN
            GRUP_TALLAS = (:GRUP_TALLAS || :VAR_TALL_TEMPORAL);
          -- Si No es la primera talla le adiciona la coma
          ELSE
            GRUP_TALLAS = (:GRUP_TALLAS || ',' || :VAR_TALL_TEMPORAL);
        END

    SUSPEND;
END ^

ALTER PROCEDURE CON_GLO_TALL_GRUPO (CONS_GRUP_TALLAS INTEGER)
RETURNS (
	TALLAS VARCHAR(240) CHARACTER SET NONE)
AS 

declare variable VAR_SEPARADOR varchar(2);
declare variable VAR_TALLA varchar(12);

begin
  /*  Inicializar las variables  */
  VAR_SEPARADOR = '';
  TALLAS = '';

  /*  Consultar las tallas del grupo  */
  For Select talla
      from glo_grup_tall_detalle
      where cons_grup_tallas = :cons_grup_tallas
      order by secu_talla
      into :VAR_TALLA 
  DO BEGIN

       TALLAS = :TALLAS || :VAR_SEPARADOR || :VAR_TALLA;
       VAR_SEPARADOR = ',';
  END

  suspend;
end ^

ALTER PROCEDURE CON_PCP_COMP_VARI_ARBOL RETURNS (
	
    CONS_CONSULTA INTEGER,
    PADR_CONSULTA INTEGER,
    CONS_COMP_GRUPO INTEGER,
    CONS_COMP_VARIACION VARCHAR(120) CHARACTER SET NONE,
    NOMB_COMP_VARIACION VARCHAR(120) CHARACTER SET NONE,
    IMAGEN BLOB,
    INDE_IMAGEN INTEGER)
AS 

Declare Variable  var_padr_consulta integer;

begin
     /*  Inicializar las variables  */
     cons_consulta = 0;
     var_padr_consulta = 0;

     /*  -- -- -- -CONSULTA DE COMPONENTES -- -- -- -- - */
     For Select cons_comp_grupo, nomb_comp_grupo
         from pcp_comp_grupos
         where cons_comp_grupo>0
         order by nomb_comp_grupo
         into :cons_comp_grupo, nomb_comp_variacion

     do Begin
        /*  Generar el maestro  */
        imagen = Null;
        cons_consulta = :cons_consulta + 1;
        var_padr_consulta = :cons_consulta;
        cons_comp_variacion = :cons_comp_grupo;
        padr_consulta = -1;
        inde_imagen = 12;

        Suspend;

        /*  Generar los detalles  */
        For Select cons_comp_variacion, nomb_comp_variacion, imagen
            from vis_pcp_comp_variaciones
            where cons_comp_grupo = :cons_comp_grupo
            order by nomb_comp_variacion
            into  :cons_comp_variacion, :nomb_comp_variacion, :imagen
        do Begin
             cons_consulta = :cons_consulta + 1;
             padr_consulta = :var_padr_consulta;
             inde_imagen = 13;

             Suspend;
        End
    End
End


ALTER PROCEDURE CON_PCP_CONT_NOVE_DIARIAS (
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    TIPO_REGISTRO INTEGER,
    CONS_CONT_NOVE_DIARIA INTEGER,
    NUME_LECTURA INTEGER,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
    TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    MINU_CONTRATADOS INTEGER,
    MINU_AUSENTISMOS INTEGER,
    MINU_EXTRAS INTEGER,
    MINU_PRESENCIALES INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    MINU_TRABAJADOS INTEGER,
    MINU_TIQU_CORTE NUMERIC(15, 5),
    MINU_TIQU_FABRICACION NUMERIC(15, 5),
    MINU_ABONADOS NUMERIC(15, 5),
    MINU_OBTENIDOS NUMERIC(15, 5),
    INDI_1 NUMERIC(15, 5),
    INDI_2 NUMERIC(15, 5),
    INDI_3 NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_REPORTA INTEGER;

BEGIN
    /*  RECORRER EL PERSONAL  */
    FOR SELECT CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,
        CONS_EMPRESA, NOMB_EMPRESA,
        CONS_AREA, NOMB_AREA,
        CONS_PLANTA, NOMB_PLANTA,
        CONS_PLAN_LINEA, NOMB_PLAN_LINEA,
        CONS_LINE_SECCION, NOMB_LINE_SECCION,
        CONS_TURNO, CODI_TURNO, NOMB_TIPO_TURNO
    FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)
    ORDER BY CONS_EMPRESA, CONS_AREA, CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION,
        CONS_TURNO

    INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO,
        :CONS_EMPRESA, :NOMB_EMPRESA,
        :CONS_AREA, :NOMB_AREA,
        :CONS_PLANTA, :NOMB_PLANTA,
        :CONS_PLAN_LINEA, :NOMB_PLAN_LINEA,
        :CONS_LINE_SECCION, :NOMB_LINE_SECCION,
        :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO

    DO BEGIN

         /*  ASUMIR QUE NO REPORTA  */
         VAR_REPORTA = -1;

         /*  BUSCAR LAS LECTURAS QUE TENGA  */
         FOR SELECT CONS_CONT_NOVE_DIARIA, NUME_LECTURA, MINU_CONTRATADOS,
            CONS_EMPRESA, NOMB_EMPRESA,
            CONS_PLANTA, NOMB_PLANTA,
            CONS_PLAN_LINEA, NOMB_LINEA,
            CONS_LINE_SECCION, NOMB_SECCION,
            CONS_TURNO, CODI_TURNO, UPPER(TIPO_TURNO)
         FROM VIS_PCP_CONT_NOVE_DIAR_UBIC
         WHERE CONS_PERSONAL = :CONS_PERSONAL AND FECH_LECTURA = :PE_FECHA
         ORDER BY NUME_LECTURA
         INTO :CONS_CONT_NOVE_DIARIA, :NUME_LECTURA, :MINU_CONTRATADOS,
            :CONS_EMPRESA, :NOMB_EMPRESA,
            :CONS_PLANTA, :NOMB_PLANTA,
            :CONS_PLAN_LINEA, :NOMB_PLAN_LINEA,
            :CONS_LINE_SECCION, :NOMB_LINE_SECCION,
            :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO
         DO BEGIN

             /*  MARCAR COMO REPORTA  */
             VAR_REPORTA = 1;
             TIPO_REGISTRO = 1;

             /*  MINUTOS DE AUSENTISMO  */
             SELECT SUM(IMPR.MINU_IMPRODUCTIVOS)
             FROM VIS_PCP_CONT_NOVE_IMPR_FAMILIA IMPR
             WHERE IMPR.CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA AND 
                    IMPR.CODI_IMPR_FAMILIA = 'AU'
             INTO :MINU_AUSENTISMOS;

             IF (:MINU_AUSENTISMOS IS NULL) THEN MINU_AUSENTISMOS = 0;

             /*  MINUTOS EXTRAS  */
             SELECT SUM(EXTR.MINU_EXTRAS)
             FROM PCP_CONT_NOVE_HORA_EXTRAS EXTR
             WHERE EXTR.CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA
             INTO :MINU_EXTRAS;

             IF (:MINU_EXTRAS IS NULL) THEN MINU_EXTRAS = 0;

             /*  MINUTOS PRESENCIALES  */
             MINU_PRESENCIALES = :MINU_CONTRATADOS - :MINU_AUSENTISMOS + :MINU_EXTRAS;

             /*  TOTAL IMPRODUCTIVOS  */
             SELECT SUM(IMPR.MINU_IMPRODUCTIVOS)
             FROM VIS_PCP_CONT_NOVE_IMPR_FAMILIA IMPR
             WHERE IMPR.CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA AND 
                    IMPR.CODI_IMPR_FAMILIA <> 'AU'
             INTO :MINU_IMPRODUCTIVOS;

             IF (:MINU_IMPRODUCTIVOS IS NULL) THEN MINU_IMPRODUCTIVOS = 0;

             /*  MINUTOS REALES TRABAJADOS  */
             MINU_TRABAJADOS = :MINU_CONTRATADOS - :MINU_AUSENTISMOS + :MINU_EXTRAS - :MINU_IMPRODUCTIVOS;

             /*  MINUTOS ABONADOS  */
             SELECT SUM(ABON.MINU_REAL_ABONADOS)
             FROM PCP_CONT_NOVE_ABONADOS ABON
             WHERE ABON.CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA
             INTO :MINU_ABONADOS;

             IF (:MINU_ABONADOS IS NULL) THEN MINU_ABONADOS = 0;

             /*  TIQUETS DE CORTE  */
             SELECT SUM(CORT.TIEM_OPERACION)
             FROM PCP_CONT_NOVE_TIQU_CORTE CORT
             WHERE CORT.CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA
             INTO :MINU_TIQU_CORTE;

             IF (:MINU_TIQU_CORTE IS NULL) THEN MINU_TIQU_CORTE = 0;

             /*  TIQUETS DE FABRICACION  */
             SELECT SUM(FABR.TIEM_OPERACION * FABR.CANT_UNIDADES)
             FROM PCP_CONT_NOVE_TIQU_FABRICACION FABR
             WHERE FABR.CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA
             INTO :MINU_TIQU_FABRICACION;

             IF (:MINU_TIQU_FABRICACION IS NULL) THEN MINU_TIQU_FABRICACION = 0;

             /*  TOTAL OBTENIDO  */
             MINU_OBTENIDOS = :MINU_ABONADOS + :MINU_TIQU_CORTE + :MINU_TIQU_FABRICACION;

             /*  INDICADORES  */
             IF (:MINU_CONTRATADOS > 0) THEN
                  INDI_1 = (:MINU_OBTENIDOS / :MINU_CONTRATADOS) * 100;
             ELSE
                  INDI_1 = 0;

             IF (:MINU_PRESENCIALES > 0) THEN
                  INDI_2 = (:MINU_OBTENIDOS / :MINU_PRESENCIALES) * 100;
             ELSE
                  INDI_2 = 0;

             IF (:MINU_TRABAJADOS > 0) THEN
                  INDI_3 = (:MINU_OBTENIDOS / :MINU_TRABAJADOS) * 100;
             ELSE
                  INDI_3 = 0;

             SUSPEND;
         END

         /*  SI NO REPORTA, GENERAR EL REGISTRO  */
         IF (:VAR_REPORTA = -1) THEN BEGIN
             CONS_CONT_NOVE_DIARIA = NULL;
             TIPO_REGISTRO = -1;
             NUME_LECTURA = NULL;
             MINU_CONTRATADOS = 0;
             MINU_IMPRODUCTIVOS = 0;
             MINU_AUSENTISMOS  = 0;
             MINU_EXTRAS  = 0;
             MINU_PRESENCIALES  = 0;
             MINU_IMPRODUCTIVOS  = 0;
             MINU_TRABAJADOS  = 0;
             MINU_TIQU_CORTE = 0;
             MINU_TIQU_FABRICACION  = 0;
             MINU_ABONADOS  = 0;
             MINU_OBTENIDOS = 0;
             INDI_1  = 0;
             INDI_2  = 0;
             INDI_3  = 0;

             SUSPEND;
         END
    END
END ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_DIAR_EFIC_IN (
    PE_CONS_PERSONAL INTEGER,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
    RETURNS (
	FECH_LECTURA TIMESTAMP,
    MINU_CONTRATADOS INTEGER,
    MINU_TRAB_ESTANDAR INTEGER,
    MINU_TRAB_NO_ESTANDAR INTEGER,
    MINU_TRAB_CURVA INTEGER,
    MINU_TRABAJADOS INTEGER,
    MINU_EXTR_ESTANDAR INTEGER,
    MINU_EXTR_NO_ESTANDAR INTEGER,
    MINU_EXTRAS INTEGER,
    MINU_AUSE_ESTANDAR INTEGER,
    MINU_AUSE_NO_ESTANDAR INTEGER,
    MINU_AUSENTISMOS INTEGER,
    MINU_IMPR_ESTANDAR INTEGER,
    MINU_IMPR_NO_ESTANDAR INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    MINU_PROD_ESTANDAR NUMERIC(15, 3),
    MINU_PROD_CORTE NUMERIC(15, 3),
    MINU_PROD_FABRICACION NUMERIC(15, 3),
    MINU_PROD_NO_ESTANDAR NUMERIC(15, 3),
    MINU_PROD_CURVA NUMERIC(15, 3),
    MINU_PRODUCIDOS NUMERIC(15, 3),
    INDI_1_ESTANDAR NUMERIC(15, 3),
    INDI_2_ESTANDAR NUMERIC(15, 3),
    INDI_3_ESTANDAR NUMERIC(15, 3),
    INDI_1_NO_ESTANDAR NUMERIC(15, 3),
    INDI_2_NO_ESTANDAR NUMERIC(15, 3),
    INDI_3_NO_ESTANDAR NUMERIC(15, 3),
    INDI_1_TOTAL NUMERIC(15, 3),
    INDI_2_TOTAL NUMERIC(15, 3),
    INDI_3_TOTAL NUMERIC(15, 3))
AS 

DECLARE VARIABLE VAR_FECHA DATE;

begin
  /*  VALIDAR LAS FECHAS  */
  if (:PE_FECH_INICIAL IS NULL) then PE_FECH_INICIAL = 'NOW';
  if ((:PE_FECH_FINAL IS NULL)  or (:PE_FECH_FINAL < :PE_FECH_INICIAL)) then PE_FECH_FINAL = 'NOW';
  VAR_FECHA = :PE_FECH_INICIAL;

  /*  RECORRER EL RANGO DE FECHAS  */
  WHILE (:VAR_FECHA <= :PE_FECH_FINAL) DO BEGIN

        FECH_LECTURA = :VAR_FECHA;

        /*  LIMPIAR LAS VARIABLES DE RESULTADO  */
        MINU_CONTRATADOS = 0;
        MINU_TRAB_ESTANDAR = 0;
        MINU_TRAB_NO_ESTANDAR = 0;
        MINU_TRAB_CURVA = 0;
        MINU_EXTR_ESTANDAR = 0;
        MINU_EXTR_NO_ESTANDAR = 0;
        MINU_AUSE_ESTANDAR = 0;
        MINU_AUSE_NO_ESTANDAR = 0;
        MINU_IMPR_ESTANDAR = 0;
        MINU_IMPR_NO_ESTANDAR = 0;
        MINU_PROD_ESTANDAR = 0;
        MINU_PROD_CORTE = 0;
        MINU_PROD_FABRICACION = 0;
        MINU_PROD_NO_ESTANDAR = 0;
        MINU_PROD_CURVA = 0;
        INDI_1_ESTANDAR = 0;
        INDI_2_ESTANDAR = 0;
        INDI_3_ESTANDAR = 0;
        INDI_1_NO_ESTANDAR = 0;
        INDI_2_NO_ESTANDAR = 0;
        INDI_3_NO_ESTANDAR = 0;
        INDI_1_TOTAL = 0;
        INDI_2_TOTAL = 0;
        INDI_3_TOTAL = 0;
        MINU_TRABAJADOS = 0;
        MINU_EXTRAS = 0;
        MINU_AUSENTISMOS = 0;
        MINU_IMPRODUCTIVOS = 0;
        MINU_PRODUCIDOS = 0;

        /*  DATOS DEL DIA  */
        SELECT SUM(MINU_CONTRATADOS), SUM(MINU_TRAB_ESTANDAR),
            SUM(MINU_TRAB_NO_ESTANDAR), SUM(MINU_TRAB_CURVA),
            SUM(MINU_EXTR_ESTANDAR), SUM(MINU_EXTR_NO_ESTANDAR),
            SUM(MINU_AUSE_ESTANDAR), SUM(MINU_AUSE_NO_ESTANDAR),
            SUM(MINU_IMPR_ESTANDAR), SUM(MINU_IMPR_NO_ESTANDAR),
            SUM(MINU_PROD_ESTANDAR), SUM(MINU_PROD_CORTE),
            SUM(MINU_PROD_FABRICACION), SUM(MINU_PROD_NO_ESTANDAR),
            SUM(MINU_PROD_CURVA)
            FROM VIS_PCP_CONT_NOVE_PAGO
            WHERE CONS_PERSONAL = :PE_CONS_PERSONAL AND 
                    FECH_LECTURA = :VAR_FECHA
            INTO :MINU_CONTRATADOS, :MINU_TRAB_ESTANDAR,
                :MINU_TRAB_NO_ESTANDAR, :MINU_TRAB_CURVA, :MINU_EXTR_ESTANDAR,
                :MINU_EXTR_NO_ESTANDAR, :MINU_AUSE_ESTANDAR, :MINU_AUSE_NO_ESTANDAR,
                :MINU_IMPR_ESTANDAR, :MINU_IMPR_NO_ESTANDAR, :MINU_PROD_ESTANDAR,
                :MINU_PROD_CORTE, :MINU_PROD_FABRICACION, :MINU_PROD_NO_ESTANDAR,
                :MINU_PROD_CURVA;

        /*  VERIFICAR SI ESTE DIA HUBO LECTURA  */
        if ((:MINU_CONTRATADOS > 0) or 
            (:MINU_EXTR_ESTANDAR > 0) or 
            (:MINU_EXTR_NO_ESTANDAR > 0)) then BEGIN

            /*  OTROS CAMPOS (SUMATORIAS)  */
            MINU_TRABAJADOS = :MINU_TRAB_ESTANDAR + :MINU_TRAB_NO_ESTANDAR;
            MINU_EXTRAS = :MINU_EXTR_ESTANDAR + :MINU_EXTR_NO_ESTANDAR;
            MINU_AUSENTISMOS = :MINU_AUSE_ESTANDAR + :MINU_AUSE_NO_ESTANDAR;
            MINU_IMPRODUCTIVOS = :MINU_IMPR_ESTANDAR + :MINU_IMPR_NO_ESTANDAR;
            MINU_PRODUCIDOS = :MINU_PROD_ESTANDAR + :MINU_PROD_NO_ESTANDAR;

            /*  -- - CALCULAR LOS INDICADORES -- -  */

            /*  EN ESTANDAR  */
            if (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR > 0) then
                INDI_1_ESTANDAR = (:MINU_PROD_ESTANDAR / (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR)) * 100;

            if (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR > 0) then
                INDI_2_ESTANDAR = (:MINU_PROD_ESTANDAR / (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR)) * 100;

            if (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR - :MINU_IMPR_ESTANDAR > 0) then
                INDI_3_ESTANDAR = (:MINU_PROD_ESTANDAR / (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR - :MINU_IMPR_ESTANDAR)) * 100;


            /*  EN NO ESTANDAR  */
            if (:MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR > 0) then
                INDI_1_NO_ESTANDAR = (:MINU_PROD_NO_ESTANDAR / (:MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR)) * 100;
            if (:MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR > 0) then
                INDI_2_NO_ESTANDAR = (:MINU_PROD_NO_ESTANDAR / (:MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR)) * 100;

            if (:MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR - :MINU_IMPR_NO_ESTANDAR > 0) then
                INDI_3_NO_ESTANDAR = (:MINU_PROD_NO_ESTANDAR / (:MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR - :MINU_IMPR_NO_ESTANDAR)) * 100;


            /*  TOTAL  */
            if (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR + :MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR > 0) then
                INDI_1_TOTAL = ((:MINU_PROD_ESTANDAR + :MINU_PROD_NO_ESTANDAR) / (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR + :MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR)) * 100;

            if (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR + :MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR > 0) then

                INDI_2_TOTAL = ((:MINU_PROD_ESTANDAR + :MINU_PROD_NO_ESTANDAR) / (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR +:MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR)) * 100;
            if (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR - :MINU_IMPR_ESTANDAR + :MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR - :MINU_IMPR_NO_ESTANDAR > 0) then

                INDI_3_TOTAL = ((:MINU_PROD_ESTANDAR + :MINU_PROD_NO_ESTANDAR) / (:MINU_TRAB_ESTANDAR + :MINU_EXTR_ESTANDAR - :MINU_AUSE_ESTANDAR - :MINU_IMPR_ESTANDAR + :MINU_TRAB_NO_ESTANDAR + :MINU_EXTR_NO_ESTANDAR - :MINU_AUSE_NO_ESTANDAR - :MINU_IMPR_NO_ESTANDAR)) * 100;

                SUSPEND;
        END

        VAR_FECHA = :VAR_FECHA + 1;
  END
end ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_DIAR_PAGO (
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    TIPO_REGISTRO INTEGER,
    CONS_CONT_NOVE_DIARIA INTEGER,
    NUME_LECTURA INTEGER,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
    TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    MINU_CONTRATADOS INTEGER,
    MINU_AUSENTISMOS INTEGER,
    MINU_EXTRAS INTEGER,
    MINU_PRESENCIALES INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    MINU_TRABAJADOS INTEGER,
    MINU_TIQU_CORTE NUMERIC(15, 5),
    MINU_TIQU_FABRICACION NUMERIC(15, 5),
    MINU_ABONADOS NUMERIC(15, 5),
    MINU_OBTENIDOS NUMERIC(15, 5),
    INDI_1 NUMERIC(15, 5),
    INDI_2 NUMERIC(15, 5),
    INDI_3 NUMERIC(15, 5),
    CONS_FORM_PAGO INTEGER,
    NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
    CODI_FORM_PAGO VARCHAR(12) CHARACTER SET NONE,
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    VALO_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_GANA_PRODUCCION NUMERIC(15, 5),
    VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
    VALO_BONO_PRODUCCION NUMERIC(15, 5),
    VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_REPORTA INTEGER;

BEGIN
    /* RECORRER EL PERSONAL DESDE LA CONSULTA DE NOVEDADES DIARIAS */
    FOR SELECT CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,
        TIPO_REGISTRO, CONS_CONT_NOVE_DIARIA, NUME_LECTURA,
        CONS_EMPRESA, NOMB_EMPRESA, CONS_AREA, NOMB_AREA,
        CONS_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA, NOMB_PLAN_LINEA,
        CONS_LINE_SECCION, NOMB_LINE_SECCION, CONS_TURNO, CODI_TURNO,
        TIPO_TURNO, MINU_CONTRATADOS, MINU_AUSENTISMOS, MINU_EXTRAS,
        MINU_PRESENCIALES, MINU_IMPRODUCTIVOS, MINU_TRABAJADOS, MINU_TIQU_CORTE,
        MINU_TIQU_FABRICACION, MINU_ABONADOS, MINU_OBTENIDOS, INDI_1,
        INDI_2, INDI_3
    FROM CON_PCP_CONT_NOVE_DIARIAS(:PE_FECHA)
    INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO,
        :TIPO_REGISTRO, :CONS_CONT_NOVE_DIARIA, :NUME_LECTURA,
        :CONS_EMPRESA, :NOMB_EMPRESA, :CONS_AREA, :NOMB_AREA,
        :CONS_PLANTA, :NOMB_PLANTA, :CONS_PLAN_LINEA,
        :NOMB_PLAN_LINEA, :CONS_LINE_SECCION, :NOMB_LINE_SECCION,
        :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO, :MINU_CONTRATADOS,
        :MINU_AUSENTISMOS, :MINU_EXTRAS, :MINU_PRESENCIALES, :MINU_IMPRODUCTIVOS,
        :MINU_TRABAJADOS, :MINU_TIQU_CORTE, :MINU_TIQU_FABRICACION, :MINU_ABONADOS,
        :MINU_OBTENIDOS, :INDI_1, :INDI_2, :INDI_3 
    DO BEGIN
         /*  LIMPIAR LOS VALORES DEL REGISTRO */
         CONS_FORM_PAGO = NULL;
         CODI_FORM_PAGO = NULL;
         NOMB_SIS_FORM_PAGO = NULL;
         VALO_HORA_PRODUCCION = 0;
         VALO_MINI_GARANTIZADO = 0;
         VALO_GANA_PRODUCCION = 0;
         VALO_AJUS_AL_MINIMO = 0;
         VALO_BONO_PRODUCCION = 0;
         VALO_TOTA_DEVENGADO = 0;

         /*  BUSCAR INFORMACIÓN DE LA LIQUIDACIÓN */
         SELECT CONS_FORM_PAGO, CODI_FORM_PAGO, NOMB_SIS_FORM_PAGO, VALO_HORA_PRODUCCION,
             VALO_MINI_GARANTIZADO, VALO_GANA_PRODUCCION, VALO_AJUS_AL_MINIMO,
             VALO_BONO_PRODUCCION, VALO_TOTA_DEVENGADO
         FROM VIS_PCP_CONT_NOVE_PAGO
         WHERE CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA
         INTO :CONS_FORM_PAGO, :CODI_FORM_PAGO, :NOMB_SIS_FORM_PAGO, :VALO_HORA_PRODUCCION,
             :VALO_MINI_GARANTIZADO, :VALO_GANA_PRODUCCION, :VALO_AJUS_AL_MINIMO,
             :VALO_BONO_PRODUCCION, :VALO_TOTA_DEVENGADO;

         SUSPEND;
    END 
END ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_DIAR_PAGO_RA (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    TIPO_REGISTRO INTEGER,
    CONS_CONT_NOVE_DIARIA INTEGER,
    NUME_LECTURA INTEGER,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
    TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    MINU_CONTRATADOS INTEGER,
    MINU_AUSENTISMOS INTEGER,
    MINU_EXTRAS INTEGER,
    MINU_PRESENCIALES INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    MINU_TRABAJADOS INTEGER,
    MINU_TIQU_CORTE NUMERIC(15, 5),
    MINU_TIQU_FABRICACION NUMERIC(15, 5),
    MINU_ABONADOS NUMERIC(15, 5),
    MINU_OBTENIDOS NUMERIC(15, 5),
    INDI_1 NUMERIC(15, 5),
    INDI_2 NUMERIC(15, 5),
    INDI_3 NUMERIC(15, 5),
    CONS_FORM_PAGO INTEGER,
    NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
    CODI_FORM_PAGO VARCHAR(12) CHARACTER SET NONE,
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    VALO_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_GANA_PRODUCCION NUMERIC(15, 5),
    VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
    VALO_BONO_PRODUCCION NUMERIC(15, 5),
    VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_FECHA DATE;

BEGIN
     /*  INICIALIZAR LA FECHA  */
     VAR_FECHA = :PE_FECH_INICIAL;
     WHILE (:VAR_FECHA <= PE_FECH_FINAL) do BEGIN

         /*  RECORRER LA CONSULTA DIARIA  */
         FOR SELECT CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,
              TIPO_REGISTRO, CONS_CONT_NOVE_DIARIA, NUME_LECTURA,
              CONS_EMPRESA, NOMB_EMPRESA, CONS_AREA, NOMB_AREA,
              CONS_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA, NOMB_PLAN_LINEA,
              CONS_LINE_SECCION, NOMB_LINE_SECCION, CONS_TURNO, CODI_TURNO,
              TIPO_TURNO, MINU_CONTRATADOS, MINU_AUSENTISMOS, MINU_EXTRAS,
              MINU_PRESENCIALES, MINU_IMPRODUCTIVOS, MINU_TRABAJADOS, MINU_TIQU_CORTE,
              MINU_TIQU_FABRICACION, MINU_ABONADOS, MINU_OBTENIDOS, INDI_1,
              INDI_2, INDI_3, CONS_FORM_PAGO, NOMB_SIS_FORM_PAGO,
              CODI_FORM_PAGO, VALO_HORA_PRODUCCION, VALO_MINI_GARANTIZADO, VALO_GANA_PRODUCCION,
              VALO_AJUS_AL_MINIMO, VALO_BONO_PRODUCCION, VALO_TOTA_DEVENGADO
         FROM CON_PCP_CONT_NOVE_DIAR_PAGO(:VAR_FECHA)
         INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO, :TIPO_REGISTRO,
             :CONS_CONT_NOVE_DIARIA, :NUME_LECTURA, :CONS_EMPRESA,
             :NOMB_EMPRESA, :CONS_AREA, :NOMB_AREA,
             :CONS_PLANTA, :NOMB_PLANTA, :CONS_PLAN_LINEA,
             :NOMB_PLAN_LINEA, :CONS_LINE_SECCION, :NOMB_LINE_SECCION,
             :CONS_TURNO, :CODI_TURNO, :TIPO_TURNO,
             :MINU_CONTRATADOS, :MINU_AUSENTISMOS, :MINU_EXTRAS,
             :MINU_PRESENCIALES, :MINU_IMPRODUCTIVOS, :MINU_TRABAJADOS,
             :MINU_TIQU_CORTE, :MINU_TIQU_FABRICACION, :MINU_ABONADOS,
             :MINU_OBTENIDOS, :INDI_1, :INDI_2,
             :INDI_3, :CONS_FORM_PAGO, :NOMB_SIS_FORM_PAGO,
             :CODI_FORM_PAGO, :VALO_HORA_PRODUCCION, :VALO_MINI_GARANTIZADO,
             :VALO_GANA_PRODUCCION, :VALO_AJUS_AL_MINIMO, :VALO_BONO_PRODUCCION,
             :VALO_TOTA_DEVENGADO 
        DO
             SUSPEND;

         /*  SIGUIENTE FECHA  */
         VAR_FECHA = :VAR_FECHA + 1;
    END
END ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_EFIC_PROM_UN (
    PE_CONS_PERSONAL INTEGER,
    PE_FECH_LECTURA TIMESTAMP)
RETURNS (
	EFIC_PROMEDIO NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_CONT_PROD_DIAS_EFIC_PROMEDIO INTEGER;
DECLARE VARIABLE VAR_MINU_CONTRATADOS INTEGER;
DECLARE VARIABLE VAR_MINU_PROD_CORTE NUMERIC(15,5);
DECLARE VARIABLE VAR_MINU_PROD_FABRICACION NUMERIC(15,5);
DECLARE VARIABLE VAR_MINU_PROD_NOESTANDAR NUMERIC(15,5);
DECLARE VARIABLE VAR_MINU_PROD_CURVA NUMERIC(15,5);
DECLARE VARIABLE VAR_MINU_AUSENTISMOS NUMERIC(15,5);
DECLARE VARIABLE VAR_MINU_IMPRODUCTIVOS NUMERIC(15,5);
DECLARE VARIABLE VAR_MINU_EXTRA NUMERIC(15,5);
DECLARE VARIABLE VAR_FECH_INICIAL DATE;
DECLARE VARIABLE VAR_FECH_FINAL DATE;

begin
  EFIC_PROMEDIO = 0;

  /*  CONSULTAR EL NUMERO DE DIAS PARA EL CALCULO PROMEDIO  */
  SELECT FIRST 1 OPCI.CONT_PROD_DIAS_EFIC_PROMEDIO
  FROM PCP_OPCIONES OPCI
  INTO :VAR_CONT_PROD_DIAS_EFIC_PROMEDIO;
  if (:VAR_CONT_PROD_DIAS_EFIC_PROMEDIO IS NULL) then
      VAR_CONT_PROD_DIAS_EFIC_PROMEDIO = 30;

  /*  CALCULAR LA EFICIENCIA PROMEDIO DEL OPERARIO TOTAL */
  VAR_FECH_FINAL = :PE_FECH_LECTURA - 1;
  VAR_FECH_INICIAL = :VAR_FECH_FINAL - :VAR_CONT_PROD_DIAS_EFIC_PROMEDIO;

  SELECT SUM(MINU_CONTRATADOS), SUM(MINU_PROD_CORTE),
        SUM(MINU_PROD_FABRICACION), SUM(MINU_PROD_NOESTANDAR),
        SUM(MINU_PROD_CURVA), SUM(MINU_AUSENTISMOS), SUM(MINU_IMPRODUCTIVOS),
        SUM(MINU_EXTRA)
  FROM VIS_PCP_CONT_NOVE_RESUMEN
  WHERE CONS_PERSONAL = :PE_CONS_PERSONAL AND 
        FECH_LECTURA BETWEEN :VAR_FECH_INICIAL AND :VAR_FECH_FINAL
  INTO :VAR_MINU_CONTRATADOS, :VAR_MINU_PROD_CORTE,
    :VAR_MINU_PROD_FABRICACION, :VAR_MINU_PROD_NOESTANDAR,
    :VAR_MINU_PROD_CURVA, :VAR_MINU_AUSENTISMOS,
    :VAR_MINU_IMPRODUCTIVOS, :VAR_MINU_EXTRA;

  IF (:VAR_MINU_CONTRATADOS IS NULL) THEN VAR_MINU_CONTRATADOS = 0;

  IF (:VAR_MINU_PROD_CORTE IS NULL) THEN VAR_MINU_PROD_CORTE = 0;

  IF (:VAR_MINU_PROD_FABRICACION IS NULL) THEN VAR_MINU_PROD_FABRICACION = 0;

  IF (:VAR_MINU_PROD_NOESTANDAR IS NULL) THEN VAR_MINU_PROD_NOESTANDAR = 0;

  IF (:VAR_MINU_PROD_CURVA IS NULL) THEN VAR_MINU_PROD_CURVA = 0;

  IF (:VAR_MINU_AUSENTISMOS IS NULL) THEN VAR_MINU_AUSENTISMOS = 0;

  IF (:VAR_MINU_IMPRODUCTIVOS IS NULL) THEN VAR_MINU_IMPRODUCTIVOS = 0;

  IF (:VAR_MINU_EXTRA IS NULL) THEN VAR_MINU_EXTRA = 0;

  EFIC_PROMEDIO = ((:VAR_MINU_PROD_CORTE + :VAR_MINU_PROD_FABRICACION + :VAR_MINU_PROD_CURVA +
                        :VAR_MINU_PROD_NOESTANDAR) /
                   (:VAR_MINU_CONTRATADOS - :VAR_MINU_AUSENTISMOS - :VAR_MINU_IMPRODUCTIVOS + :VAR_MINU_EXTRA))
                   * 100;

  IF (:EFIC_PROMEDIO < 0) then EFIC_PROMEDIO = 0;

  SUSPEND;

  WHEN ANY DO BEGIN

        EFIC_PROMEDIO = 0;
        SUSPEND;
  END

end ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_IMPRODUCTIVOS (
    PE_CONS_CONT_NOVE_DIARIA INTEGER)
RETURNS (
	
    CONS_CONT_NOVE_IMPRODUCTIVO INTEGER,
    CONS_IMPRODUCTIVO INTEGER,
    CODI_IMPRODUCTIVO VARCHAR(12) CHARACTER SET NONE,
    CONS_IMPR_FAMILIA INTEGER,
    NOMB_IMPRODUCTIVO VARCHAR(60) CHARACTER SET NONE,
    CONS_SUB_IMPRODUCTIVO INTEGER,
    CODI_SUB_IMPRODUCTIVO VARCHAR(12) CHARACTER SET NONE,
    NOMB_SUB_IMPRODUCTIVO VARCHAR(60) CHARACTER SET NONE,
    CONS_PROD_ORDEN INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    CODI_IMPR_FAMILIA VARCHAR(12) CHARACTER SET NONE,
    CONS_RECURSO INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    VALO_HORA NUMERIC(15, 5),
    VALO_MINIMO NUMERIC(15, 5),
    ESTANDAR INTEGER,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

begin
  /*  Recorrer el detalle de los improductivos  */
  For select cons_cont_nove_improductivo, cons_improductivo,
      cons_sub_improductivo, cons_prod_orden, cons_recurso,
      minu_improductivos, valo_hora, valo_minimo, estandar,
      fech_sistema, usua_sistema
      from pcp_cont_nove_improductivos
      where Cons_Cont_Nove_Diaria = :pe_cons_cont_nove_diaria
      into :cons_cont_nove_improductivo, :cons_improductivo,
      :cons_sub_improductivo, :cons_prod_orden, :cons_recurso,
      :minu_improductivos, :valo_hora, :valo_minimo, :estandar,
      :fech_sistema, :usua_sistema
  do Begin
      /*  limpiar los adicionales  */
      codi_improductivo = Null;
      nomb_improductivo = Null;
      cons_impr_familia = Null;
      codi_impr_familia = Null;
      codi_sub_improductivo = Null;
      nomb_sub_improductivo = Null;
      nume_prod_orden = Null;

      /*  Buscar información improductivo  */

      Select impr.Codi_Improductivo, impr.Nomb_Improductivo,
          fami.Cons_Impr_Familia, fami.Codi_Impr_Familia
      from glo_improductivos impr, Sis_Impr_Familias fami
      where impr.Cons_Improductivo = :cons_improductivo and 
            fami.Cons_Impr_Familia = impr.Cons_Impr_Familia
      Into :codi_improductivo, :nomb_improductivo,
            :cons_impr_familia, :codi_impr_familia;

      /*  Buscar información subimproductivo  */
      Select codi_sub_improductivo, nomb_sub_improductivo
      from glo_sub_improductivos
      where cons_sub_improductivo = :cons_sub_improductivo
      into  :codi_sub_improductivo, :nomb_sub_improductivo;

      /*  Buscar info de la orden  */
      Select nume_prod_orden
      from pcp_prod_ordenes
      where cons_prod_orden = :cons_prod_orden
      into :nume_prod_orden;

      Suspend;
  End
end ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_PAGO_RANG_CO (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(60) CHARACTER SET NONE,
    TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    MINU_CONTRATADOS INTEGER,
    MINU_AUSENTISMOS INTEGER,
    MINU_EXTRAS INTEGER,
    MINU_PRESENCIALES INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    MINU_TRABAJADOS INTEGER,
    MINU_TIQU_CORTE NUMERIC(15, 5),
    MINU_TIQU_FABRICACION NUMERIC(15, 5),
    MINU_ABONADOS NUMERIC(15, 5),
    MINU_OBTENIDOS NUMERIC(15, 5),
    INDI_1 NUMERIC(15, 5),
    INDI_2 NUMERIC(15, 5),
    INDI_3 NUMERIC(15, 5),
    VALO_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_GANA_PRODUCCION NUMERIC(15, 5),
    VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
    VALO_BONO_PRODUCCION NUMERIC(15, 5),
    VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 

BEGIN

  FOR SELECT CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,
        CONS_EMPRESA, NOMB_EMPRESA,
        CONS_AREA, NOMB_AREA, CONS_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA,
        NOMB_PLAN_LINEA, CONS_LINE_SECCION, NOMB_LINE_SECCION, CONS_TURNO,
        CODI_TURNO, TIPO_TURNO,
        SUM(MINU_CONTRATADOS)
AS MINU_CONTRATADOS,
        SUM(MINU_AUSENTISMOS)
AS MINU_AUSENTISMOS,
        SUM(MINU_EXTRAS)
AS MINU_EXTRAS,
        SUM(MINU_PRESENCIALES)
AS MINU_PRESENCIALES,
        SUM(MINU_IMPRODUCTIVOS)
AS MINU_IMPRODUCTIVOS,
        SUM(MINU_TRABAJADOS)
AS MINU_TRABAJADOS,
        SUM(MINU_TIQU_CORTE)
AS MINU_TIQU_CORTE,
        SUM(MINU_TIQU_FABRICACION)
AS MINU_TIQU_FABRICACION,
        SUM(MINU_ABONADOS)
AS MINU_ABONADOS,
        SUM(MINU_OBTENIDOS)
AS MINU_OBTENIDOS,
        AVG(INDI_1)
AS INDI_1,
        AVG(INDI_2)
AS INDI_2,
        AVG(INDI_3)
AS INDI_3,
        SUM(VALO_MINI_GARANTIZADO)
AS VALO_MINI_GARANTIZADO,
        SUM(VALO_GANA_PRODUCCION)
AS VALO_GANA_PRODUCCION,
        SUM(VALO_AJUS_AL_MINIMO)
AS VALO_AJUS_AL_MINIMO,
        SUM(VALO_BONO_PRODUCCION)
AS VALO_BONO_PRODUCCION,
        SUM(VALO_TOTA_DEVENGADO)
AS VALO_TOTA_DEVENGADO
    FROM CON_PCP_CONT_NOVE_DIAR_PAGO_RA(:PE_FECH_INICIAL, :PE_FECH_FINAL)
    GROUP BY CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,
        CONS_EMPRESA, NOMB_EMPRESA, CONS_AREA, NOMB_AREA,
        CONS_PLANTA, NOMB_PLANTA, CONS_PLAN_LINEA,
        NOMB_PLAN_LINEA, CONS_LINE_SECCION, NOMB_LINE_SECCION, CONS_TURNO,
        CODI_TURNO, TIPO_TURNO
    INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO,
         :CONS_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,
         :NOMB_AREA, :CONS_PLANTA, :NOMB_PLANTA,
         :CONS_PLAN_LINEA, :NOMB_PLAN_LINEA, :CONS_LINE_SECCION,
         :NOMB_LINE_SECCION, :CONS_TURNO, :CODI_TURNO,
         :TIPO_TURNO, 
             :MINU_CONTRATADOS, 
             :MINU_AUSENTISMOS,
             :MINU_EXTRAS, 
             :MINU_PRESENCIALES, 
             :MINU_IMPRODUCTIVOS,
             :MINU_TRABAJADOS,
             :MINU_TIQU_CORTE,
             :MINU_TIQU_FABRICACION,
             :MINU_ABONADOS,
             :MINU_OBTENIDOS,
             :INDI_1,
             :INDI_2,
             :INDI_3,
             :VALO_MINI_GARANTIZADO,
             :VALO_GANA_PRODUCCION,
             :VALO_AJUS_AL_MINIMO,
             :VALO_BONO_PRODUCCION,
             :VALO_TOTA_DEVENGADO
  DO 
    SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_PAGO_RANG_RE (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    MINU_CONTRATADOS INTEGER,
    MINU_AUSENTISMOS INTEGER,
    MINU_EXTRAS INTEGER,
    MINU_PRESENCIALES INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    MINU_TRABAJADOS INTEGER,
    MINU_TIQU_CORTE NUMERIC(15, 5),
    MINU_TIQU_FABRICACION NUMERIC(15, 5),
    MINU_ABONADOS NUMERIC(15, 5),
    MINU_OBTENIDOS NUMERIC(15, 5),
    INDI_1 NUMERIC(15, 5),
    INDI_2 NUMERIC(15, 5),
    INDI_3 NUMERIC(15, 5),
    VALO_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_GANA_PRODUCCION NUMERIC(15, 5),
    VALO_AJUS_AL_MINIMO NUMERIC(15, 5),
    VALO_BONO_PRODUCCION NUMERIC(15, 5),
    VALO_TOTA_DEVENGADO NUMERIC(15, 5))
AS 

BEGIN

  FOR SELECT CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO,
            SUM(MINU_CONTRATADOS)
AS MINU_CONTRATADOS,
            SUM(MINU_AUSENTISMOS)
AS MINU_AUSENTISMOS,
            SUM(MINU_EXTRAS)
AS MINU_EXTRAS,
            SUM(MINU_PRESENCIALES)
AS MINU_PRESENCIALES,
            SUM(MINU_IMPRODUCTIVOS)
AS MINU_IMPRODUCTIVOS,
            SUM(MINU_TRABAJADOS)
AS MINU_TRABAJADOS,
            SUM(MINU_TIQU_CORTE)
AS MINU_TIQU_CORTE,
            SUM(MINU_TIQU_FABRICACION)
AS MINU_TIQU_FABRICACION,
            SUM(MINU_ABONADOS)
AS MINU_ABONADOS,
            SUM(MINU_OBTENIDOS)
AS MINU_OBTENIDOS,
            AVG(INDI_1)
AS INDI_1,
            AVG(INDI_2)
AS INDI_2,
            AVG(INDI_3)
AS INDI_3,
            SUM(VALO_MINI_GARANTIZADO)
AS VALO_MINI_GARANTIZADO,
            SUM(VALO_GANA_PRODUCCION)
AS VALO_GANA_PRODUCCION,
            SUM(VALO_AJUS_AL_MINIMO)
AS VALO_AJUS_AL_MINIMO,
            SUM(VALO_BONO_PRODUCCION)
AS VALO_BONO_PRODUCCION,
            SUM(VALO_TOTA_DEVENGADO)
AS VALO_TOTA_DEVENGADO
    FROM CON_PCP_CONT_NOVE_DIAR_PAGO_RA(:PE_FECH_INICIAL, :PE_FECH_FINAL)
    GROUP BY CONS_PERSONAL, CODI_PERSONAL, NOMB_COMPLETO
    INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO,
             :MINU_CONTRATADOS,
             :MINU_AUSENTISMOS,
             :MINU_EXTRAS,
             :MINU_PRESENCIALES,
             :MINU_IMPRODUCTIVOS,
             :MINU_TRABAJADOS,
             :MINU_TIQU_CORTE,
             :MINU_TIQU_FABRICACION,
             :MINU_ABONADOS,
             :MINU_OBTENIDOS,
             :INDI_1,
             :INDI_2,
             :INDI_3,
             :VALO_MINI_GARANTIZADO,
             :VALO_GANA_PRODUCCION,
             :VALO_AJUS_AL_MINIMO,
             :VALO_BONO_PRODUCCION,
             :VALO_TOTA_DEVENGADO
  DO 
    SUSPEND;

END ^

ALTER PROCEDURE CON_PCP_CONT_NOVE_VALO_HORA_UN (
    PE_CONS_PERSONAL INTEGER,
    PE_FECHA TIMESTAMP,
    PE_CONS_VALO_HORA INTEGER)
RETURNS (
	VALO_HORA NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_DIAS_CALC_PROMEDIOS INTEGER;
DECLARE VARIABLE VAR_FECH_INICIO DATE;
DECLARE VARIABLE VAR_FECH_FIN DATE;
DECLARE VARIABLE VAR_TRABAJADO NUMERIC (15,5);
DECLARE VARIABLE VAR_GANADO NUMERIC (15,5);
DECLARE VARIABLE VAR_CONS_LINE_SECCION INTEGER;

begin

    /*  -- -- -- --  PREPARACION DE VARIABLES -- -- -- -- -- -- -- -- --  */
    /*  INICIALIZAR VARIABLES  */
    VALO_HORA = 0;
    VAR_FECH_FIN = :PE_FECHA - 1; /*  PARA QUE EXCLUYA EL DIA DEL CALCULO  */

    /*  CALCULAR EL NÚMERO DE DIAS PARA EL PROMEDIO  */
    SELECT DIAS_CALC_PROMEDIOS
    FROM CON_PCP_FORM_PAGO_DIAS_CALC_PR
    INTO :VAR_DIAS_CALC_PROMEDIOS;

    /*  CALCULAR LA FECHA INICIAL  */
    VAR_FECH_INICIO = :VAR_FECH_FIN - :VAR_DIAS_CALC_PROMEDIOS;

    /*  -- -- -- -- -- -- EVALUAR LOS CASOS DE PE_CONS_VALO_HORA -- -- -- -- -- -- -- -- -- -- -- - */

    /*  3 - Valor mínimo garantizado individual  */

    IF (:PE_CONS_VALO_HORA  = 3) THEN BEGIN

        SELECT VALO_HORA_MINI_GARANTIZADO
        FROM CON_PCP_FORM_PAGO_PERS_FECH_UN(:PE_FECHA, :PE_CONS_PERSONAL )
        INTO :VALO_HORA;

    END
    ELSE /*  4 - Valor hora producción individual */

    IF (:PE_CONS_VALO_HORA  = 4) THEN BEGIN

        SELECT VALO_HORA_PRODUCCION
        FROM CON_PCP_FORM_PAGO_PERS_FECH_UN(:PE_FECHA, :PE_CONS_PERSONAL )
        INTO :VALO_HORA;
    END
    ELSE /*  5 - Valor promedio individual (en est⯤ar) */
    IF (:PE_CONS_VALO_HORA  = 5) THEN BEGIN

        SELECT SUM(PCP_CONT_NOVE_PAGO.MINU_TRAB_ESTANDAR),
               SUM(PCP_CONT_NOVE_PAGO.VALO_GANA_ESTANDAR + PCP_CONT_NOVE_PAGO.VALO_AJUS_AL_MINI_ESTANDAR)
        FROM PCP_CONT_NOVE_DIARIAS
           INNER JOIN PCP_CONT_NOVE_PAGO ON (PCP_CONT_NOVE_DIARIAS.CONS_CONT_NOVE_DIARIA = PCP_CONT_NOVE_PAGO.CONS_CONT_NOVE_DIARIA)
        WHERE ((PCP_CONT_NOVE_DIARIAS.CONS_PERSONAL = :PE_CONS_PERSONAL ) AND 
                (PCP_CONT_NOVE_DIARIAS.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN))
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END
    ELSE /*  6 - Valor promedio individual (fuera de estándar) */
    IF (:PE_CONS_VALO_HORA  = 6) THEN BEGIN
        SELECT SUM(P.MINU_TRAB_NO_ESTANDAR),
               SUM(P.VALO_GANA_NO_ESTANDAR + P.VALO_AJUS_AL_MINI_NO_ESTANDAR)
        FROM PCP_CONT_NOVE_DIARIAS N
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = P.CONS_CONT_NOVE_DIARIA)
        WHERE ((N.CONS_PERSONAL = :PE_CONS_PERSONAL ) AND 
                (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN))
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END
    ELSE /*  7 - Valor promedio individual (total) */

    IF (:PE_CONS_VALO_HORA  = 7) THEN BEGIN

        SELECT SUM(MINU_EXTR_ESTANDAR + MINU_EXTR_NO_ESTANDAR + MINU_TRAB_ESTANDAR + MINU_TRAB_NO_ESTANDAR),
               SUM(VALO_BONO_HORA_EXTRAS + VALO_GANA_NO_ESTANDAR + VALO_AJUS_AL_MINI_ESTANDAR +
                   VALO_GANA_NO_ESTANDAR + VALO_AJUS_AL_MINI_NO_ESTANDAR + VALO_BONO_PRODUCCION + VALO_BONO_CURVA)
        FROM PCP_CONT_NOVE_DIARIAS N
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = P.CONS_CONT_NOVE_DIARIA)
        WHERE ((N.CONS_PERSONAL = :PE_CONS_PERSONAL ) AND 
                (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN))
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END

    /*  SI SON PROMEDIOS GRUPALES, BUSCAR LA SECCION DEL OPERARIO  */
    IF (:PE_CONS_VALO_HORA IN (8,9,10)) THEN

         SELECT CONS_LINE_SECCION

         FROM CON_GLO_PERS_UBIC_FECH_UNIDAD(:PE_CONS_PERSONAL, :PE_FECHA)

         INTO :VAR_CONS_LINE_SECCION;

    ELSE VAR_CONS_LINE_SECCION = 0;

    /*  8 - Valor promedio grupal (en est⯤ar) */

    IF (:PE_CONS_VALO_HORA  = 8) THEN BEGIN

        SELECT SUM(PCP_CONT_NOVE_PAGO.MINU_TRAB_ESTANDAR),
               SUM(PCP_CONT_NOVE_PAGO.VALO_GANA_ESTANDAR + PCP_CONT_NOVE_PAGO.VALO_AJUS_AL_MINI_ESTANDAR)
        FROM PCP_CONT_NOVE_DIARIAS N 
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = P.CONS_CONT_NOVE_DIARIA)
        WHERE ((N.CONS_LINE_SECCION = :VAR_CONS_LINE_SECCION ) AND 
                (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN))
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END

    /*  9 - Valor promedio grupal (fuera de estándar) */
    IF (:PE_CONS_VALO_HORA  = 9) THEN BEGIN

        SELECT SUM(N.MINU_TRAB_NO_ESTANDAR),
               SUM(N.VALO_GANA_NO_ESTANDAR + N.VALO_AJUS_AL_MINI_NO_ESTANDAR)
        FROM PCP_CONT_NOVE_DIARIAS N
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = N.CONS_CONT_NOVE_DIARIA)
        WHERE ((N.CONS_LINE_SECCION = :VAR_CONS_LINE_SECCION) AND 
                (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN))
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END
    ELSE /*  10 - Valor promedio grupal (total) */
    IF (:PE_CONS_VALO_HORA  = 10) THEN BEGIN
        SELECT SUM(MINU_EXTR_ESTANDAR + MINU_EXTR_NO_ESTANDAR + MINU_TRAB_ESTANDAR + MINU_TRAB_NO_ESTANDAR),
               SUM(VALO_BONO_HORA_EXTRAS + VALO_GANA_NO_ESTANDAR + VALO_AJUS_AL_MINI_ESTANDAR +
                   VALO_GANA_NO_ESTANDAR + VALO_AJUS_AL_MINI_NO_ESTANDAR + VALO_BONO_PRODUCCION + VALO_BONO_CURVA)
        FROM PCP_CONT_NOVE_DIARIAS N
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = P.CONS_CONT_NOVE_DIARIA)
        WHERE ((N.CONS_LINE_SECCION = :VAR_CONS_LINE_SECCION) AND 
                (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN))
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END
    /*  11 - Valor promedio general (en est⯤ar) */
    IF (:PE_CONS_VALO_HORA  = 11) THEN BEGIN

        SELECT SUM(PCP_CONT_NOVE_PAGO.MINU_TRAB_ESTANDAR),
               SUM(PCP_CONT_NOVE_PAGO.VALO_GANA_ESTANDAR + PCP_CONT_NOVE_PAGO.VALO_AJUS_AL_MINI_ESTANDAR)
        FROM PCP_CONT_NOVE_DIARIAS N
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = P.CONS_CONT_NOVE_DIARIA)
        WHERE (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN)
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END

    /*  12 - Valor promedio general (fuera de est⯤ar) */
    IF (:PE_CONS_VALO_HORA  = 12) THEN BEGIN

        SELECT SUM(N.MINU_TRAB_NO_ESTANDAR),
               SUM(N.VALO_GANA_NO_ESTANDAR + N.VALO_AJUS_AL_MINI_NO_ESTANDAR)
        FROM PCP_CONT_NOVE_DIARIAS N
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = P.CONS_CONT_NOVE_DIARIA)
        WHERE (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN)
        INTO :VAR_TRABAJADO, :VAR_GANADO;

        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END
    ELSE /*  13 - Valor promedio general (total) */
    IF (:PE_CONS_VALO_HORA  = 13) THEN BEGIN
        SELECT SUM(MINU_EXTR_ESTANDAR + MINU_EXTR_NO_ESTANDAR + MINU_TRAB_ESTANDAR + MINU_TRAB_NO_ESTANDAR),
               SUM(VALO_BONO_HORA_EXTRAS + VALO_GANA_NO_ESTANDAR + VALO_AJUS_AL_MINI_ESTANDAR +
                   VALO_GANA_NO_ESTANDAR + VALO_AJUS_AL_MINI_NO_ESTANDAR + VALO_BONO_PRODUCCION + VALO_BONO_CURVA)
        FROM PCP_CONT_NOVE_DIARIAS N
           INNER JOIN PCP_CONT_NOVE_PAGO P ON (N.CONS_CONT_NOVE_DIARIA = P.CONS_CONT_NOVE_DIARIA)
        WHERE (N.FECH_LECTURA BETWEEN :VAR_FECH_INICIO AND :VAR_FECH_FIN)
        INTO :VAR_TRABAJADO, :VAR_GANADO;
        IF (:VAR_TRABAJADO IS NULL) THEN VAR_TRABAJADO = 0;

        IF (:VAR_GANADO IS NULL) THEN VAR_GANADO = 0;

        IF (:VAR_TRABAJADO > 0) THEN
            VALO_HORA = (:VAR_GANADO / (VAR_TRABAJADO / 60));
        ELSE
            VALO_HORA = 0;
    END

    /*  VALIDAR EL VALOR HORA  */
    IF (:VALO_HORA IS NULL) THEN
       VALO_HORA = 0;

    SUSPEND;
end ^

ALTER PROCEDURE CON_PCP_CONT_REPO_PAGO_BRUTO (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_EN_HORAS INTEGER)
RETURNS (
	
    FECHA TIMESTAMP,
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    REPORTA INTEGER,
    TIEM_TRAB_ESTANDAR NUMERIC(15, 5),
    TIEM_TRAB_NO_ESTANDAR NUMERIC(15, 5),
    TIEM_TRAB_TOTAL NUMERIC(15, 5),
    TIEM_PROD_ESTANDAR NUMERIC(15, 5),
    TIEM_PROD_NO_ESTANDAR NUMERIC(15, 5),
    TIEM_PROD_TOTAL NUMERIC(15, 5),
    EFIC_ESTANDAR NUMERIC(15, 5),
    EFIC_NO_ESTANDAR NUMERIC(15, 5),
    EFIC_TOTAL NUMERIC(15, 5),
    VALO_GANA_PROD_ESTANDAR NUMERIC(15, 5),
    VALO_GANA_PROD_NO_ESTANDAR NUMERIC(15, 5),
    VALO_GANA_PROD_TOTAL NUMERIC(15, 5),
    VALO_AJUS_MINI_ESTANDAR NUMERIC(15, 5),
    VALO_AJUS_MINI_NO_ESTANDAR NUMERIC(15, 5),
    VALO_AJUS_MINI_TOTAL NUMERIC(15, 5),
    VALO_BONO_PROD_ESTANDAR NUMERIC(15, 5),
    VALO_BONO_PROD_NO_ESTANDAR NUMERIC(15, 5),
    VALO_BONO_PROD_TOTAL NUMERIC(15, 5),
    TIEM_EXTR_ESTANDAR NUMERIC(15, 5),
    TIEM_EXTR_NO_ESTANDAR NUMERIC(15, 5),
    TIEM_EXTR_TOTAL NUMERIC(15, 5),
    VALO_BONO_EXTR_ESTANDAR NUMERIC(15, 5),
    VALO_BONO_EXTR_NO_ESTANDAR NUMERIC(15, 5),
    VALO_BONO_EXTR_TOTAL NUMERIC(15, 5),
    VALO_DEVE_ESTANDAR NUMERIC(15, 5),
    VALO_DEVE_NO_ESTANDAR NUMERIC(15, 5),
    VALO_DEVE_TOTAL NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_FECHA DATE;
DECLARE VARIABLE VAR_CONS_CONT_NOVE_DIARIA INTEGER;
DECLARE VARIABLE VAR_DIVI_HORAS INTEGER;

begin

   /*  INICIALIZAR EL DIVISOR DE HORAS DE ACUERDO CON LA SOLICITUD  */
   IF (:PE_EN_HORAS = 1) THEN
       VAR_DIVI_HORAS = 60;
   ELSE
       VAR_DIVI_HORAS = 1;

   /*  ASIGNAR LA FECHA INICIAL  */
   VAR_FECHA = :PE_FECH_INICIAL;

   /*  RECORRER LAS FECHAS  */
   WHILE (:VAR_FECHA <= :PE_FECH_FINAL) DO BEGIN
       FECHA = :VAR_FECHA;

       /*  BUSCAR EL PERSONAL ACTIVO  */
       CONS_EMPRESA = NULL;
       NOMB_EMPRESA = NULL;
       CONS_PLANTA = NULL;
       NOMB_PLANTA = NULL;
       CONS_PLAN_LINEA = NULL;
       NOMB_PLAN_LINEA = NULL;
       CONS_LINE_SECCION = NULL;
       NOMB_LINE_SECCION = NULL;
       
       FOR SELECT PERS.CONS_PERSONAL, PERS.CODI_PERSONAL,
           PERS.NOMB_COMPLETO, PERS.CONS_EMPRESA, PERS.CONS_PLANTA,
           PERS.CONS_PLAN_LINEA, PERS.CONS_LINE_SECCION
           FROM CON_GLO_PERS_ACTIVO(:VAR_FECHA) PERS
           WHERE PERS.CONS_COST_GRUPO IN
              (SELECT CONS_COST_GRUPO FROM VIS_SIS_COST_GRUP_REPORTA
              ORDER BY CONS_COST_GRUPO)
       INTO :CONS_PERSONAL, :CODI_PERSONAL, :NOMB_COMPLETO,
          :CONS_EMPRESA, :CONS_PLANTA, :CONS_PLAN_LINEA, :CONS_LINE_SECCION
       DO BEGIN
           /*  LIMPIAR EL REGISTRO  */
           REPORTA = NULL;
           VAR_CONS_CONT_NOVE_DIARIA = NULL;
           TIEM_TRAB_ESTANDAR = 0;
           TIEM_TRAB_NO_ESTANDAR = 0;
           TIEM_TRAB_TOTAL = 0;
           TIEM_PROD_ESTANDAR = 0;
           TIEM_PROD_NO_ESTANDAR = 0;
           TIEM_PROD_TOTAL = 0;
           EFIC_ESTANDAR = 0;
           EFIC_NO_ESTANDAR = 0;
           EFIC_TOTAL = 0;
           VALO_GANA_PROD_ESTANDAR = 0;
           VALO_GANA_PROD_NO_ESTANDAR = 0;
           VALO_GANA_PROD_TOTAL = 0;
           VALO_AJUS_MINI_ESTANDAR = 0;
           VALO_AJUS_MINI_NO_ESTANDAR = 0;
           VALO_AJUS_MINI_TOTAL = 0;
           VALO_BONO_PROD_ESTANDAR = 0;
           VALO_BONO_PROD_NO_ESTANDAR = 0;
           VALO_BONO_PROD_TOTAL = 0;
           TIEM_EXTR_ESTANDAR = 0;
           TIEM_EXTR_NO_ESTANDAR = 0;
           TIEM_EXTR_TOTAL = 0;
           VALO_BONO_EXTR_ESTANDAR = 0;
           VALO_BONO_EXTR_NO_ESTANDAR = 0;
           VALO_BONO_EXTR_TOTAL = 0;
           VALO_DEVE_ESTANDAR = 0;
           VALO_DEVE_NO_ESTANDAR = 0;
           VALO_DEVE_TOTAL = 0;

           /*  BUSCAR LOS DATOS DE UBICACION  */
           SELECT NOMB_EMPRESA
           FROM GLO_EMPRESAS
           WHERE CONS_EMPRESA = :CONS_EMPRESA
           INTO :NOMB_EMPRESA;

           SELECT NOMB_PLANTA
           FROM GLO_PLANTAS
           WHERE CONS_PLANTA = :CONS_PLANTA
           INTO :NOMB_PLANTA;

           SELECT NOMB_LINEA
           FROM VIS_GLO_PLAN_LINEAS
           WHERE CONS_PLAN_LINEA = :CONS_PLAN_LINEA
           INTO :NOMB_PLAN_LINEA;

           SELECT NOMB_SECCION
           FROM VIS_GLO_LINE_SECCIONES
           WHERE CONS_LINE_SECCION = :CONS_LINE_SECCION
           INTO :NOMB_LINE_SECCION;

           /*  BUSCAR EL CONSECUTIVO DE LA NOVEDAD DEL OPERARIO ESTE DIA  */
           SELECT NOVE.CONS_CONT_NOVE_DIARIA
           FROM PCP_CONT_NOVE_DIARIAS NOVE
           WHERE NOVE.CONS_PERSONAL = :CONS_PERSONAL AND NOVE.FECH_LECTURA = :VAR_FECHA
           INTO :VAR_CONS_CONT_NOVE_DIARIA;

           /*  SI NO REPORTO, NO HACER NADA  */
           IF (:VAR_CONS_CONT_NOVE_DIARIA IS NULL) THEN
               REPORTA = -1;
           /*  SI REPORTӬ GENERAR LOS INDICADORES  */
           ELSE
           BEGIN
               REPORTA = 1;

               SELECT
                     PAGO.MINU_TRAB_ESTANDAR / :VAR_DIVI_HORAS,
                     PAGO.MINU_TRAB_NO_ESTANDAR / :VAR_DIVI_HORAS,
                     PAGO.MINU_PROD_ESTANDAR / :VAR_DIVI_HORAS,
                     PAGO.MINU_PROD_NO_ESTANDAR / :VAR_DIVI_HORAS,
                     PAGO.VALO_GANA_ESTANDAR,
                     PAGO.VALO_GANA_NO_ESTANDAR,
                     PAGO.VALO_AJUS_AL_MINI_ESTANDAR,
                     PAGO.VALO_AJUS_AL_MINI_NO_ESTANDAR,
                     PAGO.VALO_BONO_PRODUCCION,
                     0,
                     PAGO.MINU_EXTR_ESTANDAR / :VAR_DIVI_HORAS,
                     PAGO.MINU_EXTR_NO_ESTANDAR / :VAR_DIVI_HORAS,
                     PAGO.VALO_BONO_HORA_EXTRAS,
                     0
                     
               FROM PCP_CONT_NOVE_PAGO PAGO
               WHERE PAGO.CONS_CONT_NOVE_DIARIA = :VAR_CONS_CONT_NOVE_DIARIA
               INTO
                     :TIEM_TRAB_ESTANDAR,
                     :TIEM_TRAB_NO_ESTANDAR,
                     :TIEM_PROD_ESTANDAR,
                     :TIEM_PROD_NO_ESTANDAR,
                     :VALO_GANA_PROD_ESTANDAR,
                     :VALO_GANA_PROD_NO_ESTANDAR,
                     :VALO_AJUS_MINI_ESTANDAR,
                     :VALO_AJUS_MINI_NO_ESTANDAR,
                     :VALO_BONO_PROD_ESTANDAR,
                     :VALO_BONO_PROD_NO_ESTANDAR,
                     :TIEM_EXTR_ESTANDAR ,
                     :TIEM_EXTR_NO_ESTANDAR,
                     :VALO_BONO_EXTR_ESTANDAR,
                     :VALO_BONO_EXTR_NO_ESTANDAR;

               /*  VALIDAR  */
               IF (:TIEM_TRAB_ESTANDAR IS NULL) THEN TIEM_TRAB_ESTANDAR = 0;

               IF (:TIEM_TRAB_NO_ESTANDAR IS NULL) THEN TIEM_TRAB_NO_ESTANDAR = 0;

               IF (:TIEM_PROD_ESTANDAR IS NULL) THEN TIEM_PROD_ESTANDAR = 0;

               IF (:TIEM_PROD_NO_ESTANDAR IS NULL) THEN TIEM_PROD_NO_ESTANDAR = 0;

               IF (:VALO_GANA_PROD_ESTANDAR IS NULL) THEN VALO_GANA_PROD_ESTANDAR = 0;

               IF (:VALO_GANA_PROD_NO_ESTANDAR IS NULL) THEN VALO_GANA_PROD_NO_ESTANDAR = 0;

               IF (:VALO_AJUS_MINI_ESTANDAR IS NULL) THEN VALO_AJUS_MINI_ESTANDAR = 0;

               IF (:VALO_AJUS_MINI_NO_ESTANDAR IS NULL) THEN VALO_AJUS_MINI_NO_ESTANDAR = 0;

               IF (:VALO_BONO_PROD_ESTANDAR IS NULL) THEN VALO_BONO_PROD_ESTANDAR = 0;

               IF (:VALO_BONO_PROD_NO_ESTANDAR IS NULL) THEN VALO_BONO_PROD_NO_ESTANDAR = 0;

               IF (:TIEM_EXTR_ESTANDAR IS NULL) THEN TIEM_EXTR_ESTANDAR = 0;

               IF (:TIEM_EXTR_NO_ESTANDAR IS NULL) THEN TIEM_EXTR_NO_ESTANDAR = 0;

               IF (:VALO_BONO_EXTR_ESTANDAR IS NULL) THEN VALO_BONO_EXTR_ESTANDAR = 0;

               IF (:VALO_BONO_EXTR_NO_ESTANDAR IS NULL) THEN VALO_BONO_EXTR_NO_ESTANDAR = 0;

               

               /*  CAMPOS DE SUMA  */
               TIEM_TRAB_TOTAL = :TIEM_TRAB_ESTANDAR + :TIEM_TRAB_NO_ESTANDAR;

               TIEM_PROD_TOTAL = :TIEM_PROD_ESTANDAR + :TIEM_PROD_NO_ESTANDAR;

               VALO_GANA_PROD_TOTAL = :VALO_GANA_PROD_ESTANDAR + :VALO_GANA_PROD_NO_ESTANDAR;

               VALO_AJUS_MINI_TOTAL = :VALO_AJUS_MINI_ESTANDAR + :VALO_AJUS_MINI_NO_ESTANDAR;

               VALO_BONO_PROD_TOTAL = :VALO_BONO_PROD_ESTANDAR + :VALO_BONO_PROD_NO_ESTANDAR;

               TIEM_EXTR_TOTAL = :TIEM_EXTR_ESTANDAR + :TIEM_EXTR_NO_ESTANDAR;

               VALO_BONO_EXTR_TOTAL = :VALO_BONO_EXTR_ESTANDAR + :VALO_BONO_EXTR_NO_ESTANDAR;

               VALO_DEVE_ESTANDAR = :VALO_GANA_PROD_ESTANDAR + :VALO_AJUS_MINI_ESTANDAR + :VALO_BONO_PROD_ESTANDAR + :VALO_BONO_EXTR_ESTANDAR;

               VALO_DEVE_NO_ESTANDAR = :VALO_GANA_PROD_NO_ESTANDAR + :VALO_AJUS_MINI_NO_ESTANDAR + :VALO_BONO_PROD_NO_ESTANDAR + :VALO_BONO_EXTR_NO_ESTANDAR;

               VALO_DEVE_TOTAL = :VALO_DEVE_ESTANDAR + :VALO_DEVE_NO_ESTANDAR;



               /*  CALCULOS  */
               IF (:TIEM_TRAB_ESTANDAR > 0) THEN
                   EFIC_ESTANDAR = (:TIEM_PROD_ESTANDAR / :TIEM_TRAB_ESTANDAR) * 100;
               ELSE
                   EFIC_ESTANDAR = 0;

               IF (:TIEM_TRAB_NO_ESTANDAR > 0) THEN
                   EFIC_NO_ESTANDAR = (:TIEM_PROD_NO_ESTANDAR / :TIEM_TRAB_NO_ESTANDAR) * 100;
               ELSE
                   EFIC_NO_ESTANDAR = 0;

               IF (:TIEM_TRAB_ESTANDAR + :TIEM_TRAB_NO_ESTANDAR > 0) THEN
                   EFIC_TOTAL = ((:TIEM_PROD_ESTANDAR + :TIEM_PROD_NO_ESTANDAR) / (:TIEM_TRAB_ESTANDAR + :TIEM_TRAB_NO_ESTANDAR)) * 100;
               ELSE
                   EFIC_TOTAL = 0;
           END

           SUSPEND;
       END

       /*  SIGUIENTE DIA  */
       VAR_FECHA = :VAR_FECHA + 1;
   END
end ^

ALTER PROCEDURE CON_PCP_FORM_PAGO_BONOS RETURNS (
	
    CONS_FORM_PAGO_BONO INTEGER,
    CODI_FORM_PAGO_BONO VARCHAR(12) CHARACTER SET NONE,
    NOMB_FORM_PAGO_BONO VARCHAR(60) CHARACTER SET NONE,
    INDICADOR INTEGER,
    NOMB_INDICADOR VARCHAR(60) CHARACTER SET NONE,
    CONS_PERI_PAGO INTEGER,
    NOMB_PERI_PAGO VARCHAR(60) CHARACTER SET NONE,
    ES_PORCENTUAL INTEGER,
    VALO_BONIFICACION NUMERIC(15, 5),
    META_EFICIENCIA NUMERIC(15, 5),
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_NOMB_INDI_1 VARCHAR(60);
DECLARE VARIABLE VAR_NOMB_INDI_2 VARCHAR(60);
DECLARE VARIABLE VAR_NOMB_INDI_3 VARCHAR(60);

begin
     /*  BUSCAR LOS NOMBRES DE LOS INDICADORES DE PRODUCCION  */
     SELECT OPCI.CONT_PROD_NOMB_INDI_1, OPCI.CONT_PROD_NOMB_INDI_2, OPCI.CONT_PROD_NOMB_INDI_3
     FROM PCP_OPCIONES OPCI
     INTO :VAR_NOMB_INDI_1, :VAR_NOMB_INDI_2, :VAR_NOMB_INDI_3;

     /*  SELECCIONAR LOS TIPOS DE BONOS ACTIVOS  */
     FOR SELECT CONS_FORM_PAGO_BONO, CODI_FORM_PAGO_BONO, NOMB_FORM_PAGO_BONO, INDICADOR,
         CONS_PERI_PAGO, ES_PORCENTUAL, VALO_BONIFICACION, META_EFICIENCIA,
         FECH_SISTEMA, USUA_SISTEMA
     FROM PCP_FORM_PAGO_BONOS
     ORDER BY CONS_FORM_PAGO_BONO
     INTO :CONS_FORM_PAGO_BONO, :CODI_FORM_PAGO_BONO, :NOMB_FORM_PAGO_BONO, :INDICADOR, 
            :CONS_PERI_PAGO, :ES_PORCENTUAL, :VALO_BONIFICACION, :META_EFICIENCIA, 
            :FECH_SISTEMA, :USUA_SISTEMA

     DO BEGIN
        /*  NOMBRE DEL INDICADOR  */
        NOMB_INDICADOR = NULL;

        IF (:INDICADOR = 1) THEN
           NOMB_INDICADOR = :VAR_NOMB_INDI_1;
        ELSE
        IF (:INDICADOR = 2) THEN
           NOMB_INDICADOR = :VAR_NOMB_INDI_2;
        ELSE
        IF (:INDICADOR = 3) THEN
           NOMB_INDICADOR = :VAR_NOMB_INDI_3;

        /*  BUSCAR EL NOMBRE DEL PERΏDO DE PAGO  */
        SELECT NOMB_PERI_PAGO
        FROM SIS_PERI_PAGO
        WHERE CONS_PERI_PAGO = :CONS_PERI_PAGO
        INTO :NOMB_PERI_PAGO;

        SUSPEND;
     END
end ^

ALTER PROCEDURE CON_PCP_FORM_PAGO_BONO_PERSONAL (
    PE_CONS_PERSONAL INTEGER,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
RETURNS (
	
    CONS_FORM_PAGO_BONO_PERSONAL INTEGER,
    FECH_INICIAL TIMESTAMP,
    CONS_FORM_PAGO_BONO INTEGER,
    CODI_FORM_PAGO_BONO VARCHAR(12) CHARACTER SET NONE,
    NOMB_FORM_PAGO_BONO VARCHAR(60) CHARACTER SET NONE,
    INDICADOR INTEGER,
    NOMB_INDICADOR VARCHAR(60) CHARACTER SET NONE,
    ES_PORCENTUAL INTEGER,
    VALO_BONIFICACION NUMERIC(15, 5),
    META_EFICIENCIA NUMERIC(15, 5),
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

declare variable VAR_FECH_ACTUAL date;
declare variable VAR_NOMB_INDI_1 varchar(60);
declare variable VAR_NOMB_INDI_2 varchar(60);
declare variable VAR_NOMB_INDI_3 varchar(60);

begin
  /*  BUSCAR LOS NOMBRES DE LOS INDICADORES DE PRODUCCION  */
  select OPCI.CONT_PROD_NOMB_INDI_1, OPCI.CONT_PROD_NOMB_INDI_2, OPCI.CONT_PROD_NOMB_INDI_3
  from PCP_OPCIONES OPCI
  into :VAR_NOMB_INDI_1, :VAR_NOMB_INDI_2, :VAR_NOMB_INDI_3;

  /*  VALIDAR LAS FECHAS DE ENTRADA  */
  if (:PE_FECH_INICIAL is null) then
      PE_FECH_INICIAL = '01.01.2000';

  if (:PE_FECH_FINAL is null) then
      PE_FECH_FINAL = 'NOW';

  /*  INICIALIZAR LAS VARIABLES  */
  VAR_FECH_ACTUAL = :PE_FECH_INICIAL;

  while (:VAR_FECH_ACTUAL <= :PE_FECH_FINAL) do begin

      /*  LIMPIAR LOS PARAMETROS INICIALES  */
      if (not :FECH_INICIAL is null) then begin
            FECH_INICIAL = null;
            CONS_FORM_PAGO_BONO = null;
            CODI_FORM_PAGO_BONO = null;
            NOMB_FORM_PAGO_BONO = null;
            INDICADOR = null;
            NOMB_INDICADOR = null;
            ES_PORCENTUAL = null;
            VALO_BONIFICACION = null;
            META_EFICIENCIA = null;
      end

      /*  BUSCAR EL SIGUIENTE REGISTRO MAYOR QUE LA FECHA ACTUAL  */
      select first 1 CONS_FORM_PAGO_BONO_PERSONAL, FECH_INICIAL, CONS_FORM_PAGO_BONO,
              INDICADOR, ES_PORCENTUAL, VALO_BONIFICACION,
              META_EFICIENCIA, FECH_SISTEMA, USUA_SISTEMA
      from PCP_FORM_PAGO_BONO_PERSONAL
      where CONS_PERSONAL = :PE_CONS_PERSONAL and 
            FECH_INICIAL >= :VAR_FECH_ACTUAL
      order by FECH_INICIAL
      into :CONS_FORM_PAGO_BONO_PERSONAL, :FECH_INICIAL, :CONS_FORM_PAGO_BONO,
          :INDICADOR, :ES_PORCENTUAL, :VALO_BONIFICACION,
          :META_EFICIENCIA, :FECH_SISTEMA, :USUA_SISTEMA;

      /*  NOMBRE DEL INDICADOR  */
      NOMB_INDICADOR = NULL;

      IF (:INDICADOR = 1) THEN
           NOMB_INDICADOR = :VAR_NOMB_INDI_1;
      ELSE
      IF (:INDICADOR = 2) THEN
           NOMB_INDICADOR = :VAR_NOMB_INDI_2;
      ELSE
      IF (:INDICADOR = 3) THEN
           NOMB_INDICADOR = :VAR_NOMB_INDI_3;

      /*  BUSCAR EL NOMBRE DEL BONO  */
      select NOMB_FORM_PAGO_BONO
      from PCP_FORM_PAGO_BONOS
      where CONS_FORM_PAGO_BONO = :CONS_FORM_PAGO_BONO
      into :NOMB_FORM_PAGO_BONO;

      /*  SI NO EXISTEN REGISTROS, SALIR  */
      if (:FECH_INICIAL is null) then 
         VAR_FECH_ACTUAL = PE_FECH_FINAL + 1;
      /*  SI LA FECHA ES VALIDA, GENERAR EL REGISTRO  */
      else begin

         VAR_FECH_ACTUAL = :FECH_INICIAL + 1;
         suspend;
      end
  end
end ^

ALTER PROCEDURE CON_PCP_FORM_PAGO_DIAS_CALC_PR RETURNS (
	DIAS_CALC_PROMEDIOS INTEGER)
AS 

begin
    SELECT FIRST 1 DIAS_CALC_PROMEDIOS
    FROM PCP_FORM_PAGO_PARAMETROS
    INTO :DIAS_CALC_PROMEDIOS;

    IF (:DIAS_CALC_PROMEDIOS IS NULL) THEN
       DIAS_CALC_PROMEDIOS = 0;

    SUSPEND;
end ^

ALTER PROCEDURE CON_PCP_FORM_PAGO_PERSONAL (
    PE_CONS_PERSONAL INTEGER,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
RETURNS (
	
    CONS_FORM_PAGO_PERSONAL INTEGER,
    FECH_INICIAL TIMESTAMP,
    VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    CONS_SIS_FORM_PAGO INTEGER,
    NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
    PARA_1 VARCHAR(60) CHARACTER SET NONE,
    PARA_2 VARCHAR(60) CHARACTER SET NONE,
    PARA_3 VARCHAR(60) CHARACTER SET NONE,
    CONS_FORM_PAGO_APRENDIZAJE INTEGER,
    CODI_FORM_PAGO_APRENDIZAJE VARCHAR(12) CHARACTER SET NONE,
    NOMB_FORM_PAGO_APRENDIZAJE VARCHAR(60) CHARACTER SET NONE,
    FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
    EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
    CONS_OPER_COSTURA INTEGER,
    CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
    NOMB_OPER_COSTURA VARCHAR(30) CHARACTER SET NONE,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_FECH_ACTUAL DATE;

begin
  /*  VALIDAR LAS FECHAS DE ENTRADA  */
  IF (:PE_FECH_INICIAL IS NULL) THEN
      PE_FECH_INICIAL = '01.01.2000';

  IF (:PE_FECH_FINAL IS NULL) THEN
      PE_FECH_FINAL = 'NOW';

  /*  INICIALIZAR LAS VARIABLES  */
  VAR_FECH_ACTUAL = :PE_FECH_INICIAL;

  WHILE (:VAR_FECH_ACTUAL <= :PE_FECH_FINAL) DO BEGIN

      /*  LIMPIAR LOS PARAMETROS INICIALES  */
      IF (NOT :FECH_INICIAL IS NULL) THEN BEGIN
           FECH_INICIAL = NULL;
           VALO_HORA_MINI_GARANTIZADO = NULL;
           VALO_HORA_PRODUCCION = NULL;
           CONS_SIS_FORM_PAGO = NULL;
           NOMB_SIS_FORM_PAGO = NULL;
           PARA_1 = NULL;
           PARA_2 = NULL;
           PARA_3 = NULL;
           CONS_FORM_PAGO_APRENDIZAJE = NULL;
           CODI_FORM_PAGO_APRENDIZAJE = NULL;
           NOMB_FORM_PAGO_APRENDIZAJE = NULL;
           FECH_FINA_PAGO_APRENDIZAJE = NULL;
           FECH_SISTEMA = NULL;
           USUA_SISTEMA  = NULL;
           EFIC_INIC_APRENDIZAJE = NULL;
           CONS_OPER_COSTURA = NULL;
           CODI_OPER_COSTURA = NULL;
           NOMB_OPER_COSTURA = NULL;
      END

      /*  BUSCAR EL SIGUIENTE REGISTRO MAYOR QUE LA FECHA ACTUAL  */
      SELECT FIRST 1
          CONS_FORM_PAGO_PERSONAL, FECH_INICIAL, VALO_HORA_MINI_GARANTIZADO,
          VALO_HORA_PRODUCCION, CONS_SIS_FORM_PAGO,
          NOMB_SIS_FORM_PAGO, PARA_1, PARA_2, PARA_3,
          CONS_FORM_PAGO_APRENDIZAJE, CODI_FORM_PAGO_APRENDIZAJE,
          NOMB_FORM_PAGO_APRENDIZAJE, FECH_FINA_PAGO_APRENDIZAJE,
          FECH_SISTEMA, USUA_SISTEMA, EFIC_INIC_APRENDIZAJE,
          CONS_OPER_COSTURA, CODI_OPER_COSTURA, NOMB_OPER_COSTURA
      FROM VIS_PCP_FORM_PAGO_PERSONAL
      WHERE CONS_PERSONAL = :PE_CONS_PERSONAL AND 
            FECH_INICIAL >= :VAR_FECH_ACTUAL
      ORDER BY FECH_INICIAL
      INTO :CONS_FORM_PAGO_PERSONAL ,:FECH_INICIAL, :VALO_HORA_MINI_GARANTIZADO,
          :VALO_HORA_PRODUCCION, :CONS_SIS_FORM_PAGO,
          :NOMB_SIS_FORM_PAGO, :PARA_1, :PARA_2, :PARA_3,
          :CONS_FORM_PAGO_APRENDIZAJE, :CODI_FORM_PAGO_APRENDIZAJE,
          :NOMB_FORM_PAGO_APRENDIZAJE, :FECH_FINA_PAGO_APRENDIZAJE,
          :FECH_SISTEMA, :USUA_SISTEMA, :EFIC_INIC_APRENDIZAJE,
          :CONS_OPER_COSTURA, :CODI_OPER_COSTURA, :NOMB_OPER_COSTURA;

      /*  SI NO EXISTEN REGISTROS, SALIR  */
      IF (:FECH_INICIAL IS NULL) THEN BEGIN
         VAR_FECH_ACTUAL = PE_FECH_FINAL + 1;
      END
      /*  SI LA FECHA ES VALIDA, GENERAR EL REGISTRO  */
      ELSE BEGIN

         VAR_FECH_ACTUAL = :FECH_INICIAL + 1;
         SUSPEND;
      END
  END
end ^

ALTER PROCEDURE CON_PCP_FORM_PAGO_PERS_FECHA (
    PE_FECHA TIMESTAMP)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    PRIM_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    SEGU_APELLIDO VARCHAR(30) CHARACTER SET NONE,
    NOMBRES VARCHAR(40) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    CONS_FAMI_MOVIMIENTO INTEGER,
    CONS_ESTADO INTEGER,
    NOMB_ESTADO VARCHAR(60) CHARACTER SET NONE,
    CONS_UBIC_TIPO INTEGER,
    NOMB_UBIC_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_EMPRESA INTEGER,
    NOMB_EMPRESA VARCHAR(60) CHARACTER SET NONE,
    CONS_AREA INTEGER,
    NOMB_AREA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLANTA INTEGER,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    CONS_PLAN_LINEA INTEGER,
    NOMB_PLAN_LINEA VARCHAR(60) CHARACTER SET NONE,
    CONS_LINE_SECCION INTEGER,
    NOMB_LINE_SECCION VARCHAR(60) CHARACTER SET NONE,
    CONS_BODEGA INTEGER,
    NOMB_BODEGA VARCHAR(60) CHARACTER SET NONE,
    OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    CONS_TURNO INTEGER,
    CODI_TURNO VARCHAR(12) CHARACTER SET NONE,
    NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CARGO INTEGER,
    NOMB_PERS_CARGO VARCHAR(60) CHARACTER SET NONE,
    CONS_PERS_CENT_COSTO INTEGER,
    NOMB_PERS_CENT_COSTO VARCHAR(60) CHARACTER SET NONE,
    CONS_COST_GRUPO INTEGER,
    NOMB_COST_GRUPO VARCHAR(60) CHARACTER SET NONE,
    VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    CONS_SIS_FORM_PAGO INTEGER,
    NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
    PARA_1 VARCHAR(60) CHARACTER SET NONE,
    PARA_2 VARCHAR(60) CHARACTER SET NONE,
    PARA_3 VARCHAR(60) CHARACTER SET NONE,
    CONS_FORM_PAGO_APRENDIZAJE INTEGER,
    FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
    EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
    CONS_OPER_COSTURA INTEGER,
    CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
    NOMB_OPER_COSTURA VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
    FOR SELECT CONS_PERSONAL, CODI_PERSONAL,
        PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES, NOMB_COMPLETO,
        CONS_PERS_TIPO_MOVIMIENTO, CONS_FAMI_MOVIMIENTO, CONS_ESTADO, NOMB_ESTADO,
        CONS_UBIC_TIPO, NOMB_UBIC_TIPO, CONS_EMPRESA, NOMB_EMPRESA,
        CONS_AREA, NOMB_AREA, CONS_PLANTA, NOMB_PLANTA,
        CONS_PLAN_LINEA, NOMB_PLAN_LINEA, CONS_LINE_SECCION, NOMB_LINE_SECCION,
        CONS_BODEGA, NOMB_BODEGA, OTRA_UBICACION, CONS_TURNO,
        CODI_TURNO, NOMB_TIPO_TURNO, CONS_PERS_CARGO, NOMB_PERS_CARGO,
        CONS_PERS_CENT_COSTO, NOMB_PERS_CENT_COSTO, CONS_COST_GRUPO, NOMB_COST_GRUPO
    FROM CON_GLO_PERS_UBIC_ACTIVO(:PE_FECHA)
    INTO :CONS_PERSONAL, :CODI_PERSONAL, :PRIM_APELLIDO,
        :SEGU_APELLIDO, :NOMBRES, :NOMB_COMPLETO, :CONS_PERS_TIPO_MOVIMIENTO,
        :CONS_FAMI_MOVIMIENTO, :CONS_ESTADO, :NOMB_ESTADO, :CONS_UBIC_TIPO,
        :NOMB_UBIC_TIPO, :CONS_EMPRESA, :NOMB_EMPRESA, :CONS_AREA,
        :NOMB_AREA, :CONS_PLANTA, :NOMB_PLANTA, :CONS_PLAN_LINEA,
        :NOMB_PLAN_LINEA, :CONS_LINE_SECCION, :NOMB_LINE_SECCION, :CONS_BODEGA,
        :NOMB_BODEGA, :OTRA_UBICACION, :CONS_TURNO, :CODI_TURNO,
        :NOMB_TIPO_TURNO, :CONS_PERS_CARGO, :NOMB_PERS_CARGO, :CONS_PERS_CENT_COSTO,
        :NOMB_PERS_CENT_COSTO, :CONS_COST_GRUPO, :NOMB_COST_GRUPO

    DO BEGIN
           /*  LIMPIAR EL REGISTRO  */
           VALO_HORA_MINI_GARANTIZADO = NULL;
           VALO_HORA_PRODUCCION = NULL;
           CONS_SIS_FORM_PAGO = NULL;
           NOMB_SIS_FORM_PAGO = NULL;
           PARA_1 = NULL;
           PARA_2 = NULL;
           PARA_3 = NULL;
           CONS_FORM_PAGO_APRENDIZAJE = NULL;
           FECH_FINA_PAGO_APRENDIZAJE = NULL;
           EFIC_INIC_APRENDIZAJE = NULL;
           CONS_OPER_COSTURA = NULL;
           CODI_OPER_COSTURA = NULL;
           NOMB_OPER_COSTURA = NULL;

           /*  BUSCAR LA FORMA DE PAGO ACTIVA  */
           SELECT FIRST 1
               VALO_HORA_MINI_GARANTIZADO, VALO_HORA_PRODUCCION,
               CONS_SIS_FORM_PAGO, PARA_1, PARA_2, PARA_3,
               CONS_FORM_PAGO_APRENDIZAJE, FECH_FINA_PAGO_APRENDIZAJE,
               EFIC_INIC_APRENDIZAJE, CONS_OPER_COSTURA
           FROM PCP_FORM_PAGO_PERSONAL
           WHERE CONS_PERSONAL = :CONS_PERSONAL AND 
                FECH_INICIAL <= :PE_FECHA
           ORDER BY FECH_INICIAL DESC
           INTO :VALO_HORA_MINI_GARANTIZADO, :VALO_HORA_PRODUCCION,
           :CONS_SIS_FORM_PAGO, :PARA_1, :PARA_2, :PARA_3,
           :CONS_FORM_PAGO_APRENDIZAJE, :FECH_FINA_PAGO_APRENDIZAJE,
           :EFIC_INIC_APRENDIZAJE, :CONS_OPER_COSTURA;

           /*  BUSCAR EL METODO DE PAGO  */
           SELECT NOMB_SIS_FORM_PAGO
           FROM SIS_PCP_FORM_PAGO
           WHERE CONS_SIS_FORM_PAGO = :CONS_SIS_FORM_PAGO
           INTO :NOMB_SIS_FORM_PAGO;

           /*  BUSCAR INFORMACIÓN DE LA OPERACION  */
           IF (NOT :CONS_OPER_COSTURA IS NULL) THEN
             SELECT CODI_OPER_COSTURA, NOMB_OPER_COSTURA
             FROM PCP_OPER_COSTURA
             WHERE CONS_OPER_COSTURA = :CONS_OPER_COSTURA
             INTO :CODI_OPER_COSTURA, :NOMB_OPER_COSTURA;

           SUSPEND;
    END
END ^

ALTER PROCEDURE CON_PCP_FORM_PAGO_PERS_FECH_UN (
    PE_FECHA TIMESTAMP,
    PE_CONS_PERSONAL INTEGER)
RETURNS (
	
    CONS_PERSONAL INTEGER,
    VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    CONS_SIS_FORM_PAGO INTEGER,
    NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
    PARA_1 VARCHAR(60) CHARACTER SET NONE,
    PARA_2 VARCHAR(60) CHARACTER SET NONE,
    PARA_3 VARCHAR(60) CHARACTER SET NONE,
    CONS_FORM_PAGO_APRENDIZAJE INTEGER,
    FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
    EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
    CONS_OPER_COSTURA INTEGER,
    CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
    NOMB_OPER_COSTURA VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
       /*  LIMPIAR  */
       CONS_PERSONAL = :PE_CONS_PERSONAL;
       VALO_HORA_MINI_GARANTIZADO = NULL;
       VALO_HORA_PRODUCCION = NULL;
       CONS_SIS_FORM_PAGO = NULL;
       NOMB_SIS_FORM_PAGO = NULL;
       PARA_1 = NULL;
       PARA_2 = NULL;
       PARA_3 = NULL;
       CONS_FORM_PAGO_APRENDIZAJE = NULL;
       FECH_FINA_PAGO_APRENDIZAJE = NULL;
       EFIC_INIC_APRENDIZAJE = NULL;
       CONS_OPER_COSTURA = NULL;
       CODI_OPER_COSTURA = NULL;
       NOMB_OPER_COSTURA = NULL;

       /*  BUSCAR LA FORMA DE PAGO ACTIVA  */
       SELECT FIRST 1
           VALO_HORA_MINI_GARANTIZADO, VALO_HORA_PRODUCCION,
           CONS_SIS_FORM_PAGO, PARA_1, PARA_2, PARA_3,
           CONS_FORM_PAGO_APRENDIZAJE, FECH_FINA_PAGO_APRENDIZAJE,
           EFIC_INIC_APRENDIZAJE, CONS_OPER_COSTURA
       FROM PCP_FORM_PAGO_PERSONAL
       WHERE CONS_PERSONAL = :PE_CONS_PERSONAL AND 
            FECH_INICIAL <= :PE_FECHA
       ORDER BY FECH_INICIAL DESC
       INTO :VALO_HORA_MINI_GARANTIZADO, :VALO_HORA_PRODUCCION,
       :CONS_SIS_FORM_PAGO, :PARA_1, :PARA_2, :PARA_3,
       :CONS_FORM_PAGO_APRENDIZAJE, :FECH_FINA_PAGO_APRENDIZAJE,
       :EFIC_INIC_APRENDIZAJE, :CONS_OPER_COSTURA;

       /*  BUSCAR EL METODO DE PAGO  */
       SELECT NOMB_SIS_FORM_PAGO
       FROM SIS_PCP_FORM_PAGO
       WHERE CONS_SIS_FORM_PAGO = :CONS_SIS_FORM_PAGO
       INTO :NOMB_SIS_FORM_PAGO;

       /*  BUSCAR INFORMACIÓN DE LA OPERACION  */
       IF (NOT :CONS_OPER_COSTURA IS NULL) THEN
         SELECT CODI_OPER_COSTURA, NOMB_OPER_COSTURA
         FROM PCP_OPER_COSTURA
         WHERE CONS_OPER_COSTURA = :CONS_OPER_COSTURA
         INTO :CODI_OPER_COSTURA, :NOMB_OPER_COSTURA;

       SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_HORA_CURVA (
    PE_CONS_PERSONAL INTEGER,
    PE_FECH_INICIO TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
RETURNS (
	
    HORA_PRODUCIDA NUMERIC(15, 5),
    HORA_TRABAJADA NUMERIC(15, 5),
    HORA_PROD_ESTANDAR NUMERIC(15, 5),
    MINU_CONTRATADOS NUMERIC(15, 5))
AS 

BEGIN
  /* Consultamos el tiempo producido */
  SELECT SUM(F.TIEM_OPERACION * F.CANT_UNIDADES)
  FROM PCP_CONT_NOVE_TIQU_FABRICACION F, PCP_CONT_NOVE_DIARIAS N
  WHERE F.CONS_CONT_NOVE_DIARIA = N.CONS_CONT_NOVE_DIARIA AND 
        F.CONS_CONT_NOVE_ABONADO IS NULL AND 
        NOT F.CONS_FORM_PAGO_CURVA IS NULL AND 
        N.CONS_PERSONAL = :PE_CONS_PERSONAL AND 
        N.FECH_LECTURA BETWEEN :PE_FECH_INICIO AND :PE_FECH_FINAL
  INTO :HORA_PRODUCIDA;

  /* Consultamos el tiempo trabajado */
  SELECT SUM(C.MINU_TRAB_CURVA)
  FROM PCP_CONT_NOVE_PAGO C
  WHERE C.CONS_CONT_NOVE_DIARIA IN (
   SELECT N.CONS_CONT_NOVE_DIARIA
   FROM PCP_CONT_NOVE_TIQU_FABRICACION F, PCP_CONT_NOVE_DIARIAS N
   WHERE F.CONS_CONT_NOVE_DIARIA = N.CONS_CONT_NOVE_DIARIA AND 
        F.CONS_CONT_NOVE_ABONADO IS NULL AND 
        NOT F.CONS_FORM_PAGO_CURVA IS NULL AND 
        N.CONS_PERSONAL = :PE_CONS_PERSONAL AND 
        N.FECH_LECTURA BETWEEN :PE_FECH_INICIO AND :PE_FECH_FINAL)
  INTO :HORA_TRABAJADA;

  /* Consultamos el tiempo producido estandar */
  SELECT SUM(F.TIEM_OPERACION * F.CANT_UNIDADES)
  FROM PCP_CONT_NOVE_TIQU_FABRICACION F, PCP_CONT_NOVE_DIARIAS N
  WHERE F.CONS_CONT_NOVE_DIARIA = N.CONS_CONT_NOVE_DIARIA AND 
        F.CONS_CONT_NOVE_ABONADO IS NULL AND 
        F.CONS_FORM_PAGO_CURVA IS NULL AND 
        N.CONS_PERSONAL = :PE_CONS_PERSONAL AND 
        N.FECH_LECTURA BETWEEN :PE_FECH_INICIO AND :PE_FECH_FINAL
  INTO :HORA_PROD_ESTANDAR;

  /* Consultamos el tiempo minutos contratados */
  SELECT SUM(N.MINU_CONTRATADOS)
  FROM PCP_CONT_NOVE_DIARIAS N
  WHERE N.CONS_PERSONAL = :PE_CONS_PERSONAL AND 
       ( N.FECH_LECTURA BETWEEN :PE_FECH_INICIO AND :PE_FECH_FINAL) AND 
        N.CONS_CONT_NOVE_DIARIA IN(
            SELECT F.CONS_CONT_NOVE_DIARIA
            FROM PCP_CONT_NOVE_TIQU_FABRICACION F
            WHERE  F.CONS_CONT_NOVE_ABONADO IS NULL AND 
                    NOT F.CONS_FORM_PAGO_CURVA IS NULL)
  INTO :MINU_CONTRATADOS;

  SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_HORA_EXTRA (
    PE_CANTIDAD NUMERIC(15, 5),
    PE_TIPO INTEGER)
RETURNS (
	PORCENTAJE NUMERIC(15, 5))
AS 

BEGIN
  /* Inicializar resultado */
  PORCENTAJE = 0;

  /* Diario */
  IF (:PE_TIPO = 1) THEN BEGIN
    IF (EXISTS(SELECT DIAR_PORC_1
               FROM GLO_HORA_EXTR_RANGOS
               WHERE SELE_DIARIAS = 1 AND 
                    :PE_CANTIDAD BETWEEN DIAR_DESD_1 AND DIAR_HAST_1)) THEN
      SELECT DIAR_PORC_1
      FROM GLO_HORA_EXTR_RANGOS
      WHERE SELE_DIARIAS = 1 AND 
            :PE_CANTIDAD BETWEEN DIAR_DESD_1 AND DIAR_HAST_1
      INTO :PORCENTAJE;
    ELSE IF (EXISTS(SELECT DIAR_PORC_2
               FROM GLO_HORA_EXTR_RANGOS
               WHERE SELE_DIARIAS = 1 AND 
                    :PE_CANTIDAD BETWEEN DIAR_DESD_2 AND DIAR_HAST_2)) THEN
                      SELECT DIAR_PORC_2
                      FROM GLO_HORA_EXTR_RANGOS
                      WHERE SELE_DIARIAS = 1 AND :PE_CANTIDAD BETWEEN DIAR_DESD_2 AND DIAR_HAST_2
                      INTO :PORCENTAJE;
  END
  /* Semanal */
  ELSE IF (:PE_TIPO = 2) THEN BEGIN

    IF (EXISTS(SELECT SEMA_PORC_1
               FROM GLO_HORA_EXTR_RANGOS
               WHERE SELE_SEMANALES = 1 AND 
                    :PE_CANTIDAD BETWEEN SEMA_DESD_1 AND SEMA_HAST_1)) THEN
      SELECT SEMA_PORC_1
      FROM GLO_HORA_EXTR_RANGOS
      WHERE SELE_SEMANALES = 1 AND 
            :PE_CANTIDAD BETWEEN SEMA_DESD_1 AND SEMA_HAST_1
      INTO :PORCENTAJE;

    ELSE IF (EXISTS(SELECT SEMA_PORC_2
               FROM GLO_HORA_EXTR_RANGOS
               WHERE SELE_SEMANALES = 1 AND 
                    :PE_CANTIDAD BETWEEN SEMA_DESD_2 AND SEMA_HAST_2)) THEN
      SELECT SEMA_PORC_2
      FROM GLO_HORA_EXTR_RANGOS
      WHERE SELE_SEMANALES = 1 AND 
            :PE_CANTIDAD BETWEEN SEMA_DESD_2 AND SEMA_HAST_2

      INTO :PORCENTAJE;
  END

  SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_METO_LIST_OPER_CORT_R (
    PE_CONS_REFE_VARIACION INTEGER,
    PE_CONS_REFE_MATERIAL INTEGER)
RETURNS (
	
    CONS_PROCESO INTEGER,
    CODI_PROCESO VARCHAR(12) CHARACTER SET NONE,
    NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
    TIEM_PROCESO NUMERIC(15, 5),
    COST_MINUTO NUMERIC(15, 5),
    COST_PROCESO NUMERIC(15, 5))
AS 

BEGIN
     /*  CONSULTAR LAS OPERACIONES DEL LISTADO DE CORTE, AGRUPADAS POR SU PROCESO  */
     FOR
         SELECT CONS_PROCESO, SUM(TIEM_OPERACION)
         FROM PCP_REFE_LIST_OPER_CORTE
         WHERE CONS_REFE_VARIACION = :PE_CONS_REFE_VARIACION AND 
                CONS_REFE_MATERIAL = :PE_CONS_REFE_MATERIAL
         GROUP BY CONS_PROCESO
         INTO :CONS_PROCESO, :TIEM_PROCESO

         DO BEGIN
                /*  VALIDAR EL TIEMPO  */
                IF (:TIEM_PROCESO IS NULL) THEN TIEM_PROCESO = 0;

                /*  CALCULAR EL COSTO MINUTO DEL PROCESO  */
                COST_MINUTO = 0;

                /*  CALCULAR EL COSTO DEL PROCESO  */
                COST_PROCESO = :TIEM_PROCESO * :COST_MINUTO;

                /*  BUSCAR LOS DATOS DEL MAESTRO DE PROCESOS  */
                SELECT CODI_PROCESO, NOMB_PROCESO
                FROM PCP_PROCESOS
                WHERE CONS_PROCESO = :CONS_PROCESO
                INTO :CODI_PROCESO, :NOMB_PROCESO;

                SUSPEND;
         END
END ^

ALTER PROCEDURE CON_PCP_METO_OPER_COST_DEPE_0 (
    PE_VALOR INTEGER)
RETURNS (
	CONS_CONSULTA INTEGER,
    PADR_CONSULTA INTEGER,
    CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    INDE_IMAGEN INTEGER)
AS 

Declare Variable  var_padr_consulta integer;
Declare Variable aux_codi_oper_costura Varchar(12);

begin
     /*  Inicializar las variables  */
     cons_consulta = 0;
     var_padr_consulta = 0;

     /*  Busar el codigo de la operacion de costura  */
     Select codi_oper_costura
     from PCP_OPER_COSTURA
     Where cons_oper_costura = :pe_valor
     Into :aux_codi_oper_costura;

     /*  -- -- -- -LISTADOS DE OPERACIONES COMPONENTES -- -- -- -- - */

     /*  Maestro  */
     cons_consulta = cons_consulta + 1;
     padr_consulta = -1;
     cons_tabl_dependencia = 0;
     valo_tabl_dependencia = 'Secuencia de operaciones (Componentes)';
     var_padr_consulta = :cons_consulta;
     inde_imagen = 12;

     Suspend;

     /*  Detalle  */
     For Select distinct cons_comp_variacion
     from Pcp_Comp_List_Oper_Costura
     Where codi_oper_costura = :aux_codi_oper_costura
     Into :cons_tabl_dependencia 
    do Begin
          /*  Buscar el nombre de  la variación componente */
          Select nomb_comp_grupo||' '||nomb_comp_variacion
          from Vis_Pcp_Comp_Variaciones
          where cons_comp_variacion = :cons_tabl_dependencia
          into :valo_tabl_dependencia;

          /*  Union M-Detalle  */
          cons_consulta = :cons_consulta + 1;
          padr_consulta = :var_padr_consulta;
          inde_imagen = 13;

          Suspend;
     End

     /*  -- -- -- -LISTADOS DE OPERACIONES COMPONENTES -- -- -- -- - */

     /*  Maestro  */
     cons_consulta = cons_consulta + 1;
     padr_consulta = -1;
     cons_tabl_dependencia = 0;
     valo_tabl_dependencia = 'Secuencia de operaciones (Referencias)';
     var_padr_consulta = :cons_consulta;
     inde_imagen = 12;

     Suspend;

     /*  Detalle  */
     For Select distinct cons_refe_variacion
     from Pcp_refe_List_Oper_Costura
     Where codi_oper_costura = :aux_codi_oper_costura
     Into :cons_tabl_dependencia 
    do Begin
           /*  Buscar el nombre de  la variación del componente */ 
          Select codi_referencia||' '||nomb_refe_tipo_variacion
          from vis_Pcp_refe_Variaciones
          where cons_refe_variacion = :cons_tabl_dependencia
          into :valo_tabl_dependencia;

           /*  Union M-Detalle  */ 
          cons_consulta = :cons_consulta + 1;
          padr_consulta = :var_padr_consulta;
          inde_imagen = 13;

          Suspend;
     End
end ^

ALTER PROCEDURE CON_PCP_METO_OPER_COST_DEPE_1 (
    PE_VALOR INTEGER)
RETURNS (
	
    CONS_CONSULTA INTEGER,
    PADR_CONSULTA INTEGER,
    CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    INDE_IMAGEN INTEGER)
AS 

Declare Variable  var_padr_consulta integer;

begin
     /*  Inicializar las variables  */
     cons_consulta = 0;
     var_padr_consulta = 0;

     /*  -- -- -- -ELEMENTOS CST -- -- -- -- - */

     /*  Maestro  */
     cons_consulta = cons_consulta + 1;
     padr_consulta = -1;
     cons_tabl_dependencia = 0;
     valo_tabl_dependencia = 'Elementos CST';
     var_padr_consulta = :cons_consulta;
     inde_imagen = 12;

     Suspend;

     /*  Detalle  */
     For Select distinct cst.codi_elem_cst, cst.codi_elem_cst
     from PCP_ELEM_CST CST, PCP_OPER_COST_ELEMENTOS OPE
     Where OPE.cons_oper_costura = :pe_valor and 
            cst.codi_elem_cst = ope.Codi_Elem_Cst
     Into :cons_tabl_dependencia, :valo_tabl_dependencia 
    do Begin
          /*  Union M-Detalle  */
          cons_consulta = :cons_consulta + 1;
          padr_consulta = :var_padr_consulta;
          inde_imagen = 13;

          Suspend;
     End
end ^

ALTER PROCEDURE CON_PCP_OPCI_INDICADORES RETURNS (
	CONS_INDICADOR INTEGER,
NOMB_INDICADOR VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  /*  INDICADOR 1  */
  CONS_INDICADOR = 1;

  SELECT OPCI.CONT_PROD_NOMB_INDI_1
  FROM PCP_OPCIONES OPCI
  INTO :NOMB_INDICADOR;

  SUSPEND;

  /*  INDICADOR 2  */
  CONS_INDICADOR = 2;

  SELECT OPCI.CONT_PROD_NOMB_INDI_2
  FROM PCP_OPCIONES OPCI
  INTO :NOMB_INDICADOR;

  SUSPEND;

  /*  INDICADOR 3  */
  CONS_INDICADOR = 3;

  SELECT OPCI.CONT_PROD_NOMB_INDI_3
  FROM PCP_OPCIONES OPCI
  INTO :NOMB_INDICADOR;

  SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_PEDI_EXPL_COMPLETO (
    PE_CONS_PEDIDO INTEGER)
RETURNS (
	
    TIPO INTEGER,
    CONS_PEDI_REFERENCIA INTEGER,
    NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
    ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

DECLARE VARIABLE VAR_ES_PRINCIPAL INTEGER;

begin

    TIPO = 1;

    while (:TIPO <= 4) do begin

        /*  IDENTIFICAR SI ES PRINCIPAL O NO  */
        IF (:TIPO IN (1,3)) THEN VAR_ES_PRINCIPAL = 1;
        ELSE VAR_ES_PRINCIPAL = -1;

        /*  CONSULTAR LOS MATERIALES  */
        IF (:TIPO IN (1,2)) THEN BEGIN

            for select CONS_PEDI_REFERENCIA, NUME_PEDIDO, ORDE_COMPRA, 
                CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, 
                NOMB_MATE_REFERENCIA, CONS_MATE_GRUPO, CODI_MATE_GRUPO, 
                NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO, 
                NOMB_MATE_SUBGRUPO, ES_PRINCIPAL, CONS_PROVEEDOR, 
                CODI_PROVEEDOR, NOMB_PROVEEDOR, CONS_REFE_COLOR, 
                CONS_COLOR, CODI_COLOR, NOMB_COLOR, CONS_UNIDAD, 
                REQUERIMIENTO, CONS_TOTAL, COST_UNIDAD, COST_TOTAL, 
                CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, 
                COMBINACION, TALLAJE, TIEN_OBSERVACIONES, EXISTENTE, 
                DISPONIBLE, ENTREGADO, DIFERENCIA
            FROM CON_PCP_PEDI_EXPL_MATERIALES(:PE_CONS_PEDIDO, :VAR_ES_PRINCIPAL)
            INTO :CONS_PEDI_REFERENCIA, :NUME_PEDIDO, :ORDE_COMPRA, 
                :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA, 
                :NOMB_MATE_REFERENCIA, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, 
                :NOMB_MATE_GRUPO, :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, 
                :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL, :CONS_PROVEEDOR, 
                :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :CONS_REFE_COLOR, 
                :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR, :CONS_UNIDAD, 
                :REQUERIMIENTO, :CONS_TOTAL, :COST_UNIDAD, :COST_TOTAL, 
                :CONS_UNID_MEDIDA, :CODI_UNID_MEDIDA, :NOMB_UNID_MEDIDA, 
                :COMBINACION, :TALLAJE, :TIEN_OBSERVACIONES, :EXISTENTE, 
                :DISPONIBLE, :ENTREGADO, :DIFERENCIA DO SUSPEND;
        END

        /*  CONSULTAR LOS INSUMOS  */
        IF (:TIPO IN (3,4)) THEN BEGIN

            for select  CONS_PEDI_REFERENCIA, NUME_PEDIDO, ORDE_COMPRA, 
                CONS_REFE_INSUMO, CONS_INSU_REFERENCIA, CODI_INSU_REFERENCIA, 
                NOMB_INSU_REFERENCIA, CONS_INSU_GRUPO, CODI_INSU_GRUPO, 
                NOMB_INSU_GRUPO, CONS_INSU_SUBGRUPO, CODI_INSU_SUBGRUPO, 
                NOMB_INSU_SUBGRUPO, ES_FABRICACION, CONS_PROVEEDOR, 
                CODI_PROVEEDOR, NOMB_PROVEEDOR, CONS_REFE_COLOR, 
                CONS_COLOR, CODI_COLOR, NOMB_COLOR, CONS_UNIDAD, 
                REQUERIMIENTO, CONS_TOTAL, COST_UNIDAD, COST_TOTAL, 
                CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, 
                COMBINACION, TALLAJE, TIEN_OBSERVACIONES, EXISTENTE, 
                DISPONIBLE, ENTREGADO, DIFERENCIA
            FROM CON_PCP_PEDI_EXPL_INSUMOS(:PE_CONS_PEDIDO, :VAR_ES_PRINCIPAL)
            INTO :CONS_PEDI_REFERENCIA, :NUME_PEDIDO, :ORDE_COMPRA,
                :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA,:CODI_MATE_REFERENCIA,
                :NOMB_MATE_REFERENCIA, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, 
                :NOMB_MATE_GRUPO, :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, 
                :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL, :CONS_PROVEEDOR, 
                :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :CONS_REFE_COLOR, 
                :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR, :CONS_UNIDAD, 
                :REQUERIMIENTO, :CONS_TOTAL, :COST_UNIDAD, :COST_TOTAL, 
                :CONS_UNID_MEDIDA, :CODI_UNID_MEDIDA, :NOMB_UNID_MEDIDA, 
                :COMBINACION, :TALLAJE, :TIEN_OBSERVACIONES, :EXISTENTE, 
                :DISPONIBLE, :ENTREGADO, :DIFERENCIA DO SUSPEND;
        END

        /*  INCREMENTAR LA VARIABLE  */
        TIPO = :TIPO + 1;
      end
end ^

ALTER PROCEDURE CON_PCP_PEDI_EXPL_INSUMOS (
    PE_CONS_PEDIDO INTEGER,
    PE_ES_FABRICACION INTEGER)
RETURNS (
	
    CONS_PEDI_REFERENCIA INTEGER,
    NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
    ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
    CONS_REFE_INSUMO INTEGER,
    CONS_INSU_REFERENCIA INTEGER,
    CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_GRUPO INTEGER,
    CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_SUBGRUPO INTEGER,
    CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_FABRICACION INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CODI_UNID_MEDIDA VARCHAR(12);
DECLARE VARIABLE VAR_NOMB_UNID_MEDIDA VARCHAR(60);
DECLARE VARIABLE VAR_ASIG_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_COST_UNIDAD NUMERIC (12,5);
DECLARE VARIABLE VAR_UNIDADES INTEGER;
DECLARE VARIABLE VAR_CONS_GRUP_TALL_DETALLE INTEGER;
DECLARE VARIABLE VAR_NUME_REGISTROS INTEGER;
DECLARE VARIABLE VAR_REQU_TOTAL NUMERIC (12,5);
DECLARE VARIABLE VAR_CONSUMO NUMERIC (12,5);
DECLARE VARIABLE VAR_SUMA_CONSUMOS NUMERIC (12,5);

BEGIN
    /*  BUSCAR EL NÚMERO DEL PEDIDO  */
    SELECT NUME_PEDIDO
    FROM PCP_PEDIDOS
    WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
    INTO :NUME_PEDIDO;

    /*  RECORRER LAS REFERENCIAS DEL PEDIDO  */
    FOR SELECT CONS_PEDI_REFERENCIA, ORDE_COMPRA
        FROM PCP_PEDI_REFERENCIAS
        WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
        ORDER BY CONS_PEDI_REFERENCIA
        INTO :CONS_PEDI_REFERENCIA, :ORDE_COMPRA 

    DO BEGIN
        /*  BUSCAR LA REFERENCIA Y LA VARIACIÓN  */
        SELECT CONS_REFERENCIA, CONS_REFE_VARIACION
           FROM PCP_PEDI_REFERENCIAS
           WHERE CONS_PEDI_REFERENCIA = :CONS_PEDI_REFERENCIA
           INTO :VAR_CONS_REFERENCIA, :VAR_CONS_REFE_VARIACION;

        /*  SELECCIONAR LOS INSUMOS  */
        FOR SELECT CONS_REFE_INSUMO, CONS_INSU_GRUPO, CODI_INSU_GRUPO, NOMB_INSU_GRUPO,
                CONS_INSU_SUBGRUPO, CODI_INSU_SUBGRUPO, NOMB_INSU_SUBGRUPO, CONS_INSU_REFERENCIA,
                CODI_INSU_REFERENCIA, NOMB_INSU_REFERENCIA, ES_FABRICACION, CONS_PROVEEDOR,
                CODI_PROVEEDOR, NOMB_PROVEEDOR, COST_ESTIMADO,
                CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, COMBINACION, 
                TALLAJE, TIEN_OBSERVACIONES
           FROM CON_PCP_REFE_INSUMOS(:VAR_CONS_REFE_VARIACION, :PE_ES_FABRICACION)
           INTO :CONS_REFE_INSUMO, :CONS_INSU_GRUPO, :CODI_INSU_GRUPO, :NOMB_INSU_GRUPO,
                :CONS_INSU_SUBGRUPO, :CODI_INSU_SUBGRUPO, :NOMB_INSU_SUBGRUPO, :CONS_INSU_REFERENCIA,
                :CODI_INSU_REFERENCIA, :NOMB_INSU_REFERENCIA, :ES_FABRICACION, :CONS_PROVEEDOR,
                :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :VAR_COST_UNIDAD,
                :VAR_CONS_UNID_MEDIDA, :VAR_CODI_UNID_MEDIDA, :VAR_NOMB_UNID_MEDIDA, :COMBINACION, 
                :TALLAJE, :TIEN_OBSERVACIONES 
        DO BEGIN
           /*  BUSCAR LOS COLORES QUE SE UTILIZAR  */ 
          FOR SELECT DISTINCT ASIG_REFERENCIA,CONS_REFE_COLOR,
              CONS_COLOR, CODI_COLOR, NOMB_COLOR
              FROM CON_PCP_REFE_INSU_COLO_USADOS(:CONS_REFE_INSUMO)
              ORDER BY ASIG_REFERENCIA DESC, NOMB_COLOR
              INTO :VAR_ASIG_REFERENCIA , :CONS_REFE_COLOR,
              :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR

          DO BEGIN
                /*  VALIDAR VARIABLES DE LA CONSULTA DEL PADRE  */ 
               IF (:VAR_COST_UNIDAD IS NULL) THEN VAR_COST_UNIDAD = 0;

                /*  ASIGNAR VALORES QUE ESTABAN EN VARIABLES DE LA CONSULTA DEL PADRE  */ 
               CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA;
               CODI_UNID_MEDIDA = :VAR_CODI_UNID_MEDIDA;
               NOMB_UNID_MEDIDA = :VAR_NOMB_UNID_MEDIDA;
               COST_UNIDAD = :VAR_COST_UNIDAD;

                /*  INICIALIZAR LAS VARIABLES  */ 
               VAR_NUME_REGISTROS = 0;
               REQUERIMIENTO = 0;
               VAR_REQU_TOTAL = 0;
               VAR_SUMA_CONSUMOS = 0;

               /*  BUSCAR LAS UNIDADES PROGRAMADAS DE ESTE COLOR, EN CADA UNA DE LAS TALLAS  */
               FOR SELECT CONS_GRUP_TALL_DETALLE, UNIDADES
               FROM CON_PCP_PEDI_UNID_COLOR(:CONS_PEDI_REFERENCIA, :CONS_REFE_COLOR)
               INTO :VAR_CONS_GRUP_TALL_DETALLE, :VAR_UNIDADES 
            
            DO BEGIN
                 /*  VALIDAR EL RESULTADO  */ 
                IF (:VAR_UNIDADES IS NULL) THEN VAR_UNIDADES = 0;

                 /*  INCREMENTAR EL CONTADOR DE REGISTROS  */ 
                VAR_NUME_REGISTROS = :VAR_NUME_REGISTROS + 1;

                 /*  SUMAR LAS UNIDADES AL REQUERIMIENTO  */ 
                REQUERIMIENTO = :REQUERIMIENTO + :VAR_UNIDADES;

                 /*  BUSCAR EL CONSUMO  */ 
                SELECT CONS_UNIDAD
                FROM CON_PCP_REFE_INSU_COLO_TALL(:CONS_REFE_INSUMO, :VAR_ASIG_REFERENCIA,
                     :CONS_REFE_COLOR, :CONS_COLOR, :VAR_CONS_GRUP_TALL_DETALLE)
                INTO :VAR_CONSUMO;

                 /*  SUMAR EL CONSUMO * LAS UNIDADES A LAS UNIDADES TOTALES  */ 
                VAR_REQU_TOTAL = : VAR_REQU_TOTAL + (:VAR_CONSUMO * :VAR_UNIDADES);

                 /*  SUMAR EL CONSUMO PARA CALCULAR EL PROMEDIO  */ 
                VAR_SUMA_CONSUMOS = :VAR_SUMA_CONSUMOS + :VAR_CONSUMO;
               END

                /*  CALCULAR EL CONSUMO PROMEDIO  */ 
               IF (:VAR_NUME_REGISTROS > 0) THEN
                  CONS_UNIDAD = (:VAR_SUMA_CONSUMOS / :VAR_NUME_REGISTROS);
               ELSE
                  CONS_UNIDAD = 0;

               IF (:CONS_UNIDAD  > 0) THEN BEGIN
                    /*  DESCARTAR LAS QUE NO TENGAN REQUERIMIENTO  */ 
                   IF (:REQUERIMIENTO > 0) THEN BEGIN

                       /*  CONSUMO TOTAL  */ 
                      CONS_TOTAL = :VAR_REQU_TOTAL;

                      COST_TOTAL = :COST_UNIDAD * :REQUERIMIENTO;
                      EXISTENTE = 0;
                      DISPONIBLE = 0;
                      ENTREGADO = 0;
                      DIFERENCIA = :DISPONIBLE - (:CONS_TOTAL - :ENTREGADO);

                      SUSPEND;
                   END
               END
          END
       END
    END
END ^

ALTER PROCEDURE CON_PCP_PEDI_EXPL_MATERIALES (
    PE_CONS_PEDIDO INTEGER,
    PE_ES_PRINCIPAL INTEGER)
RETURNS (
	
    CONS_PEDI_REFERENCIA INTEGER,
    NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
    ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD NUMERIC(15, 5),
    REQUERIMIENTO NUMERIC(15, 5),
    CONS_TOTAL NUMERIC(15, 5),
    COST_UNIDAD NUMERIC(15, 5),
    COST_TOTAL NUMERIC(15, 5),
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE NUMERIC(15, 5),
    DISPONIBLE NUMERIC(15, 5),
    ENTREGADO NUMERIC(15, 5),
    DIFERENCIA NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CODI_UNID_MEDIDA VARCHAR(12);
DECLARE VARIABLE VAR_NOMB_UNID_MEDIDA VARCHAR(60);
DECLARE VARIABLE VAR_ASIG_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_COST_UNIDAD NUMERIC (12,5);
DECLARE VARIABLE VAR_UNIDADES INTEGER;
DECLARE VARIABLE VAR_CONS_GRUP_TALL_DETALLE INTEGER;
DECLARE VARIABLE VAR_NUME_REGISTROS INTEGER;
DECLARE VARIABLE VAR_REQU_TOTAL NUMERIC (12,5);
DECLARE VARIABLE VAR_CONSUMO NUMERIC (12,5);
DECLARE VARIABLE VAR_SUMA_CONSUMOS NUMERIC (12,5);

BEGIN
    /*  BUSCAR EL NÚMERO DEL PEDIDO  */
    SELECT NUME_PEDIDO
    FROM PCP_PEDIDOS
    WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
    INTO :NUME_PEDIDO;

    /*  RECORRER LAS REFERENCIAS DEL PEDIDO  */
    FOR SELECT CONS_PEDI_REFERENCIA, ORDE_COMPRA
        FROM PCP_PEDI_REFERENCIAS
        WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
        ORDER BY CONS_PEDI_REFERENCIA
        INTO :CONS_PEDI_REFERENCIA, :ORDE_COMPRA 
    DO BEGIN
        /*  BUSCAR LA REFERENCIA Y LA VARIACIÓN  */
        SELECT CONS_REFERENCIA, CONS_REFE_VARIACION
           FROM PCP_PEDI_REFERENCIAS
           WHERE CONS_PEDI_REFERENCIA = :CONS_PEDI_REFERENCIA
           INTO :VAR_CONS_REFERENCIA, :VAR_CONS_REFE_VARIACION;

        /*  SELECCIONAR LOS MATERIALES  */
        FOR SELECT CONS_REFE_MATERIAL, CONS_MATE_GRUPO, CODI_MATE_GRUPO, NOMB_MATE_GRUPO,
            CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO, NOMB_MATE_SUBGRUPO, CONS_MATE_REFERENCIA,
            CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA, ES_PRINCIPAL, CONS_PROVEEDOR,
            CODI_PROVEEDOR, NOMB_PROVEEDOR, COST_ESTIMADO,
            CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, COMBINACION, 
            TALLAJE, TIEN_OBSERVACIONES
           FROM CON_PCP_REFE_MATERIALES(:VAR_CONS_REFE_VARIACION, :PE_ES_PRINCIPAL)
           INTO :CONS_REFE_MATERIAL, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, :NOMB_MATE_GRUPO,
                :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, :NOMB_MATE_SUBGRUPO, :CONS_MATE_REFERENCIA,
                :CODI_MATE_REFERENCIA, :NOMB_MATE_REFERENCIA, :ES_PRINCIPAL, :CONS_PROVEEDOR,
                :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :VAR_COST_UNIDAD,
                :VAR_CONS_UNID_MEDIDA, :VAR_CODI_UNID_MEDIDA, :VAR_NOMB_UNID_MEDIDA, :COMBINACION, 
                :TALLAJE, :TIEN_OBSERVACIONES 
        DO BEGIN
               /*  BUSCAR LOS COLORES QUE SE UTILIZAR  */ 
              FOR SELECT DISTINCT ASIG_REFERENCIA,CONS_REFE_COLOR,
                  CONS_COLOR, CODI_COLOR, NOMB_COLOR
                  FROM CON_PCP_REFE_MATE_COLO_USADOS(:CONS_REFE_MATERIAL)
                  ORDER BY ASIG_REFERENCIA DESC, NOMB_COLOR
                  INTO :VAR_ASIG_REFERENCIA, :CONS_REFE_COLOR,
                      :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR
              DO BEGIN
                    /*  VALIDAR VARIABLES DE LA CONSULTA DEL PADRE  */ 
                   IF (:VAR_COST_UNIDAD IS NULL) THEN VAR_COST_UNIDAD = 0;

                    /*  ASIGNAR VALORES QUE ESTABAN EN VARIABLES DE LA CONSULTA DEL PADRE  */ 
                   CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA;
                   CODI_UNID_MEDIDA = :VAR_CODI_UNID_MEDIDA;
                   NOMB_UNID_MEDIDA = :VAR_NOMB_UNID_MEDIDA;
                   COST_UNIDAD = :VAR_COST_UNIDAD;

                    /*  INICIALIZAR LAS VARIABLES  */ 
                   VAR_NUME_REGISTROS = 0;
                   REQUERIMIENTO = 0;
                   VAR_REQU_TOTAL = 0;
                   VAR_SUMA_CONSUMOS = 0;

                   /*  BUSCAR LAS UNIDADES PROGRAMADAS DE ESTE COLOR, EN CADA UNA DE LAS TALLAS  */
                   FOR SELECT CONS_GRUP_TALL_DETALLE, UNIDADES
                       FROM CON_PCP_PEDI_UNID_COLOR(:CONS_PEDI_REFERENCIA, :CONS_REFE_COLOR)
                       INTO :VAR_CONS_GRUP_TALL_DETALLE, :VAR_UNIDADES 
                   DO BEGIN
                         /*  VALIDAR EL RESULTADO  */ 
                        IF (:VAR_UNIDADES IS NULL) THEN VAR_UNIDADES = 0;

                         /*  INCREMENTAR EL CONTADOR DE REGISTROS  */ 
                        VAR_NUME_REGISTROS = :VAR_NUME_REGISTROS + 1;

                         /*  SUMAR LAS UNIDADES AL REQUERIMIENTO  */ 
                        REQUERIMIENTO = :REQUERIMIENTO + :VAR_UNIDADES;

                         /*  BUSCAR EL CONSUMO  */ 
                        SELECT CONS_UNIDAD
                        FROM CON_PCP_REFE_MATE_COLO_TALL(:CONS_REFE_MATERIAL, :VAR_ASIG_REFERENCIA,
                             :CONS_REFE_COLOR, :CONS_COLOR, :VAR_CONS_GRUP_TALL_DETALLE)
                        INTO :VAR_CONSUMO;

                         /*  SUMAR EL CONSUMO * LAS UNIDADES A LAS UNIDADES TOTALES  */ 
                        VAR_REQU_TOTAL = : VAR_REQU_TOTAL + (:VAR_CONSUMO * :VAR_UNIDADES);

                         /*  SUMAR EL CONSUMO PARA CALCULAR EL PROMEDIO  */ 
                        VAR_SUMA_CONSUMOS = :VAR_SUMA_CONSUMOS + :VAR_CONSUMO;
                   END

                    /*  CALCULAR EL CONSUMO PROMEDIO  */ 
                   IF (:VAR_NUME_REGISTROS > 0) THEN
                      CONS_UNIDAD = (:VAR_SUMA_CONSUMOS / :VAR_NUME_REGISTROS);
                   ELSE
                      CONS_UNIDAD = 0;

                   IF (:CONS_UNIDAD  > 0) THEN BEGIN

                        /*  DESCARTAR LAS QUE NO TENGAN REQUERIMIENTO  */ 
                       IF (:REQUERIMIENTO > 0) THEN BEGIN
                               /*  CONSUMO TOTAL  */ 
                              CONS_TOTAL = :VAR_REQU_TOTAL;

                               /*  COSTO TOTAL  */ 
                              COST_TOTAL = :COST_UNIDAD * :REQUERIMIENTO;

                              EXISTENTE = 0;
                              DISPONIBLE = 0;
                              ENTREGADO = 0;
                              DIFERENCIA = :DISPONIBLE - (:CONS_TOTAL - :ENTREGADO);

                              SUSPEND;
                       END
                 END
            END
        END
    END

END ^

ALTER PROCEDURE CON_PCP_PEDI_REFE_EXPL_COMPLETO (
    PE_CONS_PEDI_REFERENCIA INTEGER)
RETURNS (
	
    TIPO INTEGER,
    CONS_PEDIDO INTEGER,
    CONS_PEDI_REFERENCIA INTEGER,
    NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
    ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

DECLARE VARIABLE VAR_ES_PRINCIPAL INTEGER;

BEGIN
    /*  BUSCAR LA INFORMACIÓN DEL PEDIDO  */
    SELECT REFE.CONS_PEDIDO, REFE.ORDE_COMPRA, PEDI.NUME_PEDIDO
    FROM PCP_PEDI_REFERENCIAS REFE, PCP_PEDIDOS PEDI
    WHERE REFE.CONS_PEDI_REFERENCIA = :PE_CONS_PEDI_REFERENCIA AND 
            PEDI.CONS_PEDIDO = REFE.CONS_PEDIDO
    INTO :CONS_PEDIDO, :ORDE_COMPRA, :NUME_PEDIDO;

    CONS_PEDI_REFERENCIA = :PE_CONS_PEDI_REFERENCIA;

    /*  RECORRER LOS 4 TIPOS DE MATERIALES/INSUMOS  */
    TIPO = 1;

    WHILE (:TIPO <= 4) DO BEGIN

        /*  IDENTIFICAR SI ES PRINCIPAL O NO  */
        IF (:TIPO IN (1,3)) THEN VAR_ES_PRINCIPAL = 1;
        ELSE VAR_ES_PRINCIPAL = -1;

        /*  CONSULTAR LOS MATERIALES  */

        IF (:TIPO IN (1,2)) THEN BEGIN

            FOR SELECT
            CONS_REFE_MATERIAL,CONS_MATE_REFERENCIA,CODI_MATE_REFERENCIA,
            NOMB_MATE_REFERENCIA,CONS_MATE_GRUPO,CODI_MATE_GRUPO,
            NOMB_MATE_GRUPO,CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO,
            NOMB_MATE_SUBGRUPO, ES_PRINCIPAL, CONS_PROVEEDOR,
            CODI_PROVEEDOR,NOMB_PROVEEDOR,CONS_REFE_COLOR,
            CONS_COLOR, CODI_COLOR, NOMB_COLOR, CONS_UNIDAD,
            REQUERIMIENTO, CONS_TOTAL, COST_UNIDAD, COST_TOTAL,
            CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA,
            COMBINACION, TALLAJE, TIEN_OBSERVACIONES, EXISTENTE,
            DISPONIBLE, ENTREGADO, DIFERENCIA
            FROM CON_PCP_PEDI_REFE_EXPL_MATE(:PE_CONS_PEDI_REFERENCIA, :VAR_ES_PRINCIPAL)
            INTO
            :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA,
            :NOMB_MATE_REFERENCIA, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO,
            :NOMB_MATE_GRUPO, :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO,
            :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL, :CONS_PROVEEDOR,
            :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :CONS_REFE_COLOR,
            :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR, :CONS_UNIDAD,
            :REQUERIMIENTO, :CONS_TOTAL, :COST_UNIDAD, :COST_TOTAL,
            :CONS_UNID_MEDIDA, :CODI_UNID_MEDIDA, :NOMB_UNID_MEDIDA,
            :COMBINACION, :TALLAJE, :TIEN_OBSERVACIONES, :EXISTENTE,
            :DISPONIBLE, :ENTREGADO, :DIFERENCIA DO SUSPEND;
        END

        /*  CONSULTAR LOS INSUMOS  */

        IF (:TIPO IN (3,4)) THEN

        BEGIN
            FOR SELECT
                CONS_REFE_INSUMO,CONS_INSU_REFERENCIA,CODI_INSU_REFERENCIA,
                NOMB_INSU_REFERENCIA,CONS_INSU_GRUPO,CODI_INSU_GRUPO,
                NOMB_INSU_GRUPO,CONS_INSU_SUBGRUPO, CODI_INSU_SUBGRUPO,
                NOMB_INSU_SUBGRUPO, ES_FABRICACION, CONS_PROVEEDOR,
                CODI_PROVEEDOR,NOMB_PROVEEDOR,CONS_REFE_COLOR,
                CONS_COLOR, CODI_COLOR, NOMB_COLOR, CONS_UNIDAD,
                REQUERIMIENTO, CONS_TOTAL, COST_UNIDAD, COST_TOTAL,
                CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA,
                COMBINACION, TALLAJE, TIEN_OBSERVACIONES, EXISTENTE,
                DISPONIBLE, ENTREGADO, DIFERENCIA
            FROM CON_PCP_PEDI_REFE_EXPL_INSUMOS(:PE_CONS_PEDI_REFERENCIA, :VAR_ES_PRINCIPAL)
            INTO
                :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA,
                :NOMB_MATE_REFERENCIA, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO,
                :NOMB_MATE_GRUPO, :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO,
                :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL, :CONS_PROVEEDOR,
                :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :CONS_REFE_COLOR,
                :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR, :CONS_UNIDAD,
                :REQUERIMIENTO, :CONS_TOTAL, :COST_UNIDAD, :COST_TOTAL,
                :CONS_UNID_MEDIDA, :CODI_UNID_MEDIDA, :NOMB_UNID_MEDIDA,
                :COMBINACION, :TALLAJE, :TIEN_OBSERVACIONES, :EXISTENTE,
                :DISPONIBLE, :ENTREGADO, :DIFERENCIA DO SUSPEND;
        END

        /*  INCREMENTAR LA VARIABLE  */

        TIPO = :TIPO + 1;
      END
END ^

ALTER PROCEDURE CON_PCP_PEDI_REFE_EXPL_COMP_FI RETURNS (
	
    TIPO INTEGER,
    CONS_PEDIDO INTEGER,
    CONS_PEDI_REFERENCIA INTEGER,
    NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
    ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

BEGIN
    /*  RECORRER LOS SUBPEDIDOS DEL FILTRO ACTIVO DEL USUARIO  */
    FOR SELECT FILT.INTE_FILTRO
        FROM PCP$FILT_USUARIO FILT
        WHERE USUARIO = USER
        ORDER BY FILT.INTE_FILTRO

    INTO :CONS_PEDI_REFERENCIA DO BEGIN
        FOR SELECT TIPO, CONS_PEDIDO, NUME_PEDIDO,
            ORDE_COMPRA, CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA,
            CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA, CONS_MATE_GRUPO,
            CODI_MATE_GRUPO, NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO,
            CODI_MATE_SUBGRUPO, NOMB_MATE_SUBGRUPO, ES_PRINCIPAL,
            CONS_PROVEEDOR, CODI_PROVEEDOR, NOMB_PROVEEDOR,
            CONS_REFE_COLOR, CONS_COLOR, CODI_COLOR, NOMB_COLOR,
            CONS_UNIDAD, REQUERIMIENTO, CONS_TOTAL, COST_UNIDAD,
            COST_TOTAL, CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA,
            COMBINACION, TALLAJE, TIEN_OBSERVACIONES, EXISTENTE,
            DISPONIBLE, ENTREGADO, DIFERENCIA
        FROM CON_PCP_PEDI_REFE_EXPL_COMPLETO(:CONS_PEDI_REFERENCIA)
        INTO :TIPO, :CONS_PEDIDO, :NUME_PEDIDO, :ORDE_COMPRA, :CONS_REFE_MATERIAL,
            :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA, :NOMB_MATE_REFERENCIA,
            :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, :NOMB_MATE_GRUPO,
            :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, :NOMB_MATE_SUBGRUPO,
            :ES_PRINCIPAL, :CONS_PROVEEDOR, :CODI_PROVEEDOR,
            :NOMB_PROVEEDOR, :CONS_REFE_COLOR, :CONS_COLOR, :CODI_COLOR,
            :NOMB_COLOR, :CONS_UNIDAD, :REQUERIMIENTO, :CONS_TOTAL,
            :COST_UNIDAD, :COST_TOTAL, :CONS_UNID_MEDIDA, :CODI_UNID_MEDIDA,
            :NOMB_UNID_MEDIDA, :COMBINACION, :TALLAJE, :TIEN_OBSERVACIONES,
            :EXISTENTE, :DISPONIBLE, :ENTREGADO, :DIFERENCIA
        DO 
            SUSPEND;
    END
END ^

ALTER PROCEDURE CON_PCP_PEDI_REFE_EXPL_FILT_MA RETURNS (
	
    TIPO INTEGER,
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

BEGIN
  FOR SELECT TIPO,
        CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA,
        CONS_MATE_GRUPO, CODI_MATE_GRUPO, NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO,
        NOMB_MATE_SUBGRUPO, ES_PRINCIPAL, CONS_PROVEEDOR, CODI_PROVEEDOR, NOMB_PROVEEDOR,
        AVG(CONS_UNIDAD)
AS CONS_UNIDAD,
        SUM(REQUERIMIENTO)
AS REQUERIMIENTO,
        SUM(CONS_TOTAL)
AS CONS_TOTAL,
        AVG(COST_UNIDAD)
AS COST_UNIDAD,
        SUM(COST_TOTAL)
AS COST_TOTAL,
        CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA,
        COMBINACION, TALLAJE, TIEN_OBSERVACIONES,
        SUM(EXISTENTE)
AS EXISTENTE,
        SUM(DISPONIBLE)
AS DISPONIBLE,
        SUM(ENTREGADO)
AS ENTREGADO,
        SUM(DIFERENCIA)
AS DIFERENCIA
    FROM CON_PCP_PEDI_REFE_EXPL_COMP_FI
    GROUP BY TIPO,
        CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA,
        CONS_MATE_GRUPO, CODI_MATE_GRUPO, NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO,
        NOMB_MATE_SUBGRUPO, ES_PRINCIPAL, CONS_PROVEEDOR, CODI_PROVEEDOR, NOMB_PROVEEDOR,
        CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA,
        COMBINACION, TALLAJE, TIEN_OBSERVACIONES
    INTO :TIPO, :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA,
         :NOMB_MATE_REFERENCIA, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, :NOMB_MATE_GRUPO,
         :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL,
         :CONS_PROVEEDOR, :CODI_PROVEEDOR, :NOMB_PROVEEDOR,
             :CONS_UNIDAD,
             :REQUERIMIENTO,
             :CONS_TOTAL,
             :COST_UNIDAD,
             :COST_TOTAL,
             :CONS_UNID_MEDIDA,
             :CODI_UNID_MEDIDA,
             :NOMB_UNID_MEDIDA,
             :COMBINACION,
             :TALLAJE,
             :TIEN_OBSERVACIONES,
             :EXISTENTE,
             :DISPONIBLE,
             :ENTREGADO,
             :DIFERENCIA
  DO
    SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_PEDI_REFE_EXPL_FILT_PEM RETURNS (
	
    TIPO INTEGER,
    CONS_PEDIDO INTEGER,
    CONS_PEDI_REFERENCIA INTEGER,
    NUME_PEDIDO VARCHAR(12) CHARACTER SET NONE,
    ORDE_COMPRA VARCHAR(12) CHARACTER SET NONE,
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

BEGIN

  FOR SELECT TIPO, CONS_PEDIDO, CONS_PEDI_REFERENCIA, NUME_PEDIDO, ORDE_COMPRA,
    CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA,
    CONS_MATE_GRUPO, CODI_MATE_GRUPO, NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO,
    NOMB_MATE_SUBGRUPO, ES_PRINCIPAL, CONS_PROVEEDOR, CODI_PROVEEDOR, NOMB_PROVEEDOR,
    AVG(CONS_UNIDAD)
AS CONS_UNIDAD,
    SUM(REQUERIMIENTO)
AS REQUERIMIENTO,
    SUM(CONS_TOTAL)
AS CONS_TOTAL,
    AVG(COST_UNIDAD)
AS COST_UNIDAD,
    SUM(COST_TOTAL)
AS COST_TOTAL,
    CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA,
    COMBINACION, TALLAJE, TIEN_OBSERVACIONES,
    SUM(EXISTENTE)
AS EXISTENTE,
    SUM(DISPONIBLE)
AS DISPONIBLE,
    SUM(ENTREGADO)
AS ENTREGADO,
    SUM(DIFERENCIA)
AS DIFERENCIA
    FROM CON_PCP_PEDI_REFE_EXPL_COMP_FI
    GROUP BY TIPO, CONS_PEDIDO, CONS_PEDI_REFERENCIA, NUME_PEDIDO, ORDE_COMPRA,
    CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA,
    CONS_MATE_GRUPO, CODI_MATE_GRUPO, NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO,
    NOMB_MATE_SUBGRUPO, ES_PRINCIPAL, CONS_PROVEEDOR, CODI_PROVEEDOR, NOMB_PROVEEDOR,
    CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA,
    COMBINACION, TALLAJE, TIEN_OBSERVACIONES
    INTO :TIPO, :CONS_PEDIDO, :CONS_PEDI_REFERENCIA, :NUME_PEDIDO, :ORDE_COMPRA,
         :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA, :NOMB_MATE_REFERENCIA,
         :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, :NOMB_MATE_GRUPO, :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO,
         :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL, :CONS_PROVEEDOR, :CODI_PROVEEDOR, :NOMB_PROVEEDOR,
             :CONS_UNIDAD,
             :REQUERIMIENTO,
             :CONS_TOTAL,
             :COST_UNIDAD,
             :COST_TOTAL,
             :CONS_UNID_MEDIDA,
             :CODI_UNID_MEDIDA,
             :NOMB_UNID_MEDIDA,
             :COMBINACION,
             :TALLAJE,
             :TIEN_OBSERVACIONES,
             :EXISTENTE,
             :DISPONIBLE,
             :ENTREGADO,
             :DIFERENCIA

  DO
    SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_PEDI_REFE_EXPL_INSUMOS (
    PE_CONS_PEDI_REFERENCIA INTEGER,
    PE_ES_FABRICACION INTEGER)
RETURNS (
	
    CONS_REFE_INSUMO INTEGER,
    CONS_INSU_REFERENCIA INTEGER,
    CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_GRUPO INTEGER,
    CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_SUBGRUPO INTEGER,
    CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_FABRICACION INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CODI_UNID_MEDIDA VARCHAR(12);
DECLARE VARIABLE VAR_NOMB_UNID_MEDIDA VARCHAR(60);
DECLARE VARIABLE VAR_ASIG_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_COST_UNIDAD FLOAT;
DECLARE VARIABLE VAR_UNIDADES INTEGER;
DECLARE VARIABLE VAR_CONS_GRUP_TALL_DETALLE INTEGER;
DECLARE VARIABLE VAR_NUME_REGISTROS INTEGER;
DECLARE VARIABLE VAR_REQU_TOTAL FLOAT;
DECLARE VARIABLE VAR_CONSUMO FLOAT;
DECLARE VARIABLE VAR_SUMA_CONSUMOS FLOAT;

BEGIN
    /*  BUSCAR LA REFERENCIA Y LA VARIACIÓN  */
    SELECT CONS_REFERENCIA, CONS_REFE_VARIACION
       FROM PCP_PEDI_REFERENCIAS
       WHERE CONS_PEDI_REFERENCIA = :PE_CONS_PEDI_REFERENCIA
       INTO :VAR_CONS_REFERENCIA, :VAR_CONS_REFE_VARIACION;

    /*  SELECCIONAR LOS INSUMOS  */
    FOR SELECT CONS_REFE_INSUMO, CONS_INSU_GRUPO, CODI_INSU_GRUPO, NOMB_INSU_GRUPO,
        CONS_INSU_SUBGRUPO, CODI_INSU_SUBGRUPO, NOMB_INSU_SUBGRUPO, CONS_INSU_REFERENCIA,
        CODI_INSU_REFERENCIA, NOMB_INSU_REFERENCIA, ES_FABRICACION, CONS_PROVEEDOR,
        CODI_PROVEEDOR, NOMB_PROVEEDOR, COST_ESTIMADO,
        CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, COMBINACION, TALLAJE,
        TIEN_OBSERVACIONES
       FROM CON_PCP_REFE_INSUMOS(:VAR_CONS_REFE_VARIACION, :PE_ES_FABRICACION)
       INTO :CONS_REFE_INSUMO, :CONS_INSU_GRUPO, :CODI_INSU_GRUPO, :NOMB_INSU_GRUPO,
            :CONS_INSU_SUBGRUPO, :CODI_INSU_SUBGRUPO, :NOMB_INSU_SUBGRUPO, :CONS_INSU_REFERENCIA,
            :CODI_INSU_REFERENCIA, :NOMB_INSU_REFERENCIA, :ES_FABRICACION, :CONS_PROVEEDOR,
            :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :VAR_COST_UNIDAD,
            :VAR_CONS_UNID_MEDIDA, :VAR_CODI_UNID_MEDIDA, :VAR_NOMB_UNID_MEDIDA, :COMBINACION, :TALLAJE,
            :TIEN_OBSERVACIONES 
    DO BEGIN
           /*  BUSCAR LOS COLORES QUE SE UTILIZAR  */ 
          FOR SELECT DISTINCT ASIG_REFERENCIA,CONS_REFE_COLOR,
              CONS_COLOR, CODI_COLOR, NOMB_COLOR
              FROM CON_PCP_REFE_INSU_COLO_USADOS(:CONS_REFE_INSUMO)
              ORDER BY ASIG_REFERENCIA DESC, NOMB_COLOR
              INTO :VAR_ASIG_REFERENCIA , :CONS_REFE_COLOR,
              :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR
          DO BEGIN

            /*  VALIDAR VARIABLES DE LA CONSULTA DEL PADRE  */ 
           IF (:VAR_COST_UNIDAD IS NULL) THEN VAR_COST_UNIDAD = 0;

            /*  ASIGNAR VALORES QUE ESTABAN EN VARIABLES DE LA CONSULTA DEL PADRE  */ 
           CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA;
           CODI_UNID_MEDIDA = :VAR_CODI_UNID_MEDIDA;
           NOMB_UNID_MEDIDA = :VAR_NOMB_UNID_MEDIDA;
           COST_UNIDAD = :VAR_COST_UNIDAD;

            /*  INICIALIZAR LAS VARIABLES  */ 
           VAR_NUME_REGISTROS = 0;
           REQUERIMIENTO = 0;
           VAR_REQU_TOTAL = 0;
           VAR_SUMA_CONSUMOS = 0;

           /*  BUSCAR LAS UNIDADES PROGRAMADAS DE ESTE COLOR, EN CADA UNA DE LAS TALLAS  */
           FOR SELECT CONS_GRUP_TALL_DETALLE, UNIDADES
               FROM CON_PCP_PEDI_UNID_COLOR(:PE_CONS_PEDI_REFERENCIA, :CONS_REFE_COLOR)
               INTO :VAR_CONS_GRUP_TALL_DETALLE, :VAR_UNIDADES 
           DO BEGIN
                 /*  VALIDAR EL RESULTADO  */ 
                IF (:VAR_UNIDADES IS NULL) THEN VAR_UNIDADES = 0;

                VAR_NUME_REGISTROS = :VAR_NUME_REGISTROS + 1;
                REQUERIMIENTO = :REQUERIMIENTO + :VAR_UNIDADES;

                 /*  BUSCAR EL CONSUMO  */ 
                SELECT CONS_UNIDAD
                FROM CON_PCP_REFE_INSU_COLO_TALL(:CONS_REFE_INSUMO, :VAR_ASIG_REFERENCIA,
                     :CONS_REFE_COLOR, :CONS_COLOR, :VAR_CONS_GRUP_TALL_DETALLE)
                INTO :VAR_CONSUMO;

                 /*  SUMAR EL CONSUMO * LAS UNIDADES A LAS UNIDADES TOTALES  */ 
                VAR_REQU_TOTAL = : VAR_REQU_TOTAL + (:VAR_CONSUMO * :VAR_UNIDADES);

                 /*  SUMAR EL CONSUMO PARA CALCULAR EL PROMEDIO  */ 
                VAR_SUMA_CONSUMOS = :VAR_SUMA_CONSUMOS + :VAR_CONSUMO;
           END

            /*  CALCULAR EL CONSUMO PROMEDIO  */ 
           IF (:VAR_NUME_REGISTROS > 0) THEN
              CONS_UNIDAD = (:VAR_SUMA_CONSUMOS / :VAR_NUME_REGISTROS);
           ELSE
              CONS_UNIDAD = 0;

           IF (:CONS_UNIDAD  > 0) THEN BEGIN
                /*  DESCARTAR LAS QUE NO TENGAN REQUERIMIENTO  */ 
               IF (:REQUERIMIENTO > 0) THEN BEGIN
                       /*  CONSUMO TOTAL  */ 
                      CONS_TOTAL = :VAR_REQU_TOTAL;

                       /*  COSTO TOTAL  */ 
                      COST_TOTAL = :COST_UNIDAD * :REQUERIMIENTO;

                      EXISTENTE = 0;
                      DISPONIBLE = 0;
                      ENTREGADO = 0;
                      DIFERENCIA = :DISPONIBLE - (:CONS_TOTAL - :ENTREGADO);

                      SUSPEND;
               END
           END
      END
   END
END ^

ALTER PROCEDURE CON_PCP_PEDI_REFE_EXPL_MATE (
    PE_CONS_PEDI_REFERENCIA INTEGER,
    PE_ES_PRINCIPAL INTEGER)
RETURNS (
	
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CODI_UNID_MEDIDA VARCHAR(12);
DECLARE VARIABLE VAR_NOMB_UNID_MEDIDA VARCHAR(60);
DECLARE VARIABLE VAR_ASIG_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_COST_UNIDAD FLOAT;
DECLARE VARIABLE VAR_UNIDADES INTEGER;
DECLARE VARIABLE VAR_CONS_GRUP_TALL_DETALLE INTEGER;
DECLARE VARIABLE VAR_NUME_REGISTROS INTEGER;
DECLARE VARIABLE VAR_REQU_TOTAL FLOAT;
DECLARE VARIABLE VAR_CONSUMO FLOAT;
DECLARE VARIABLE VAR_SUMA_CONSUMOS FLOAT;

BEGIN
    /*  BUSCAR LA REFERENCIA Y LA VARIACIÓN  */
    SELECT CONS_REFERENCIA, CONS_REFE_VARIACION
       FROM PCP_PEDI_REFERENCIAS
       WHERE CONS_PEDI_REFERENCIA = :PE_CONS_PEDI_REFERENCIA
       INTO :VAR_CONS_REFERENCIA, :VAR_CONS_REFE_VARIACION;

    /*  SELECCIONAR LOS MATERIALES  */
    FOR SELECT CONS_REFE_MATERIAL, CONS_MATE_GRUPO, CODI_MATE_GRUPO, NOMB_MATE_GRUPO,
        CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO, NOMB_MATE_SUBGRUPO, CONS_MATE_REFERENCIA,
        CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA, ES_PRINCIPAL, CONS_PROVEEDOR,
        CODI_PROVEEDOR, NOMB_PROVEEDOR, COST_ESTIMADO,
        CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, COMBINACION, TALLAJE,
        TIEN_OBSERVACIONES
       FROM CON_PCP_REFE_MATERIALES(:VAR_CONS_REFE_VARIACION, :PE_ES_PRINCIPAL)
       INTO :CONS_REFE_MATERIAL, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, :NOMB_MATE_GRUPO,
            :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, :NOMB_MATE_SUBGRUPO, :CONS_MATE_REFERENCIA,
            :CODI_MATE_REFERENCIA, :NOMB_MATE_REFERENCIA, :ES_PRINCIPAL, :CONS_PROVEEDOR,
            :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :VAR_COST_UNIDAD,
            :VAR_CONS_UNID_MEDIDA, :VAR_CODI_UNID_MEDIDA, :VAR_NOMB_UNID_MEDIDA, :COMBINACION, 
            :TALLAJE, :TIEN_OBSERVACIONES 
    DO BEGIN

           /*  BUSCAR LOS COLORES QUE SE UTILIZAR  */ 
          FOR SELECT DISTINCT ASIG_REFERENCIA,CONS_REFE_COLOR,
              CONS_COLOR, CODI_COLOR, NOMB_COLOR
              FROM CON_PCP_REFE_MATE_COLO_USADOS(:CONS_REFE_MATERIAL)
              ORDER BY ASIG_REFERENCIA DESC, NOMB_COLOR
              INTO :VAR_ASIG_REFERENCIA , :CONS_REFE_COLOR,
              :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR

          DO BEGIN
                /*  VALIDAR VARIABLES DE LA CONSULTA DEL PADRE  */ 
               IF (:VAR_COST_UNIDAD IS NULL) THEN VAR_COST_UNIDAD = 0;

                /*  ASIGNAR VALORES QUE ESTABAN EN VARIABLES DE LA CONSULTA DEL PADRE  */ 
               CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA;
               CODI_UNID_MEDIDA = :VAR_CODI_UNID_MEDIDA;
               NOMB_UNID_MEDIDA = :VAR_NOMB_UNID_MEDIDA;
               COST_UNIDAD = :VAR_COST_UNIDAD;

                /*  INICIALIZAR LAS VARIABLES  */ 
               VAR_NUME_REGISTROS = 0;
               REQUERIMIENTO = 0;
               VAR_REQU_TOTAL = 0;
               VAR_SUMA_CONSUMOS = 0;

               /*  BUSCAR LAS UNIDADES PROGRAMADAS DE ESTE COLOR, EN CADA UNA DE LAS TALLAS  */
               FOR SELECT CONS_GRUP_TALL_DETALLE, UNIDADES
                   FROM CON_PCP_PEDI_UNID_COLOR(:PE_CONS_PEDI_REFERENCIA, :CONS_REFE_COLOR)
                   INTO :VAR_CONS_GRUP_TALL_DETALLE, :VAR_UNIDADES 
               DO BEGIN
                     /*  VALIDAR EL RESULTADO  */ 
                    IF (:VAR_UNIDADES IS NULL) THEN VAR_UNIDADES = 0;

                     /*  INCREMENTAR EL CONTADOR DE REGISTROS  */ 
                    VAR_NUME_REGISTROS = :VAR_NUME_REGISTROS + 1;

                     /*  SUMAR LAS UNIDADES AL REQUERIMIENTO  */ 
                    REQUERIMIENTO = :REQUERIMIENTO + :VAR_UNIDADES;

                     /*  BUSCAR EL CONSUMO  */ 
                    SELECT CONS_UNIDAD
                    FROM CON_PCP_REFE_MATE_COLO_TALL(:CONS_REFE_MATERIAL, :VAR_ASIG_REFERENCIA,
                         :CONS_REFE_COLOR, :CONS_COLOR, :VAR_CONS_GRUP_TALL_DETALLE)
                    INTO :VAR_CONSUMO;

                     /*  SUMAR EL CONSUMO * LAS UNIDADES A LAS UNIDADES TOTALES  */ 
                    VAR_REQU_TOTAL = : VAR_REQU_TOTAL + (:VAR_CONSUMO * :VAR_UNIDADES);

                     /*  SUMAR EL CONSUMO PARA CALCULAR EL PROMEDIO  */ 
                    VAR_SUMA_CONSUMOS = :VAR_SUMA_CONSUMOS + :VAR_CONSUMO;
               END

                /*  CALCULAR EL CONSUMO PROMEDIO  */ 
               IF (:VAR_NUME_REGISTROS > 0) THEN
                  CONS_UNIDAD = (:VAR_SUMA_CONSUMOS / :VAR_NUME_REGISTROS);
               ELSE
                  CONS_UNIDAD = 0;

               IF (:CONS_UNIDAD  > 0) THEN BEGIN
                    /*  DESCARTAR LAS QUE NO TENGAN REQUERIMIENTO  */ 
                   IF (:REQUERIMIENTO > 0) THEN BEGIN

                       /*  CONSUMO TOTAL  */ 
                      CONS_TOTAL = :VAR_REQU_TOTAL;

                      COST_TOTAL = :COST_UNIDAD * :REQUERIMIENTO;
                      EXISTENTE = 0;
                      DISPONIBLE = 0;
                      ENTREGADO = 0;
                      DIFERENCIA = :DISPONIBLE - (:CONS_TOTAL - :ENTREGADO);

                      SUSPEND;
                   END
              END
         END
     END
END ^

ALTER PROCEDURE CON_PCP_PEDI_SUMA_UNIDADES (
    PE_CONS_PEDIDO INTEGER,
    PE_CONS_PEDI_REFERENCIA INTEGER)
RETURNS (
	UNIDADES INTEGER)
AS 

BEGIN
  /*  VERIFICAR SI ES TODO EL PEDIDO  */
  IF ((:PE_CONS_PEDI_REFERENCIA IS NULL) OR (:PE_CONS_PEDI_REFERENCIA <= 0))  THEN BEGIN

          FOR SELECT SUM(UNIDADES)
AS UNIDADES
            FROM VIS_PCP_PEDI_UNID_BASICO
            WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
            INTO :UNIDADES

          DO 
            SUSPEND;
  END
  /*  CONSULTA CON PEDIDO + REFERENCIA DEL PEDIDO  */
  ELSE BEGIN
          FOR SELECT SUM(UNIDADES)
AS UNIDADES
            FROM VIS_PCP_PEDI_UNID_BASICO
            WHERE CONS_PEDIDO = :PE_CONS_PEDIDO AND 
                    CONS_PEDI_REFERENCIA = :PE_CONS_PEDI_REFERENCIA
            INTO :UNIDADES
          DO SUSPEND;
    END
END ^

ALTER PROCEDURE CON_PCP_PEDI_UNID_COLOR (
    PE_CONS_PEDI_REFERENCIA INTEGER,
    PE_CONS_REFE_COLOR INTEGER)
RETURNS (
	
    CONS_GRUP_TALL_DETALLE INTEGER,
    TALLA VARCHAR(12) CHARACTER SET NONE,
    UNIDADES INTEGER)
AS 

BEGIN
      /*  RECORRER LAS UNIDADES  */
      FOR SELECT CONS_GRUP_TALL_DETALLE,
      SUM(UNIDADES)
      FROM PCP_PEDI_UNIDADES
      WHERE CONS_PEDI_REFERENCIA = :PE_CONS_PEDI_REFERENCIA AND 
            CONS_REFE_COLOR = :PE_CONS_REFE_COLOR
      GROUP BY CONS_GRUP_TALL_DETALLE
      INTO :CONS_GRUP_TALL_DETALLE,  :UNIDADES

      DO BEGIN
          /*  BUSCAR LA TALLA  */
          SELECT TALLA
          FROM GLO_GRUP_TALL_DETALLE
          WHERE CONS_GRUP_TALL_DETALLE = :CONS_GRUP_TALL_DETALLE
          INTO :TALLA;

          SUSPEND;
      END
END ^

ALTER PROCEDURE CON_PCP_PERMISOS (
    PE_USUARIO VARCHAR(20) CHARACTER SET NONE,
    PE_GRUPO VARCHAR(20) CHARACTER SET NONE)
RETURNS (
	
    USUARIO VARCHAR(20) CHARACTER SET NONE,
    MENU VARCHAR(50) CHARACTER SET NONE,
    ESCRITURA INTEGER)
AS 

BEGIN
    /*  PERMISOS DEL USUARIO  */
    FOR SELECT USUARIO, MENU, ESCRITURA
    FROM PCP$PERMISOS
    WHERE USUARIO = :PE_USUARIO
    INTO :USUARIO, :MENU, :ESCRITURA

    DO
        SUSPEND;

    FOR SELECT USUARIO, MENU, ESCRITURA
    FROM PCP$PERMISOS
    WHERE USUARIO = 'PUBLIC'
    INTO :USUARIO, :MENU, :ESCRITURA

    DO
        SUSPEND;

    FOR SELECT USUARIO, MENU, ESCRITURA
    FROM PCP$PERMISOS
    WHERE (USUARIO = :PE_GRUPO  AND
        EXISTS(SELECT RDB$USER FROM
                RDB$USER_PRIVILEGES
                WHERE RDB$USER = :PE_USUARIO AND 
                        RDB$RELATION_NAME = :PE_GRUPO AND 
                        RDB$PRIVILEGE = 'M'))
    INTO :USUARIO, :MENU, :ESCRITURA

    DO
        SUSPEND;

END ^

ALTER PROCEDURE CON_PCP_PERS_CURVA RETURNS (
	
    CONS_FORM_PAGO_PERSONAL INTEGER,
    CONS_PERSONAL INTEGER,
    FECH_INICIAL TIMESTAMP,
    VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    CONS_SIS_FORM_PAGO INTEGER,
    NOMB_SIS_FORM_PAGO VARCHAR(60) CHARACTER SET NONE,
    PARA_1 VARCHAR(60) CHARACTER SET NONE,
    PARA_2 VARCHAR(60) CHARACTER SET NONE,
    PARA_3 VARCHAR(60) CHARACTER SET NONE,
    CONS_FORM_PAGO_APRENDIZAJE INTEGER,
    CODI_FORM_PAGO_APRENDIZAJE VARCHAR(12) CHARACTER SET NONE,
    NOMB_FORM_PAGO_APRENDIZAJE VARCHAR(60) CHARACTER SET NONE,
    FECH_FINA_PAGO_APRENDIZAJE TIMESTAMP,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
    EFIC_INIC_APRENDIZAJE NUMERIC(15, 5),
    EFIC_INICIAL NUMERIC(15, 5),
    EFIC_FINAL NUMERIC(15, 5),
    EFIC_PRIM_DIA NUMERIC(15, 5),
    VALO_BONO_INICIAL NUMERIC(15, 5),
    VALO_BONO_FINAL NUMERIC(15, 5),
    VALO_BONO_PRIM_DIA NUMERIC(15, 5),
    CONS_OPER_COSTURA INTEGER,
    CODI_OPER_COSTURA VARCHAR(12) CHARACTER SET NONE,
    NOMB_OPER_COSTURA VARCHAR(30) CHARACTER SET NONE,
    NUME_DIAS_SEMANA INTEGER,
    NUME_SEMANAS INTEGER,
    CODI_PERSONAL VARCHAR(12) CHARACTER SET NONE,
    NOMB_COMPLETO VARCHAR(102) CHARACTER SET NONE,
    NOMB_PLANTA VARCHAR(60) CHARACTER SET NONE,
    NOMB_SECCION VARCHAR(60) CHARACTER SET NONE,
    ES_PORCENTUAL INTEGER,
    CONS_TURNO INTEGER,
    PAGO_DIARIO INTEGER)
AS 

BEGIN
  /* Consultar el personal en curva */
  FOR SELECT P.CONS_FORM_PAGO_PERSONAL, P.CONS_PERSONAL,
       P.FECH_INICIAL, P.VALO_HORA_MINI_GARANTIZADO,
       P.VALO_HORA_PRODUCCION, P.CONS_SIS_FORM_PAGO,
       F.NOMB_SIS_FORM_PAGO, P.PARA_1,
       P.PARA_2, P.PARA_3,
       P.CONS_FORM_PAGO_APRENDIZAJE, A.CODI_FORM_PAGO_APRENDIZAJE,
       A.NOMB_FORM_PAGO_APRENDIZAJE, P.FECH_FINA_PAGO_APRENDIZAJE,
       P.FECH_SISTEMA, P.USUA_SISTEMA,
       P.EFIC_INIC_APRENDIZAJE,
       P.CONS_OPER_COSTURA,
       A.NUME_DIAS_SEMANA, A.NUME_SEMANAS, A.EFIC_FINAL,
       A.VALO_BONO_INICIAL, A.VALO_BONO_FINAL, A.EFIC_INICIAL,
       A.ES_PORCENTUAL, A.PAGO_DIARIO, A.EFIC_PRIM_DIA, A.VALO_BONO_PRIM_DIA
  FROM PCP_FORM_PAGO_PERSONAL P,
        SIS_PCP_FORM_PAGO F, PCP_FORM_PAGO_APRENDIZAJE A
  WHERE P.CONS_FORM_PAGO_APRENDIZAJE = A.CONS_FORM_PAGO_APRENDIZAJE AND 
        P.CONS_SIS_FORM_PAGO = F.CONS_SIS_FORM_PAGO AND 
        A.CONS_FORM_PAGO_APRENDIZAJE IS NOT NULL
  INTO :CONS_FORM_PAGO_PERSONAL, :CONS_PERSONAL,
       :FECH_INICIAL, :VALO_HORA_MINI_GARANTIZADO,
       :VALO_HORA_PRODUCCION, :CONS_SIS_FORM_PAGO,
       :NOMB_SIS_FORM_PAGO, :PARA_1,
       :PARA_2, :PARA_3,
       :CONS_FORM_PAGO_APRENDIZAJE, :CODI_FORM_PAGO_APRENDIZAJE,
       :NOMB_FORM_PAGO_APRENDIZAJE, :FECH_FINA_PAGO_APRENDIZAJE,
       :FECH_SISTEMA, :USUA_SISTEMA,
       :EFIC_INIC_APRENDIZAJE, :CONS_OPER_COSTURA,
       :NUME_DIAS_SEMANA, :NUME_SEMANAS, :EFIC_FINAL,
       :VALO_BONO_INICIAL, :VALO_BONO_FINAL, :EFIC_INICIAL,
       :ES_PORCENTUAL, :PAGO_DIARIO, :EFIC_PRIM_DIA, :VALO_BONO_PRIM_DIA

  DO BEGIN

    /* Inicializar variables */
    CODI_OPER_COSTURA = '';
    NOMB_OPER_COSTURA = '';

    SELECT CODI_OPER_COSTURA, NOMB_OPER_COSTURA
    FROM PCP_OPER_COSTURA
    WHERE CONS_OPER_COSTURA = :CONS_OPER_COSTURA
    ORDER BY CONS_OPER_COSTURA
    INTO :CODI_OPER_COSTURA, :NOMB_OPER_COSTURA;

    /* Consultar el personal */
    SELECT CODI_PERSONAL, NOMB_COMPLETO
    FROM GLO_PERSONAL
    WHERE CONS_PERSONAL = :CONS_PERSONAL
    ORDER BY CONS_PERSONAL
    INTO :CODI_PERSONAL, NOMB_COMPLETO;

    /* Consultar la ubicación del personal */
    SELECT NOMB_PLANTA, NOMB_SECCION, CONS_TURNO
    FROM CON_GLO_PERS_UBICA_UNIDAD(:CONS_PERSONAL, 'NOW') U
    INTO :NOMB_PLANTA, :NOMB_SECCION, :CONS_TURNO;

    /* Devolver el registro */
    SUSPEND;
  END
END ^

ALTER PROCEDURE CON_PCP_PLAN_DIAS_NO_LABO_LINE (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_CONS_EMPRESA INTEGER,
    PE_CONS_PLANTA INTEGER,
    PE_CONS_LINEA INTEGER)
    RETURNS (
	FECHA TIMESTAMP)
AS 

begin
  /*  CONSULTAR EL CALENDARIO PARA TODA LA EMPRESA  */
  FOR SELECT FECHA
  FROM PCP_PLAN_CALENDARIO
  WHERE (FECHA BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL) AND 
        CONS_EMPRESA = 0 AND 
        CONS_PLANTA = 0 AND 
        CONS_LINEA = 0 AND 
        CONS_SECCION = 0
  ORDER BY FECHA
  INTO :FECHA DO

    SUSPEND;

  /*  CONSULTAR EL CALENDARIO PARA LA SELECCION  */
  FOR SELECT FECHA
  FROM PCP_PLAN_CALENDARIO
  WHERE (FECHA BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL) AND 
        CONS_EMPRESA = :PE_CONS_EMPRESA AND 
        CONS_PLANTA = :PE_CONS_PLANTA AND 
        CONS_LINEA = :PE_CONS_LINEA
  ORDER BY FECHA
  INTO :FECHA DO

    SUSPEND;
end ^

ALTER PROCEDURE CON_PCP_PLAN_DIAS_NO_LABO_PLAN (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_CONS_EMPRESA INTEGER,
    PE_CONS_PLANTA INTEGER)
    RETURNS (
	FECHA TIMESTAMP)
AS 

begin
  /*  CONSULTAR EL CALENDARIO PARA TODA LA EMPRESA  */
  FOR SELECT FECHA
  FROM PCP_PLAN_CALENDARIO
  WHERE (FECHA BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL) AND 
        CONS_EMPRESA = 0 AND 
        CONS_PLANTA = 0 AND 
        CONS_LINEA = 0 AND 
        CONS_SECCION = 0
  ORDER BY FECHA

  INTO :FECHA DO

    SUSPEND;

  /*  CONSULTAR EL CALENDARIO PARA LA SELECCION  */
  FOR SELECT FECHA
  FROM PCP_PLAN_CALENDARIO
  WHERE (FECHA BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL) AND 
        CONS_EMPRESA = :PE_CONS_EMPRESA AND 
        CONS_PLANTA = :PE_CONS_PLANTA
  ORDER BY FECHA

  INTO :FECHA DO

    SUSPEND;
end ^

ALTER PROCEDURE CON_PCP_PLAN_DIAS_NO_LABO_SECC (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_CONS_EMPRESA INTEGER,
    PE_CONS_PLANTA INTEGER,
    PE_CONS_LINEA INTEGER,
    PE_CONS_SECCION INTEGER)
    RETURNS (
	FECHA TIMESTAMP)
AS 

begin
  /*  CONSULTAR EL CALENDARIO PARA TODA LA EMPRESA  */
  FOR SELECT FECHA
  FROM PCP_PLAN_CALENDARIO
  WHERE (FECHA BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL) AND 
        CONS_EMPRESA = 0 AND 
        CONS_PLANTA = 0 AND 
        CONS_LINEA = 0 AND 
        CONS_SECCION = 0
  ORDER BY FECHA
  INTO :FECHA DO

    SUSPEND;

  /*  CONSULTAR EL CALENDARIO PARA LA SELECCION  */
  FOR SELECT FECHA
  FROM PCP_PLAN_CALENDARIO
  WHERE (FECHA BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL) AND 
        CONS_EMPRESA = :PE_CONS_EMPRESA AND 
        CONS_PLANTA = :PE_CONS_PLANTA AND 
        CONS_LINEA = :PE_CONS_LINEA AND 
        CONS_SECCION = :PE_CONS_SECCION
  ORDER BY FECHA
  INTO :FECHA DO

    SUSPEND;
end ^

ALTER PROCEDURE CON_PCP_PROCESOS RETURNS (
	
    CONS_CONSULTA INTEGER,
    CONS_PROCESO INTEGER,
    CODI_PROCESO VARCHAR(12) CHARACTER SET NONE,
    NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
    REGI_SISTEMA INTEGER,
    CONS_PROC_SIGUIENTE INTEGER,
    RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
    ANAL_METODOS INTEGER,
    CONS_PROD_PAQU_TIPO INTEGER,
    CONT_TIQUETES INTEGER,
    PLAN_DETALLADA INTEGER,
    DURA_ESTIMADA INTEGER,
    VALO_DURA_ESTIMADA INTEGER,
    CONS_PUNT_CONT_INICIAL INTEGER,
    CONS_PUNT_CONT_FINAL INTEGER,
    IZQUIERDA INTEGER,
    ARRIBA INTEGER,
    OBSERVACIONES VARCHAR(250) CHARACTER SET NONE,
    SECU_NIVEL INTEGER,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_TIEN_SIGUIENTE INTEGER;
DECLARE VARIABLE VAR_CONS_PROCESO INTEGER;

BEGIN
  /*  INICIALIZAR VARIABLES LOCALES  */
  CONS_CONSULTA = 1;
  VAR_TIEN_SIGUIENTE = 1;

  /*  BUSCAR EL PRIMER REGISTRO */
  VAR_CONS_PROCESO = 1;

  WHILE (VAR_TIEN_SIGUIENTE = 1) DO BEGIN
        SELECT CONS_PROCESO, CODI_PROCESO,
            NOMB_PROCESO, REGI_SISTEMA, CONS_PROC_SIGUIENTE,
            RESPONSABLE, ANAL_METODOS, CONS_PROD_PAQU_TIPO, CONT_TIQUETES,
            PLAN_DETALLADA, DURA_ESTIMADA, VALO_DURA_ESTIMADA, CONS_PUNT_CONT_INICIAL,
            CONS_PUNT_CONT_FINAL, IZQUIERDA, ARRIBA, OBSERVACIONES,
            SECU_NIVEL, FECH_SISTEMA, USUA_SISTEMA
        FROM PCP_PROCESOS
        WHERE CONS_PROCESO = :VAR_CONS_PROCESO
        INTO :CONS_PROCESO, :CODI_PROCESO, :NOMB_PROCESO, :REGI_SISTEMA,
        :CONS_PROC_SIGUIENTE, :RESPONSABLE, :ANAL_METODOS,
        :CONS_PROD_PAQU_TIPO, :CONT_TIQUETES, :PLAN_DETALLADA, :DURA_ESTIMADA,
        :VALO_DURA_ESTIMADA, :CONS_PUNT_CONT_INICIAL, :CONS_PUNT_CONT_FINAL, :IZQUIERDA,
        :ARRIBA, :OBSERVACIONES, :SECU_NIVEL, :FECH_SISTEMA, :USUA_SISTEMA;

        /*  GENERAR EL REGISTRO  */
        SUSPEND;

        /*  ASIGNAR EL SIGUIENTE A LA VARIBLE DE BۓQUEDA  */
        VAR_CONS_PROCESO = :CONS_PROC_SIGUIENTE;

        /*  INCREMENTAR EL CONTADOR DE LA CONSULTA  */
        CONS_CONSULTA = :CONS_CONSULTA + 1;

        /*  SI NO TIENE SIGUIENTE, SALIR  */
        IF (:CONS_PROC_SIGUIENTE IS NULL) THEN VAR_TIEN_SIGUIENTE = -1;
  END
END ^

ALTER PROCEDURE CON_PCP_PROD_DATO_BASI_TIQU_C (
    PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE)
    RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
    CONS_TIQU_CONTROL INTEGER,
    CONS_PROD_ORDEN INTEGER,
    CONS_PROD_LOTE INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    NUME_LOTE INTEGER,
    NUME_PAQUETE INTEGER,
    SECU_OPERACION INTEGER,
    CODI_OPERACION VARCHAR(12) CHARACTER SET NONE,
    NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
    CONS_REFE_MATERIAL INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    NOMB_CORT_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    TIEM_OPERACION NUMERIC(15, 5),
    TIEM_TOTAL NUMERIC(15, 5),
    NUME_TIQUETES INTEGER,
    UNID_POR_TIQUETE INTEGER)
AS 

DECLARE VARIABLE VAR_LONGITUD INTEGER;
DECLARE VARIABLE VAR_AGRU_PAQUETE INTEGER;
DECLARE VARIABLE VAR_CONS_CORT_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_AUXI_INTEGER INTEGER;
DECLARE VARIABLE VAR_PAQU_INICIAL INTEGER;
DECLARE VARIABLE VAR_TEXT_CONS_TIQU_CONTROL VARCHAR(6);
DECLARE VARIABLE  VAR_TEXT_NUME_PAQUETE VARCHAR(4);
DECLARE VARIABLE VAR_TEXT_SECU_OPERACION VARCHAR(3);

BEGIN
    /*  VALIDAR QUE EL CÓDIGO DE BARRAS TENGA 14 CARACTERES  */
    SELECT LONGITUD
    FROM PAS_LENGTH(:PE_CODI_BARRAS)
    INTO :VAR_LONGITUD;
    IF (:VAR_LONGITUD <> 14) THEN
      EXCEPTION EXC_PCP_0012; /*  CODIGO DE BARRAS NO VALIDO  */

    /*  VERIFICAR QUE EL PRIMER DIGITO SEA 9 - CORTE  */
    IF (SUBSTRING(:PE_CODI_BARRAS FROM 1 FOR 1) <> '9') THEN
      EXCEPTION EXC_PCP_0029;

    /*  INTERPRTETAR (DESARMAR) EL CÓDIGO DE BARRAS EN VARIABLES  */
    CONS_TIQU_CONTROL = SUBSTRING(:PE_CODI_BARRAS FROM 2 FOR 6);
    NUME_PAQUETE = SUBSTRING(:PE_CODI_BARRAS FROM 8 FOR 4);
    SECU_OPERACION = SUBSTRING(:PE_CODI_BARRAS FROM 12 FOR 3);

    /*  BUSCAR LA INFORMACIÓN DEL LOTE DE PRODUCCIÓN  */
    SELECT INFO.CONS_PROD_LOTE, INFO.CONS_REFE_MATERIAL,
    INFO.AGRU_PAQUETE
    FROM PCP_PROD_LOTE_CORTE INFO
    WHERE CONS_TIQU_CONTROL = :CONS_TIQU_CONTROL
    INTO :CONS_PROD_LOTE, :CONS_REFE_MATERIAL,
        :VAR_AGRU_PAQUETE;

    SELECT CONS_PROD_ORDEN, NUME_LOTE
    FROM PCP_PROD_LOTES
    WHERE CONS_PROD_LOTE = :CONS_PROD_LOTE
    INTO :CONS_PROD_ORDEN, :NUME_LOTE;

    /*  BUSCAR INFORMACIÓN  DE LA ORDEN DE PRODUCCIÓN  */
    SELECT NUME_PROD_ORDEN
    FROM PCP_PROD_ORDENES
    WHERE CONS_PROD_ORDEN = :CONS_PROD_ORDEN
    INTO :NUME_PROD_ORDEN;

    /*  BUSCAR LA INFORMACIÓN DEL MATERIAL  */
    SELECT MATE.CODI_MATE_REFERENCIA, MATE.NOMB_MATE_REFERENCIA
    FROM PCP_MATE_REFERENCIAS MATE, PCP_REFE_MATERIALES REFE
    WHERE MATE.CONS_MATE_REFERENCIA = REFE.CONS_MATE_REFERENCIA AND 
        REFE.CONS_REFE_MATERIAL = :CONS_REFE_MATERIAL
    INTO :CODI_MATE_REFERENCIA, :NOMB_MATE_REFERENCIA;

    /*  BUSCAR LA INFORMACIÓN DE LA OPERACIԎ  */
    SELECT CORT.CODI_OPERACION, CORT.NOMB_OPERACION,
        CORT.CONS_CORT_UNID_MEDIDA, CORT.TIEM_OPERACION,
        CORT.TIEM_TOTAL, CORT.UNID_POR_TIQUETE, CORT.NUME_TIQUETES,
        UNID.NOMB_CORT_UNID_MEDIDA
    FROM PCP_PROD_LIST_OPER_CORTE CORT, SIS_CORT_UNID_MEDIDA UNID
    WHERE CORT.CONS_PROD_LOTE = :CONS_PROD_LOTE AND 
        CORT.CONS_REFE_MATERIAL = :CONS_REFE_MATERIAL AND 
        CORT.SECU_OPERACION = :SECU_OPERACION AND 
        UNID.CONS_CORT_UNID_MEDIDA = CORT.CONS_CORT_UNID_MEDIDA
    INTO :CODI_OPERACION, :NOMB_OPERACION,
        :VAR_CONS_CORT_UNID_MEDIDA, :TIEM_OPERACION,
        :TIEM_TOTAL, :UNID_POR_TIQUETE,
        :NUME_TIQUETES, :NOMB_CORT_UNID_MEDIDA;

    /*  EN ESTE PUNTO, SE TIENE LA INFORMACIÓN DEL TIQUETE, PERO SI ES UN TIQUETE AGRUPADO, SE DEBE ABRIR EN TANTOS REGISTROS COMO PAQUETES AGRUPE  */
    IF (:VAR_CONS_CORT_UNID_MEDIDA <> 4) THEN  /*  NO SON PAQUETES  */
    BEGIN
       CODI_BARRAS = :PE_CODI_BARRAS;
       /*  GENERAR EL REGISTRO  */
      SUSPEND;
    END
    ELSE BEGIN
        /*  VALIDAR EL AGRUPADOR  */
        IF ((:VAR_AGRU_PAQUETE IS NULL) OR (:VAR_AGRU_PAQUETE = 0))  THEN
            EXCEPTION EXC_PCP_0030; /*  EL AGRUPADOR DE CORTE NO ES VALIDO  */

        /*  CALCULAR EL PAQUETE INICIAL  */
        VAR_PAQU_INICIAL = (:VAR_AGRU_PAQUETE * ((:NUME_PAQUETE - 1) / 3)) + 1;

        /*  GENERAR LOS TIQUETES REQUERIDOS  */
        VAR_AUXI_INTEGER = :VAR_PAQU_INICIAL;
        WHILE (VAR_PAQU_INICIAL < :VAR_AUXI_INTEGER + :VAR_AGRU_PAQUETE) DO BEGIN
           /*  SI NO ES MAYOR AL TOTAL DE TIQUETES  */
           IF (:VAR_PAQU_INICIAL <= :NUME_TIQUETES) THEN BEGIN
                NUME_PAQUETE = :VAR_PAQU_INICIAL;

                SELECT RESULTADO
                FROM FUN_GLO_CERO_IZQUIERDA(:CONS_TIQU_CONTROL, 6)
                INTO :VAR_TEXT_CONS_TIQU_CONTROL;

                SELECT RESULTADO
                FROM FUN_GLO_CERO_IZQUIERDA(:NUME_PAQUETE, 4)
                INTO :VAR_TEXT_NUME_PAQUETE;

                SELECT RESULTADO
                FROM FUN_GLO_CERO_IZQUIERDA(:SECU_OPERACION, 3)
                INTO :VAR_TEXT_SECU_OPERACION;

                CODI_BARRAS = '9'||:VAR_TEXT_CONS_TIQU_CONTROL||:VAR_TEXT_NUME_PAQUETE||:VAR_TEXT_SECU_OPERACION;

                SUSPEND;

                NUME_PAQUETE = :NUME_PAQUETE + 1;
           END

           VAR_PAQU_INICIAL = :VAR_PAQU_INICIAL + 1;
        END
    END
END ^

ALTER PROCEDURE CON_PCP_PROD_DATO_BASI_TIQU_F (
    PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE)
    RETURNS (
	CONS_PROD_PAQU_TIPO INTEGER,
    NOMB_PROD_PAQU_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_PROD_ORDEN INTEGER,
    CONS_PROD_LOTE INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    NUME_LOTE INTEGER,
    CONS_PROCESO INTEGER,
    NUME_PAQUETE INTEGER,
    CONS_GRUP_TALL_DETALLE INTEGER,
    CONS_REFE_COLOR INTEGER,
    SECU_OPERACION INTEGER,
    CODI_OPERACION VARCHAR(12) CHARACTER SET NONE,
    NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
    TIEM_OPERACION NUMERIC(15, 5),
    CANT_UNIDADES INTEGER,
    CONS_PUNT_CONTROL INTEGER)
AS 

DECLARE VARIABLE VAR_LONGITUD INTEGER;
DECLARE VARIABLE VAR_ES_TITULO INTEGER;

BEGIN
      /*  VALIDAR QUE EL CÓDIGO DE BARRAS TENGA 14 CARACTERES  */
      SELECT LONGITUD
      FROM PAS_LENGTH(:PE_CODI_BARRAS)
      INTO :VAR_LONGITUD;

      IF (:VAR_LONGITUD <> 14) THEN
          EXCEPTION EXC_PCP_0012; /*  CODIGO DE BARRAS NO VALIDO  */

      /*  INTERPRTETAR (DESARMAR) EL CÓDIGO DE BARRAS EN VARIABLES  */
      CONS_PROD_PAQU_TIPO = SUBSTRING(:PE_CODI_BARRAS FROM 1 FOR 1);
      CONS_PROD_LOTE = SUBSTRING(:PE_CODI_BARRAS FROM 2 FOR 6);
      NUME_PAQUETE = SUBSTRING(:PE_CODI_BARRAS FROM 8 FOR 4);
      SECU_OPERACION = SUBSTRING(:PE_CODI_BARRAS FROM 12 FOR 3);

      /*  TIPO DE DISTRIBUCIԎ DE PAQUETES  */
      SELECT NOMB_PROD_PAQU_TIPO
      FROM PCP_PROD_PAQU_TIPOS
      WHERE CONS_PROD_PAQU_TIPO = :CONS_PROD_PAQU_TIPO
      INTO :NOMB_PROD_PAQU_TIPO;

      /*  BUSCAR INFORMACIÓN  DE LA ORDEN DE PRODUCCIÓN  */
      SELECT CONS_PROD_ORDEN, NUME_LOTE
      FROM PCP_PROD_LOTES
      WHERE CONS_PROD_LOTE = :CONS_PROD_LOTE
      INTO :CONS_PROD_ORDEN, :NUME_LOTE;

      /*  PROCESO CON UNIDADES DESDE CORTE  */
      CONS_PROCESO = 0;
      SELECT CONS_REFE_COLOR, CONS_GRUP_TALL_DETALLE,
      CANT_UNIDADES
      FROM PCP_PROD_DIST_PAQUETES
      WHERE CONS_PROD_LOTE = :CONS_PROD_LOTE AND 
            CONS_PROCESO = :CONS_PROCESO AND 
            CONS_PROD_PAQU_TIPO = :CONS_PROD_PAQU_TIPO AND 
            NUME_PAQUETE = :NUME_PAQUETE

      INTO :CONS_REFE_COLOR, :CONS_GRUP_TALL_DETALLE, :CANT_UNIDADES;

      IF (:CANT_UNIDADES IS NULL) THEN CANT_UNIDADES = 0;

      /*  BUSCAR INFORMACIÓN DE LA ORDEN DE PRODUCCIÓN  */
      SELECT NUME_PROD_ORDEN
      FROM PCP_PROD_ORDENES
      WHERE CONS_PROD_ORDEN = :CONS_PROD_ORDEN
      INTO :NUME_PROD_ORDEN;

      /*  BUSCAR INFORMACIÓN DE LA OPERACIԎ  */
      SELECT CODI_OPER_COSTURA, NOMB_OPER_COSTURA, TIEMPO, ES_TITULO, CONS_PUNT_CONTROL
      FROM PCP_PROD_LIST_OPER_COSTURA
      WHERE CONS_PROD_LOTE = :CONS_PROD_LOTE AND 
            SECU_OPERACION = :SECU_OPERACION

      INTO :CODI_OPERACION, :NOMB_OPERACION, :TIEM_OPERACION, :VAR_ES_TITULO, :CONS_PUNT_CONTROL;

      IF (:TIEM_OPERACION IS NULL) THEN TIEM_OPERACION = 0;

      /*  ANULAR TIEMPO SI ES UN TΔULO  */
      IF (:VAR_ES_TITULO = 1) THEN TIEM_OPERACION = 0;

      SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_PROD_DEPE_ETAPAS RETURNS (
	
    CONS_PROD_ETAP_PCP INTEGER,
    NOMB_PROD_ETAP_PCP VARCHAR(60) CHARACTER SET NONE,
    CONS_PROD_ETAPA INTEGER,
    NOMB_PROD_ETAPA VARCHAR(60) CHARACTER SET NONE,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE)
AS 

begin
    /*  Recorrer el maestro de etapas de producción PCP  */ /* $$IBEC$$ 

     For Select cons_prod_etap_pcp, nomb_prod_etap_pcp
     from sis_pcp_prod_etapas
     order by cons_prod_etap_pcp
     into :cons_prod_etap_pcp, :nomb_prod_etap_pcp
     Do Begin

           $$IBEC$$ */ /*  Resetear par⮥tros porque pueden no existir  */ /* $$IBEC$$ 

          cons_prod_etapa = Null;
          nomb_prod_etapa = Null;
          fech_sistema = Null;
          usua_sistema = Null;

           $$IBEC$$ */ /*  Seleccionar el nombre de la etapa de producci󮠨usuario) de la cual depende

             la etapa de producci󮠤e PCP  */ /* $$IBEC$$ 

          Select cons_prod_etapa, fech_sistema, usua_sistema
          from pcp_prod_etap_pcp
          where cons_prod_etap_pcp = :cons_prod_etap_pcp
          into :cons_prod_etapa, :fech_sistema, :usua_sistema;

           $$IBEC$$ */ /*  Si hay etapa, buscar el nombre  */ /* $$IBEC$$ 

          if (not :cons_prod_etapa is null) then
          Select nomb_prod_etapa
          from pcp_prod_etapas
          where cons_prod_etapa = :cons_prod_etapa
          into :nomb_prod_etapa;

           $$IBEC$$ */ /*  Gnerar el registro  */ /* $$IBEC$$ 

          Suspend;

     End $$IBEC$$ */

     Exit;
end ^

ALTER PROCEDURE CON_PCP_PROD_EXPL_COMPLETO (
    PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	TIPO INTEGER,
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD FLOAT,
    REQUERIMIENTO FLOAT,
    CONS_TOTAL FLOAT,
    COST_UNIDAD FLOAT,
    COST_TOTAL FLOAT,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE FLOAT,
    DISPONIBLE FLOAT,
    ENTREGADO FLOAT,
    DIFERENCIA FLOAT)
AS 

DECLARE VARIABLE VAR_ES_PRINCIPAL INTEGER;

begin
    TIPO = 1;

    while (:TIPO <= 4) do begin

        /*  IDENTIFICAR SI ES PRINCIPAL O NO  */
        IF (:TIPO IN (1,3)) THEN VAR_ES_PRINCIPAL = 1;
        ELSE VAR_ES_PRINCIPAL = -1;

        /*  CONSULTAR LOS MATERIALES  */
        IF (:TIPO IN (1,2)) THEN BEGIN

            for select CONS_REFE_MATERIAL, CONS_MATE_REFERENCIA, CODI_MATE_REFERENCIA, 
                NOMB_MATE_REFERENCIA, CONS_MATE_GRUPO, CODI_MATE_GRUPO, 
                NOMB_MATE_GRUPO, CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO, 
                NOMB_MATE_SUBGRUPO, ES_PRINCIPAL, CONS_PROVEEDOR, 
                CODI_PROVEEDOR, NOMB_PROVEEDOR, CONS_REFE_COLOR, 
                CONS_COLOR, CODI_COLOR, NOMB_COLOR, CONS_UNIDAD, 
                REQUERIMIENTO, CONS_TOTAL, COST_UNIDAD, COST_TOTAL, 
                CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, 
                COMBINACION, TALLAJE, TIEN_OBSERVACIONES, EXISTENTE, 
                DISPONIBLE, ENTREGADO, DIFERENCIA
            FROM CON_PCP_PROD_EXPL_MATERIALES(:PE_CONS_PROD_ORDEN, :VAR_ES_PRINCIPAL)
            INTO
                :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA, 
                :NOMB_MATE_REFERENCIA, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, 
                :NOMB_MATE_GRUPO, :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, 
                :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL, :CONS_PROVEEDOR, 
                :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :CONS_REFE_COLOR, 
                :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR, :CONS_UNIDAD, 
                :REQUERIMIENTO, :CONS_TOTAL, :COST_UNIDAD, :COST_TOTAL, 
                :CONS_UNID_MEDIDA, :CODI_UNID_MEDIDA, :NOMB_UNID_MEDIDA, 
                :COMBINACION, :TALLAJE, :TIEN_OBSERVACIONES, :EXISTENTE, 
                :DISPONIBLE, :ENTREGADO, :DIFERENCIA DO SUSPEND;
        END

        /*  CONSULTAR LOS INSUMOS  */
        IF (:TIPO IN (3,4)) THEN BEGIN

            for select CONS_REFE_INSUMO, CONS_INSU_REFERENCIA, CODI_INSU_REFERENCIA, 
            NOMB_INSU_REFERENCIA, CONS_INSU_GRUPO, CODI_INSU_GRUPO, 
            NOMB_INSU_GRUPO, CONS_INSU_SUBGRUPO, CODI_INSU_SUBGRUPO, 
            NOMB_INSU_SUBGRUPO, ES_FABRICACION, CONS_PROVEEDOR, 
            CODI_PROVEEDOR, NOMB_PROVEEDOR, CONS_REFE_COLOR, 
            CONS_COLOR, CODI_COLOR, NOMB_COLOR, CONS_UNIDAD, 
            REQUERIMIENTO, CONS_TOTAL, COST_UNIDAD, COST_TOTAL, 
            CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, 
            COMBINACION, TALLAJE, TIEN_OBSERVACIONES, EXISTENTE, 
            DISPONIBLE, ENTREGADO, DIFERENCIA
            FROM CON_PCP_PROD_EXPL_INSUMOS(:PE_CONS_PROD_ORDEN, :VAR_ES_PRINCIPAL)
            INTO :CONS_REFE_MATERIAL, :CONS_MATE_REFERENCIA, :CODI_MATE_REFERENCIA, 
            :NOMB_MATE_REFERENCIA, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, 
            :NOMB_MATE_GRUPO, :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, 
            :NOMB_MATE_SUBGRUPO, :ES_PRINCIPAL, :CONS_PROVEEDOR, 
            :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :CONS_REFE_COLOR, 
            :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR, :CONS_UNIDAD, 
            :REQUERIMIENTO, :CONS_TOTAL, :COST_UNIDAD, :COST_TOTAL, 
            :CONS_UNID_MEDIDA, :CODI_UNID_MEDIDA, :NOMB_UNID_MEDIDA, 
            :COMBINACION, :TALLAJE, :TIEN_OBSERVACIONES, :EXISTENTE, 
            :DISPONIBLE, :ENTREGADO, :DIFERENCIA DO SUSPEND;
        END

        /*  INCREMENTAR LA VARIABLE  */
        TIPO = :TIPO + 1;
      end
end ^

ALTER PROCEDURE CON_PCP_PROD_EXPL_INSUMOS (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_ES_FABRICACION INTEGER)
RETURNS (
	
    CONS_REFE_INSUMO INTEGER,
    CONS_INSU_REFERENCIA INTEGER,
    CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_GRUPO INTEGER,
    CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_SUBGRUPO INTEGER,
    CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_FABRICACION INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD NUMERIC(15, 5),
    REQUERIMIENTO NUMERIC(15, 5),
    CONS_TOTAL NUMERIC(15, 5),
    COST_UNIDAD NUMERIC(15, 5),
    COST_TOTAL NUMERIC(15, 5),
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE NUMERIC(15, 5),
    DISPONIBLE NUMERIC(15, 5),
    ENTREGADO NUMERIC(15, 5),
    DIFERENCIA NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_CONS_PEDI_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CODI_UNID_MEDIDA VARCHAR(12);
DECLARE VARIABLE VAR_NOMB_UNID_MEDIDA VARCHAR(60);
DECLARE VARIABLE VAR_ASIG_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_COST_UNIDAD DECIMAL(15,5);
DECLARE VARIABLE VAR_UNIDADES INTEGER;
DECLARE VARIABLE VAR_CONS_GRUP_TALL_DETALLE INTEGER;
DECLARE VARIABLE VAR_NUME_REGISTROS INTEGER;
DECLARE VARIABLE VAR_REQU_TOTAL DECIMAL(15,5);
DECLARE VARIABLE VAR_CONSUMO DECIMAL(15,5);
DECLARE VARIABLE VAR_SUMA_CONSUMOS DECIMAL(15,5);

BEGIN

/*  BUSCAR LAS VARIACIONES DE LAS REFERENCIAS VINCLUIDAS */

  FOR SELECT DISTINCT CONS_PEDI_REFERENCIA, CONS_REFE_VARIACION
  FROM VIS_PCP_PEDI_UNID_PLAN_BASICO
  WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
  INTO :VAR_CONS_PEDI_REFERENCIA, :VAR_CONS_REFE_VARIACION 
  DO BEGIN
       /*  SELECCIONAR LOS INSUMOS DE LA REFRENCIA  */ 
      FOR SELECT CONS_REFE_INSUMO, CONS_INSU_GRUPO, CODI_INSU_GRUPO, NOMB_INSU_GRUPO,
            CONS_INSU_SUBGRUPO, CODI_INSU_SUBGRUPO, NOMB_INSU_SUBGRUPO, CONS_INSU_REFERENCIA,
            CODI_INSU_REFERENCIA, NOMB_INSU_REFERENCIA, ES_FABRICACION, CONS_PROVEEDOR,
            CODI_PROVEEDOR, NOMB_PROVEEDOR, COST_ESTIMADO,
            CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, COMBINACION, TALLAJE,
            TIEN_OBSERVACIONES
        FROM CON_PCP_REFE_INSUMOS(:VAR_CONS_REFE_VARIACION, :PE_ES_FABRICACION)
        INTO :CONS_REFE_INSUMO, :CONS_INSU_GRUPO, :CODI_INSU_GRUPO, :NOMB_INSU_GRUPO,
            :CONS_INSU_SUBGRUPO, :CODI_INSU_SUBGRUPO, :NOMB_INSU_SUBGRUPO, :CONS_INSU_REFERENCIA,
            :CODI_INSU_REFERENCIA, :NOMB_INSU_REFERENCIA, :ES_FABRICACION, :CONS_PROVEEDOR,
            :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :VAR_COST_UNIDAD,
            :VAR_CONS_UNID_MEDIDA, :VAR_CODI_UNID_MEDIDA, :VAR_NOMB_UNID_MEDIDA, :COMBINACION, :TALLAJE,
            :TIEN_OBSERVACIONES
      DO BEGIN
           /*  BUSCAR LOS COLORES QUE SE UTILIZAR  */ 
          FOR SELECT DISTINCT ASIG_REFERENCIA,CONS_REFE_COLOR,
              CONS_COLOR, CODI_COLOR, NOMB_COLOR
              FROM CON_PCP_REFE_INSU_COLO_USADOS(:CONS_REFE_INSUMO)
              ORDER BY ASIG_REFERENCIA DESC, NOMB_COLOR
              INTO :VAR_ASIG_REFERENCIA , :CONS_REFE_COLOR,
                  :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR

          DO BEGIN
                /*  VALIDAR VARIABLES DE LA CONSULTA DEL PADRE  */ 
               IF (:VAR_COST_UNIDAD IS NULL) THEN VAR_COST_UNIDAD = 0;

                /*  ASIGNAR VALORES QUE ESTABAN EN VARIABLES DE LA CONSULTA DEL PADRE  */ 
               CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA;
               CODI_UNID_MEDIDA = :VAR_CODI_UNID_MEDIDA;
               NOMB_UNID_MEDIDA = :VAR_NOMB_UNID_MEDIDA;
               COST_UNIDAD = :VAR_COST_UNIDAD;

                /*  INICIALIZAR LAS VARIABLES  */ 
               VAR_NUME_REGISTROS = 0;
               REQUERIMIENTO = 0;
               VAR_REQU_TOTAL = 0;
               VAR_SUMA_CONSUMOS = 0;

                /*  BUSCAR LAS UNIDADES PROGRAMADAS DE ESTE COLOR, EN CADA UNA DE LAS TALLAS  */ 
               FOR SELECT CONS_GRUP_TALL_DETALLE, SUM(UNIDADES)
               FROM VIS_PCP_PEDI_UNID_PLAN_BASICO
               WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN AND 
                    CONS_PEDI_REFERENCIA = :VAR_CONS_PEDI_REFERENCIA AND 
                    CONS_REFE_COLOR = :CONS_REFE_COLOR
               GROUP BY CONS_GRUP_TALL_DETALLE
               INTO :VAR_CONS_GRUP_TALL_DETALLE, :VAR_UNIDADES 
               DO BEGIN

                     /*  VALIDAR EL RESULTADO  */ 
                    IF (:VAR_UNIDADES IS NULL) THEN VAR_UNIDADES = 0;

                     /*  INCREMENTAR EL CONTADOR DE REGISTROS  */ 
                    VAR_NUME_REGISTROS = :VAR_NUME_REGISTROS + 1;

                     /*  SUMAR LAS UNIDADES AL REQUERIMIENTO  */ 
                    REQUERIMIENTO = :REQUERIMIENTO + :VAR_UNIDADES;

                     /*  BUSCAR EL CONSUMO  */ 
                    SELECT CONS_UNIDAD
                    FROM CON_PCP_REFE_INSU_COLO_TALL(:CONS_REFE_INSUMO, :VAR_ASIG_REFERENCIA,
                         :CONS_REFE_COLOR, :CONS_COLOR, :VAR_CONS_GRUP_TALL_DETALLE)
                    INTO :VAR_CONSUMO;

                     /*  SUMAR EL CONSUMO * LAS UNIDADES A LAS UNIDADES TOTALES  */ 
                    VAR_REQU_TOTAL = : VAR_REQU_TOTAL + (:VAR_CONSUMO * :VAR_UNIDADES);

                     /*  SUMAR EL CONSUMO PARA CALCULAR EL PROMEDIO  */ 
                    VAR_SUMA_CONSUMOS = :VAR_SUMA_CONSUMOS + :VAR_CONSUMO;
               END

                /*  CALCULAR EL CONSUMO PROMEDIO  */ 
               IF (:VAR_NUME_REGISTROS > 0) THEN
                  CONS_UNIDAD = (:VAR_SUMA_CONSUMOS / :VAR_NUME_REGISTROS);
               ELSE
                  CONS_UNIDAD = 0;

               IF (:CONS_UNIDAD  > 0) THEN BEGIN

                        /*  DESCARTAR LAS QUE NO TENGAN REQUERIMIENTO  */ 
                       IF (:REQUERIMIENTO > 0) THEN BEGIN

                           /*  CONSUMO TOTAL  */ 
                          CONS_TOTAL = :VAR_REQU_TOTAL;

                           /*  COSTO TOTAL  */ 
                          COST_TOTAL = :COST_UNIDAD * :REQUERIMIENTO;
                          EXISTENTE = 0;
                          DISPONIBLE = 0;
                          ENTREGADO = 0;
                          DIFERENCIA = :DISPONIBLE - (:CONS_TOTAL - :ENTREGADO);

                          SUSPEND;

                       END
                END
            END
        END
    END
END ^

ALTER PROCEDURE CON_PCP_PROD_EXPL_MATERIALES (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_ES_PRINCIPAL INTEGER)
RETURNS (
	
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    CONS_UNIDAD NUMERIC(15, 5),
    REQUERIMIENTO NUMERIC(15, 5),
    CONS_TOTAL NUMERIC(15, 5),
    COST_UNIDAD NUMERIC(15, 5),
    COST_TOTAL NUMERIC(15, 5),
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER,
    EXISTENTE NUMERIC(15, 5),
    DISPONIBLE NUMERIC(15, 5),
    ENTREGADO NUMERIC(15, 5),
    DIFERENCIA NUMERIC(15, 5))
AS 


DECLARE VARIABLE VAR_CONS_PEDI_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CODI_UNID_MEDIDA VARCHAR(12);
DECLARE VARIABLE VAR_NOMB_UNID_MEDIDA VARCHAR(60);
DECLARE VARIABLE VAR_ASIG_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_COST_UNIDAD DECIMAL(15,5);
DECLARE VARIABLE VAR_UNIDADES INTEGER;
DECLARE VARIABLE VAR_CONS_GRUP_TALL_DETALLE INTEGER;
DECLARE VARIABLE VAR_NUME_REGISTROS INTEGER;
DECLARE VARIABLE VAR_REQU_TOTAL DECIMAL(15,5);
DECLARE VARIABLE VAR_CONSUMO DECIMAL(15,5);
DECLARE VARIABLE VAR_SUMA_CONSUMOS DECIMAL(15,5);

BEGIN

/*  BUSCAR LAS VARIACIONES DE LAS REFERENCIAS VINCLUIDAS */
  FOR SELECT DISTINCT CONS_PEDI_REFERENCIA, CONS_REFE_VARIACION
      FROM VIS_PCP_PEDI_UNID_PLAN_BASICO
      WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
      INTO :VAR_CONS_PEDI_REFERENCIA, :VAR_CONS_REFE_VARIACION DO

  BEGIN
           /*  SELECCIONAR LOS MATERIALES DE LA REFRENCIA  */ 
          FOR SELECT CONS_REFE_MATERIAL, CONS_MATE_GRUPO, CODI_MATE_GRUPO, NOMB_MATE_GRUPO,
              CONS_MATE_SUBGRUPO, CODI_MATE_SUBGRUPO, NOMB_MATE_SUBGRUPO, CONS_MATE_REFERENCIA,
              CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA, ES_PRINCIPAL, CONS_PROVEEDOR,
              CODI_PROVEEDOR, NOMB_PROVEEDOR, COST_ESTIMADO,
              CONS_UNID_MEDIDA, CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA, COMBINACION, 
              TALLAJE, TIEN_OBSERVACIONES
              FROM CON_PCP_REFE_MATERIALES(:VAR_CONS_REFE_VARIACION, :PE_ES_PRINCIPAL)
              INTO :CONS_REFE_MATERIAL, :CONS_MATE_GRUPO, :CODI_MATE_GRUPO, :NOMB_MATE_GRUPO,
                   :CONS_MATE_SUBGRUPO, :CODI_MATE_SUBGRUPO, :NOMB_MATE_SUBGRUPO, :CONS_MATE_REFERENCIA,
                   :CODI_MATE_REFERENCIA, :NOMB_MATE_REFERENCIA, :ES_PRINCIPAL, :CONS_PROVEEDOR,
                   :CODI_PROVEEDOR, :NOMB_PROVEEDOR, :VAR_COST_UNIDAD,
                   :VAR_CONS_UNID_MEDIDA, :VAR_CODI_UNID_MEDIDA, :VAR_NOMB_UNID_MEDIDA, :COMBINACION, 
                   :TALLAJE, :TIEN_OBSERVACIONES
          DO BEGIN

               /*  BUSCAR LOS COLORES QUE SE UTILIZAR  */ 
              FOR SELECT DISTINCT ASIG_REFERENCIA,CONS_REFE_COLOR,
              CONS_COLOR, CODI_COLOR, NOMB_COLOR
              FROM CON_PCP_REFE_MATE_COLO_USADOS(:CONS_REFE_MATERIAL)
              ORDER BY ASIG_REFERENCIA DESC, NOMB_COLOR
              INTO :VAR_ASIG_REFERENCIA , :CONS_REFE_COLOR,
              :CONS_COLOR, :CODI_COLOR, :NOMB_COLOR
              DO BEGIN

                    /*  VALIDAR VARIABLES DE LA CONSULTA DEL PADRE  */ 
                   IF (:VAR_COST_UNIDAD IS NULL) THEN VAR_COST_UNIDAD = 0;
                    /*  ASIGNAR VALORES QUE ESTABAN EN VARIABLES DE LA CONSULTA DEL PADRE  */ 
                   CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA;
                   CODI_UNID_MEDIDA = :VAR_CODI_UNID_MEDIDA;
                   NOMB_UNID_MEDIDA = :VAR_NOMB_UNID_MEDIDA;
                   COST_UNIDAD = :VAR_COST_UNIDAD;

                    /*  INICIALIZAR LAS VARIABLES  */ 
                   VAR_NUME_REGISTROS = 0;
                   REQUERIMIENTO = 0;
                   VAR_REQU_TOTAL = 0;
                   VAR_SUMA_CONSUMOS = 0;

                    /*  BUSCAR LAS UNIDADES PROGRAMADAS DE ESTE COLOR, EN CADA UNA DE LAS TALLAS  */ 
                   FOR SELECT CONS_GRUP_TALL_DETALLE, SUM(UNIDADES)
                       FROM VIS_PCP_PEDI_UNID_PLAN_BASICO
                       WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN AND 
                            CONS_PEDI_REFERENCIA = :VAR_CONS_PEDI_REFERENCIA AND 
                            CONS_REFE_COLOR = :CONS_REFE_COLOR
                       GROUP BY CONS_GRUP_TALL_DETALLE
                       INTO :VAR_CONS_GRUP_TALL_DETALLE, :VAR_UNIDADES 
                
                   DO BEGIN

                         /*  VALIDAR EL RESULTADO  */ 
                        IF (:VAR_UNIDADES IS NULL) THEN VAR_UNIDADES = 0;

                         /*  INCREMENTAR EL CONTADOR DE REGISTROS  */ 
                        VAR_NUME_REGISTROS = :VAR_NUME_REGISTROS + 1;

                         /*  SUMAR LAS UNIDADES AL REQUERIMIENTO  */ 
                        REQUERIMIENTO = :REQUERIMIENTO + :VAR_UNIDADES;

                         /*  BUSCAR EL CONSUMO  */ 
                        SELECT CONS_UNIDAD
                        FROM CON_PCP_REFE_MATE_COLO_TALL(:CONS_REFE_MATERIAL, :VAR_ASIG_REFERENCIA,
                             :CONS_REFE_COLOR, :CONS_COLOR, :VAR_CONS_GRUP_TALL_DETALLE)
                        INTO :VAR_CONSUMO;

                         /*  SUMAR EL CONSUMO * LAS UNIDADES A LAS UNIDADES TOTALES  */ 
                        VAR_REQU_TOTAL = : VAR_REQU_TOTAL + (:VAR_CONSUMO * :VAR_UNIDADES);

                         /*  SUMAR EL CONSUMO PARA CALCULAR EL PROMEDIO  */ 
                        VAR_SUMA_CONSUMOS = :VAR_SUMA_CONSUMOS + :VAR_CONSUMO;
                   END

                    /*  CALCULAR EL CONSUMO PROMEDIO  */ 
                   IF (:VAR_NUME_REGISTROS > 0) THEN
                      CONS_UNIDAD = (:VAR_SUMA_CONSUMOS / :VAR_NUME_REGISTROS);
                   ELSE
                      CONS_UNIDAD = 0;

                   IF (:CONS_UNIDAD  > 0) THEN BEGIN
                            /*  DESCARTAR LAS QUE NO TENGAN REQUERIMIENTO  */ 
                       IF (:REQUERIMIENTO > 0) THEN BEGIN
                               /*  CONSUMO TOTAL  */ 
                              CONS_TOTAL = :VAR_REQU_TOTAL;

                              COST_TOTAL = :COST_UNIDAD * :REQUERIMIENTO;
                              EXISTENTE = 0;
                              DISPONIBLE = 0;
                              ENTREGADO = 0;
                              DIFERENCIA = :DISPONIBLE - (:CONS_TOTAL - :ENTREGADO);

                              SUSPEND;
                       END
                   END
              END
          END
     END
END ^

ALTER PROCEDURE CON_PCP_PROD_LOTE_DIST_PAQUETES (
    PE_CONS_PROD_LOTE INTEGER)
    RETURNS (
	NUME_LOTE INTEGER,
    CONS_PROD_PAQU_TIPO INTEGER,
    NUME_PAQUETE INTEGER,
    TALLA VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    NUME_COLOR VARCHAR(12) CHARACTER SET NONE,
    CANT_UNIDADES INTEGER,
    DESDE INTEGER,
    HASTA INTEGER,
    CONSECUTIVO VARCHAR(15) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONT_UNIDADES INTEGER;
DECLARE VARIABLE VAR_CONS_PROD_PAQU_TIPO INTEGER;
DECLARE VARIABLE VAR_TEMPORAL VARCHAR(5);
DECLARE VARIABLE COS_POSICIONES INTEGER = 5;

begin

    VAR_CONS_PROD_PAQU_TIPO = -1;
    VAR_CONT_UNIDADES = 0;

    FOR SELECT NUME_LOTE, CONS_PROD_PAQU_TIPO, NUME_PAQUETE, NOMB_COLOR,
        NUME_COLOR, TALLA, CANT_UNIDADES
        FROM VIS_PCP_PROD_DIST_PAQUETES
        WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE
        ORDER BY CONS_PROD_PAQU_TIPO, NUME_PAQUETE
        INTO :NUME_LOTE, :CONS_PROD_PAQU_TIPO, :NUME_PAQUETE, :NOMB_COLOR,
            :NUME_COLOR, :TALLA, :CANT_UNIDADES

    DO BEGIN
        /*  IDENTIFICAR SI CAMBIӠEL TIPO DE DISTRIBUCIԎ   */
        IF (:VAR_CONS_PROD_PAQU_TIPO <> :CONS_PROD_PAQU_TIPO) THEN BEGIN
            VAR_CONT_UNIDADES = 0;
            VAR_CONS_PROD_PAQU_TIPO = :CONS_PROD_PAQU_TIPO;
        END

        DESDE = :VAR_CONT_UNIDADES + 1;
        HASTA = :VAR_CONT_UNIDADES + :CANT_UNIDADES;
        VAR_CONT_UNIDADES = :VAR_CONT_UNIDADES + :CANT_UNIDADES;

        /*  GENERAR EL CONSECUTIVO  */
        SELECT RESULTADO
        FROM FUN_GLO_CERO_IZQUIERDA(:DESDE, :COS_POSICIONES)
        INTO :CONSECUTIVO;

        SELECT RESULTADO
        FROM FUN_GLO_CERO_IZQUIERDA(:HASTA, :COS_POSICIONES)
        INTO :VAR_TEMPORAL;

        CONSECUTIVO = :CONSECUTIVO || '-' || :VAR_TEMPORAL;

        SUSPEND;
    END
end ^

ALTER PROCEDURE CON_PCP_PROD_LOTE_ENCABEZADO (PE_CONS_PROD_LOTE INTEGER)
RETURNS (
	NUME_LOTE INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    UNIDADES INTEGER,
    NOMB_CLIENTE VARCHAR(60) CHARACTER SET NONE,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    MOLDE VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_TEMPORADA VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
    PEDIDOS VARCHAR(100) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_PROD_ORDEN INTEGER;

begin

  /*  BUSCAR EL NÚMERO DE LOTE Y DE O.P. */
  SELECT CONS_PROD_ORDEN, NUME_LOTE
  FROM PCP_PROD_LOTES
  WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE
  INTO :VAR_CONS_PROD_ORDEN, :NUME_LOTE;

  /*  BUSCAR INFORMACIÓN DE LA O.F.  */
  SELECT NUME_PROD_ORDEN, UNIDADES, NOMB_CLIENTE, CODI_REFERENCIA,
    CODI_INTE_REFERENCIA, NOMB_REFERENCIA, MOLDE,
    NOMB_REFE_ESTILO, NOMB_REFE_TEMPORADA, NOMB_REFE_MARCA,
    NOMB_REFE_GRUPO, NOMB_REFE_EDAD, PEDIDOS
  FROM CON_PCP_PROD_ORDE_ENCABEZADO(:VAR_CONS_PROD_ORDEN, -1)
  INTO :NUME_PROD_ORDEN, :UNIDADES, :NOMB_CLIENTE,
    :CODI_REFERENCIA, :CODI_INTE_REFERENCIA, :NOMB_REFERENCIA, :MOLDE,
    :NOMB_REFE_ESTILO, :NOMB_REFE_TEMPORADA, :NOMB_REFE_MARCA,
    :NOMB_REFE_GRUPO, :NOMB_REFE_EDAD, :PEDIDOS;

  suspend;
end ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_DIST_PAQUETES (
    PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	
    NUME_LOTE INTEGER,
    CONS_PROD_PAQU_TIPO INTEGER,
    NUME_PAQUETE INTEGER,
    TALLA VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    NUME_COLOR VARCHAR(12) CHARACTER SET NONE,
    CANT_UNIDADES INTEGER,
    DESDE INTEGER,
    HASTA INTEGER,
    CONSECUTIVO VARCHAR(15) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_PROD_LOTE INTEGER;

begin
    FOR SELECT CONS_PROD_LOTE
        FROM PCP_PROD_LOTES
        WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
        ORDER BY NUME_LOTE
        INTO :VAR_CONS_PROD_LOTE 
    DO BEGIN
         FOR SELECT NUME_LOTE, CONS_PROD_PAQU_TIPO, NUME_PAQUETE, TALLA,
              NOMB_COLOR, NUME_COLOR, CANT_UNIDADES, DESDE, HASTA, CONSECUTIVO
         FROM CON_PCP_PROD_LOTE_DIST_PAQUETES(:VAR_CONS_PROD_LOTE)
         ORDER BY NUME_LOTE, CONS_PROD_PAQU_TIPO, NUME_PAQUETE
         INTO :NUME_LOTE, :CONS_PROD_PAQU_TIPO, :NUME_PAQUETE,
              :TALLA, :NOMB_COLOR, :NUME_COLOR, :CANT_UNIDADES, :DESDE, :HASTA, :CONSECUTIVO

         DO SUSPEND;
    END
end ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_ENCABEZADO (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_SUMA_UNIDADES INTEGER)
    RETURNS (
	NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    UNIDADES INTEGER,
    NOMB_CLIENTE VARCHAR(60) CHARACTER SET NONE,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    MOLDE VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_ESTILO VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_TEMPORADA VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_MARCA VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    NOMB_REFE_EDAD VARCHAR(60) CHARACTER SET NONE,
    PEDIDOS VARCHAR(100) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;

begin
  /*  BUSCAR LA REFERENCIA DE LA O.P. */
  SELECT CONS_REFERENCIA
  FROM CON_PCP_PROD_ORDE_REFERENCIA(:PE_CONS_PROD_ORDEN)
  INTO :VAR_CONS_REFERENCIA;

  /*  INFORMACIÓN DE LA O.P.  */
  SELECT NUME_PROD_ORDEN
  FROM PCP_PROD_ORDENES
  WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
  INTO :NUME_PROD_ORDEN;

  /*  CALCULAR LAS UNIDADES DE LA ORDEN  */
  if (:PE_SUMA_UNIDADES = -1) then
     UNIDADES = 0;
  ELSE
  BEGIN
      SELECT SUM(UNID.CANT_UNIDADES)
      FROM PCP_PROD_LOTE_UNIDADES UNID, PCP_PROD_LOTES LOTE
      WHERE UNID.CONS_PROD_LOTE = LOTE.CONS_PROD_LOTE AND 
            LOTE.CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
      INTO :UNIDADES;
  END

  /*  BUSCAR EL CLIENTE DE LA ORDEN DE PRODUCCIÓN (EL PRINCIPAL)  */
  SELECT NOMB_TERCERO
  FROM CON_PCP_PROD_ORDE_TERCERO(:PE_CONS_PROD_ORDEN)
  INTO :NOMB_CLIENTE;

  /*  BUSCAR LOS PEDIDOS ASOCIADOS  */
  SELECT PEDIDOS
  FROM CON_PCP_PROD_ORDE_PEDIDOS(:PE_CONS_PROD_ORDEN, 1)
  INTO :PEDIDOS;

  /*  BUSCAR LA INFORMACIÓN DE LA REFERENCIA  */
  SELECT R.CODI_REFERENCIA, R.MOLDE, R.CODI_INTE_REFERENCIA,
        R.NOMB_REFERENCIA, GLO_REFE_ESTILOS.NOMB_REFE_ESTILO, GLO_REFE_TEMPORADAS.NOMB_REFE_TEMPORADA,
        GLO_REFE_MARCAS.NOMB_REFE_MARCA, GLO_REFE_GRUPOS.NOMB_REFE_GRUPO, GLO_REFE_EDADES.NOMB_REFE_EDAD
  FROM GLO_REFE_EDADES
       INNER JOIN GLO_REFERENCIAS R ON (GLO_REFE_EDADES.CONS_REFE_EDAD = R.CONS_REFE_EDAD)
       INNER JOIN GLO_REFE_ESTILOS ON (R.CONS_REFE_ESTILO = GLO_REFE_ESTILOS.CONS_REFE_ESTILO)
       INNER JOIN GLO_REFE_TEMPORADAS ON (R.CONS_REFE_TEMPORADA = GLO_REFE_TEMPORADAS.CONS_REFE_TEMPORADA)
       INNER JOIN GLO_REFE_MARCAS ON (R.CONS_REFE_MARCA = GLO_REFE_MARCAS.CONS_REFE_MARCA)
       INNER JOIN GLO_REFE_GRUPOS ON (R.CONS_REFE_GRUPO = GLO_REFE_GRUPOS.CONS_REFE_GRUPO)
  WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA
  INTO :CODI_REFERENCIA, :MOLDE, :CODI_INTE_REFERENCIA,
       :NOMB_REFERENCIA, :NOMB_REFE_ESTILO, :NOMB_REFE_TEMPORADA,
       :NOMB_REFE_MARCA, :NOMB_REFE_GRUPO, :NOMB_REFE_EDAD;

  /*  GENERAR EL REGISTRO  */
  suspend;
end ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_FECHA (
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
    RETURNS (
	CONS_PROD_ORDEN INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    CONS_PROD_LOTE INTEGER,
    NUME_LOTE INTEGER,
    ANULADA INTEGER,
    FINALIZADO INTEGER,
    FECH_CREACION TIMESTAMP,
    USUA_CREACION VARCHAR(20) CHARACTER SET NONE,
    CONS_REFERENCIA INTEGER,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    UNIDADES INTEGER,
    CONS_PROC_FINALIZADO INTEGER,
    NOMB_PROC_FINALIZADO VARCHAR(60) CHARACTER SET NONE,
    NOMB_PROC_ACTUAL VARCHAR(60) CHARACTER SET NONE,
    FECH_FINA_PROC_FINALIZADO TIMESTAMP,
    FECH_ESTI_PROC_FINALIZADO TIMESTAMP,
    FECH_ESTI_FINALIZACION TIMESTAMP,
    DIFE_DIAS INTEGER)
AS 

BEGIN

  /*  VALIDAR LAS FECHAS DE ENTRADA  */
  IF (:PE_FECH_INICIAL IS NULL) THEN PE_FECH_INICIAL = '01/01/1900';

  IF (:PE_FECH_FINAL IS NULL) THEN PE_FECH_FINAL = 'NOW';

  /*  RECORRER EL MAESTRO DE ԒDENES DE PRODUCCIÓN  */
  FOR SELECT ORDE.CONS_PROD_ORDEN, ORDE.NUME_PROD_ORDEN, ORDE.ANULADA,
      ORDE.CONS_REFERENCIA, LOTE.FECH_SISTEMA, LOTE.USUA_SISTEMA,
      LOTE.CONS_PROD_LOTE, LOTE.NUME_LOTE, LOTE.FINALIZADO
      FROM PCP_PROD_ORDENES ORDE, PCP_PROD_LOTES LOTE
      WHERE (LOTE.FECH_SISTEMA BETWEEN :PE_FECH_INICIAL AND :PE_FECH_FINAL) AND 
            LOTE.CONS_PROD_ORDEN = ORDE.CONS_PROD_ORDEN
      ORDER BY ORDE.CONS_PROD_ORDEN
      INTO :CONS_PROD_ORDEN, :NUME_PROD_ORDEN, :ANULADA,
      :CONS_REFERENCIA, :FECH_CREACION, :USUA_CREACION,
      :CONS_PROD_LOTE, :NUME_LOTE, :FINALIZADO

  DO BEGIN  
           /*  BUSCAR INFORMACION DE LA REFERENCIA  */
           SELECT REFE.CODI_REFERENCIA, REFE.NOMB_REFERENCIA, REFE.CODI_INTE_REFERENCIA
           FROM GLO_REFERENCIAS REFE
           WHERE CONS_REFERENCIA = :CONS_REFERENCIA
           INTO :CODI_REFERENCIA, :NOMB_REFERENCIA, :CODI_INTE_REFERENCIA;

           /*  CONSULTAR LA ETAPA EN LA QUE SE ENCUENTRA LA ORDEN  */
           SELECT CONS_PROC_FINALIZADO, NOMB_PROC_FINALIZADO,
              NOMB_PROC_ACTUAL, FECH_ESTIMADA, FECH_SISTEMA,
              DIFE_DIAS, FECH_ESTI_FINALIZACION
           FROM CON_PCP_PROD_ORDE_LOTES(:CONS_PROD_LOTE)
           INTO :CONS_PROC_FINALIZADO, :NOMB_PROC_FINALIZADO,
              :NOMB_PROC_ACTUAL, :FECH_ESTI_PROC_FINALIZADO, :FECH_FINA_PROC_FINALIZADO,
              :DIFE_DIAS, :FECH_ESTI_FINALIZACION;

            /*  CALCULAR LAS UNIDADES DEL LOTE  */
            SELECT SUM(UNID.CANT_UNIDADES)
            FROM PCP_PROD_LOTE_UNIDADES UNID
            WHERE CONS_PROD_LOTE = :CONS_PROD_LOTE
            INTO :UNIDADES;

            /*  VALIDAR LAS UNIDADES  */
            IF (:UNIDADES IS NULL) THEN UNIDADES = 0;

           /*  GENERAR EL REGISTRO  */
           SUSPEND;
  END
END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_LOTES (
    PE_CONS_PROD_LOTE INTEGER)
    RETURNS (
	CONS_PROC_FINALIZADO INTEGER,
    NOMB_PROC_FINALIZADO VARCHAR(60) CHARACTER SET NONE,
    NOMB_PROC_ACTUAL VARCHAR(60) CHARACTER SET NONE,
    FECH_ESTIMADA TIMESTAMP,
    FECH_SISTEMA TIMESTAMP,
    DIFE_DIAS INTEGER,
    FECH_ESTI_FINALIZACION TIMESTAMP)
AS 

DECLARE VARIABLE VAR_CONS_PROD_ORDEN INTEGER;
DECLARE VARIABLE VAR_ANULADA INTEGER;
DECLARE VARIABLE VAR_CONS_PROC_ACTUAL INTEGER;

BEGIN
   /*  INICIALIZAR EL PROCESO EN CERO POR SI NO EXISTE  */
   CONS_PROC_FINALIZADO = 0;
   DIFE_DIAS = 0;

   /*  OBTENER EL CONSECUTIVO DE LA ORDEN DE PRODUCCION  */
   SELECT CONS_PROD_ORDEN
   FROM PCP_PROD_LOTES
   WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE
   INTO :VAR_CONS_PROD_ORDEN;

   /*  VERIFICAR SI FUE ANULADA LA ORDEN  */
   SELECT ANULADA
   FROM PCP_PROD_ORDENES
   WHERE CONS_PROD_ORDEN = :VAR_CONS_PROD_ORDEN
   INTO :VAR_ANULADA;

   IF (:VAR_ANULADA = 1) THEN BEGIN
      CONS_PROC_FINALIZADO = -1;
   END
   ELSE BEGIN
       /*  BUSCAR EL ULTIMO PROCESO REALIZADO AL LOTE  */
      SELECT MAX(CONS_PROCESO)
      FROM PCP_PROD_ORDE_RESPONSABLES
      WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE AND 
            HECHO = 1
      INTO :CONS_PROC_FINALIZADO;

      IF (:CONS_PROC_FINALIZADO IS NULL) THEN CONS_PROC_FINALIZADO = 0;
   END

   /*  BUSCAR INFORMACIÓN DEL PROCESO  */
   SELECT PROC.NOMB_PROCESO, RESP.FECH_SISTEMA, RESP.FECH_ESTIMADA
   FROM PCP_PROD_ORDE_RESPONSABLES RESP, PCP_PROCESOS PROC
   WHERE RESP.CONS_PROD_LOTE = :PE_CONS_PROD_LOTE AND 
         RESP.CONS_PROCESO = :CONS_PROC_FINALIZADO AND 
         PROC.CONS_PROCESO = RESP.CONS_PROCESO
   INTO :NOMB_PROC_FINALIZADO,  :FECH_SISTEMA, :FECH_ESTIMADA;

   /*  CALCULAR LA DIFERENCIA EN DIAS  */
   IF (:FECH_SISTEMA IS NULL) THEN
       DIFE_DIAS = :FECH_ESTIMADA - 'NOW';
   ELSE
       DIFE_DIAS = :FECH_ESTIMADA - :FECH_SISTEMA;

   /*  BUSCAR EL CONSECUTIVO DEL ACTUAL PROCESO  */
   SELECT PROC.CONS_PROC_SIGUIENTE
   FROM PCP_PROCESOS PROC
   WHERE CONS_PROCESO = :CONS_PROC_FINALIZADO
   INTO :VAR_CONS_PROC_ACTUAL;

   /*  NOMBRE DEL ACTUAL PROCESO  */
   SELECT PROC.NOMB_PROCESO
   FROM PCP_PROCESOS PROC
   WHERE CONS_PROCESO = :VAR_CONS_PROC_ACTUAL
   INTO :NOMB_PROC_ACTUAL;

   /*  GENERAR EL REGISTRO  */
   IF (DIFE_DIAS IS NULL) THEN DIFE_DIAS = 0;
    
   /*  BUSCAR LA MAYOR FECHA DE LAS TAREAS PARA CALCULAR LA FINALIZACIÓN  */
   SELECT MAX(FECH_ESTIMADA)
   FROM PCP_PROD_ORDE_RESPONSABLES
   WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE
   INTO :FECH_ESTI_FINALIZACION;

  SUSPEND;
END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_LOTE_ETAPA (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_ETAPA INTEGER)
RETURNS (
	
    NUME_LOTE VARCHAR(12) CHARACTER SET NONE,
    TEXT_LOTE VARCHAR(12) CHARACTER SET NONE)
AS 

BEGIN
  /* $$IBEC$$ FOR

        Select distinct (cast (resp.nume_lote as Varchar(12))) as nume_lote
        from Pcp_prod_orde_responsables  resp,
        Pcp_Prod_Etap_pcp etap
        where resp.cons_prod_orden = :pe_cons_prod_orden
        and etap.Cons_Prod_Etap_Pcp = :pe_etapa
        and resp.cons_prod_etapa = etap.Cons_Prod_Etapa
        order by resp.nume_lote
        Into :nume_lote

  DO BEGIN
     $$IBEC$$ */ /*  El lote 0 en el texo 'Todos'  */ /* $$IBEC$$ 

    if (:nume_lote > 0) then text_lote = :nume_lote;
    else if (:nume_lote = 0) then text_lote = 'Todos';

    SUSPEND;

  END $$IBEC$$ */

  Exit;
END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_PEDIDOS (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_SEPA_COMAS INTEGER)
RETURNS (
	
    PEDIDOS VARCHAR(100) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_NUME_PEDIDO VARCHAR(12);

BEGIN
  PEDIDOS = '';
  FOR
        SELECT DISTINCT PCP_PEDIDOS.NUME_PEDIDO
        FROM PCP_PEDI_PLANEACION P
           INNER JOIN PCP_PEDI_UNIDADES U ON (P.CONS_PEDI_UNIDADES = U.CONS_PEDI_UNIDADES)
           INNER JOIN PCP_PEDI_REFERENCIAS R ON (U.CONS_PEDI_REFERENCIA = R.CONS_PEDI_REFERENCIA)
           INNER JOIN PCP_PEDIDOS ON (R.CONS_PEDIDO = PCP_PEDIDOS.CONS_PEDIDO)
        WHERE 
              (P.CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN)

        INTO :VAR_NUME_PEDIDO 

  DO BEGIN
      /*  SEPARADOS POR COMAS  */
      if (:PE_SEPA_COMAS = 1) then BEGIN
            IF (NOT :VAR_NUME_PEDIDO IS NULL) then BEGIN
               if (:PEDIDOS <> '') then
                 PEDIDOS = :PEDIDOS + ',' + :VAR_NUME_PEDIDO;
               ELSE
                 PEDIDOS = :VAR_NUME_PEDIDO;
            END
      END
      ELSE /*  REGISTROS INDEPENDIENTES  */
      BEGIN
           PEDIDOS = :VAR_NUME_PEDIDO;

           SUSPEND;
      END
  END

  if (:PE_SEPA_COMAS = 1) then
      SUSPEND;

  /*  SI OCURRE UN ERROR HACER SUSPEND  */
  WHEN ANY DO
    if (:PE_SEPA_COMAS = 1) then  SUSPEND;

END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_REFERENCIA (
    PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	
    CONS_REFERENCIA INTEGER,
    CONS_REFE_VARIACION INTEGER)
AS 

begin
        /*  Seleccionar la variación  */
        FOR SELECT DISTINCT REF.CONS_REFERENCIA, REF.CONS_REFE_VARIACION FROM
            PCP_PEDI_REFERENCIAS REF, Pcp_Pedi_UnidadES UnI,
            Pcp_Pedi_Planeacion PLA
        WHERE PLA.Cons_Prod_Orden = :PE_CONS_PROD_ORDEN AND 
                UNI.Cons_Pedi_Unidades = PLA.CONS_PEDI_UNIDADES AND 
                REF.Cons_Pedi_Referencia = UNI.CONS_PEDI_REFERENCIA
        ORDER BY CONS_REFERENCIA
        INTO :CONS_REFERENCIA, :Cons_Refe_Variacion 
        DO 

          /*  Generar el registro  */
          Suspend;
end ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_RESPONSABLES (
    PE_CONS_PROD_ORDEN INTEGER)
    RETURNS (
	CONS_PROD_ORDE_RESPONSABLE INTEGER,
    CONS_PROD_LOTE INTEGER,
    NUME_LOTE INTEGER,
    CONS_PROCESO INTEGER,
    NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
    USUA_RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
    FECH_ESTIMADA TIMESTAMP,
    HECHO INTEGER,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
    PORC_AVANCE INTEGER,
    OBSERVACIONES VARCHAR(1000) CHARACTER SET NONE,
    ALARMA INTEGER,
    DIFE_DIAS INTEGER)
AS 

BEGIN
    /*  RECORRER LOS LOTES DE LA ORDEN DE PRODUCCION  */
    FOR SELECT CONS_PROD_LOTE, NUME_LOTE
        FROM PCP_PROD_LOTES
        WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
        ORDER BY CONS_PROD_LOTE
        INTO :CONS_PROD_LOTE, :NUME_LOTE 

    DO BEGIN
         /*  CONSULTAR EL ESTADO  */
         FOR SELECT
         CONS_PROD_ORDE_RESPONSABLE, CONS_PROCESO,
         NOMB_PROCESO, USUA_RESPONSABLE,
         FECH_ESTIMADA, HECHO,
         FECH_SISTEMA, USUA_SISTEMA,
         PORC_AVANCE, OBSERVACIONES,
         ALARMA, DIFE_DIAS
         FROM CON_PCP_PROD_ORDE_RESP_LOTE(:CONS_PROD_LOTE)
         INTO :CONS_PROD_ORDE_RESPONSABLE, :CONS_PROCESO,
         :NOMB_PROCESO, :USUA_RESPONSABLE,
         :FECH_ESTIMADA, :HECHO,
         :FECH_SISTEMA, :USUA_SISTEMA,
         :PORC_AVANCE, :OBSERVACIONES,
         :ALARMA, :DIFE_DIAS
         DO 
            SUSPEND;
    END
END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_RESP_LOTE (
    PE_CONS_PROD_LOTE INTEGER)
    RETURNS (
	CONS_PROD_ORDE_RESPONSABLE INTEGER,
    CONS_PROCESO INTEGER,
    NOMB_PROCESO VARCHAR(60) CHARACTER SET NONE,
    USUA_RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
    FECH_ESTIMADA TIMESTAMP,
    HECHO INTEGER,
    FECH_SISTEMA TIMESTAMP,
    USUA_SISTEMA VARCHAR(20) CHARACTER SET NONE,
    PORC_AVANCE INTEGER,
    OBSERVACIONES VARCHAR(1000) CHARACTER SET NONE,
    ALARMA INTEGER,
    DIFE_DIAS INTEGER)
AS 

BEGIN

  FOR SELECT RESP.CONS_PROD_ORDE_RESPONSABLE, RESP.CONS_PROCESO,
           PROC.NOMB_PROCESO, RESP.USUA_RESPONSABLE, RESP.FECH_ESTIMADA,
           RESP.HECHO, RESP.FECH_SISTEMA,
           RESP.USUA_SISTEMA, RESP.PORC_AVANCE,
           RESP.OBSERVACIONES
    FROM PCP_PROD_ORDE_RESPONSABLES RESP
       INNER JOIN PCP_PROCESOS PROC ON (RESP.CONS_PROCESO = PROC.CONS_PROCESO)
       WHERE RESP.CONS_PROD_LOTE = :PE_CONS_PROD_LOTE
       ORDER BY RESP.CONS_PROD_ORDE_RESPONSABLE
    INTO :CONS_PROD_ORDE_RESPONSABLE, :CONS_PROCESO, 
        :NOMB_PROCESO, :USUA_RESPONSABLE, :FECH_ESTIMADA,
         :HECHO, :FECH_SISTEMA,
         :USUA_SISTEMA, :PORC_AVANCE,
         :OBSERVACIONES
  DO BEGIN

         /*  Si no está hecha, devolver null en la fecha del sistema y el usuario  */ 

        if (:hecho = -1) then Begin
             fech_sistema = Null;
             usua_sistema = Null;
        End

         /*  Verificar la alarma  */
        /*  0 : Ya está hecho  */ 
        alarma = 0;

        if (:hecho = 1) then 
            alarma = 0;
         /*  1 : Se vence en menos de un dia  */ 
        else if (:Fech_Estimada BETWEEN 'NOW'-1 AND 'NOW') then 
            alarma = 1;
         /*  2 : Estᡶencido  */ 
        else if (:fech_estimada < 'NOW') then 
            alarma = 2;

         /*  Diferencia en dias  */
        /*  Si ya se hizo, restar la real de ejecucion a la estimada  */ 
        if (:Hecho = 1) then
           dife_dias = :Fech_Sistema - :Fech_Estimada;
        Else
           dife_dias = 'NOW' - :fech_estimada;

        Suspend;

  END
END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_TERCERO (
    PE_CONS_PROD_ORDEN INTEGER)
    RETURNS (
	CONS_PROD_ORDEN INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    CONS_PEDIDO INTEGER,
    NUME_PEDIDO VARCHAR(20) CHARACTER SET NONE,
    CONS_TERCERO INTEGER,
    CODI_TERCERO VARCHAR(12) CHARACTER SET NONE,
    IDEN_TERCERO VARCHAR(30) CHARACTER SET NONE,
    NOMB_TERCERO VARCHAR(120) CHARACTER SET NONE)
AS 

BEGIN
  FOR
    SELECT FIRST 1
        PCP_PROD_ORDENES.CONS_PROD_ORDEN, PCP_PROD_ORDENES.NUME_PROD_ORDEN,
        PCP_PEDIDOS.CONS_PEDIDO, PCP_PEDIDOS.NUME_PEDIDO,
        PCP_PEDIDOS.CONS_TERCERO, GLO_TERCEROS.CODI_TERCERO,
        GLO_TERCEROS.IDEN_TERCERO, GLO_TERCEROS.NOMB_TERCERO
    FROM GLO_TERCEROS
       INNER JOIN PCP_PEDIDOS ON (GLO_TERCEROS.CONS_TERCERO = PCP_PEDIDOS.CONS_TERCERO)
       INNER JOIN PCP_PEDI_REFERENCIAS R ON (PCP_PEDIDOS.CONS_PEDIDO = R.CONS_PEDIDO)
       INNER JOIN PCP_PEDI_UNIDADES U ON (R.CONS_PEDI_REFERENCIA = U.CONS_PEDI_REFERENCIA)
       INNER JOIN PCP_PEDI_PLANEACION P ON (U.CONS_PEDI_UNIDADES = P.CONS_PEDI_UNIDADES)
       INNER JOIN PCP_PROD_ORDENES ON (P.CONS_PROD_ORDEN = PCP_PROD_ORDENES.CONS_PROD_ORDEN)
       WHERE PCP_PROD_ORDENES.CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
    INTO :CONS_PROD_ORDEN, :NUME_PROD_ORDEN,
         :CONS_PEDIDO, :NUME_PEDIDO,
         :CONS_TERCERO, :CODI_TERCERO,
         :IDEN_TERCERO, :NOMB_TERCERO

  DO

    SUSPEND;

END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_UNIDAD (
    PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	
    CONS_PROD_ORDEN INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    CONS_PROD_LOTE INTEGER,
    NUME_LOTE INTEGER,
    ANULADA INTEGER,
    FINALIZADO INTEGER,
    FECH_CREACION TIMESTAMP,
    USUA_CREACION VARCHAR(20) CHARACTER SET NONE,
    CONS_REFERENCIA INTEGER,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    UNIDADES INTEGER,
    CONS_PROC_FINALIZADO INTEGER,
    NOMB_PROC_FINALIZADO VARCHAR(60) CHARACTER SET NONE,
    NOMB_PROC_ACTUAL VARCHAR(60) CHARACTER SET NONE,
    FECH_FINA_PROC_FINALIZADO TIMESTAMP,
    FECH_ESTI_PROC_FINALIZADO TIMESTAMP,
    FECH_ESTI_FINALIZACION TIMESTAMP,
    DIFE_DIAS INTEGER)
AS 

BEGIN
  /*  RECORRER EL MAESTRO DE ԒDENES DE PRODUCCIÓN  */
  FOR SELECT ORDE.CONS_PROD_ORDEN, ORDE.NUME_PROD_ORDEN, ORDE.ANULADA,
      ORDE.CONS_REFERENCIA, LOTE.FECH_SISTEMA, LOTE.USUA_SISTEMA,
      LOTE.CONS_PROD_LOTE, LOTE.NUME_LOTE , LOTE.FINALIZADO
      FROM PCP_PROD_ORDENES ORDE, PCP_PROD_LOTES LOTE
      WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN AND 
            LOTE.CONS_PROD_ORDEN = ORDE.CONS_PROD_ORDEN
      ORDER BY ORDE.CONS_PROD_ORDEN
      INTO :CONS_PROD_ORDEN, :NUME_PROD_ORDEN, :ANULADA,
      :CONS_REFERENCIA, :FECH_CREACION, :USUA_CREACION,
      :CONS_PROD_LOTE, :NUME_LOTE, :FINALIZADO
  DO BEGIN  
           /*  BUSCAR INFORMACION DE LA REFERENCIA  */
           SELECT REFE.CODI_REFERENCIA, REFE.NOMB_REFERENCIA, REFE.CODI_INTE_REFERENCIA
           FROM GLO_REFERENCIAS REFE
           WHERE CONS_REFERENCIA = :CONS_REFERENCIA
           INTO :CODI_REFERENCIA, :NOMB_REFERENCIA, :CODI_INTE_REFERENCIA;

           /*  CONSULTAR LA ETAPA EN LA QUE SE ENCUENTRA LA ORDEN  */
           SELECT CONS_PROC_FINALIZADO, NOMB_PROC_FINALIZADO,
              NOMB_PROC_ACTUAL, FECH_ESTIMADA, FECH_SISTEMA,
              DIFE_DIAS, FECH_ESTI_FINALIZACION
           FROM CON_PCP_PROD_ORDE_LOTES(:CONS_PROD_LOTE)
           INTO :CONS_PROC_FINALIZADO, :NOMB_PROC_FINALIZADO,
              :NOMB_PROC_ACTUAL, :FECH_ESTI_PROC_FINALIZADO, :FECH_FINA_PROC_FINALIZADO,
              :DIFE_DIAS, :FECH_ESTI_FINALIZACION;

            /*  CALCULAR LAS UNIDADES DEL LOTE  */
            SELECT SUM(UNID.CANT_UNIDADES)
            FROM PCP_PROD_LOTE_UNIDADES UNID
            WHERE CONS_PROD_LOTE = :CONS_PROD_LOTE
            INTO :UNIDADES;

            /*  VALIDAR LAS UNIDADES  */
            IF (:UNIDADES IS NULL) THEN UNIDADES = 0;

           /*  GENERAR EL REGISTRO  */
           SUSPEND;
  END
END ^

ALTER PROCEDURE CON_PCP_PROD_ORDE_VARIACIONES (
    PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	
    CONS_REFERENCIA INTEGER,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_VARIACION INTEGER,
    CODI_REFE_VARIACION VARCHAR(12) CHARACTER SET NONE,
    NOMB_REFE_VARIACION VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
        /*  SELECCIONAR LA VARIACION  */
        FOR SELECT
            CONS_REFERENCIA, CONS_REFE_VARIACION
            FROM CON_PCP_PROD_ORDE_REFERENCIA(:PE_CONS_PROD_ORDEN)
            INTO :CONS_REFERENCIA, :CONS_REFE_VARIACION 
        DO BEGIN
          /*  BUSCAR INFORMACIÓN DE LA REFERENCIA Y VARIACION */
          SELECT CODI_REFERENCIA, NOMB_REFERENCIA,
                 CODI_REFE_TIPO_VARIACION, NOMB_REFE_TIPO_VARIACION
          FROM VIS_PCP_REFE_VARIACIONES
          WHERE CONS_REFE_VARIACION = :CONS_REFE_VARIACION
          INTO :CODI_REFERENCIA, :NOMB_REFERENCIA,
               :CODI_REFE_VARIACION, :NOMB_REFE_VARIACION;

          SUSPEND;
        END
END ^

ALTER PROCEDURE CON_PCP_PROD_TIEM_LOTE (
    PE_CONS_PROD_LOTE INTEGER)
RETURNS (
	
    TIEMPO DOUBLE PRECISION)
AS 

begin
  /*  Procedure Text  */
  SELECT SUM(TIEMPO)
  FROM PCP_PROD_LIST_OPER_COSTURA
  WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE AND 
        ES_TITULO = -1
  INTO :TIEMPO;

  IF (:TIEMPO IS NULL) THEN 
    TIEMPO = 0;

  suspend;
end ^

ALTER PROCEDURE CON_PCP_PROD_UNID_COLO_ETAPA (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_NUME_LOTE INTEGER,
    PE_CONS_REFE_COLOR INTEGER,
    PE_ETAP_PCP INTEGER)
RETURNS (
	
    CONS_GRUP_TALL_DETALLE INTEGER,
    TALLA VARCHAR(12) CHARACTER SET NONE,
    UNIDADES INTEGER)
AS 

begin

/*  --  ETAPA 0 : PLANEACIԎ DE LA ORDEN
        o  ETAPA 1 : ORDEN DE TRAZO  */ /* $$IBEC$$ 

     if ((:PE_ETAP_PCP = 0) OR (:PE_ETAP_PCP = 1)) then
     Begin
          For Select cons_grup_tall_detalle, talla,
          sum(unidades)
          from Vis_Pcp_Pedi_Unid_planeadas
          where cons_prod_orden = :pe_cons_prod_orden
          and cons_refe_color = :pe_cons_refe_color
          group by cons_grup_tall_detalle, talla
          into :cons_grup_tall_detalle, :talla, :unidades
          do Suspend;

     End
      $$IBEC$$ */ /*  --  ETAPAS > 0  */ /* $$IBEC$$ 
     Else
     Begin
           $$IBEC$$ */ /*  Validar el lote  */ /* $$IBEC$$ 
          if (:pe_nume_lote is null) then pe_nume_lote = 0;
           $$IBEC$$ */ /*  Si eniv󠬯te, consultar las unidades por lote  */ /* $$IBEC$$ 
          if (:pe_nume_lote = 0) then
          Begin
                  For Select cons_grup_tall_detalle, talla,
                  sum(unidades)
                  from Vis_Pcp_PROD_UNIDADES
                  where cons_prod_orden = :pe_cons_prod_orden
                  and nume_lote = :pe_nume_lote
                  and etapa = :pe_etap_PCP
                  group by cons_grup_tall_detalle, talla
                  into :cons_grup_tall_detalle, :talla, :unidades
                  do Suspend;
         End
         Else
          $$IBEC$$ */ /*  Si no envio lote, toda la orden  */ /* $$IBEC$$ 
         Begin
                  For Select cons_grup_tall_detalle, talla,
                  sum(unidades)
                  from Vis_Pcp_PROD_UNIDADES
                  where cons_prod_orden = :pe_cons_prod_orden
                  and etapa = :pe_etap_PCP
                  group by cons_grup_tall_detalle, talla
                  into :cons_grup_tall_detalle, :talla, :unidades

                  do Suspend;
         End
     End

 $$IBEC$$ */

 Exit;

end ^

ALTER PROCEDURE CON_PCP_PROD_UNID_ETAPA (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_NUME_LOTE INTEGER,
    PE_ETAP_PCP INTEGER)
RETURNS (
	
    CONS_REFE_COLOR INTEGER,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    NUME_COLOR VARCHAR(6) CHARACTER SET NONE,
    CONS_GRUP_TALL_DETALLE INTEGER,
    TALLA VARCHAR(12) CHARACTER SET NONE,
    UNIDADES INTEGER)
AS 

begin

/*  --  ETAPA 0 : PLANEACIԎ DE LA ORDEN
        o  ETAPA 1 : ORDEN DE TRAZO
        CONSULTAR UNIDADES DESDE EL PEDIDO  */ /* $$IBEC$$ 
     if ((:PE_ETAP_PCP = 0) or (:PE_ETAP_PCP = 1)) then
     Begin
          For Select cons_refe_color, nomb_color,
          nume_color, cons_grup_tall_detalle, talla,
          sum(unidades)
          from Vis_Pcp_Pedi_Unid_planeadas
          where cons_prod_orden = :pe_cons_prod_orden
          group by cons_refe_color, nomb_color, nume_color,
          cons_grup_tall_detalle, talla
          into :cons_refe_color, :nomb_color, :nume_color,
          :cons_grup_tall_detalle, :talla, :unidades
          do Suspend;
     End

      $$IBEC$$ */ /*  --  ETAPAS > 0  */ /* $$IBEC$$ 
     Else
     Begin
           $$IBEC$$ */ /*  Validar el lote  */ /* $$IBEC$$ 
          if (:pe_nume_lote is null) then pe_nume_lote = 0;
           $$IBEC$$ */ /*  Si eniv󠬯te, consultar las unidades por lote  */ /* $$IBEC$$ 
          if (:pe_nume_lote = 0) then
          Begin
                  For Select cons_refe_color, nomb_color,
                  nume_color, cons_grup_tall_detalle, talla,
                  sum(unidades)
                  from Vis_Pcp_PROD_UNIDADES
                  where cons_prod_orden = :pe_cons_prod_orden
                  and nume_lote = :pe_nume_lote
                  and etapa = :pe_etap_PCP
                  group by cons_refe_color, nomb_color, nume_color,
                  cons_grup_tall_detalle, talla
                  into :cons_refe_color, :nomb_color, :nume_color,
                  :cons_grup_tall_detalle, :talla, :unidades
                  do Suspend;

           End
           Else
            $$IBEC$$ */ /*  Si no envio lote, toda la orden  */ /* $$IBEC$$ 
           Begin
                  For Select cons_refe_color, nomb_color,
                  nume_color, cons_grup_tall_detalle, talla,
                  sum(unidades)
                  from Vis_Pcp_PROD_UNIDADES
                  where cons_prod_orden = :pe_cons_prod_orden
                  and nume_lote = :pe_nume_lote
                  and etapa = :pe_etap_PCP
                  group by cons_refe_color, nomb_color, nume_color,
                  cons_grup_tall_detalle, talla
                  into :cons_refe_color, :nomb_color, :nume_color,
                  :cons_grup_tall_detalle, :talla, :unidades

                  do Suspend;
            End
     End $$IBEC$$ */

     Exit;

end ^

ALTER PROCEDURE CON_PCP_REFE_COLO_DEPE_0 (
    PE_VALOR INTEGER)
    RETURNS (
	CONS_CONSULTA INTEGER,
    PADR_CONSULTA INTEGER,
    CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    INDE_IMAGEN INTEGER)
AS 

Declare Variable  var_padr_consulta integer;

begin
     /*  Inicializar las variables  */
     cons_consulta = 0;
     var_padr_consulta = 0;

     /*  -- -- -- -PEDIDOS -- -- -- -- - */

     /*  Maestro  */
     cons_consulta = cons_consulta + 1;
     padr_consulta = -1;
     cons_tabl_dependencia = 0;
     valo_tabl_dependencia = 'Pedidos';
     var_padr_consulta = :cons_consulta;
     inde_imagen = 12;

     Suspend;

     /*  Detalle  */
     For Select distinct cons_pedi_referencia
     from PCP_PEDI_UNIDADES
     Where cons_refe_color = :pe_valor
     Into :cons_tabl_dependencia do
     Begin
          /*  Buscar el nombre de  la variación componente */
          Select 'No.:' || b.nume_pedido || '  O.C.:' || a.orde_compra
          from pcp_pedi_referencias a, pcp_pedidos b
          where a.Cons_Pedi_Referencia = :CONS_TABL_DEPENDENCIA and 
                a.Cons_Pedido = b.cons_pedido
          into :valo_tabl_dependencia;

          /*  Union M-Detalle  */
          cons_consulta = :cons_consulta + 1;
          padr_consulta = :var_padr_consulta;
          inde_imagen = 13;

          Suspend;

     End
end ^

ALTER PROCEDURE CON_PCP_REFE_FICH_LIST_REFE (
    PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	
    CONS_REFE_TIPO_FICHA INTEGER,
    NOMB_REFE_TIPO_FICHA VARCHAR(60) CHARACTER SET NONE,
    CANTIDAD INTEGER)
AS 

begin
     /*  RECORRER LAS POSIBLES FICHAS TECNICAS  */
     FOR SELECT FICH.CONS_REFE_TIPO_FICHA,
         FICH.NOMB_REFE_TIPO_FICHA
     FROM VIS_SIS_REFE_TIPO_FICHA FICH
     ORDER BY FICH.CONS_REFE_TIPO_FICHA
     INTO :CONS_REFE_TIPO_FICHA, :NOMB_REFE_TIPO_FICHA 
    DO BEGIN
          /*  SI EL TIPO ES HOJA DE DISEҏ (CARATULA) -> CONSECUTIVO 1 GENERAR UN REGISTRO CON LA FECHA DE CREACIÓN  */

          IF (:CONS_REFE_TIPO_FICHA = 1) THEN

          BEGIN

               CANTIDAD = 1;

               SUSPEND;

          END

          ELSE

          BEGIN

                  SELECT COUNT(*)

                  FROM PCP_REFE_FICH_TECNICAS TECN

                  WHERE

                      TECN.CONS_REFE_VARIACION = :PE_CONS_REFE_VARIACION

                      AND TECN.CONS_REFE_TIPO_FICHA = :CONS_REFE_TIPO_FICHA

                  INTO :CANTIDAD;

                  SUSPEND;

          END

     END

end ^

ALTER PROCEDURE CON_PCP_REFE_FICH_POR_REFE (
    PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	
    CONS_REFE_TIPO_FICHA INTEGER,
    NOMB_REFE_TIPO_FICHA VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_FICHA INTEGER,
    FECH_MODIFICACION TIMESTAMP,
    USUA_MODIFICACION VARCHAR(20) CHARACTER SET NONE,
    FECH_CREACION TIMESTAMP,
    USUA_CREACION VARCHAR(20) CHARACTER SET NONE,
    ANULADA INTEGER,
    PREDETERMINADA INTEGER,
    ES_PADRE INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;

begin
     /*  RECORRER LAS POSIBLES FICHAS TECNICAS  */
     FOR SELECT FICH.CONS_REFE_TIPO_FICHA,
         FICH.NOMB_REFE_TIPO_FICHA
     FROM VIS_SIS_REFE_TIPO_FICHA FICH
     ORDER BY FICH.CONS_REFE_TIPO_FICHA
     INTO :CONS_REFE_TIPO_FICHA, :NOMB_REFE_TIPO_FICHA DO BEGIN
          /*  GENERAR EL REGISTRO PADRE  */
           CONS_REFE_FICHA = NULL;
           FECH_MODIFICACION = NULL;
           USUA_MODIFICACION = NULL;
           FECH_CREACION = NULL;
           USUA_CREACION = NULL;
           ANULADA = NULL;
           PREDETERMINADA = NULL;
           ES_PADRE = 1;

           SUSPEND;

           ES_PADRE = -1;

          /*  SI EL TIPO ES HOJA DE DISEҏ (CARATULA) -> CONSECUTIVO 1 GENERAR UN REGISTRO CON LA FECHA DE CREACIÓN  */

          IF (:CONS_REFE_TIPO_FICHA = 1) THEN BEGIN

               SELECT CONS_REFERENCIA
                   FROM PCP_REFE_VARIACIONES
                   WHERE CONS_REFE_VARIACION = :PE_CONS_REFE_VARIACION
                   INTO :VAR_CONS_REFERENCIA;

               SELECT CONS_REFERENCIA, FECH_SISTEMA, USUA_SISTEMA,
                      FECH_SISTEMA, USUA_SISTEMA, -1, 1
                      FROM GLO_REFERENCIAS
                      WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA

               INTO :CONS_REFE_FICHA, :FECH_MODIFICACION, :USUA_MODIFICACION,
                       :FECH_CREACION, :USUA_CREACION, :ANULADA, :PREDETERMINADA;

                   /*  REEMPLAZAR EL NOMBRE POR LA FECHA + USUARIO  */
                   SELECT FECHA || '->' || :USUA_MODIFICACION
                   FROM PAS_DATETOSTR(:FECH_MODIFICACION)
                   INTO :NOMB_REFE_TIPO_FICHA;

               /*  GENERAR EL REGISTRO  */
               SUSPEND;
          END
          ELSE BEGIN
              /*  SI EXISTEN REGISTROS, GENERARLOS */
              FOR SELECT TECN.CONS_REFE_FICHA,
                     TECN.FECH_MODIFICACION,
                     TECN.USUA_MODIFICACION,
                     TECN.FECH_SISTEMA,
                     TECN.USUA_SISTEMA,
                     TECN.ANULADA,
                     TECN.PREDETERMINADA

              FROM PCP_REFE_FICH_TECNICAS TECN
              WHERE
                  TECN.CONS_REFE_VARIACION = :PE_CONS_REFE_VARIACION AND 
                    TECN.CONS_REFE_TIPO_FICHA = :CONS_REFE_TIPO_FICHA
              ORDER BY TECN.FECH_MODIFICACION DESC

              INTO :CONS_REFE_FICHA, :FECH_MODIFICACION, :USUA_MODIFICACION,
                   :FECH_CREACION, :USUA_CREACION, :ANULADA, :PREDETERMINADA 
              DO BEGIN
                   /*  REEMPLAZAR EL NOMBRE POR LA FECHA + USUARIO  */
                   SELECT FECHA || '->' || :USUA_MODIFICACION
                   FROM PAS_DATETOSTR(:FECH_MODIFICACION)
                   INTO :NOMB_REFE_TIPO_FICHA;

                   /*  GENERAR EL REGISTRO  */
                   SUSPEND;
              END
          END

     END

end ^

ALTER PROCEDURE CON_PCP_REFE_INSUMOS (
    PE_CONS_REFE_VARIACION INTEGER,
    PE_ES_FABRICACION INTEGER)
RETURNS (
	
    CONS_REFE_INSUMO INTEGER,
    CONS_INSU_GRUPO INTEGER,
    CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_SUBGRUPO INTEGER,
    CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_INSU_REFERENCIA INTEGER,
    CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    ES_FABRICACION INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONSUMO NUMERIC(15, 5),
    COST_ESTIMADO NUMERIC(15, 5),
    CONS_MONEDA INTEGER,
    SIMB_MONEDA VARCHAR(12) CHARACTER SET NONE,
    TALL_PROMEDIO VARCHAR(12) CHARACTER SET NONE,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER)
AS 

DECLARE VARIABLE OBSERVACIONES VARCHAR(240);

BEGIN
     /*  CONSULTAR LOS INSUMOS ASIGNADOS A LA REFRENCIA  */
     FOR SELECT CONS_REFE_INSUMO, CONS_INSU_REFERENCIA,
         ES_FABRICACION, CONS_TERCERO, CONSUMO, TALL_PROMEDIO,
         COST_ESTIMADO, COMBINACION, TALLAJE, OBSERVACIONES, CONS_MONEDA
     FROM PCP_REFE_INSUMOS
     WHERE CONS_REFE_VARIACION = :PE_CONS_REFE_VARIACION AND 
            ES_FABRICACION = :PE_ES_FABRICACION
     ORDER BY ES_FABRICACION, CONS_REFE_INSUMO
     INTO :CONS_REFE_INSUMO, :CONS_INSU_REFERENCIA,
         :ES_FABRICACION, :CONS_PROVEEDOR, :CONSUMO, :TALL_PROMEDIO,
         :COST_ESTIMADO, :COMBINACION, :TALLAJE, :OBSERVACIONES, :CONS_MONEDA

     DO BEGIN
             /*  BUSCAR INFORMACIÓN DE LA REFERENCIA DEL INSUMO ASIGNADO  */
             SELECT CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO, CONS_UNID_MEDIDA,
                 CODI_INSU_REFERENCIA, NOMB_INSU_REFERENCIA
             FROM PCP_INSU_REFERENCIAS
             WHERE CONS_INSU_REFERENCIA = :CONS_INSU_REFERENCIA
             INTO :CONS_INSU_GRUPO, :CONS_INSU_SUBGRUPO, :CONS_UNID_MEDIDA,
                :CODI_INSU_REFERENCIA, :NOMB_INSU_REFERENCIA;

             /*  BUSCAR INFORMACIÓN DEL GRUPO DEL INSUMO ASIGNADO  */
             SELECT CODI_INSU_GRUPO, NOMB_INSU_GRUPO
             FROM PCP_INSU_GRUPOS
             WHERE CONS_INSU_GRUPO = :CONS_INSU_GRUPO
             INTO :CODI_INSU_GRUPO, :NOMB_INSU_GRUPO;

             /*  BUSCAR INFORMACIÓN DEL SUBGRUPO DEL INSUMO ASIGNADO  */
             SELECT CODI_INSU_SUBGRUPO, NOMB_INSU_SUBGRUPO
             FROM PCP_INSU_SUBGRUPOS
             WHERE CONS_INSU_SUBGRUPO = :CONS_INSU_SUBGRUPO
             INTO :CODI_INSU_SUBGRUPO, :NOMB_INSU_SUBGRUPO;

             /*  BUSCAR INFORMACIÓN DEL PROVEEDOR  */
             SELECT CODI_TERCERO, NOMB_TERCERO
             FROM GLO_TERCEROS
             WHERE CONS_TERCERO = :CODI_PROVEEDOR
             INTO :CODI_PROVEEDOR, :NOMB_PROVEEDOR;

             /*  BUSCAR INFORMACIÓN DE LA UNIDAD DE MEDIDA  */
             SELECT CODI_UNID_MEDIDA, NOMB_UNID_MEDIDA
             FROM GLO_INVE_UNIDADES
             WHERE CONS_UNID_MEDIDA = :CONS_UNID_MEDIDA
             INTO :CODI_UNID_MEDIDA, :NOMB_UNID_MEDIDA;

             /*  VERIFICAR SI TIENE OBSERVACIONES  */
             IF (:OBSERVACIONES IS NULL) THEN TIEN_OBSERVACIONES = -1;
             ELSE TIEN_OBSERVACIONES = 1;

             /*  BUSCAR EL SIMBOLO DEL TIPO DE MONEDA  */
             SELECT SIMB_MONEDA
             FROM GLO_MONEDAS
             WHERE CONS_MONEDA = :CONS_MONEDA
             INTO :SIMB_MONEDA;

             /*  GENERAR EL REGISTRO  */
             SUSPEND;
     END
END ^

ALTER PROCEDURE CON_PCP_REFE_INSU_COLO_CONSUMO (
    PE_CONS_REFE_INSUMO INTEGER,
    PE_ASIG_REFERENCIA INTEGER,
    PE_CONS_REFE_COLOR INTEGER,
    PE_CONS_COLOR INTEGER)
RETURNS (
	
    CONS_UNIDAD NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_ES_COMBINADO INTEGER;

BEGIN
     /*  NOTA:

     CUANDO EL PARÁMETRO PE_ASIG_REFERENCIA INDICA SI EL COLOR SOLCITADO ES DE LA ASIGNACIÓN DE COLORES BICA DE LA REFERENCIA (1) O SI PERTENECE A LOS COMBINADOS DE LA MISMA (-1)  */

     /*  INICIALIZAR EL CONSUMO  */

     CONS_UNIDAD = 0;

     /*  VERIFICAR QUE NO ES UN COLOR DE COMBINACIÓN  */

     IF (:PE_ASIG_REFERENCIA = 1) THEN BEGIN
          SELECT CONSUMO, COMBINACION
          FROM PCP_REFE_INSUMOS
          WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO
          INTO :CONS_UNIDAD, :VAR_ES_COMBINADO;

          /*  SI NO ES COMBINADO, GENERAR EL REGISTRO  */
          IF (:VAR_ES_COMBINADO = -1) THEN SUSPEND;
          ELSE BEGIN
             /*  BUSCAR SI TIENE CONSUMO COMO COLOR COMBINADO (RECURSIVO)  */
            SELECT CONS_UNIDAD
            FROM CON_PCP_REFE_INSU_COLO_CONSUMO(:PE_CONS_REFE_INSUMO, -1, :PE_CONS_REFE_COLOR, :PE_CONS_REFE_COLOR)
            INTO :CONS_UNIDAD;

            SUSPEND;
          END
     END
     /*  EL COLOR ES DE COMBINACIÓN  */
     ELSE BEGIN

          SELECT (CONSUMO)
          FROM PCP_REFE_INSU_COLORES
          WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO AND 
                CONS_REFE_COLOR = :PE_CONS_REFE_COLOR AND 
                CONS_COLO_COMBINADO = :PE_CONS_COLOR
          INTO :CONS_UNIDAD;

          SUSPEND;
     END
END ^

ALTER PROCEDURE CON_PCP_REFE_INSU_COLO_TALL (
    PE_CONS_REFE_INSUMO INTEGER,
    PE_ASIG_REFERENCIA INTEGER,
    PE_CONS_REFE_COLOR INTEGER,
    PE_CONS_COLOR INTEGER,
    PE_CONS_GRUP_TALL_DETALLE INTEGER)
RETURNS (
	CONS_UNIDAD NUMERIC(15, 5))
AS 

DECLARE VARIABLE VAR_CONS_UNITARIO DECIMAL(15,5);
DECLARE VARIABLE VAR_TALLAJE INTEGER;
DECLARE VARIABLE VAR_COMBINACION INTEGER;

BEGIN
     /*  INICIALIZAR EL CONSUMO  */
     CONS_UNIDAD = 0;

     /*  CONSULTAR LOS DATOS BICOS DEL INSUMO ASIGNADO  */
     SELECT CONSUMO, TALLAJE, COMBINACION
     FROM PCP_REFE_INSUMOS
     WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO
     INTO :VAR_CONS_UNITARIO, :VAR_TALLAJE, :VAR_COMBINACION;

     /*  VALIDAR EL CONSUMO  */
     IF (:VAR_CONS_UNITARIO IS NULL) THEN VAR_CONS_UNITARIO = 0;



     /*  ANALIZAR LAS DIFERENTES OPCIONES, DE LA SIGUIENTE MANERA
      A : SIN COMBINACION - CON TALLAJE
      B : CON COMBINACION - SIN TALLAJE
      C : SIN COMBINACION - CON TALLAJE
      D : CON COMBINACION - CON TALLAJE */

      /*  -- -- -- OPCION   A -- -- -- -- -- -  */
      IF ((:VAR_COMBINACION = -1) AND (:VAR_TALLAJE = -1))  THEN BEGIN
           CONS_UNIDAD = :VAR_CONS_UNITARIO;

           SUSPEND;
      END

      /*  -- -- -- OPCION   B -- -- -- -- -- -  */
      IF ((:VAR_COMBINACION = 1) AND (:VAR_TALLAJE = -1))  THEN BEGIN
           SELECT CONS_UNIDAD
           FROM CON_PCP_REFE_INSU_COLO_CONSUMO(:PE_CONS_REFE_INSUMO,
                :PE_ASIG_REFERENCIA, :PE_CONS_REFE_COLOR, :PE_CONS_COLOR)
            INTO :CONS_UNIDAD;

           SUSPEND;
      END

      /*  -- -- -- OPCION   C -- -- -- -- -- -  */
      IF ((:VAR_COMBINACION = -1) AND (:VAR_TALLAJE = 1))  THEN BEGIN

           SELECT CONSUMO
           FROM PCP_REFE_INSU_TALLAS
           WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO AND 
                CONS_GRUP_TALL_DETALLE = :PE_CONS_GRUP_TALL_DETALLE
           INTO :CONS_UNIDAD;

           /*  VALIDAR  */
           IF (:CONS_UNIDAD IS NULL) THEN CONS_UNIDAD = 0;

           SUSPEND;
      END

      /*  -- -- -- OPCION   C -- -- -- -- -- -  */
      IF ((:VAR_COMBINACION = 1) AND (:VAR_TALLAJE = 1))  THEN BEGIN

           /*  SI EL COLOR ENVIADO NO ES DE COMBINACION Y TIENE COMBINACION EL CONSUMO ES CERO  */
           IF (NOT :PE_ASIG_REFERENCIA = -1) THEN BEGIN
                   CONS_UNIDAD = 0;

                   SUSPEND;
           END
           ELSE BEGIN
                /*  BUSCAR EL CONSUMO DEL COLOR EN LA TALLA DADA  */
               SELECT CONSUMO
               FROM PCP_REFE_INSU_TALLAS
               WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO AND 
                    CONS_GRUP_TALL_DETALLE = :PE_CONS_GRUP_TALL_DETALLE
               INTO :CONS_UNIDAD;

               /*  VALIDAR  */
               IF (:CONS_UNIDAD IS NULL) THEN CONS_UNIDAD = 0;

               SUSPEND;
           END
      END

END ^

ALTER PROCEDURE CON_PCP_REFE_INSU_COLO_USADOS (
    PE_CONS_REFE_INSUMO INTEGER)
RETURNS (
	
    ASIG_REFERENCIA INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    NUME_COLOR VARCHAR(6) CHARACTER SET NONE,
    MUES_COLOR INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;

BEGIN
     /*  BUSCAR LA VARIACIÓN DE LA REFERENCIA A LA CUAL PERTENECE EL INSUMO  */
     SELECT CONS_REFE_VARIACION
     FROM PCP_REFE_INSUMOS
     WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO
     INTO :VAR_CONS_REFE_VARIACION;

     /*  BUSCAR LA SECUENCIA DE LA REFERENCIA A LA CUAL PERTENECE LA VARIACIÓN  */
     ASIG_REFERENCIA = 1;

     SELECT CONS_REFERENCIA
     FROM PCP_REFE_VARIACIONES
     WHERE CONS_REFE_VARIACION = :VAR_CONS_REFE_VARIACION
     INTO :VAR_CONS_REFERENCIA;

     /*  SELECCIONAR LOS COLORES DE LA REFERENCIA  */
     FOR SELECT CONS_REFE_COLOR, CONS_COLOR, CODI_COLOR,
         NOMB_COLOR, NUME_COLOR, MUES_COLOR
        FROM VIS_GLO_REFE_COLORES
        WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA
     INTO :CONS_REFE_COLOR, :CONS_COLOR, :CODI_COLOR,
         :NOMB_COLOR, :NUME_COLOR, :MUES_COLOR

     DO SUSPEND;

     /*  SELECCIONAR LOS COLORES DE COMBINACIÓN DEL INSUMO  */
     ASIG_REFERENCIA = -1;

     FOR SELECT CONS_REFE_COLOR, CONS_COLO_COMBINADO
         FROM PCP_REFE_INSU_COLORES
         WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO
         INTO :CONS_REFE_COLOR, :CONS_COLOR 
    DO BEGIN
          /*  NO DEVOLVER CONSECUTIVO DEL COLOR DE LA REFERENCIA PARA SABER QUE ES UN COLOR ADICIONAL  */
          NUME_COLOR = NULL;

          /*  BUSCAR INFORMACIÓN DEL COLOR  */
          FOR SELECT CODI_COLOR, NOMB_COLOR, MUES_COLOR
          FROM GLO_COLORES
          WHERE CONS_COLOR = :CONS_COLOR
          INTO :CODI_COLOR, :NOMB_COLOR, :MUES_COLOR DO

               SUSPEND;
     END
END ^

ALTER PROCEDURE CON_PCP_REFE_MATERIALES (
    PE_CONS_REFE_VARIACION INTEGER,
    PE_ES_PRINCIPAL INTEGER)
RETURNS (
	
    CONS_REFE_MATERIAL INTEGER,
    CONS_MATE_GRUPO INTEGER,
    CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_GRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_SUBGRUPO INTEGER,
    CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_SUBGRUPO VARCHAR(60) CHARACTER SET NONE,
    CONS_MATE_REFERENCIA INTEGER,
    CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    ES_PRINCIPAL INTEGER,
    CONS_PROVEEDOR INTEGER,
    CODI_PROVEEDOR INTEGER,
    NOMB_PROVEEDOR INTEGER,
    CONSUMO NUMERIC(15, 5),
    COST_ESTIMADO NUMERIC(15, 5),
    CONS_MONEDA INTEGER,
    SIMB_MONEDA VARCHAR(12) CHARACTER SET NONE,
    TALL_PROMEDIO VARCHAR(12) CHARACTER SET NONE,
    CONS_UNID_MEDIDA INTEGER,
    CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    NOMB_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    COMBINACION INTEGER,
    TALLAJE INTEGER,
    TIEN_OBSERVACIONES INTEGER)
AS 

Declare Variable observacíones Varchar(240);

begin
     /*  Consultar los materiales asignados a la refrencia  */
     For Select cons_refe_material, cons_mate_referencia,
         es_principal, cons_tercero, consumo, tall_promedio,
         cost_estimado, combinacion, tallaje, observacíones,
         cons_moneda
     From pcp_refe_materiales
     where cons_refe_variacion = :pe_cons_refe_variacion and 
            es_principal = :pe_es_principal
     order by es_principal, cons_refe_material
     Into :cons_refe_material, :cons_mate_referencia,
         :es_principal, :cons_proveedor, :consumo, :tall_promedio,
         :cost_estimado, :combinacion, :tallaje, :observacíones,
         :cons_moneda
     do Begin
        
     /*  Buscar información la referencia del material asignado  */
     Select cons_mate_grupo, cons_mate_subGrupo, cons_unid_medida,
         codi_mate_referencia, nomb_mate_referencia
     from pcp_mate_referencias
     where cons_mate_referencia = :cons_mate_referencia
     into :cons_mate_grupo, :cons_mate_subgrupo, :cons_unid_medida,
     :codi_mate_referencia, :nomb_mate_referencia;

     /*  Buscar información grupo del material asignado  */
     Select codi_mate_grupo, nomb_mate_grupo
     from pcp_mate_grupos
     where cons_mate_grupo = :cons_mate_grupo
     into :codi_mate_grupo, :nomb_mate_grupo;

     /*  Buscar información subgrupo del material asignado  */
     Select codi_mate_subgrupo, nomb_mate_subgrupo
     from pcp_mate_subgrupos
     where cons_mate_subgrupo = :cons_mate_subgrupo
     into :codi_mate_subgrupo, :nomb_mate_subgrupo;

     /*  Buscar información proveedor  */
     Select codi_tercero, nomb_tercero
     from glo_terceros
     where cons_tercero = :codi_proveedor
     into :codi_proveedor, :nomb_proveedor;

     /*  Buscar información la unidad de medida  */
     Select codi_unid_medida, nomb_unid_medida
     from glo_inve_unidades
     where cons_unid_medida = :cons_unid_medida
     into :codi_unid_medida, :nomb_unid_medida;

     /*  Verificar si tiene observacíones  */
     if (:observacíones is null) then tien_observacíones = -1;
     else tien_observacíones = 1;

     /*  Buscar el simbolo del tipo de moneda  */
     Select simb_moneda
     from GLO_MONEDAS
     where cons_moneda = :cons_moneda
     into :simb_moneda;

     Suspend;

     End
end ^

ALTER PROCEDURE CON_PCP_REFE_MATE_COLO_CONSUMO (
    PE_CONS_REFE_MATERIAL INTEGER,
    PE_ASIG_REFERENCIA INTEGER,
    PE_CONS_REFE_COLOR INTEGER,
    PE_CONS_COLOR INTEGER)
    RETURNS (
	CONS_UNIDAD NUMERIC(15, 5))
AS 

Declare Variable var_es_combinado integer;

begin
     /*  NOTA:
     Cuando el parámetro PE_ASIG_REFERENCIA indica si el color solcitado
     es de la asignación de colores básica de la referencia (1) o si
     pertenece a los combinados de la misma (-1)  */

     /*  Inicializar el consumo  */
     cons_unidad = 0;

     /*  Verificar que no es un color de combinación */
     if (:Pe_Asig_Referencia = 1) then Begin

          Select consumo, combinacion
          from pcp_refe_materiales
          where cons_refe_material = :pe_cons_refe_material
          Into :cons_unidad, :var_es_combinado;

          /*  Si no es combinado, generar el registro  */
          if (:var_es_combinado = -1) then 
            Suspend;
          Else Begin

             /*  Buscar si tiene consumo como color combinado (Recursivo)  */
            Select cons_unidad
            from con_pcp_refe_mate_colo_consumo(:pe_cons_refe_material, -1, :pe_cons_refe_color, :Pe_Cons_Refe_Color)
            into :cons_unidad;

            Suspend;
          End
     End

     /*  El color es de combinación */
     Else Begin
          Select (consumo)
          from pcp_refe_mate_colores
          where cons_refe_material = :pe_cons_refe_material and 
                cons_refe_color = :pe_cons_refe_color and 
                cons_colo_combinado = :pe_cons_color

          into :cons_unidad;

          Suspend;
     End
end ^

ALTER PROCEDURE CON_PCP_REFE_MATE_COLO_SELE (
    PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	
    TIPO_MATERIAL INTEGER,
    CONS_REFE_MATERIAL INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLO_COMBINADO INTEGER,
    CONSUMO NUMERIC(15, 5))
AS 

begin
     /*  -- -Consultar la combinación de  TEJIDOS Y FORROS -- -  */

     For Select cons_refe_material,
         Case es_principal
              When 1 Then 1
              When -1 Then 2
         End
         from pcp_refe_materiales
         where cons_refe_variacion = :pe_cons_refe_variacion
         Order by cons_refe_material
         Into :cons_refe_material, :tipo_material

     do Begin
             For Select cons_refe_color, cons_colo_combinado, consumo
                 From Pcp_Refe_Mate_Colores
                 where cons_refe_material = :cons_refe_material
                 order by cons_refe_color
                 Into :cons_refe_color, :cons_colo_combinado, :consumo
             Do Suspend;
     End

     /*  -- -Consultar la combinación INSUMOS -- -  */
     For Select cons_refe_insumo,
         Case es_fabricacion
              When 1 Then 3
              When -1 Then 4
         End
         from pcp_refe_insumos
         where cons_refe_variacion = :pe_cons_refe_variacion
         Order by cons_refe_insumo
         Into :cons_refe_material, :tipo_material

     do Begin
         For Select cons_refe_color, cons_colo_combinado, consumo
             From Pcp_Refe_Insu_Colores
             where cons_refe_insumo = :cons_refe_material
             order by cons_refe_color
             Into :cons_refe_color, :cons_colo_combinado, :consumo

         Do Suspend;
     End
end ^

ALTER PROCEDURE CON_PCP_REFE_MATE_COLO_TALL (
    PE_CONS_REFE_MATERIAL INTEGER,
    PE_ASIG_REFERENCIA INTEGER,
    PE_CONS_REFE_COLOR INTEGER,
    PE_CONS_COLOR INTEGER,
    PE_CONS_GRUP_TALL_DETALLE INTEGER)
RETURNS (
	CONS_UNIDAD NUMERIC(15, 5))
AS 

Declare Variable var_cons_unitario DECIMAL(15,5);
Declare Variable var_tallaje integer;
Declare Variable var_combinacion integer;

begin
     /*  Inicializar el consumo  */
     cons_unidad = 0;

     /*  Consultar los datos básicos del material asignado  */
     Select consumo, tallaje, combinacion
     from pcp_refe_materiales
     where cons_refe_material = :pe_cons_refe_material
     into :var_cons_unitario, :var_tallaje, :var_combinacion;

     /*  Validar el consumo  */
     if (:var_cons_unitario is null) then var_cons_unitario = 0;

     /*  Analizar las diferentes opciones, de la siguiente manera

      A : SIN combinación - CON tallaje
      B : CON combinación - SIN tallaje
      C : SIN combinación - CON tallaje
      D : CON combinación - CON tallaje */

      /*  -- -- -- OPCION   A -- -- -- -- -- -  */
      if ((:var_combinacion = -1) and (:var_tallaje = -1))  then Begin
           cons_unidad = :var_cons_unitario;

           Suspend;
      End

      /*  -- -- -- OPCION   B -- -- -- -- -- -  */
      if ((:var_combinacion = 1) and (:var_tallaje = -1))  then Begin
           Select cons_unidad
           from Con_Pcp_Refe_Mate_Colo_Consumo(:pe_cons_refe_material,
                :pe_asig_referencia, :Pe_Cons_Refe_Color, :pe_cons_color)
            into :cons_unidad;

           Suspend;
      End

      /*  -- -- -- OPCION   C -- -- -- -- -- -  */
      if ((:var_combinacion = -1) and (:var_tallaje = 1))  then Begin

           Select consumo
           from pcp_refe_mate_tallas
           where cons_refe_material = :pe_cons_refe_material and 
                cons_grup_tall_detalle = :pe_cons_grup_tall_detalle
           into :cons_unidad;

           /*  Validar  */
           if (:cons_unidad is null) then cons_unidad = 0;

           Suspend;
      End

      /*  -- -- -- OPCION   C -- -- -- -- -- -  */
      if ((:var_combinacion = 1) and (:var_tallaje = 1))  then Begin

           /*  Si el color enviado no es de combinación y tiene combinación el consumo es cero  */
           if (Not :pe_asig_referencia = -1) then Begin

                   cons_unidad = 0;

                   Suspend;

           End
           Else Begin

                /*  Buscar el consumo del color en la talla dada  */
               Select consumo
               from pcp_refe_mate_tallas
               where cons_refe_material = :pe_cons_refe_material and 
                    cons_grup_tall_detalle = :pe_cons_grup_tall_detalle
               into :cons_unidad;

               /*  Validar  */
               if (:cons_unidad is null) then cons_unidad = 0;

               Suspend;
           End
      End
end ^

ALTER PROCEDURE CON_PCP_REFE_MATE_COLO_USADOS (
    PE_CONS_REFE_MATERIAL INTEGER)
RETURNS (
	
    ASIG_REFERENCIA INTEGER,
    CONS_REFE_COLOR INTEGER,
    CONS_COLOR INTEGER,
    CODI_COLOR VARCHAR(12) CHARACTER SET NONE,
    NOMB_COLOR VARCHAR(60) CHARACTER SET NONE,
    NUME_COLOR VARCHAR(6) CHARACTER SET NONE,
    MUES_COLOR INTEGER)
AS 

Declare Variable VAR_CONS_REFERENCIA INTEGER;
Declare Variable VAR_CONS_REFE_VARIACION INTEGER;

begin
     /*  Buscar la variación la referencia a la cual pertenece el material  */

     Select cons_refe_variacion
     from Pcp_Refe_Materiales
     where cons_refe_material = :pe_cons_refe_material
     into :VAR_CONS_REFE_VARIACION;

     /*  Buscar la secuencia de la referencia a la cual pertenece la variación */
     Asig_referencia = 1;

     Select cons_referencia
     from Pcp_Refe_Variaciones
     where cons_refe_variacion = :var_Cons_Refe_Variacion
     into :var_cons_referencia;

     /*  Seleccionar los colores de la referencia  */
     For Select cons_refe_color, cons_color, codi_color,
             nomb_color, nume_color, mues_color
         from Vis_Glo_Refe_Colores
         Where cons_referencia = :var_cons_referencia
         into :cons_refe_color, :cons_color, :codi_color,
             :nomb_color, :nume_color, :mues_color

     do Suspend;

     /*  Seleccionar los colores de combinación del material  */
     Asig_referencia = -1;

     For Select cons_refe_color, cons_colo_combinado
         from pcp_refe_mate_colores
         where cons_refe_material = :pe_cons_refe_material
         into :cons_refe_color, :Cons_Color 
     do Begin
          /*  No devolver consecutivo del color de la referencia para saber que es un color adicional  */
          nume_color = Null;

          /*  buscar información color  */
          For Select codi_color, nomb_color, mues_color
          from glo_colores
          where cons_color = :Cons_Color
          into :codi_color, :nomb_color, :mues_color do

               Suspend;
     End
end ^

ALTER PROCEDURE CON_PCP_REFE_MATE_TALL_SELE (
    PE_CONS_REFE_VARIACION INTEGER)
RETURNS (
	
    TIPO_MATERIAL INTEGER,
    CONS_REFE_MATERIAL INTEGER,
    CONS_GRUP_TALL_DETALLE INTEGER,
    CONSUMO NUMERIC(15, 5))
AS 

begin
     /*  -- -Consultar la combinación TEJIDOS Y FORROS -- -  */
     For Select cons_refe_material,
         Case es_principal
              When 1 Then 1
              When -1 Then 2
         End

     from pcp_refe_materiales
     where cons_refe_variacion = :pe_cons_refe_variacion
     Order by cons_refe_material
     Into :cons_refe_material, :tipo_material

     do Begin
             For Select cons_grup_tall_detalle, consumo
                 From Pcp_Refe_Mate_Tallas
                 where cons_refe_material = :cons_refe_material
                 order by cons_grup_tall_detalle
                 Into :cons_grup_tall_detalle, :consumo

             Do Suspend;
     End

     /*  -- -Consultar la combinación INSUMOS -- -  */
     For Select cons_refe_insumo,
         Case es_fabricacion
              When 1 Then 3
              When -1 Then 4
         End
         from pcp_refe_insumos
         where cons_refe_variacion = :pe_cons_refe_variacion
         Order by cons_refe_insumo
         Into :cons_refe_material, :tipo_material

     do Begin
             For Select cons_grup_tall_detalle, consumo
                 From Pcp_Refe_Insu_Tallas
                 where cons_refe_insumo = :cons_refe_material
                 order by cons_grup_tall_detalle
                 Into :cons_grup_tall_detalle, :consumo

             Do Suspend;
     End
end ^

ALTER PROCEDURE CON_PCP_REFE_VARI_DEPE_0 (
    PE_VALOR INTEGER)
RETURNS (
	
    CONS_CONSULTA INTEGER,
    PADR_CONSULTA INTEGER,
    CONS_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    VALO_TABL_DEPENDENCIA VARCHAR(120) CHARACTER SET NONE,
    INDE_IMAGEN INTEGER)
AS 

Declare Variable  var_padr_consulta integer;

begin
     /*  Inicializar las variables  */
     cons_consulta = 0;
     var_padr_consulta = 0;

     /*  -- -- -- -LISTADOS DE OPERACIONES -- -- -- -- - */
     /*  Maestro  */
     cons_consulta = cons_consulta + 1;
     padr_consulta = -1;
     cons_tabl_dependencia = 0;
     valo_tabl_dependencia = 'Listados de operaciones (costura)';
     var_padr_consulta = :cons_consulta;
     inde_imagen = 12;

     Suspend;

     /*  Detalle  */
     For Select distinct cons_refe_variacion
         from PCP_REFE_LIST_OPER_COSTURA
         Where cons_refe_variacion = :pe_valor
         Into :cons_tabl_dependencia do
     Begin
          /*  Buscar el nombre de  REFERENCIA */
          Select b.codi_referencia
          from glo_referencias b, pcp_refe_variaciones a
          where a.cons_refe_variacion = :CONS_TABL_DEPENDENCIA and 
                a.cons_referencia = b.cons_referencia
          into :valo_tabl_dependencia;

          /*  Union M-Detalle  */
          cons_consulta = :cons_consulta + 1;
          padr_consulta = :var_padr_consulta;
          inde_imagen = 13;

          Suspend;
     End

     /*  -- -- -- -PEDIDOS -- -- -- -- - */

     /*  Maestro  */
     cons_consulta = cons_consulta + 1;
     padr_consulta = -1;
     cons_tabl_dependencia = 0;
     valo_tabl_dependencia = 'Pedidos';
     var_padr_consulta = :cons_consulta;
     inde_imagen = 12;

     Suspend;

     /*  Detalle  */
     For Select distinct cons_pedi_referencia
         from PCP_PEDI_REFERENCIAS
         Where cons_refe_variacion = :pe_valor
         Into :cons_tabl_dependencia do
     Begin
          Select 'No.:' || b.nume_pedido || '  O.C.:' || a.orde_compra
          from pcp_pedi_referencias a, pcp_pedidos b
          where a.Cons_Pedi_Referencia = :CONS_TABL_DEPENDENCIA and 
                a.Cons_Pedido = b.cons_pedido
          into :valo_tabl_dependencia;

          /*  Union M-Detalle  */
          cons_consulta = :cons_consulta + 1;
          padr_consulta = :var_padr_consulta;
          inde_imagen = 13;

          Suspend;
     End
end ^

ALTER PROCEDURE CON_PCP_SEMA_CURVA (
    PE_CONS_PERSONAL INTEGER,
    PE_FECH_INICIO TIMESTAMP,
    PE_NUME_DIAS INTEGER)
RETURNS (
	SEMANA INTEGER)
AS 

DECLARE VARIABLE VAR_FECH_TIQUETE DATE;
DECLARE VARIABLE VAR_DIA INTEGER;

BEGIN
  /* Consultar la última fecha leida por tiquetes en curva */
  SELECT MAX(N.FECH_LECTURA)
  FROM PCP_CONT_NOVE_DIARIAS N, PCP_CONT_NOVE_TIQU_FABRICACION F
  WHERE N.CONS_CONT_NOVE_DIARIA = F.CONS_CONT_NOVE_DIARIA AND 
        N.CONS_PERSONAL = :PE_CONS_PERSONAL AND 
        F.CONS_CONT_NOVE_ABONADO IS NULL AND 
        NOT F.CONS_FORM_PAGO_CURVA IS NULL
  INTO :VAR_FECH_TIQUETE;

  /* Verificar que la fecha no sea null */
  IF (:VAR_FECH_TIQUETE IS NULL) THEN
    VAR_FECH_TIQUETE = :PE_FECH_INICIO;

  /* Inicializar resultado */

  SEMANA = 1;
  VAR_DIA = 1;

  WHILE (:PE_FECH_INICIO <= :VAR_FECH_TIQUETE) DO BEGIN

    /* Restar un día a la ultima fecha leída por tiquetes en curva */
    PE_FECH_INICIO = (:PE_FECH_INICIO + 1);

    /* Verificar que el día no sea domingo */
    IF (EXTRACT(DAY FROM :PE_FECH_INICIO) <> 1) THEN
      VAR_DIA = (:VAR_DIA + 1);

    /* Incrementar la semana */
    IF (:VAR_DIA > :PE_NUME_DIAS) THEN BEGIN
      VAR_DIA = 1;
      SEMANA = (:SEMANA + 1);
    END
  END

  /* Devolver el registro */
  SUSPEND;

END ^

ALTER PROCEDURE CON_PCT_MINU_TURNO (
    PE_CONS_TURNO INTEGER,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP)
RETURNS (
	
    MINU_TURNO NUMERIC(15, 2))
AS 

DECLARE VARIABLE VAR_DIA INTEGER;
DECLARE VARIABLE VAR_PRIM_DESCANSO INTEGER;
DECLARE VARIABLE VAR_SEGU_DESCANSO INTEGER;
DECLARE VARIABLE VAR_DESCANSO INTEGER;
DECLARE VARIABLE VAR_LUNES INTEGER;
DECLARE VARIABLE VAR_MARTES INTEGER;
DECLARE VARIABLE VAR_MIERCOLES INTEGER;
DECLARE VARIABLE VAR_JUEVES INTEGER;
DECLARE VARIABLE VAR_VIERNES INTEGER;
DECLARE VARIABLE VAR_SABADO INTEGER;

BEGIN
  /* Inicializar resultado */
  MINU_TURNO = 0;
  VAR_DESCANSO = 0;

  /* Consultar turno */
  SELECT PRIM_DESCANSO, SEGU_DESCANSO,
   LUNE_MINUTOS, MART_MINUTOS, MIER_MINUTOS,
   JUEV_MINUTOS, VIER_MINUTOS, SABA_MINUTOS
  FROM GLO_TURNOS T
  WHERE CONS_TURNO = :PE_CONS_TURNO
  INTO :VAR_PRIM_DESCANSO, :VAR_SEGU_DESCANSO,
   :VAR_LUNES, :VAR_MARTES, :VAR_MIERCOLES,
   :VAR_JUEVES, :VAR_VIERNES, :VAR_SABADO;

  /* Verificar que no sean null */
  IF (:VAR_PRIM_DESCANSO IS NULL) THEN
    VAR_PRIM_DESCANSO = 0;

  IF (:VAR_SEGU_DESCANSO IS NULL) THEN
    VAR_SEGU_DESCANSO = 0;

  /* Calcular el total de descansos */
  VAR_DESCANSO = (:VAR_PRIM_DESCANSO + :VAR_SEGU_DESCANSO);

  /* Recorrer las fechas */
  WHILE (:PE_FECH_INICIAL <= :PE_FECH_FINAL) DO BEGIN
    /* Verificar que el día no sea domingo */
    IF (EXTRACT(WEEKDAY FROM :PE_FECH_INICIAL) = 0) THEN
      /* Incrmentar la fecha */
      PE_FECH_INICIAL = (:PE_FECH_INICIAL + 1);

    /* Consultar el día */
    VAR_DIA = (EXTRACT(WEEKDAY FROM :PE_FECH_INICIAL));

    /* Lunes */
    IF (:VAR_DIA = 1) THEN
      MINU_TURNO = (:MINU_TURNO + :VAR_LUNES);
    /* Martes */
    ELSE IF (:VAR_DIA = 2) THEN
      MINU_TURNO = (:MINU_TURNO + :VAR_MARTES);
    /* Miércoles */
    ELSE IF (:VAR_DIA = 3) THEN
      MINU_TURNO = (:MINU_TURNO + :VAR_MIERCOLES);
    /* Jueves */
    ELSE IF (:VAR_DIA = 4) THEN
      MINU_TURNO = (:MINU_TURNO + :VAR_JUEVES);
    /* Viernes */
    ELSE IF (:VAR_DIA = 5) THEN
      MINU_TURNO = (:MINU_TURNO + :VAR_VIERNES);
    /* Sábado */
    ELSE IF (:VAR_DIA = 6) THEN
      MINU_TURNO = (:MINU_TURNO + :VAR_SABADO);

    /* Incrementar la fecha */
    PE_FECH_INICIAL = (:PE_FECH_INICIAL + 1);
  END
  /* Devolver el registro */
  SUSPEND;
END ^

ALTER PROCEDURE CON_PERM_TABLAS (
    PE_TABLAS VARCHAR(500) CHARACTER SET NONE,
    PE_CANT_TABLAS INTEGER,
    PE_TIPO VARCHAR(5) CHARACTER SET NONE)
RETURNS (
	PERMISO INTEGER)
AS 

DECLARE VARIABLE VAR_NOMB_TABLA VARCHAR(31);

BEGIN

  --  Inicializo el resultado en falso
  PERMISO = 0;

  FOR SELECT RDB$RELATION_NAME
  FROM RDB$USER_PRIVILEGES
  WHERE (RDB$USER = USER OR RDB$USER = CURRENT_ROLE) AND 
         RDB$FIELD_NAME IS NULL AND 
         RDB$PRIVILEGE = :PE_TIPO
  ORDER BY RDB$RELATION_NAME
  INTO :VAR_NOMB_TABLA

  DO BEGIN
    SELECT TEXTO
    FROM PAS_LENGTH(:VAR_NOMB_TABLA)
    INTO :VAR_NOMB_TABLA;

    IF (EXISTS(SELECT POSICION
               FROM PAS_POSICION(:VAR_NOMB_TABLA,  :PE_TABLAS)
               WHERE POSICION > 0)) THEN
      PERMISO = (:PERMISO + 1);
  END

  --  Si la cantidad de permisos es null o es diferente a la cantidad de tablas devuelvo falso, de lo contrario devuelvo verdadero

  IF (:PERMISO IS NULL OR :PERMISO <> :PE_CANT_TABLAS) THEN
    PERMISO = -1;
  ELSE
    PERMISO = 1;

  SUSPEND;
END ^

ALTER PROCEDURE CON_SIS_TRADUCCION (
    PE_FRASE VARCHAR(240) CHARACTER SET NONE,
    PE_LENGUAJE INTEGER,
    PE_LENG_ANTERIOR INTEGER)
RETURNS (
	
    TRADUCCION VARCHAR(240) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_FRASE INTEGER;

BEGIN
  /* Inicializar resultado */
  TRADUCCION = '';

  /* Verificar que los lenguajes sean distintos */
  IF (:PE_LENGUAJE <> :PE_LENG_ANTERIOR) THEN BEGIN

    /* Si el lenguaje es español *//

    IF (:PE_LENGUAJE = 1) THEN
      /* Consultar la traducción */
      SELECT FIRST 1 F.FRASE AS TRADUCCION
      FROM SIS_FRASES F, SIS_TRADUCCION T
      WHERE F.CONS_FRASE = T.CONS_FRASE AND 
            T.CONS_TIPO_LENGUAJE = :PE_LENG_ANTERIOR AND 
            T.TRADUCCION = :PE_FRASE
      INTO :TRADUCCION;

    /* Si el lenguaje anterior es español */
    ELSE IF (:PE_LENG_ANTERIOR = 1) THEN

      /* Consultar la traducción */
      SELECT FIRST 1 T.TRADUCCION AS TRADUCCION
      FROM SIS_FRASES F, SIS_TRADUCCION T
      WHERE F.CONS_FRASE = T.CONS_FRASE AND 
            T.CONS_TIPO_LENGUAJE = :PE_LENGUAJE AND 
            F.FRASE = :PE_FRASE
      INTO :TRADUCCION;
    ELSE BEGIN

      /* Consultamos el consecutivo de la traducción */
      SELECT FIRST 1 CONS_FRASE
      FROM SIS_TRADUCCION
      WHERE CONS_TIPO_LENGUAJE = :PE_LENG_ANTERIOR AND 
            TRADUCCION = :PE_FRASE
      ORDER BY CONS_TRADUCCION
      INTO :VAR_CONS_FRASE;

      /* Verificar que haya encontrado la traducción */
      IF (:VAR_CONS_FRASE IS NOT NULL AND
        CAST(:VAR_CONS_FRASE AS VARCHAR(12)) <> '') THEN

        /* Consultar la traducción */
        SELECT FIRST 1 TRADUCCION
        FROM SIS_TRADUCCION
        WHERE CONS_FRASE = :VAR_CONS_FRASE AND 
                CONS_TIPO_LENGUAJE = :PE_LENGUAJE
        ORDER BY CONS_TRADUCCION
        INTO :TRADUCCION;
      ELSE BEGIN

        /* Consultamos el consecutivo de la traducción */
        SELECT FIRST 1 CONS_FRASE
        FROM SIS_FRASES
        WHERE FRASE = :PE_FRASE
        ORDER BY CONS_FRASE
        INTO :VAR_CONS_FRASE;

        /* Verificar que haya encontrado la traducción */
        IF (:VAR_CONS_FRASE IS NOT NULL AND
          CAST(:VAR_CONS_FRASE AS VARCHAR(12)) <> '') THEN
          /* Consultar la traducción */
          SELECT FIRST 1 TRADUCCION
          FROM SIS_TRADUCCION
          WHERE CONS_FRASE = :VAR_CONS_FRASE AND 
                CONS_TIPO_LENGUAJE = :PE_LENGUAJE
          ORDER BY CONS_TRADUCCION

          INTO :TRADUCCION;
      END
    END
  END

  /* Verificar que haya encontrado la traducción */
  IF (:TRADUCCION IS NULL OR :TRADUCCION = '') THEN
    TRADUCCION = :PE_FRASE;

  /* Devolver el registro */
  SUSPEND;
END ^

ALTER PROCEDURE FUN_GLO_CERO_IZQUIERDA (
    PE_VALOR INTEGER,
    PE_LONGITUD INTEGER)
RETURNS (
	
    RESULTADO VARCHAR(15) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_VALO_TEXTO VARCHAR(15);
DECLARE VARIABLE VAR_LONGITUD INTEGER;
DECLARE VARIABLE VAR_I  INTEGER;

BEGIN
    /*  CONVERTIR EL VALOR EN CARACTER  */
    SELECT CAST(:PE_VALOR AS VARCHAR(15))
    FROM RDB$DATABASE
    INTO :VAR_VALO_TEXTO;

    /*  CALCULAR SU LONGITUD  */
    SELECT LONGITUD
    FROM PAS_LENGTH(:VAR_VALO_TEXTO)
    INTO :VAR_LONGITUD;

    /*  INSERTAR LOS CEROS  */
    VAR_I = 1;
    RESULTADO = '';

    WHILE (:VAR_I <= :PE_LONGITUD - :VAR_LONGITUD) DO BEGIN
        RESULTADO = :RESULTADO || '0';
        VAR_I = :VAR_I + 1;
    END

    /*  PEGAR EL VALOR AL FINAL  */
    RESULTADO = :RESULTADO || :VAR_VALO_TEXTO;

    /*  GENERAR EL REGISTRO  */
    SUSPEND;
END ^

ALTER PROCEDURE FUN_GLO_GENE_SECUENCIA (
    TABLA VARCHAR(50) CHARACTER SET NONE,
    CAMPO VARCHAR(50) CHARACTER SET NONE)
RETURNS (
	
    SECUENCIA INTEGER)
AS 

begin
  --  Armar la sentencia
  Execute Statement

     'Select Max('||:campo||') From '||:Tabla
     Into :Secuencia;

     if (:secuencia is null) then
        secuencia = 0;

  --  Validar el resultado
     secuencia = :secuencia + 1;

  --  Devolverlo
     Suspend;
end ^

ALTER PROCEDURE FUN_GLO_PERM_USUARIO (PE_NOMB_OBJETO VARCHAR(31) CHARACTER SET NONE)
RETURNS (
	
    S INTEGER,
    I INTEGER,
    U INTEGER,
    D INTEGER,
    R INTEGER,
    X INTEGER)
AS 

Declare Variable  var_permiso Varchar(6);

begin

  /*  Inicializar las variables en FALSE */
  S = -1;
  I = -1;
  U = -1;
  D = -1;
  R = -1;
  X = -1;

  /*  Consultar  */
  For Select upper(RDB$PRIVILEGE) from
        rdb$user_privileges
        where rdb$user = user and 
                UPPER(rdb$relation_name) = :Pe_Nomb_Objeto and 
                rdb$field_name is null
        into :var_permiso
  do Begin
       if (:var_permiso = 'S') then S = 1;
       if (:var_permiso = 'I') then I = 1;
       if (:var_permiso = 'U') then U = 1;
       if (:var_permiso = 'D') then D = 1;
       if (:var_permiso = 'R') then R = 1;
       if (:var_permiso = 'X') then X = 1;
  End

  suspend;
end ^

ALTER PROCEDURE FUN_GLO_PERS_NOMB_TIPO_TURNO (
    PE_TIPO_TURNO INTEGER)
RETURNS (
	
    NOMB_TIPO_TURNO VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
    SELECT CASE :PE_TIPO_TURNO
               WHEN 0 THEN 'COMPLETO'
               WHEN 1 THEN 'MAÑANA'
               WHEN 2 THEN 'TARDE'
               WHEN 3 THEN 'NOCHE'
               WHEN 4 THEN 'UNICA'
               ELSE 'SIN DEFINIR'
            END
       FROM RDB$DATABASE
       INTO :NOMB_TIPO_TURNO;

    SUSPEND;
END ^

ALTER PROCEDURE FUN_PCP_CONF_OBJETOS_IU (
    PE_CONS_CONF_OBJETO INTEGER,
    PE_TIPO INTEGER,
    PE_NOMB_OBJETO VARCHAR(60) CHARACTER SET NONE,
    PE_DESC_OBJETO VARCHAR(1000) CHARACTER SET NONE,
    PE_MENU_PADRE VARCHAR(240) CHARACTER SET NONE,
    PE_NOMB_MENU_PADRE VARCHAR(240) CHARACTER SET NONE,
    PE_ESTA_ACTIVO INTEGER,
    PE_BASE_DATOS VARCHAR(60) CHARACTER SET NONE,
    PE_TEXT_SQL VARCHAR(3000) CHARACTER SET NONE)
RETURNS (
	CONS_CONF_OBJETO INTEGER)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_CONF_OBJETO 
            FROM PCP_CONF_OBJETOS 
            WHERE (CONS_CONF_OBJETO = :PE_CONS_CONF_OBJETO))) THEN BEGIN

    /*  ACTUALIZAR EL REGISTRO  */
    UPDATE PCP_CONF_OBJETOS
    SET TIPO = :PE_TIPO,
        NOMB_OBJETO = :PE_NOMB_OBJETO,
        DESC_OBJETO = :PE_DESC_OBJETO,
        MENU_PADRE = :PE_MENU_PADRE,
        NOMB_MENU_PADRE = :PE_NOMB_MENU_PADRE,
        ESTA_ACTIVO = :PE_ESTA_ACTIVO,
        BASE_DATOS = :PE_BASE_DATOS,
        TEXT_SQL = :PE_TEXT_SQL
    WHERE (CONS_CONF_OBJETO = :PE_CONS_CONF_OBJETO);

    /*  GENERAR EL RESULTADO  */
    CONS_CONF_OBJETO = :PE_CONS_CONF_OBJETO;
  END
  ELSE BEGIN

    /*  BUSCAR EL VALOR DEL CONSECUTIVO  */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('PCP_CONF_OBJETOS', 'CONS_CONF_OBJETO')
    INTO :CONS_CONF_OBJETO;

    INSERT INTO PCP_CONF_OBJETOS (
        CONS_CONF_OBJETO, TIPO, NOMB_OBJETO, DESC_OBJETO,
        MENU_PADRE, NOMB_MENU_PADRE, ESTA_ACTIVO, BASE_DATOS,
        TEXT_SQL)

    VALUES (
        :CONS_CONF_OBJETO, :PE_TIPO, :PE_NOMB_OBJETO, :PE_DESC_OBJETO,
        :PE_MENU_PADRE, :PE_NOMB_MENU_PADRE, :PE_ESTA_ACTIVO, :PE_BASE_DATOS,
        :PE_TEXT_SQL);

  END

  SUSPEND;
END ^

ALTER PROCEDURE FUN_PCP_PLAN_ES_DIA_HABIL (
    PE_FECHA TIMESTAMP)
RETURNS (
	
    RESULTADO INTEGER)
AS 

begin
    /*  VALIDAR LA ENTRADA  */
    IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

    /*  VERIFICAR SI HAY REGISTROS  */
     IF (NOT EXISTS(SELECT * FROM
             PCP_PLAN_CALENDARIO
             WHERE ((:RESULTADO >=  FECHA) AND
                   (:RESULTADO < FECHA)))) THEN
            RESULTADO = 1;
         ELSE
            RESULTADO = -1;

    /*  GENERAR EL REGISTGRO  */
    SUSPEND;
end ^

ALTER PROCEDURE FUN_PCP_PLAN_SIGU_DIA_HABIL (PE_FECHA TIMESTAMP)
RETURNS (
	RESULTADO TIMESTAMP)
AS 

DECLARE VARIABLE VAR_ES_DIA_HABIL INTEGER;

begin
    /*  VALIDAR LA ENTRADA  */
    IF (:PE_FECHA IS NULL) THEN PE_FECHA = 'NOW';

    RESULTADO = :PE_FECHA;
    VAR_ES_DIA_HABIL = -1;

    /*  RECORRER LOS DIAS  */
    WHILE (:VAR_ES_DIA_HABIL = -1) DO BEGIN
         IF (NOT EXISTS(SELECT * FROM
             PCP_PLAN_CALENDARIO
             WHERE ((:RESULTADO >=  FECHA) AND
                   (:RESULTADO < FECHA)))) THEN
            VAR_ES_DIA_HABIL = 1;
         ELSE
            RESULTADO = :RESULTADO + 1;
    END

    /*  GENERAR EL REGISTGRO  */
    SUSPEND;
end ^

ALTER PROCEDURE FUN_SIS_USUA_INFORMES_I (
    PE_CONS_USUA_MODULO INTEGER,
    PE_NOMB_USUA_INFORME VARCHAR(60) CHARACTER SET NONE)
RETURNS (
	
    CONS_USUA_INFORME INTEGER)
AS 

BEGIN
  /*  GENERAR LA SECUENCIA  */
  SELECT MAX(CONS_USUA_INFORME)
  FROM SIS_USUA_INFORMES
  INTO :CONS_USUA_INFORME;

  IF (:CONS_USUA_INFORME IS NULL) THEN CONS_USUA_INFORME = 0;
  CONS_USUA_INFORME = :CONS_USUA_INFORME + 1;

  /*  INSERTAR EL REGISTRO  */
  INSERT INTO SIS_USUA_INFORMES
  (CONS_USUA_INFORME, CONS_USUA_MODULO, NOMB_USUA_INFORME, CONTROLES)
  VALUES
  (:CONS_USUA_INFORME, :PE_CONS_USUA_MODULO, :PE_NOMB_USUA_INFORME, '');

  /*  GENERAR EL REGISTRO  */
  SUSPEND;
END ^

ALTER PROCEDURE FUN_SIS_USUA_MODULOS_IU_INFO (
    PE_MODULO VARCHAR(100) CHARACTER SET NONE)
RETURNS (
	
    CONS_USUA_MODULO INTEGER)
AS 

DECLARE VARIABLE VAR_USUA_INFORMES VARCHAR(20) = '$INFORMES$';

BEGIN
  /*  VERIFICAR SI EL MԄULO YA EXISTE  */
  IF (EXISTS(SELECT MODULO 
        FROM SIS_USUA_MODULOS 
        WHERE (MODULO = :PE_MODULO) AND 
        (USUARIO = :VAR_USUA_INFORMES))) THEN
  BEGIN
       SELECT CONS_USUA_MODULO
       FROM SIS_USUA_MODULOS
       WHERE (MODULO = :PE_MODULO) AND 
            (USUARIO =  :VAR_USUA_INFORMES)
       INTO :CONS_USUA_MODULO;
  END
  ELSE /*  SI NO EXISTE, CREARLO  */
  BEGIN
        INSERT INTO SIS_USUA_MODULOS (MODULO, USUARIO)
        VALUES (:PE_MODULO, :VAR_USUA_INFORMES);

        /*  SELECCIONARLO  */
        SELECT CONS_USUA_MODULO
        FROM SIS_USUA_MODULOS
        WHERE (MODULO = :PE_MODULO) AND 
                (USUARIO =  :VAR_USUA_INFORMES)
        INTO :CONS_USUA_MODULO;
  END

  /*  GENERAR EL REGISTRO  */
  SUSPEND;
END ^

ALTER PROCEDURE PAS_DATETOSTR (PEFECHA TIMESTAMP)
RETURNS (
	FECHA VARCHAR(12) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_DIA VARCHAR(2) ;
DECLARE VARIABLE VAR_MES VARCHAR(2) ;
DECLARE VARIABLE VAR_ANO VARCHAR(4) ;
DECLARE VARIABLE VAR_LONGITUD INTEGER;

begin
  SELECT EXTRACT(DAY FROM :PEFECHA),
         EXTRACT(MONTH FROM :PEFECHA),
         EXTRACT(YEAR FROM :PEFECHA)
  FROM RDB$DATABASE
  INTO :VAR_DIA, :VAR_MES, :VAR_ANO;

  /*  DAR FORMATO  */
  SELECT LONGITUD
  FROM PAS_LENGTH(:VAR_DIA)
  INTO :VAR_LONGITUD;

  IF (:VAR_LONGITUD < 2) THEN VAR_DIA = '0' || :VAR_DIA;

  SELECT LONGITUD
  FROM PAS_LENGTH(:VAR_MES)
  INTO :VAR_LONGITUD;

  IF (:VAR_LONGITUD < 2) THEN VAR_MES = '0' || :VAR_MES;

  /*  RESULTADO  */
  FECHA = :VAR_DIA || '/' || :VAR_MES || '/' || :VAR_ANO;

  suspend;
end ^

ALTER PROCEDURE PAS_LENGTH (
    PE_TEXTO VARCHAR(100) CHARACTER SET NONE)
RETURNS (
	
    LONGITUD INTEGER,
    TEXTO VARCHAR(100) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_LIKE VARCHAR(100);
DECLARE VARIABLE VAR_I INTEGER;
DECLARE VARIABLE VAR_LONGITUD INTEGER;

BEGIN

  LONGITUD = 0;

  --  Verifico que el parámetro de entrada no este vacío
  IF (:PE_TEXTO IS NULL) THEN BEGIN

    SUSPEND;
    EXIT;
  END

  BEGIN
    TEXTO = CAST(:PE_TEXTO AS CHAR(31)); LONGITUD = 31;
    TEXTO = CAST(:PE_TEXTO AS CHAR(30)); LONGITUD = 30;
    TEXTO = CAST(:PE_TEXTO AS CHAR(29)); LONGITUD = 29;
    TEXTO = CAST(:PE_TEXTO AS CHAR(28)); LONGITUD = 28;
    TEXTO = CAST(:PE_TEXTO AS CHAR(27)); LONGITUD = 27;
    TEXTO = CAST(:PE_TEXTO AS CHAR(26)); LONGITUD = 26;
    TEXTO = CAST(:PE_TEXTO AS CHAR(25)); LONGITUD = 25;
    TEXTO = CAST(:PE_TEXTO AS CHAR(24)); LONGITUD = 24;
    TEXTO = CAST(:PE_TEXTO AS CHAR(23)); LONGITUD = 23;
    TEXTO = CAST(:PE_TEXTO AS CHAR(22)); LONGITUD = 22;
    TEXTO = CAST(:PE_TEXTO AS CHAR(21)); LONGITUD = 21;
    TEXTO = CAST(:PE_TEXTO AS CHAR(20)); LONGITUD = 20;
    TEXTO = CAST(:PE_TEXTO AS CHAR(19)); LONGITUD = 19;
    TEXTO = CAST(:PE_TEXTO AS CHAR(18)); LONGITUD = 18;
    TEXTO = CAST(:PE_TEXTO AS CHAR(17)); LONGITUD = 17;
    TEXTO = CAST(:PE_TEXTO AS CHAR(16)); LONGITUD = 16;
    TEXTO = CAST(:PE_TEXTO AS CHAR(15)); LONGITUD = 15;
    TEXTO = CAST(:PE_TEXTO AS CHAR(14)); LONGITUD = 14;
    TEXTO = CAST(:PE_TEXTO AS CHAR(13)); LONGITUD = 13;
    TEXTO = CAST(:PE_TEXTO AS CHAR(12)); LONGITUD = 12;
    TEXTO = CAST(:PE_TEXTO AS CHAR(11)); LONGITUD = 11;
    TEXTO = CAST(:PE_TEXTO AS CHAR(10)); LONGITUD = 10;
    TEXTO = CAST(:PE_TEXTO AS CHAR(9)); LONGITUD = 9;
    TEXTO = CAST(:PE_TEXTO AS CHAR(8)); LONGITUD = 8;
    TEXTO = CAST(:PE_TEXTO AS CHAR(7)); LONGITUD = 7;
    TEXTO = CAST(:PE_TEXTO AS CHAR(6)); LONGITUD = 6;
    TEXTO = CAST(:PE_TEXTO AS CHAR(5)); LONGITUD = 5;
    TEXTO = CAST(:PE_TEXTO AS CHAR(4)); LONGITUD = 4;
    TEXTO = CAST(:PE_TEXTO AS CHAR(3)); LONGITUD = 3;
    TEXTO = CAST(:PE_TEXTO AS CHAR(2)); LONGITUD = 2;
    TEXTO = CAST(:PE_TEXTO AS CHAR(1)); LONGITUD = 1;

    SUSPEND;

    WHEN ANY DO SUSPEND;

  END
END ^

ALTER PROCEDURE PAS_POSICION (
    PE_TEXT_1 VARCHAR(500) CHARACTER SET NONE,
    PE_TEXT_2 VARCHAR(500) CHARACTER SET NONE)
RETURNS (
	
    POSICION INTEGER)
AS 

DECLARE VARIABLE VAR_TEXTO VARCHAR(1001);
DECLARE VARIABLE VAR_TEMPORAL VARCHAR(500);

BEGIN
  IF (:PE_TEXT_1 IS NULL OR :PE_TEXT_1 IS NULL) THEN BEGIN
    POSICION = NULL;
    SUSPEND;
    EXIT;
  END

  VAR_TEXTO = :PE_TEXT_1 || '%';
  VAR_TEMPORAL = '';
  POSICION = 1;

  WHILE (:PE_TEXT_2 NOT LIKE :VAR_TEXTO AND :PE_TEXT_2 NOT LIKE :VAR_TEMPORAL) DO BEGIN
    VAR_TEXTO = '_' || :VAR_TEXTO;
    VAR_TEMPORAL = :VAR_TEMPORAL || '_';
    POSICION = POSICION + 1;
  END

  IF (:PE_TEXT_2 LIKE :VAR_TEMPORAL) THEN
    POSICION = 0;

  SUSPEND;
END ^

ALTER PROCEDURE PCP_PROG_PRODUCCION_U (
    CONS_PROG_PRODUCCION INTEGER,
    CONS_PROD_LOTE INTEGER,
    ESTA_PROGRAMADO INTEGER,
    FECH_PROGRAMACION TIMESTAMP,
    USUA_PROGRAMACION VARCHAR(20) CHARACTER SET NONE,
    FECH_EJEC_INICIAL TIMESTAMP,
    FRAC_EJEC_INICIAL FLOAT,
    FECH_EJEC_FINAL TIMESTAMP,
    ES_MOVIL INTEGER,
    CONS_EMPRESA INTEGER,
    CONS_PLANTA INTEGER,
    CONS_PLAN_LINEA INTEGER,
    CONS_TURNO INTEGER,
    TIPO_AGRUPACION INTEGER,
    TIPO_BALANCEO INTEGER,
    TIEM_UNIDAD FLOAT,
    UNID_LOTE INTEGER,
    MINU_CONTRATADOS INTEGER,
    MINU_DESCANSO INTEGER,
    PERS_DISPONIBLE INTEGER,
    PORC_PRESENCIA FLOAT,
    PORC_APROVECHAMIENTO FLOAT,
    PORC_EFICIENCIA FLOAT,
    TIEM_MEDIO FLOAT,
    PROD_DIA INTEGER,
    PROD_HORA INTEGER,
    PAQU_POR_PUESTO INTEGER,
    TAMA_PAQUETE INTEGER,
    PUES_SIMULTANEOS INTEGER,
    TIEM_UNID_REAL FLOAT,
    RECO_PRIM_PAQU_MINUTOS FLOAT,
    RECO_PRIM_PAQU_DIAS FLOAT,
    RECO_ULTI_PAQU_MINUTOS FLOAT,
    RECO_ULTI_PAQU_DIAS FLOAT)
AS 

BEGIN
  UPDATE PCP_PROG_PRODUCCION
  SET CONS_PROD_LOTE = :CONS_PROD_LOTE,
      ESTA_PROGRAMADO = :ESTA_PROGRAMADO,
      FECH_PROGRAMACION = :FECH_PROGRAMACION,
      USUA_PROGRAMACION = :USUA_PROGRAMACION,
      FECH_EJEC_INICIAL = :FECH_EJEC_INICIAL,
      FRAC_EJEC_INICIAL = :FRAC_EJEC_INICIAL,
      FECH_EJEC_FINAL = :FECH_EJEC_FINAL,
      ES_MOVIL = :ES_MOVIL,
      CONS_EMPRESA = :CONS_EMPRESA,
      CONS_PLANTA = :CONS_PLANTA,
      CONS_PLAN_LINEA = :CONS_PLAN_LINEA,
      CONS_TURNO = :CONS_TURNO,
      TIPO_AGRUPACION = :TIPO_AGRUPACION,
      TIPO_BALANCEO = :TIPO_BALANCEO,
      TIEM_UNIDAD = :TIEM_UNIDAD,
      UNID_LOTE = :UNID_LOTE,
      MINU_CONTRATADOS = :MINU_CONTRATADOS,
      MINU_DESCANSO = :MINU_DESCANSO,
      PERS_DISPONIBLE = :PERS_DISPONIBLE,
      PORC_PRESENCIA = :PORC_PRESENCIA,
      PORC_APROVECHAMIENTO = :PORC_APROVECHAMIENTO,
      PORC_EFICIENCIA = :PORC_EFICIENCIA,
      TIEM_MEDIO = :TIEM_MEDIO,
      PROD_DIA = :PROD_DIA,
      PROD_HORA = :PROD_HORA,
      PAQU_POR_PUESTO = :PAQU_POR_PUESTO,
      TAMA_PAQUETE = :TAMA_PAQUETE,
      PUES_SIMULTANEOS = :PUES_SIMULTANEOS,
      TIEM_UNID_REAL = :TIEM_UNID_REAL,
      RECO_PRIM_PAQU_MINUTOS = :RECO_PRIM_PAQU_MINUTOS,
      RECO_PRIM_PAQU_DIAS = :RECO_PRIM_PAQU_DIAS,
      RECO_ULTI_PAQU_MINUTOS = :RECO_ULTI_PAQU_MINUTOS,
      RECO_ULTI_PAQU_DIAS = :RECO_ULTI_PAQU_DIAS
  WHERE (CONS_PROG_PRODUCCION = :CONS_PROG_PRODUCCION);
END ^

ALTER PROCEDURE PRO_C08_GP_INSUMOS (
    PE_CODI_INSU_GRUPO VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_INSU_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_UNID_MEDI_PLAN VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_INSU_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    PE_NOMB_INSU_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_DESC_BREVE VARCHAR(20) CHARACTER SET NONE,
    PE_TIPO_MOVIMIENTO INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_INSU_GRUPO INTEGER;
DECLARE VARIABLE VAR_CONS_INSU_SUBGRUPO INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CONS_INSU_REFERENCIA  INTEGER;
DECLARE VARIABLE VAR_USUA_SISTEMA VARCHAR(20) = 'PRO_C08_GP_MATE';

begin

   /*  INICIALIZAR EL RESULTADO  */
   RESULTADO = '';

   /*  -- -- -- -- -- VALIDACION DE EXISTENCIA EN LOS MAESTROS PARA MOVIMIENTOS
      DE CREACIÓN (0) Y MODIFICACIÓN (1) -- -- -- -- -- -- -- -- -- -- -- -- -- -  */

   IF (:PE_TIPO_MOVIMIENTO IN (0,1))   THEN BEGIN

          /*  VERIFICAR EL GRUPO DEL INSUMO, SI NO EXISTE, CREARLO  */
          IF (NOT EXISTS(SELECT CODI_INSU_GRUPO
              FROM PCP_INSU_GRUPOS
              WHERE CODI_INSU_GRUPO = :PE_CODI_INSU_GRUPO)) THEN BEGIN

                  /*  CREAR EL GRUPO  */
                  INSERT INTO  PCP_INSU_GRUPOS
                  (CODI_INSU_GRUPO, NOMB_INSU_GRUPO,
                   OBSERVACIONES, USUA_SISTEMA)
                  VALUES
                  (:PE_CODI_INSU_GRUPO, '??? '||:PE_CODI_INSU_GRUPO,
                  :PE_OBSERVACIONES, :VAR_USUA_SISTEMA);
            END

          /*  BUSCAR EL CONSECUTIVO DEL GRUPO DEL INSUMO  */
          SELECT CONS_INSU_GRUPO
          FROM PCP_INSU_GRUPOS
          WHERE CODI_INSU_GRUPO = :PE_CODI_INSU_GRUPO
          INTO :VAR_CONS_INSU_GRUPO;

          /*  VERIFICAR EL SUBGRUPO DEL INSUMO, SI NO EXISTE, CREARLO  */
          IF (NOT EXISTS(SELECT CODI_INSU_SUBGRUPO
              FROM PCP_INSU_SUBGRUPOS
              WHERE CODI_INSU_SUBGRUPO = :PE_CODI_INSU_SUBGRUPO AND 
                    CONS_INSU_GRUPO = :VAR_CONS_INSU_GRUPO)) THEN BEGIN

                  /*  CREAR EL SUBGRUPO  */
                  INSERT INTO  PCP_INSU_SUBGRUPOS
                  (CONS_INSU_GRUPO, CODI_INSU_SUBGRUPO, NOMB_INSU_SUBGRUPO,
                   OBSERVACIONES, USUA_SISTEMA)
                  VALUES
                  (:VAR_CONS_INSU_GRUPO, :PE_CODI_INSU_SUBGRUPO, '??? '||:PE_CODI_INSU_SUBGRUPO,
                  :PE_OBSERVACIONES,:VAR_USUA_SISTEMA);
            END

          /*  BUSCAR EL CONSECUTIVO DEL SUBGRUPO DEL INSUMO  */
          SELECT CONS_INSU_SUBGRUPO
          FROM PCP_INSU_SUBGRUPOS
          WHERE CODI_INSU_SUBGRUPO = :PE_CODI_INSU_SUBGRUPO AND 
                CONS_INSU_GRUPO = :VAR_CONS_INSU_GRUPO
          INTO :VAR_CONS_INSU_SUBGRUPO;

          /*  VERIFICAR LA UNIDAD DE MEDIDA DEL INSUMO, SI NO EXISTE, CREARLA  */
          IF (NOT( (EXISTS(SELECT CODI_UNID_MEDIDA
              FROM GLO_INVE_UNIDADES
              WHERE CODI_UNID_MEDIDA = :PE_CODI_UNID_MEDIDA))
              )) THEN BEGIN

                  /*  CREAR LA UNIDAD DE MEDIDA  */
                  INSERT INTO GLO_INVE_UNIDADES
                  (CODI_UNID_MEDIDA, CONS_TIPO_UNID_MEDIDA,
                   NOMB_UNID_MEDIDA, USUA_SISTEMA)
                  VALUES
                  (:PE_CODI_UNID_MEDIDA, 0,
                  '??? ' || :PE_CODI_UNID_MEDIDA, :VAR_USUA_SISTEMA);

            END

            /*  BUSCAR EL CONSECUTIVO DE LA UNIDAD DE MEDIDA  */
            SELECT CONS_UNID_MEDIDA
            FROM GLO_INVE_UNIDADES
            WHERE CODI_UNID_MEDIDA = :PE_CODI_UNID_MEDIDA
            INTO :VAR_CONS_UNID_MEDIDA;
     END

     /*  -- -- -- -- -- -- -- - TIPO MOVIMIENTO = 0 (CREACIԎ)-- -- -- -- -- -- -- -- --  */
     IF (:PE_TIPO_MOVIMIENTO = 0) THEN BEGIN

             /*  CREAR LA REFERENCIA DE INSUMO  */
            INSERT INTO PCP_INSU_REFERENCIAS
            (CONS_INSU_GRUPO, CONS_INSU_SUBGRUPO,
            CODI_INSU_REFERENCIA, NOMB_INSU_REFERENCIA,
            OBSERVACIONES, CONS_UNID_MEDIDA, USUA_SISTEMA,
            ADIC_C08_GP_PLAN_UNID_MEDIDA,
            ADIC_C08_GP_DESC_BREVE)
            VALUES
            (:VAR_CONS_INSU_GRUPO, :VAR_CONS_INSU_SUBGRUPO,
            :PE_CODI_INSU_REFERENCIA, :PE_NOMB_INSU_REFERENCIA,
            :PE_OBSERVACIONES, :VAR_CONS_UNID_MEDIDA, :VAR_USUA_SISTEMA,
            :PE_CODI_UNID_MEDI_PLAN,
            :PE_DESC_BREVE);

            /*  GENERAR EL RESULTADO DEL SP  */
            SUSPEND;
        END

     /*  -- -- -- -- -- -- -TIPO MOVIMIENTO = 1 (MODIFICACIÓN) -- -- -- -- -- -- -- -  */

     IF (:PE_TIPO_MOVIMIENTO = 1) THEN BEGIN
            /*  BUSCAR EL CONSECUTIVO DE LA REFERENCIA DEL INSUMO  */
            SELECT CONS_INSU_REFERENCIA
            FROM PCP_INSU_REFERENCIAS
            WHERE CODI_INSU_REFERENCIA = :PE_CODI_INSU_REFERENCIA
            INTO :VAR_CONS_INSU_REFERENCIA;

             /*  ACTUALIZAR LA REFERENCIA DE INSUMO  */
            UPDATE PCP_INSU_REFERENCIAS
            SET
              CONS_INSU_GRUPO = :VAR_CONS_INSU_GRUPO,
              CONS_INSU_SUBGRUPO = :VAR_CONS_INSU_SUBGRUPO,
              CODI_INSU_REFERENCIA = :PE_CODI_INSU_REFERENCIA,
              NOMB_INSU_REFERENCIA = :PE_NOMB_INSU_REFERENCIA,
              OBSERVACIONES = :PE_OBSERVACIONES,
              CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA,
              USUA_SISTEMA = :VAR_USUA_SISTEMA,
              ADIC_C08_GP_PLAN_UNID_MEDIDA = :PE_CODI_UNID_MEDI_PLAN,
              ADIC_C08_GP_DESC_BREVE = :PE_DESC_BREVE
            WHERE CONS_INSU_REFERENCIA = :VAR_CONS_INSU_REFERENCIA;
              
            /*  GENERAR EL RESULTADO DEL SP  */

            SUSPEND;

        END

     /*  -- -- -- -- -- -- -TIPO MOVIMIENTO = 1 (ELIMINACIÓN) -- -- -- -- -- -- -- -  */

     IF (:PE_TIPO_MOVIMIENTO = 2) THEN BEGIN
            DELETE FROM PCP_INSU_REFERENCIAS
            WHERE CODI_INSU_REFERENCIA = :PE_CODI_INSU_REFERENCIA;

            /*  GENERAR EL RESULTADO  */
            SUSPEND;

        END

     /*  -- -- -- -- -- -- --   CAPTURAR LOS ERRORES DEL PROCEDIMIENTO -- -- -- -- -- -- */

     WHEN ANY DO BEGIN

           /*  BUSCAR LA FECHA Y HORA DE OCURRENCIA  */
           SELECT CAST(CAST('NOW' AS DATE)
AS VARCHAR(30)) || ' -> ' || SQLCODE
           FROM RDB$DATABASE
           INTO :RESULTADO;

           SUSPEND;
       END
end ^

ALTER PROCEDURE PRO_C08_GP_MATERIALES (
    PE_CODI_MATE_GRUPO VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_MATE_SUBGRUPO VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_UNID_MEDIDA VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_UNID_MEDI_PLAN VARCHAR(12) CHARACTER SET NONE,
    PE_CODI_MATE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    PE_NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_DESC_BREVE VARCHAR(20) CHARACTER SET NONE,
    PE_TIPO_MOVIMIENTO INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_MATE_GRUPO INTEGER;
DECLARE VARIABLE VAR_CONS_MATE_SUBGRUPO INTEGER;
DECLARE VARIABLE VAR_CONS_UNID_MEDIDA INTEGER;
DECLARE VARIABLE VAR_CONS_MATE_REFERENCIA  INTEGER;
DECLARE VARIABLE VAR_USUA_SISTEMA VARCHAR(20) = 'PRO_C08_GP_MATE';

begin

   /*  INICIALIZAR EL RESULTADO  */
   RESULTADO = '';

   /*  -- -- -- -- -- VALIDACION DE EXISTENCIA EN LOS MAESTROS PARA MOVIMIENTOS
      DE CREACIÓN (0) Y MODIFICACIÓN (1) -- -- -- -- -- -- -- -- -- -- -- -- -- -  */

   IF (:PE_TIPO_MOVIMIENTO IN (0,1))   THEN BEGIN

          /*  VERIFICAR EL GRUPO DEL MATERIAL, SI NO EXISTE, CREARLO  */
          IF (NOT EXISTS(SELECT CODI_MATE_GRUPO
              FROM PCP_MATE_GRUPOS
              WHERE CODI_MATE_GRUPO = :PE_CODI_MATE_GRUPO)) THEN BEGIN

                  /*  CREAR EL GRUPO  */
                  INSERT INTO  PCP_MATE_GRUPOS
                  (CODI_MATE_GRUPO, NOMB_MATE_GRUPO,
                   OBSERVACIONES, USUA_SISTEMA)
                  VALUES
                  (:PE_CODI_MATE_GRUPO, '??? '||:PE_CODI_MATE_GRUPO,
                  :PE_OBSERVACIONES, :VAR_USUA_SISTEMA);
            END

          /*  BUSCAR EL CONSECUTIVO DEL GRUPO DEL MATERIAL  */
          SELECT CONS_MATE_GRUPO
          FROM PCP_MATE_GRUPOS
          WHERE CODI_MATE_GRUPO = :PE_CODI_MATE_GRUPO
          INTO :VAR_CONS_MATE_GRUPO;

          /*  VERIFICAR EL SUBGRUPO DEL MATERIAL, SI NO EXISTE, CREARLO  */
          IF (NOT EXISTS(SELECT CODI_MATE_SUBGRUPO
              FROM PCP_MATE_SUBGRUPOS
              WHERE CODI_MATE_SUBGRUPO = :PE_CODI_MATE_SUBGRUPO AND 
                    CONS_MATE_GRUPO = :VAR_CONS_MATE_GRUPO)) THEN
            BEGIN
                  /*  CREAR EL SUBGRUPO  */
                  INSERT INTO  PCP_MATE_SUBGRUPOS
                  (CONS_MATE_GRUPO, CODI_MATE_SUBGRUPO, NOMB_MATE_SUBGRUPO,
                   OBSERVACIONES, USUA_SISTEMA)
                  VALUES
                  (:VAR_CONS_MATE_GRUPO, :PE_CODI_MATE_SUBGRUPO, '??? '||:PE_CODI_MATE_SUBGRUPO,
                  :PE_OBSERVACIONES,:VAR_USUA_SISTEMA);
            END

          /*  BUSCAR EL CONSECUTIVO DEL SUBGRUPO DEL MATERIAL  */
          SELECT CONS_MATE_SUBGRUPO
          FROM PCP_MATE_SUBGRUPOS
          WHERE CODI_MATE_SUBGRUPO = :PE_CODI_MATE_SUBGRUPO AND 
                CONS_MATE_GRUPO = :VAR_CONS_MATE_GRUPO
          INTO :VAR_CONS_MATE_SUBGRUPO;

          /*  VERIFICAR LA UNIDAD DE MEDIDA DEL MATERIAL, SI NO EXISTE, CREARLA  */

          IF (NOT( (EXISTS(SELECT CODI_UNID_MEDIDA
              FROM GLO_INVE_UNIDADES
              WHERE CODI_UNID_MEDIDA = :PE_CODI_UNID_MEDIDA))
              )) THEN
            BEGIN
                  /*  CREAR LA UNIDAD DE MEDIDA  */
                  INSERT INTO GLO_INVE_UNIDADES
                  (CODI_UNID_MEDIDA, CONS_TIPO_UNID_MEDIDA,
                   NOMB_UNID_MEDIDA, USUA_SISTEMA)
                  VALUES
                  (:PE_CODI_UNID_MEDIDA, 0,
                  '??? ' || :PE_CODI_UNID_MEDIDA, :VAR_USUA_SISTEMA);
            END
            /*  BUSCAR EL CONSECUTIVO DE LA UNIDAD DE MEDIDA  */
            SELECT CONS_UNID_MEDIDA
            FROM GLO_INVE_UNIDADES
            WHERE CODI_UNID_MEDIDA = :PE_CODI_UNID_MEDIDA
            INTO :VAR_CONS_UNID_MEDIDA;
     END

     /*  -- -- -- -- -- -- -- - TIPO MOVIMIENTO = 0 (CREACIԎ)-- -- -- -- -- -- -- -- --  */
     IF (:PE_TIPO_MOVIMIENTO = 0) THEN BEGIN

             /*  CREAR LA REFERENCIA DE MATERIAL  */
            INSERT INTO PCP_MATE_REFERENCIAS
                (CONS_MATE_GRUPO, CONS_MATE_SUBGRUPO,
                CODI_MATE_REFERENCIA, NOMB_MATE_REFERENCIA,
                OBSERVACIONES, CONS_UNID_MEDIDA, USUA_SISTEMA,
                ADIC_C08_GP_PLAN_UNID_MEDIDA,
                ADIC_C08_GP_DESC_BREVE)
            VALUES
            (:VAR_CONS_MATE_GRUPO, :VAR_CONS_MATE_SUBGRUPO,
            :PE_CODI_MATE_REFERENCIA, :PE_NOMB_MATE_REFERENCIA,
            :PE_OBSERVACIONES, :VAR_CONS_UNID_MEDIDA, :VAR_USUA_SISTEMA,
            :PE_CODI_UNID_MEDI_PLAN,
            :PE_DESC_BREVE);

            SUSPEND;
        END

     /*  -- -- -- -- -- -- -TIPO MOVIMIENTO = 1 (MODIFICACIÓN) -- -- -- -- -- -- -- -  */
     IF (:PE_TIPO_MOVIMIENTO = 1) THEN BEGIN

        /*  BUSCAR EL CONSECUTIVO DE LA REFERENCIA DEL MATERIAL  */
        SELECT CONS_MATE_REFERENCIA
        FROM PCP_MATE_REFERENCIAS
        WHERE CODI_MATE_REFERENCIA = :PE_CODI_MATE_REFERENCIA
        INTO :VAR_CONS_MATE_REFERENCIA;

         /*  ACTUALIZAR LA REFERENCIA DE MATERIAL  */
        UPDATE PCP_MATE_REFERENCIAS
        SET CONS_MATE_GRUPO = :VAR_CONS_MATE_GRUPO,
          CONS_MATE_SUBGRUPO = :VAR_CONS_MATE_SUBGRUPO,
          CODI_MATE_REFERENCIA = :PE_CODI_MATE_REFERENCIA,
          NOMB_MATE_REFERENCIA = :PE_NOMB_MATE_REFERENCIA,
          OBSERVACIONES = :PE_OBSERVACIONES,
          CONS_UNID_MEDIDA = :VAR_CONS_UNID_MEDIDA,
          USUA_SISTEMA = :VAR_USUA_SISTEMA,
          ADIC_C08_GP_PLAN_UNID_MEDIDA = :PE_CODI_UNID_MEDI_PLAN,
          ADIC_C08_GP_DESC_BREVE = :PE_DESC_BREVE
        WHERE CONS_MATE_REFERENCIA = :VAR_CONS_MATE_REFERENCIA;

        SUSPEND;

    END

     /*  -- -- -- -- -- -- -TIPO MOVIMIENTO = 1 (ELIMINACIÓN) -- -- -- -- -- -- -- -  */
     IF (:PE_TIPO_MOVIMIENTO = 2) THEN BEGIN
            DELETE FROM PCP_MATE_REFERENCIAS
            WHERE CODI_MATE_REFERENCIA = :PE_CODI_MATE_REFERENCIA;

            SUSPEND;

    END

     /*  -- -- -- -- -- -- --   CAPTURAR LOS ERRORES DEL PROCEDIMIENTO -- -- -- -- -- -- */
     WHEN ANY DO BEGIN

           /*  BUSCAR LA FECHA Y HORA DE OCURRENCIA  */
           SELECT CAST(CAST('NOW' AS DATE)
AS VARCHAR(30)) || ' -> ' || SQLCODE
           FROM RDB$DATABASE
           INTO :RESULTADO;

           SUSPEND;
       END
end ^

ALTER PROCEDURE PRO_C08_GP_PAITEMS_IU (
    PAPROJNUMBER VARCHAR(15) CHARACTER SET NONE,
    PACOSTCATID VARCHAR(15) CHARACTER SET NONE,
    ITEMNMBR VARCHAR(31) CHARACTER SET NONE,
    PABASE_QTY FLOAT,
    UOFM VARCHAR(9) CHARACTER SET NONE,
    OUMSCHDL VARCHAR(11) CHARACTER SET NONE)
AS 

BEGIN
  IF (EXISTS(SELECT PAPROJNUMBER 
                FROM C08_GP_PAITEMS 
                WHERE (PAPROJNUMBER = :PAPROJNUMBER) AND  
                        (PACOSTCATID = :PACOSTCATID) AND  
                        (ITEMNMBR = :ITEMNMBR))) THEN
    UPDATE C08_GP_PAITEMS
    SET PABASE_QTY = :PABASE_QTY,
        UOFM = :UOFM,
        OUMSCHDL = :OUMSCHDL
    WHERE (PAPROJNUMBER = :PAPROJNUMBER) AND 
            (PACOSTCATID = :PACOSTCATID) AND 
            (ITEMNMBR = :ITEMNMBR);
  ELSE

    INSERT INTO C08_GP_PAITEMS ( 
        PAPROJNUMBER, PACOSTCATID, ITEMNMBR, PABASE_QTY, UOFM, OUMSCHDL)
    VALUES ( :PAPROJNUMBER, :PACOSTCATID, :ITEMNMBR, :PABASE_QTY, :UOFM, :OUMSCHDL);

END ^

ALTER PROCEDURE PRO_C08_GP_PROD_ITEM_COSTOS (
    PE_CONS_PROD_ORDEN INTEGER,
    PE_PAPROJNUMBER VARCHAR(15) CHARACTER SET NONE,
    PE_PACOSTCATID VARCHAR(15) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_PEDI_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_ITEMNMBR VARCHAR(31);
DECLARE VARIABLE VAR_PABASE_QTY FLOAT;
DECLARE VARIABLE VAR_UOFM VARCHAR(9);
DECLARE VARIABLE VAR_OUMSCHDL VARCHAR(11);
DECLARE VARIABLE VAR_CONS_REFE_MATERIAL INTEGER;
DECLARE VARIABLE VAR_UNID_ASIGNADAS FLOAT;
DECLARE VARIABLE VAR_ES_PRINCIPAL INTEGER;
DECLARE VARIABLE VAR_CONS_MATE_REFERENCIA INTEGER;

begin
    /*  -- -TELAS -- -- --   */
    IF (:PE_PACOSTCATID IN ('1_MP FORRO', '1_MP TELAS')) THEN BEGIN

       /*  ASIGNAR LA VARIABLE DEL MATERIAL PRINCIPAL  */
       SELECT CASE :PE_PACOSTCATID
            WHEN '1_MP TELAS' THEN 1
            WHEN '1_MP FORRO' THEN -1
       END
       FROM RDB$DATABASE
       INTO :VAR_ES_PRINCIPAL;

        /*  INSERTAR CADA UNO DE LOS REGISTROS DE LA EXPLOSIԎ  */
        FOR SELECT CONS_MATE_REFERENCIA, CONS_REFE_MATERIAL,  CODI_MATE_REFERENCIA, CODI_UNID_MEDIDA,
            SUM(CONS_TOTAL)
            FROM CON_PCP_PROD_EXPL_MATERIALES(:PE_CONS_PROD_ORDEN, :VAR_ES_PRINCIPAL)
            GROUP BY CONS_MATE_REFERENCIA, CONS_REFE_MATERIAL, CODI_MATE_REFERENCIA, CODI_UNID_MEDIDA
            INTO :VAR_CONS_MATE_REFERENCIA, :VAR_CONS_REFE_MATERIAL, :VAR_ITEMNMBR, :VAR_UOFM,
                 :VAR_PABASE_QTY  
        DO BEGIN

               /*  BUSCAR EL PLAN DE LA UNIDAD DE MEDIDA  */
               SELECT ADIC_C08_GP_PLAN_UNID_MEDIDA
               FROM PCP_MATE_REFERENCIAS
               WHERE CONS_MATE_REFERENCIA = :VAR_CONS_MATE_REFERENCIA
               INTO :VAR_OUMSCHDL;

               IF (:VAR_OUMSCHDL IS NULL) THEN VAR_OUMSCHDL = '';

               /*  VERIFICAR CUANTAS UNIDADES HAY ASIGNADAS  */
               SELECT PABASE_QTY
               FROM C08_GP_PAITEMS
               WHERE PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                    PACOSTCATID = :PE_PACOSTCATID AND 
                    ITEMNMBR = :VAR_ITEMNMBR
               INTO :VAR_UNID_ASIGNADAS;

               IF (:VAR_UNID_ASIGNADAS IS NULL) THEN VAR_UNID_ASIGNADAS = 0;

               /*  SUMAR LAS UNIDADES  */
               VAR_PABASE_QTY = :VAR_PABASE_QTY + :VAR_UNID_ASIGNADAS;

               /*  INSERTAR EL REGISTRO EN EL DETALLE DEL COSTO  */
               EXECUTE PROCEDURE PRO_C08_GP_PAITEMS_IU(
               :PE_PAPROJNUMBER, :PE_PACOSTCATID, :VAR_ITEMNMBR,
               :VAR_PABASE_QTY, :VAR_UOFM, :VAR_OUMSCHDL);
          END
      END

    /*  -- -INSUMOS -- -- --   */
    IF (:PE_PACOSTCATID IN ('4_INS. FAB', '4_INS. EMP')) THEN BEGIN
           /*  ASIGNAR LA VARIABLE DEL MATERIAL PRINCIPAL  */
           SELECT CASE :PE_PACOSTCATID
                WHEN '4_INS. FAB' THEN 1
                WHEN '4_INS. EMP' THEN -1
           END
           FROM RDB$DATABASE
           INTO :VAR_ES_PRINCIPAL;
        
                /*  INSERTAR CADA UNO DE LOS REGISTROS DE LA EXPLOSIԎ  */
                FOR SELECT CONS_INSU_REFERENCIA, CONS_REFE_INSUMO,  CODI_INSU_REFERENCIA, CODI_UNID_MEDIDA,
                        SUM(CONS_TOTAL)
                    FROM CON_PCP_PROD_EXPL_INSUMOS(:PE_CONS_PROD_ORDEN, :VAR_ES_PRINCIPAL)
                    GROUP BY CONS_INSU_REFERENCIA, CONS_REFE_INSUMO, CODI_INSU_REFERENCIA, CODI_UNID_MEDIDA
                    INTO :VAR_CONS_MATE_REFERENCIA,:VAR_CONS_REFE_MATERIAL, :VAR_ITEMNMBR, :VAR_UOFM,
                        :VAR_PABASE_QTY  
                DO BEGIN
                       /*  BUSCAR EL PLAN DE LA UNIDAD DE MEDIDA  */
                       SELECT ADIC_C08_GP_PLAN_UNID_MEDIDA
                       FROM PCP_INSU_REFERENCIAS
                       WHERE CONS_INSU_REFERENCIA = :VAR_CONS_MATE_REFERENCIA
                       INTO :VAR_OUMSCHDL;

                       IF (:VAR_OUMSCHDL IS NULL) THEN VAR_OUMSCHDL = '';

                       /*  VERIFICAR CUANTAS UNIDADES HAY ASIGNADAS  */
                       SELECT PABASE_QTY
                       FROM C08_GP_PAITEMS
                       WHERE PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                            PACOSTCATID = :PE_PACOSTCATID AND 
                            ITEMNMBR = :VAR_ITEMNMBR

                       INTO :VAR_UNID_ASIGNADAS;

                       IF (:VAR_UNID_ASIGNADAS IS NULL) THEN VAR_UNID_ASIGNADAS = 0;

                       /*  SUMAR LAS UNIDADES  */
                       VAR_PABASE_QTY = :VAR_PABASE_QTY + :VAR_UNID_ASIGNADAS;

                       /*  INSERTAR EL REGISTRO EN EL DETALLE DEL COSTO  */
                       EXECUTE PROCEDURE PRO_C08_GP_PAITEMS_IU(
                       :PE_PAPROJNUMBER, :PE_PACOSTCATID, :VAR_ITEMNMBR,
                       :VAR_PABASE_QTY, :VAR_UOFM, :VAR_OUMSCHDL);
                  END
      END
end ^

ALTER PROCEDURE PRO_C08_GP_PROY_ITEM_COSTOS (
    PE_CONS_PEDIDO INTEGER,
    PE_PAPROJNUMBER VARCHAR(15) CHARACTER SET NONE,
    PE_PACOSTCATID VARCHAR(15) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_PEDI_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_ITEMNMBR VARCHAR(31);
DECLARE VARIABLE VAR_PABASE_QTY FLOAT;
DECLARE VARIABLE VAR_UOFM VARCHAR(9);
DECLARE VARIABLE VAR_OUMSCHDL VARCHAR(11);
DECLARE VARIABLE VAR_CONS_REFE_MATERIAL INTEGER;
DECLARE VARIABLE VAR_UNID_ASIGNADAS FLOAT;
DECLARE VARIABLE VAR_ES_PRINCIPAL INTEGER;
DECLARE VARIABLE VAR_CANTIDAD FLOAT;
DECLARE VARIABLE VAR_CONS_MATE_REFERENCIA INTEGER;

begin
    /*  -- -TELAS -- -- --   */
    IF (:PE_PACOSTCATID IN ('1_MP FORRO', '1_MP TELAS')) THEN BEGIN
           /*  ASIGNAR LA VARIABLE DEL MATERIAL PRINCIPAL  */
           SELECT CASE :PE_PACOSTCATID
                WHEN '1_MP TELAS' THEN 1
                WHEN '1_MP FORRO' THEN -1
           END
           FROM RDB$DATABASE
           INTO :VAR_ES_PRINCIPAL;

           /*  RECORRER LAS REFERENCIAS DEL PEDIDO  */
           FOR SELECT PEDI.CONS_PEDI_REFERENCIA
           FROM PCP_PEDI_REFERENCIAS PEDI
           WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
           ORDER BY PEDI.CONS_PEDI_REFERENCIA
           INTO :VAR_CONS_PEDI_REFERENCIA 
           DO BEGIN
                /*  INSERTAR CADA UNO DE LOS REGISTROS DE LA EXPLOSIԎ  */
                FOR SELECT CONS_MATE_REFERENCIA, CONS_REFE_MATERIAL,  CODI_MATE_REFERENCIA, CODI_UNID_MEDIDA,
                    SUM(CONS_TOTAL)
                    FROM CON_PCP_PEDI_REFE_EXPL_MATE(:VAR_CONS_PEDI_REFERENCIA, :VAR_ES_PRINCIPAL)
                    GROUP BY CONS_MATE_REFERENCIA, CONS_REFE_MATERIAL, CODI_MATE_REFERENCIA, CODI_UNID_MEDIDA
                    INTO :VAR_CONS_MATE_REFERENCIA, :VAR_CONS_REFE_MATERIAL, :VAR_ITEMNMBR, :VAR_UOFM,
                        :VAR_PABASE_QTY  
                DO BEGIN
                   /*  BUSCAR EL PLAN DE LA UNIDAD DE MEDIDA  */
                   SELECT ADIC_C08_GP_PLAN_UNID_MEDIDA
                   FROM PCP_MATE_REFERENCIAS
                   WHERE CONS_MATE_REFERENCIA = :VAR_CONS_MATE_REFERENCIA
                   INTO :VAR_OUMSCHDL;

                   /*  VERIFICAR CUANTAS UNIDADES HAY ASIGNADAS  */
                   SELECT PABASE_QTY
                   FROM C08_GP_PAITEMS
                   WHERE PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                        PACOSTCATID = :PE_PACOSTCATID AND 
                        ITEMNMBR = :VAR_ITEMNMBR
                   INTO :VAR_UNID_ASIGNADAS;

                   IF (:VAR_UNID_ASIGNADAS IS NULL) THEN VAR_UNID_ASIGNADAS = 0;

                   /*  SUMAR LAS UNIDADES  */
                   VAR_PABASE_QTY = :VAR_PABASE_QTY + :VAR_UNID_ASIGNADAS;

                   /*  INSERTAR EL REGISTRO EN EL DETALLE DEL COSTO  */
                   EXECUTE PROCEDURE PRO_C08_GP_PAITEMS_IU(
                   :PE_PAPROJNUMBER, :PE_PACOSTCATID, :VAR_ITEMNMBR,
                   :VAR_PABASE_QTY, :VAR_UOFM, :VAR_OUMSCHDL);
              END
         END

         /*  ACTUALIZAR EL REGISTRO MAESTRO DE COSTOS  */
         SELECT SUM(PABASE_QTY) FROM C08_GP_PAITEMS
         WHERE  PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                PACOSTCATID = :PE_PACOSTCATID
         INTO :VAR_CANTIDAD;

         IF (:VAR_CANTIDAD IS NULL) THEN VAR_CANTIDAD = 0;

         UPDATE C08_GP_PACOSTOSPROYECTO
         SET PABASE_QTY = :VAR_CANTIDAD
         WHERE  PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                PACOSTCATID = :PE_PACOSTCATID;
  END

    /*  -- -INSUMOS -- -- --   */
    IF (:PE_PACOSTCATID IN ('4_INS. FAB', '4_INS. EMP')) THEN BEGIN

           /*  ASIGNAR LA VARIABLE DEL MATERIAL PRINCIPAL  */
           SELECT CASE :PE_PACOSTCATID
                WHEN '4_INS. FAB' THEN 1
                WHEN '4_INS. EMP' THEN -1
           END
           FROM RDB$DATABASE
           INTO :VAR_ES_PRINCIPAL;

           /*  RECORRER LAS REFERENCIAS DEL PEDIDO  */
           FOR SELECT PEDI.CONS_PEDI_REFERENCIA
               FROM PCP_PEDI_REFERENCIAS PEDI
               WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
               ORDER BY PEDI.CONS_PEDI_REFERENCIA
           INTO :VAR_CONS_PEDI_REFERENCIA DO BEGIN

                /*  INSERTAR CADA UNO DE LOS REGISTROS DE LA EXPLOSIԎ  */
                FOR SELECT CONS_INSU_REFERENCIA, CONS_REFE_INSUMO,  CODI_INSU_REFERENCIA, CODI_UNID_MEDIDA,
                    SUM(CONS_TOTAL)
                    FROM CON_PCP_PEDI_REFE_EXPL_INSUMOS(:VAR_CONS_PEDI_REFERENCIA, :VAR_ES_PRINCIPAL)
                    GROUP BY CONS_INSU_REFERENCIA, CONS_REFE_INSUMO, CODI_INSU_REFERENCIA, CODI_UNID_MEDIDA
                    INTO :VAR_CONS_MATE_REFERENCIA, :VAR_CONS_REFE_MATERIAL, :VAR_ITEMNMBR, :VAR_UOFM,
                    :VAR_PABASE_QTY  
                DO BEGIN
                   /*  BUSCAR EL PLAN DE LA UNIDAD DE MEDIDA  */
                   SELECT ADIC_C08_GP_PLAN_UNID_MEDIDA
                   FROM PCP_INSU_REFERENCIAS
                   WHERE CONS_INSU_REFERENCIA = :VAR_CONS_MATE_REFERENCIA
                   INTO :VAR_OUMSCHDL;

                   /*  VERIFICAR CUANTAS UNIDADES HAY ASIGNADAS  */
                   SELECT PABASE_QTY
                   FROM C08_GP_PAITEMS
                   WHERE PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                        PACOSTCATID = :PE_PACOSTCATID AND 
                        ITEMNMBR = :VAR_ITEMNMBR
                   INTO :VAR_UNID_ASIGNADAS;

                   IF (:VAR_UNID_ASIGNADAS IS NULL) THEN VAR_UNID_ASIGNADAS = 0;

                   /*  SUMAR LAS UNIDADES  */
                   VAR_PABASE_QTY = :VAR_PABASE_QTY + :VAR_UNID_ASIGNADAS;

                   /*  INSERTAR EL REGISTRO EN EL DETALLE DEL COSTO  */
                   EXECUTE PROCEDURE PRO_C08_GP_PAITEMS_IU(
                   :PE_PAPROJNUMBER, :PE_PACOSTCATID, :VAR_ITEMNMBR,
                   :VAR_PABASE_QTY, :VAR_UOFM, :VAR_OUMSCHDL);
              END
             END

             /*  ACTUALIZAR EL REGISTRO MAESTRO DE COSTOS  */
             SELECT SUM(PABASE_QTY) FROM C08_GP_PAITEMS
             WHERE  PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                    PACOSTCATID = :PE_PACOSTCATID
             INTO :VAR_CANTIDAD;

             IF (:VAR_CANTIDAD IS NULL) THEN VAR_CANTIDAD = 0;

             UPDATE C08_GP_PACOSTOSPROYECTO
             SET PABASE_QTY = :VAR_CANTIDAD
             WHERE  PAPROJNUMBER = :PE_PAPROJNUMBER AND 
                    PACOSTCATID = :PE_PACOSTCATID;
      END
end ^

ALTER PROCEDURE PRO_C08_MIDA_INGRESO AS 

DECLARE VARIABLE VAR_USUA_SISTEMA VARCHAR(20) = 'APEXCOL SOFTWARE' ;
DECLARE VARIABLE VAR_FECH_SISTEMA DATE = 'NOW';
DECLARE VARIABLE VAR_TIPO_MOVI_INGRESO INTEGER;
DECLARE VARIABLE VAR_CONS_PERS_MOVI_TIPO_DOCUMENTO INTEGER = 0; /*  NO ASIGNADO  */
DECLARE VARIABLE VAR_CONS_UBIC_TIPO INTEGER = 1; /*  PLANTA PROPIA  */
DECLARE VARIABLE VAR_CONS_COST_GRUPO INTEGER = 1;
DECLARE VARIABLE VAR_DIAS_VENC_CONTRATO INTEGER = 10;
DECLARE VARIABLE VAR_CODI_PERSONAL VARCHAR(12);
DECLARE VARIABLE VAR_TIPO_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_FECH_MOVIMIENTO DATE;
DECLARE VARIABLE VAR_PRIM_APELLIDO VARCHAR(30);
DECLARE VARIABLE VAR_SEGU_APELLIDO VARCHAR(30);
DECLARE VARIABLE VAR_NOMBRES VARCHAR(40);
DECLARE VARIABLE VAR_VIVI_CODI_PAIS VARCHAR(12);
DECLARE VARIABLE VAR_VIVI_CODI_DEPARTAMENTO VARCHAR(12);
DECLARE VARIABLE VAR_VIVI_CODI_CIUDAD VARCHAR(12);
DECLARE VARIABLE VAR_VIVI_DIRECCION VARCHAR(60);
DECLARE VARIABLE VAR_VIVI_TELEFONO VARCHAR(12);
DECLARE VARIABLE VAR_VIVI_TELEFONO2 VARCHAR(12);
DECLARE VARIABLE VAR_NACI_FECHA DATE;
DECLARE VARIABLE VAR_NACI_CODI_PAIS VARCHAR(12);
DECLARE VARIABLE VAR_NACI_CODI_DEPARTAMENTO VARCHAR(12);
DECLARE VARIABLE VAR_NACI_CODI_CIUDAD VARCHAR(12);
DECLARE VARIABLE VAR_CODI_TIPO_DOCUMENTO VARCHAR(12);
DECLARE VARIABLE VAR_NUME_DOCUMENTO VARCHAR(12);
DECLARE VARIABLE VAR_FECH_EXPE_DOCUMENTO DATE;
DECLARE VARIABLE VAR_LUGA_EXPE_DOCUMENTO VARCHAR(60);
DECLARE VARIABLE VAR_NUME_LIBR_MILITAR VARCHAR(12);
DECLARE VARIABLE VAR_FECH_EXPE_LIBR_MILITAR DATE;
DECLARE VARIABLE VAR_NUME_HIJOS INTEGER;
DECLARE VARIABLE VAR_CODI_SEXO VARCHAR(12);
DECLARE VARIABLE VAR_CODI_ESTA_CIVIL VARCHAR(12);
DECLARE VARIABLE VAR_CODI_TIPO_CONTRATO VARCHAR(12);
DECLARE VARIABLE VAR_CODI_NIVE_SALARIAL VARCHAR(12);
DECLARE VARIABLE VAR_NUME_CONTRATO VARCHAR(12);
DECLARE VARIABLE VAR_CODI_PERI_PAGO VARCHAR(12);
DECLARE VARIABLE VAR_CODI_EMPRESA VARCHAR(12);
DECLARE VARIABLE VAR_CODI_AREA VARCHAR(12);
DECLARE VARIABLE VAR_CODI_PLANTA VARCHAR(12);
DECLARE VARIABLE VAR_CODI_LINEA VARCHAR(12);
DECLARE VARIABLE VAR_CODI_SECCION VARCHAR(12);
DECLARE VARIABLE VAR_CODI_TURNO VARCHAR(12);
DECLARE VARIABLE VAR_CODI_PERS_CARGO VARCHAR(12);
DECLARE VARIABLE VAR_CODI_PERS_CENT_COSTOS VARCHAR(12);
DECLARE VARIABLE VAR_CONS_PERSONAL INTEGER;
DECLARE VARIABLE VAR_VIVI_CONS_PAIS INTEGER;
DECLARE VARIABLE VAR_VIVI_CONS_DEPARTAMENTO INTEGER;
DECLARE VARIABLE VAR_VIVI_CONS_CIUDAD INTEGER;
DECLARE VARIABLE VAR_NACI_CONS_PAIS INTEGER;
DECLARE VARIABLE VAR_NACI_CONS_DEPARTAMENTO INTEGER;
DECLARE VARIABLE VAR_NACI_CONS_CIUDAD INTEGER;
DECLARE VARIABLE VAR_CONS_TIPO_DOCUMENTO INTEGER;
DECLARE VARIABLE VAR_CONS_SEXO INTEGER;
DECLARE VARIABLE VAR_CONS_ESTA_CIVIL INTEGER;
DECLARE VARIABLE VAR_CONS_TIPO_CONTRATO INTEGER;
DECLARE VARIABLE VAR_CONS_NIVE_SALARIAL INTEGER;
DECLARE VARIABLE VAR_CONS_PERI_PAGO INTEGER;
DECLARE VARIABLE VAR_CONS_EMPRESA INTEGER;
DECLARE VARIABLE VAR_CONS_AREA INTEGER;
DECLARE VARIABLE VAR_CONS_PLANTA INTEGER;
DECLARE VARIABLE VAR_CONS_LINEA INTEGER;
DECLARE VARIABLE VAR_CONS_SECCION INTEGER;
DECLARE VARIABLE VAR_CONS_TURNO INTEGER;
DECLARE VARIABLE VAR_CONS_CARGO INTEGER;
DECLARE VARIABLE VAR_CONS_CENT_COSTOS INTEGER;
DECLARE VARIABLE VAR_CONS_PERS_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_VALO_SALARIO DOUBLE PRECISION;
DECLARE VARIABLE VAR_MENSAJE VARCHAR(1000);

BEGIN

     /*  SELECCIONAR LOS REGISTROS ACTIVOS EN LA TABLA DE INGRESO  */
     FOR SELECT CODI_PERSONAL, TIPO_MOVIMIENTO, FECH_MOVIMIENTO,
          PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES, VIVI_CODI_PAIS,
          VIVI_CODI_DEPARTAMENTO, VIVI_CODI_CIUDAD, VIVI_DIRECCION, VIVI_TELEFONO,
          VIVI_TELEFONO2, NACI_FECHA, NACI_CODI_PAIS, NACI_CODI_DEPARTAMENTO,
          NACI_CODI_CIUDAD, CODI_TIPO_DOCUMENTO, NUME_DOCUMENTO, FECH_EXPE_DOCUMENTO,
          LUGA_EXPE_DOCUMENTO, NUME_LIBR_MILITAR, FECH_EXPE_LIBR_MILITAR, NUME_HIJOS,
          CODI_SEXO, CODI_ESTA_CIVIL, CODI_TIPO_CONTRATO, CODI_NIVE_SALARIAL,
          NUME_CONTRATO, CODI_PERI_PAGO, CODI_EMPRESA, CODI_AREA,
          CODI_PLANTA, CODI_LINEA, CODI_SECCION, CODI_TURNO,
          CODI_PERS_CARGO, CODI_PERS_CENT_COSTOS
     FROM C08_MIDA_PERSONAL
     INTO :VAR_CODI_PERSONAL, :VAR_TIPO_MOVIMIENTO, :VAR_FECH_MOVIMIENTO, :VAR_PRIM_APELLIDO,
         :VAR_SEGU_APELLIDO, :VAR_NOMBRES, :VAR_VIVI_CODI_PAIS,
         :VAR_VIVI_CODI_DEPARTAMENTO, :VAR_VIVI_CODI_CIUDAD, :VAR_VIVI_DIRECCION,
         :VAR_VIVI_TELEFONO, :VAR_VIVI_TELEFONO2, :VAR_NACI_FECHA,
         :VAR_NACI_CODI_PAIS, :VAR_NACI_CODI_DEPARTAMENTO, :VAR_NACI_CODI_CIUDAD,
         :VAR_CODI_TIPO_DOCUMENTO, :VAR_NUME_DOCUMENTO, :VAR_FECH_EXPE_DOCUMENTO,
         :VAR_LUGA_EXPE_DOCUMENTO, :VAR_NUME_LIBR_MILITAR, :VAR_FECH_EXPE_LIBR_MILITAR,
         :VAR_NUME_HIJOS, :VAR_CODI_SEXO, :VAR_CODI_ESTA_CIVIL,
         :VAR_CODI_TIPO_CONTRATO, :VAR_CODI_NIVE_SALARIAL, :VAR_NUME_CONTRATO,
         :VAR_CODI_PERI_PAGO, :VAR_CODI_EMPRESA, :VAR_CODI_AREA,
         :VAR_CODI_PLANTA, :VAR_CODI_LINEA, :VAR_CODI_SECCION,
         :VAR_CODI_TURNO, :VAR_CODI_PERS_CARGO, :VAR_CODI_PERS_CENT_COSTOS
     DO BEGIN
        /*  BUSCAR LOS CONSECUTIVOS ASOCIADOS A LOS CODIGOS ENVIADOS  */
        SELECT CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD
        FROM VIS_GLO_CIUDADES
        WHERE CODI_CIUDAD = :VAR_VIVI_CODI_CIUDAD
        INTO :VAR_VIVI_CONS_PAIS, :VAR_VIVI_CONS_DEPARTAMENTO, :VAR_VIVI_CONS_CIUDAD;

        IF (:VAR_VIVI_CONS_PAIS IS NULL) THEN VAR_VIVI_CONS_PAIS = 0;

        IF (:VAR_VIVI_CONS_DEPARTAMENTO IS NULL) THEN VAR_VIVI_CONS_DEPARTAMENTO = 0;

        IF (:VAR_VIVI_CONS_CIUDAD IS NULL) THEN VAR_VIVI_CONS_CIUDAD = 0;

        SELECT CONS_PAIS, CONS_DEPARTAMENTO, CONS_CIUDAD
        FROM VIS_GLO_CIUDADES
        WHERE CODI_CIUDAD = :VAR_NACI_CODI_CIUDAD
        INTO :VAR_NACI_CONS_PAIS, :VAR_NACI_CONS_DEPARTAMENTO, :VAR_NACI_CONS_CIUDAD;

        IF (:VAR_NACI_CONS_PAIS IS NULL) THEN VAR_NACI_CONS_PAIS = 0;

        IF (:VAR_NACI_CONS_DEPARTAMENTO IS NULL) THEN VAR_NACI_CONS_DEPARTAMENTO = 0;

        IF (:VAR_NACI_CONS_CIUDAD IS NULL) THEN VAR_NACI_CONS_CIUDAD = 0;

        SELECT CONS_PERS_TIPO_DOCUMENTO
        FROM SIS_PERS_TIPO_DOCUMENTO
        WHERE CODI_PERS_TIPO_DOCUMENTO = :VAR_CODI_TIPO_DOCUMENTO
        INTO :VAR_CONS_TIPO_DOCUMENTO;

         IF (:VAR_CONS_TIPO_DOCUMENTO IS NULL) THEN VAR_CONS_TIPO_DOCUMENTO = 0;

        SELECT CONS_SEXO
        FROM SIS_SEXOS
        WHERE CODI_SEXO = :VAR_CODI_SEXO
        INTO :VAR_CONS_SEXO;

        IF (:VAR_CONS_SEXO IS NULL) THEN VAR_CONS_SEXO = 0;

        SELECT CONS_ESTA_CIVIL
        FROM SIS_ESTA_CIVIL
        WHERE CODI_ESTA_CIVIL = :VAR_CODI_ESTA_CIVIL
        INTO :VAR_CONS_ESTA_CIVIL;

        IF (:VAR_CONS_ESTA_CIVIL IS NULL) THEN VAR_CONS_ESTA_CIVIL = 0;

        SELECT CONS_PERS_TIPO_CONTRATO
        FROM GLO_PERS_TIPO_CONTRATO
        WHERE CODI_PERS_TIPO_CONTRATO = :VAR_CODI_TIPO_CONTRATO
        INTO :VAR_CONS_TIPO_CONTRATO;

        IF (:VAR_CONS_TIPO_CONTRATO IS NULL) THEN VAR_CONS_TIPO_CONTRATO = 0;

        SELECT CONS_PERS_NIVE_SALARIAL
        FROM GLO_PERS_NIVE_SALARIALES
        WHERE CODI_PERS_NIVE_SALARIAL = :VAR_CODI_NIVE_SALARIAL
        INTO :VAR_CONS_NIVE_SALARIAL;

        IF (:VAR_CONS_NIVE_SALARIAL IS NULL) THEN VAR_CONS_NIVE_SALARIAL = 0;

        SELECT CONS_PERI_PAGO
        FROM SIS_PERI_PAGO
        WHERE CODI_PERI_PAGO = :VAR_CODI_PERI_PAGO
        INTO :VAR_CONS_PERI_PAGO;

        IF (:VAR_CONS_PERI_PAGO IS NULL) THEN VAR_CONS_PERI_PAGO = 0;

        SELECT CONS_LINE_SECCION, CONS_PLAN_LINEA
        FROM VIS_GLO_LINE_SECCIONES
        WHERE CODI_SECCION = :VAR_CODI_SECCION
        INTO :VAR_CONS_SECCION, :VAR_CONS_LINEA;

        IF (:VAR_CONS_SECCION IS NULL) THEN VAR_CONS_SECCION = 0;

        IF (:VAR_CONS_LINEA IS NULL) THEN VAR_CONS_LINEA = 0;

        SELECT CONS_PLANTA
        FROM VIS_GLO_PLAN_LINEAS
        WHERE CONS_PLAN_LINEA = :VAR_CONS_LINEA
        INTO :VAR_CONS_PLANTA;

        IF (:VAR_CONS_PLANTA IS NULL) THEN VAR_CONS_PLANTA = 0;

        SELECT CONS_AREA
        FROM GLO_AREAS
        WHERE CODI_AREA = :VAR_CODI_AREA
        INTO :VAR_CONS_AREA;

        IF (:VAR_CONS_AREA IS NULL) THEN VAR_CONS_AREA = 0;

        SELECT CONS_EMPRESA
        FROM GLO_PLANTAS
        WHERE CONS_PLANTA = :VAR_CONS_PLANTA
        INTO :VAR_CONS_EMPRESA;

        IF (:VAR_CONS_EMPRESA IS NULL) THEN VAR_CONS_EMPRESA = 0;

        SELECT CONS_TURNO
        FROM GLO_TURNOS
        WHERE CODI_TURNO = :VAR_CODI_TURNO
        INTO :VAR_CONS_TURNO;

        IF (:VAR_CONS_TURNO IS NULL) THEN VAR_CONS_TURNO = 0;

        SELECT CONS_PERS_CARGO
        FROM GLO_PERS_CARGOS
        WHERE CODI_PERS_CARGO = :VAR_CODI_PERS_CARGO
        INTO :VAR_CONS_CARGO;

        IF (:VAR_CONS_CARGO IS NULL) THEN VAR_CONS_CARGO = 0;

        SELECT 0
        FROM RDB$DATABASE
        INTO :VAR_CONS_CENT_COSTOS;

        /*  CREACIÓN (INGRESO) O MODIFICACIÓN DE UN EMPLEADO  */
        IF (:VAR_TIPO_MOVIMIENTO IN (0,1)) THEN BEGIN
            IF (:VAR_TIPO_MOVIMIENTO = 0) THEN BEGIN
                  /*  GENERAR EL CONSECUTIVO PARA EL REGISTRO  */
                   SELECT SECUENCIA
                   FROM FUN_GLO_GENE_SECUENCIA('GLO_PERSONAL', 'CONS_PERSONAL')
                   INTO :VAR_CONS_PERSONAL;
              END
              ELSE
              IF (:VAR_TIPO_MOVIMIENTO = 1) THEN BEGIN
                   /*  BUSCAR EL CONSECUTIVO DADO EL CÓDIGO  */
                   SELECT CONS_PERSONAL
                   FROM GLO_PERSONAL
                   WHERE CODI_PERSONAL = :VAR_CODI_PERSONAL
                   INTO :VAR_CONS_PERSONAL;
              END

              IF (:VAR_TIPO_MOVIMIENTO = 0) THEN BEGIN
                   /*  INGRESAR EL REGISTRO EN EL MAESTRO DE PERSONAL  */
                   INSERT INTO GLO_PERSONAL(CONS_PERSONAL, CODI_PERSONAL,
                      PRIM_APELLIDO, SEGU_APELLIDO, NOMBRES,
                      FECH_SISTEMA, USUA_SISTEMA)
                   VALUES (:VAR_CONS_PERSONAL, :VAR_CODI_PERSONAL,
                      :VAR_PRIM_APELLIDO, :VAR_SEGU_APELLIDO,
                      :VAR_NOMBRES, :VAR_FECH_SISTEMA, :VAR_USUA_SISTEMA);
              END
              ELSE
              IF (:VAR_TIPO_MOVIMIENTO = 1) THEN BEGIN

                   UPDATE GLO_PERSONAL
                   SET PRIM_APELLIDO = :VAR_PRIM_APELLIDO,
                       SEGU_APELLIDO = :VAR_SEGU_APELLIDO,
                       NOMBRES = :VAR_NOMBRES
                   WHERE (CONS_PERSONAL = :VAR_CONS_PERSONAL);
              END

            IF (:VAR_TIPO_MOVIMIENTO = 0) THEN BEGIN
               /*  INGRESAR LOS DATOS GENERALES DEL PERSONAL  */
               INSERT INTO GLO_PERS_GENERAL(CONS_PERSONAL, CONS_PAIS, CONS_DEPARTAMENTO,
                  CONS_CIUDAD, DIRECCION, TELE_RESIDENCIA, TELE_OTRO,
                  FECH_NACIMIENTO, CONS_PAIS_NACIMIENTO, CONS_DEPA_NACIMIENTO,
                  CONS_CIUD_NACIMIENTO, CONS_PERS_TIPO_DOCUMENTO, NUME_DOCUMENTO, 
                  FECH_EXPE_DOCUMENTO, LUGA_EXPE_DOCUMENTO, NUME_LIBR_MILITAR, 
                  FECH_EXPE_LIBR_MILITAR, NUME_HIJOS, CONS_SEXO, CONS_ESTA_CIVIL, 
                  FECH_SISTEMA, USUA_SISTEMA)
               VALUES (:VAR_CONS_PERSONAL, :VAR_NACI_CONS_PAIS, :VAR_NACI_CONS_DEPARTAMENTO, 
                  :VAR_NACI_CONS_CIUDAD, :VAR_VIVI_DIRECCION, :VAR_VIVI_TELEFONO, :VAR_VIVI_TELEFONO2,
                  :VAR_NACI_FECHA, :VAR_NACI_CONS_PAIS, :VAR_NACI_CONS_DEPARTAMENTO, 
                  :VAR_NACI_CONS_CIUDAD, :VAR_CONS_TIPO_DOCUMENTO, :VAR_NUME_DOCUMENTO, 
                  :VAR_FECH_EXPE_DOCUMENTO, :VAR_LUGA_EXPE_DOCUMENTO, :VAR_NUME_LIBR_MILITAR, 
                  :VAR_FECH_EXPE_LIBR_MILITAR,  :VAR_NUME_HIJOS, :VAR_CONS_SEXO, :VAR_CONS_ESTA_CIVIL, 
                  :VAR_FECH_SISTEMA, :VAR_USUA_SISTEMA);
            END
            ELSE
            IF (:VAR_TIPO_MOVIMIENTO = 1) THEN BEGIN
                UPDATE GLO_PERS_GENERAL
                    SET CONS_PAIS = :VAR_NACI_CONS_PAIS,
                        CONS_DEPARTAMENTO = :VAR_NACI_CONS_DEPARTAMENTO,
                        CONS_CIUDAD = :VAR_NACI_CONS_CIUDAD,
                        DIRECCION = :VAR_VIVI_DIRECCION,
                        TELE_RESIDENCIA = :VAR_VIVI_TELEFONO,
                        TELE_OTRO = :VAR_VIVI_TELEFONO2,
                        FECH_NACIMIENTO = :VAR_NACI_FECHA,
                        CONS_PAIS_NACIMIENTO = :VAR_NACI_CONS_PAIS,
                        CONS_DEPA_NACIMIENTO = :VAR_NACI_CONS_DEPARTAMENTO,
                        CONS_CIUD_NACIMIENTO = :VAR_NACI_CONS_CIUDAD,
                        CONS_PERS_TIPO_DOCUMENTO = :VAR_CONS_TIPO_DOCUMENTO,
                        NUME_DOCUMENTO = :VAR_NUME_DOCUMENTO,
                        FECH_EXPE_DOCUMENTO = :VAR_FECH_EXPE_DOCUMENTO,
                        LUGA_EXPE_DOCUMENTO = :VAR_LUGA_EXPE_DOCUMENTO,
                        NUME_LIBR_MILITAR = :VAR_NUME_LIBR_MILITAR,
                        FECH_EXPE_LIBR_MILITAR = :VAR_FECH_EXPE_LIBR_MILITAR,
                        NUME_HIJOS = :VAR_NUME_HIJOS,
                        CONS_SEXO = :VAR_CONS_SEXO,
                        CONS_ESTA_CIVIL = :VAR_CONS_ESTA_CIVIL,
                        FECH_SISTEMA = :VAR_FECH_SISTEMA,
                        USUA_SISTEMA = :VAR_USUA_SISTEMA
                    WHERE (CONS_PERSONAL = :VAR_CONS_PERSONAL);
            END

             /*  CREAR EL REGISTRO DEL MOVIMIENTO  */
             SELECT SECUENCIA
             FROM FUN_GLO_GENE_SECUENCIA('GLO_PERS_MOVIMIENTOS', 'CONS_PERS_MOVIMIENTO')
             INTO :VAR_CONS_PERS_MOVIMIENTO;

            IF (:VAR_TIPO_MOVIMIENTO = 0) THEN
                VAR_TIPO_MOVI_INGRESO = 1;
            ELSE
            IF (:VAR_TIPO_MOVIMIENTO = 1) THEN
                VAR_TIPO_MOVI_INGRESO = 2;
                 
            INSERT INTO GLO_PERS_MOVIMIENTOS(CONS_PERS_MOVIMIENTO, CONS_PERSONAL,
              CONS_PERS_TIPO_MOVIMIENTO, FECH_INICIAL, 
              CONS_PERS_MOVI_TIPO_DOCUMENTO, FECH_SISTEMA, USUA_SISTEMA)
             VALUES (:VAR_CONS_PERS_MOVIMIENTO, :VAR_CONS_PERSONAL,
              :VAR_TIPO_MOVI_INGRESO, :VAR_FECH_MOVIMIENTO,
              :VAR_CONS_PERS_MOVI_TIPO_DOCUMENTO, :VAR_FECH_SISTEMA, :VAR_USUA_SISTEMA);
              
            /*  CREAR UN REGISTRO DE LA UBICACIԎ (COMO MOVIMIENTO) DEL OPERARIO  */
            INSERT INTO GLO_PERS_MOVI_TRASLADOS(CONS_PERS_MOVIMIENTO, CONS_UBIC_TIPO,
                CONS_EMPRESA, CONS_AREA, CONS_PLANTA, CONS_PLAN_LINEA,
                CONS_LINE_SECCION, CONS_TURNO, CONS_BODEGA,
                CONS_PERS_CARGO, CONS_PERS_CENT_COSTO, CONS_COST_GRUPO, FECH_SISTEMA,
                USUA_SISTEMA)
             VALUES (
                :VAR_CONS_PERS_MOVIMIENTO, :VAR_CONS_UBIC_TIPO, :VAR_CONS_EMPRESA,
                :VAR_CONS_AREA, :VAR_CONS_PLANTA, :VAR_CONS_LINEA, :VAR_CONS_SECCION,
                :VAR_CONS_TURNO, 0, :VAR_CONS_CARGO,
                :VAR_CONS_CENT_COSTOS, :VAR_CONS_COST_GRUPO,
                :VAR_FECH_SISTEMA, :VAR_USUA_SISTEMA);

             /*  BUSCAR EL VALOR DEL SALARIO  */
             SELECT FIRST 1 VALO_SALARIO
             FROM C08_MIDA_PERS_SALARIO
             WHERE CODI_PERSONAL = :VAR_CODI_PERSONAL
             ORDER BY FECH_MOVIMIENTO DESC
             INTO :VAR_VALO_SALARIO;

             IF (:VAR_VALO_SALARIO IS NULL) THEN VAR_VALO_SALARIO = 0;

             /*  INGRESAR LOS MOVIMIENTOS CONFIDENCIALES  */
             INSERT INTO GLO_PERS_MOVI_CONFIDENCIAL(
                  CONS_PERS_MOVIMIENTO, CONS_PERS_NIVE_SALARIAL, CONS_PERS_TIPO_CONTRATO, 
                  NUME_CONTRATO, CONS_PERI_PAGO, VALO_SALARIO, AUXI_TRANSPORTE, AUXI_SALARIAL,
                  DIAS_VENC_CONTRATO, APLI_INCENTIVO, FECH_SISTEMA, USUA_SISTEMA)
             VALUES (
                  :VAR_CONS_PERS_MOVIMIENTO, :VAR_CONS_NIVE_SALARIAL, :VAR_CONS_TIPO_CONTRATO, 
                  :VAR_NUME_CONTRATO, :VAR_CONS_PERI_PAGO, :VAR_VALO_SALARIO, 0, 0,
                  :VAR_DIAS_VENC_CONTRATO, 1, :VAR_FECH_SISTEMA, :VAR_USUA_SISTEMA);

            IF (:VAR_TIPO_MOVIMIENTO = 0) THEN
                VAR_MENSAJE = 'INGRESO DE PERSONAL DESDE APEXCOL SOFTWARE';
            ELSE
            IF (:VAR_TIPO_MOVIMIENTO = 1) THEN
                VAR_MENSAJE = 'TRASLADO DE PERSONAL DESDE APEXCOL SOFTWARE';

             /*  GENERAR UN REGISTRO EN LA TABLA DE NOVEDADES DEL VINCULO  */
             INSERT INTO C08_MIDA_PERS_NOVEDADES
              (CODI_PERSONAL, FECHA, EJECUTADO, TIPO_MOVIMIENTO, RESULTADO)
             VALUES
              (:VAR_CODI_PERSONAL, 'NOW', 1, 0, :VAR_MENSAJE);

            /*  NOTIFICAR A LA TABLA INTERMEDIA QUE EL REGISTRO SE PROCESӠDE MANERA CORRECTA  */
            UPDATE C08_MIDA_PERS_NOVEDADES
            SET EJECUTADO = 1
            WHERE CODI_PERSONAL = :VAR_CODI_PERSONAL AND 
                FECHA = :VAR_FECH_MOVIMIENTO;
        END
        ELSE
        IF (:VAR_TIPO_MOVIMIENTO = 2) THEN /*  DAR DE BAJA  */
        BEGIN

             /*  BUSCAR EL CONSECUTIVO DADO EL CÓDIGO  */
             SELECT CONS_PERSONAL
             FROM GLO_PERSONAL
             WHERE CODI_PERSONAL = :VAR_CODI_PERSONAL
             INTO :VAR_CONS_PERSONAL;

             /*  CREAR EL REGISTRO DEL MOVIMIENTO  */
             SELECT SECUENCIA
             FROM FUN_GLO_GENE_SECUENCIA('GLO_PERS_MOVIMIENTOS', 'CONS_PERS_MOVIMIENTO')
             INTO :VAR_CONS_PERS_MOVIMIENTO;

             VAR_TIPO_MOVI_INGRESO = 4; /*  BAJAS PERMANENTES  */
            
             INSERT INTO GLO_PERS_MOVIMIENTOS(CONS_PERS_MOVIMIENTO, CONS_PERSONAL,
              CONS_PERS_TIPO_MOVIMIENTO, FECH_INICIAL, 
              CONS_PERS_MOVI_TIPO_DOCUMENTO, FECH_SISTEMA, USUA_SISTEMA)
             VALUES (:VAR_CONS_PERS_MOVIMIENTO, :VAR_CONS_PERSONAL,
              :VAR_TIPO_MOVI_INGRESO, :VAR_FECH_MOVIMIENTO,
              :VAR_CONS_PERS_MOVI_TIPO_DOCUMENTO, :VAR_FECH_SISTEMA, :VAR_USUA_SISTEMA);

             /*  INSERTAR UN MOVIMIENTO DE TRASLADO  */
            INSERT INTO GLO_PERS_MOVI_TRASLADOS(CONS_PERS_MOVIMIENTO, CONS_UBIC_TIPO,
                CONS_EMPRESA, CONS_AREA, CONS_PLANTA, CONS_PLAN_LINEA,
                CONS_LINE_SECCION, CONS_TURNO, CONS_BODEGA,
                CONS_PERS_CARGO, CONS_PERS_CENT_COSTO, CONS_COST_GRUPO, FECH_SISTEMA,
                USUA_SISTEMA)
             VALUES (
                :VAR_CONS_PERS_MOVIMIENTO, :VAR_CONS_UBIC_TIPO, 0,
                :VAR_CONS_AREA, :VAR_CONS_PLANTA, :VAR_CONS_LINEA, :VAR_CONS_SECCION,
                :VAR_CONS_TURNO, 0, :VAR_CONS_CARGO,
                :VAR_CONS_CENT_COSTOS, :VAR_CONS_COST_GRUPO,
                :VAR_FECH_SISTEMA, :VAR_USUA_SISTEMA);

             /*  GENERAR UN REGISTRO EN LA TABLA DE NOVEDADES DEL VINCULO  */
             VAR_MENSAJE = 'ELIMINACIÓN DE PERSONAL DESDE APEXCOL SOFTWARE.';

             INSERT INTO C08_MIDA_PERS_NOVEDADES
              (CODI_PERSONAL, FECHA, EJECUTADO, TIPO_MOVIMIENTO, RESULTADO)
             VALUES
             (:VAR_CODI_PERSONAL, 'NOW', 1, 0, :VAR_MENSAJE || ' CԄ. PERSONAL ' || :VAR_CODI_PERSONAL);
        END
    END

     /*  -- -- -- -- -- -- --   CAPTURAR LOS ERRORES DEL PROCEDIMIENTO -- -- -- -- -- -- */
     WHEN ANY DO BEGIN

        /*  BUSCAR LA FECHA Y HORA DE OCURRENCIA  */
       SELECT CAST(CAST('NOW' AS DATE)
AS VARCHAR(30)) || ' -> ' || SQLCODE
       FROM RDB$DATABASE
       INTO :VAR_MENSAJE;
       VAR_MENSAJE = 'ERROR EJECUTANDO EL MOVIMIENTO.' || :VAR_CODI_PERSONAL || '. ' || :VAR_MENSAJE;

       INSERT INTO C08_MIDA_PERS_NOVEDADES (CODI_PERSONAL, FECHA, EJECUTADO, TIPO_MOVIMIENTO, RESULTADO)
       VALUES (:VAR_CODI_PERSONAL, 'NOW', 1, 0, :VAR_MENSAJE);

       EXCEPTION EXC_TEXTO :VAR_CODI_PERSONAL || '. ' || :VAR_MENSAJE;
   END
END ^

ALTER PROCEDURE PRO_GLO_ACCE_MODI_BAJAS (
    PE_CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
    PE_CONS_TIPO_DOCUMENTO INTEGER,
    PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_CONS_SOLICITA INTEGER,
    PE_CONS_ACCESORIO INTEGER)
AS 

DECLARE VARIABLE VAR_SECUENCIA INTEGER;

BEGIN
  /* Buscamos el consecutivo de la tabla de movimientos de accesorios */
  SELECT SECUENCIA
  FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_MOVIMIENTOS','CONS_ACCE_MOVIMIENTO')
  INTO :VAR_SECUENCIA;

  /* Inserto el Movimiento */
  INSERT INTO GLO_ACCE_MOVIMIENTOS
   (CONS_ACCE_MOVIMIENTO, CONS_ACCE_TIPO_MOVIMIENTO, CONS_ACCESORIO,
    CONS_TIPO_DOCUMENTO, NUME_DOCUMENTO, CONS_SOLICITA, FECH_INICIAL,
    FECH_FINAL, OBSERVACIONES)
   VALUES(:VAR_SECUENCIA, :PE_CONS_ACCE_TIPO_MOVIMIENTO, :PE_CONS_ACCESORIO,
    :PE_CONS_TIPO_DOCUMENTO, :PE_NUME_DOCUMENTO, :PE_CONS_SOLICITA,
    :PE_FECH_INICIAL, :PE_FECH_FINAL,  :PE_OBSERVACIONES);

  /* Inserto la Baja */
  INSERT INTO GLO_ACCE_MOVI_BAJAS (CONS_ACCE_MOVIMIENTO)
   VALUES (:VAR_SECUENCIA);

END ^

ALTER PROCEDURE PRO_GLO_ACCE_MODI_TRASLADOS (
    PE_CONS_ACCE_TIPO_MOVIMIENTO INTEGER,
    PE_CONS_ACCESORIO INTEGER,
    PE_CONS_TIPO_DOCUMENTO INTEGER,
    PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    PE_CONS_SOLICITA INTEGER,
    PE_CONS_ENTREGA INTEGER,
    PE_CONS_RECIBE INTEGER,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_CONS_UBIC_TIPO INTEGER,
    PE_CONS_EMPRESA INTEGER,
    PE_CONS_AREA INTEGER,
    PE_CONS_PLANTA INTEGER,
    PE_CONS_PLAN_LINEA INTEGER,
    PE_CONS_LINE_SECCION INTEGER,
    PE_CONS_BODEGA INTEGER,
    PE_OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    PE_CONS_RECURSO INTEGER)
AS 

DECLARE VARIABLE VAR_SECUENCIA INTEGER;

BEGIN
  /* Buscamos el consecutivo de la tabla de movimientos de accesorios */
  SELECT SECUENCIA
  FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_MOVIMIENTOS','CONS_ACCE_MOVIMIENTO')
  INTO :VAR_SECUENCIA;

  /* Inserto el Movimiento */
  INSERT INTO GLO_ACCE_MOVIMIENTOS
   (CONS_ACCE_MOVIMIENTO, CONS_ACCE_TIPO_MOVIMIENTO, CONS_ACCESORIO,
    CONS_TIPO_DOCUMENTO, NUME_DOCUMENTO, CONS_SOLICITA, CONS_ENTREGA,
    CONS_RECIBE, FECH_INICIAL, FECH_FINAL, OBSERVACIONES)
   VALUES(:VAR_SECUENCIA, :PE_CONS_ACCE_TIPO_MOVIMIENTO, :PE_CONS_ACCESORIO,
    :PE_CONS_TIPO_DOCUMENTO, :PE_NUME_DOCUMENTO, :PE_CONS_SOLICITA,
    :PE_CONS_ENTREGA, :PE_CONS_RECIBE, :PE_FECH_INICIAL, :PE_FECH_FINAL,
    :PE_OBSERVACIONES);

  /* Inserto el Traslado */
  INSERT INTO GLO_ACCE_MOVI_TRASLADOS
   (CONS_ACCE_MOVIMIENTO, CONS_UBIC_TIPO, CONS_EMPRESA, CONS_AREA,
    CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION, CONS_BODEGA,
    OTRA_UBICACION, CONS_RECURSO)
   VALUES (:VAR_SECUENCIA, :PE_CONS_UBIC_TIPO, :PE_CONS_EMPRESA, :PE_CONS_AREA,
    :PE_CONS_PLANTA, :PE_CONS_PLAN_LINEA, :PE_CONS_LINE_SECCION, :PE_CONS_BODEGA,
    :PE_OTRA_UBICACION, :PE_CONS_RECURSO);
END ^

ALTER PROCEDURE PRO_GLO_GRUP_TALL_DETA_DUPLICAR (PE_CONS_GRUP_TALLAS_ORIGEN INTEGER,
PE_CONS_GRUP_TALLAS_DESTINO VARCHAR(12) CHARACTER SET NONE)
AS 

Declare Variable var_talla Varchar(12);

begin

  /*  Verificar que el grupo de tallas sea valido  */
  If (:pe_cons_Grup_Tallas_Origen is null) then
    Exception EXC_BAS_0006 'Especique un valor para el grupo de tallas de origen.';

  If (:pe_cons_Grup_Tallas_Destino is null) then
    Exception EXC_BAS_0006 'Especifique un valor para el grupo de tallas de destino.';

  /*  Diferentes   */
  if (:pe_cons_grup_tallas_origen = :pe_cons_grup_tallas_destino) then
    Exception EXC_BAS_0007 'El grupo de tallas de origen es igual al grupo de tallas de destino.';

  /*  Verificar que el grupo de tallas exista en el maestro de grupos  */
  if (Not Exists (Select cons_grup_tallas from GLO_GRUP_TALLAS
      Where cons_grup_tallas = :pe_cons_Grup_Tallas_origen)) then
        Exception EXC_BAS_0008 'El código del grupo de tallas de origen '||:pe_cons_grup_tallas_origen||' no existe en el maestro.';

  if (Not Exists (Select cons_grup_tallas from GLO_GRUP_TALLAS
      Where cons_grup_tallas = :pe_cons_Grup_Tallas_destino)) then
        Exception EXC_BAS_0008 'El código del grupo de tallas de destino '||:pe_cons_grup_tallas_destino||' no existe en el maestro.';

  /*  Eliminar los datos que existan de la otra asignación */
  Execute Procedure Pro_Glo_Grup_Tall_Deta_Eliminar(:pe_cons_Grup_Tallas_Destino);

  /*  Ejecutar el proceso de insertar los datos  */
  For Select talla  From Glo_Grup_Tall_Detalle
      Where cons_grup_tallas = :pe_cons_Grup_Tallas_Origen
      Order by Secu_talla
      Into :var_talla 
  do Begin
      Insert Into GLO_GRUP_TALL_DETALLE (cons_grup_tallas, talla)
      Values (:pe_cons_Grup_Tallas_Destino, :var_Talla);
  End
end ^

ALTER PROCEDURE PRO_GLO_GRUP_TALL_DETA_ELIMINAR (PE_CONS_GRUP_TALLAS INTEGER)
AS 

Declare Variable var_max_secu_talla integer;

begin
     var_max_secu_talla = 1;
     While (var_max_secu_talla > 0) do Begin
           /*  Seleccionar la ultima talla  */
          Select max(secu_talla)
          from Glo_Grup_Tall_Detalle
          Where cons_grup_tallas = :pe_cons_Grup_Tallas
          Into :var_max_secu_talla;

          /* Si es NULL no hay mas tallas */
          if (:var_max_secu_talla is null) then 
            var_max_secu_talla = 0;
          Else
          /*  Eliminar la talla  */
          Delete from Glo_Grup_Tall_Detalle
          Where cons_grup_tallas = :pe_cons_Grup_Tallas and 
              secu_talla = :var_max_secu_talla;
     End
end ^

ALTER PROCEDURE PRO_GLO_HERR_IMAGENES_IU (
    CONS_HERR_IMAGEN INTEGER,
    CONS_HERR_IMAG_CATEGORIA INTEGER,
    CONS_HERR_IMAG_VISTA INTEGER,
    NOMB_HERR_IMAGEN VARCHAR(60) CHARACTER SET NONE,
    IMAGEN BLOB,
    AJUS_IMAGEN INTEGER,
    CONS_REFE_ESTILO INTEGER,
    CONS_REFE_MARCA INTEGER,
    CONS_REFE_TEMPORADA INTEGER,
    OBSERVACIONES VARCHAR(5000) CHARACTER SET NONE,
    PALA_CLAVES VARCHAR(240) CHARACTER SET NONE)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_HERR_IMAGEN 
            FROM GLO_HERR_IMAGENES 
            WHERE (CONS_HERR_IMAGEN = :CONS_HERR_IMAGEN))) THEN

    UPDATE GLO_HERR_IMAGENES
    SET CONS_HERR_IMAG_CATEGORIA = :CONS_HERR_IMAG_CATEGORIA,
        CONS_HERR_IMAG_VISTA = :CONS_HERR_IMAG_VISTA,
        NOMB_HERR_IMAGEN = :NOMB_HERR_IMAGEN,
        IMAGEN = :IMAGEN,
        AJUS_IMAGEN = :AJUS_IMAGEN,
        CONS_REFE_ESTILO = :CONS_REFE_ESTILO,
        CONS_REFE_MARCA = :CONS_REFE_MARCA,
        CONS_REFE_TEMPORADA = :CONS_REFE_TEMPORADA,
        OBSERVACIONES = :OBSERVACIONES,
        PALA_CLAVES = :PALA_CLAVES
    WHERE (CONS_HERR_IMAGEN = :CONS_HERR_IMAGEN);
  ELSE
    INSERT INTO GLO_HERR_IMAGENES ( CONS_HERR_IMAGEN, CONS_HERR_IMAG_CATEGORIA, CONS_HERR_IMAG_VISTA,
        NOMB_HERR_IMAGEN, IMAGEN, AJUS_IMAGEN, CONS_REFE_ESTILO, CONS_REFE_MARCA,
        CONS_REFE_TEMPORADA, OBSERVACIONES, PALA_CLAVES)
    VALUES (
        :CONS_HERR_IMAGEN, :CONS_HERR_IMAG_CATEGORIA, :CONS_HERR_IMAG_VISTA,
        :NOMB_HERR_IMAGEN, :IMAGEN, :AJUS_IMAGEN, :CONS_REFE_ESTILO, :CONS_REFE_MARCA,
        :CONS_REFE_TEMPORADA, :OBSERVACIONES, :PALA_CLAVES);
END ^

ALTER PROCEDURE PRO_GLO_PERS_MODI_BAJAS (
    PE_CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    PE_CONS_PERS_MOVI_TIPO_DOCU INTEGER,
    PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_CONS_PERSONAL INTEGER,
    PE_CONS_SOLICITA INTEGER,
    PE_CONS_APROBO INTEGER)
AS 

DECLARE VARIABLE VAR_SECUENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_UBIC_TIPO INTEGER;
DECLARE VARIABLE VAR_CONS_EMPRESA INTEGER;
DECLARE VARIABLE VAR_CONS_AREA INTEGER;
DECLARE VARIABLE VAR_CONS_PLANTA INTEGER;
DECLARE VARIABLE VAR_CONS_PLAN_LINEA INTEGER;
DECLARE VARIABLE VAR_CONS_LINE_SECCION INTEGER;
DECLARE VARIABLE VAR_CONS_BODEGA INTEGER;
DECLARE VARIABLE VAR_OTRA_UBICACION VARCHAR(60);
DECLARE VARIABLE VAR_CONS_TURNO INTEGER;
DECLARE VARIABLE VAR_CONS_PERS_CARGO INTEGER;
DECLARE VARIABLE VAR_CONS_PERS_CENT_COSTO INTEGER;
DECLARE VARIABLE VAR_CONS_COST_GRUPO INTEGER;

BEGIN
  /* Buscamos el consecutivo de la tabla de movimientos de personal */
  SELECT SECUENCIA
  FROM FUN_GLO_GENE_SECUENCIA('GLO_PERS_MOVIMIENTOS', 'CONS_PERS_MOVIMIENTO')
  INTO :VAR_SECUENCIA;

  /* Inserto el Movimiento */
  INSERT INTO GLO_PERS_MOVIMIENTOS
   (CONS_PERS_MOVIMIENTO, CONS_PERSONAL, CONS_PERS_TIPO_MOVIMIENTO,
    FECH_INICIAL, FECH_FINAL, CONS_PERS_MOVI_TIPO_DOCUMENTO, NUME_DOCUMENTO,
    OBSERVACIONES, CONS_SOLICITA, CONS_APROBO)
   VALUES(:VAR_SECUENCIA, :PE_CONS_PERSONAL, :PE_CONS_PERS_TIPO_MOVIMIENTO,
    :PE_FECH_INICIAL, :PE_FECH_FINAL, :PE_CONS_PERS_MOVI_TIPO_DOCU,
    :PE_NUME_DOCUMENTO, :PE_OBSERVACIONES, :PE_CONS_SOLICITA,
    :PE_CONS_APROBO);

  /*  BUSCAR LA UBICACION ACTUAL  */
  SELECT FIRST 1 CONS_UBIC_TIPO, CONS_EMPRESA, CONS_AREA, CONS_PLANTA,
    CONS_PLAN_LINEA, CONS_LINE_SECCION, CONS_BODEGA, OTRA_UBICACION,
    CONS_TURNO, CONS_PERS_CARGO, CONS_PERS_CENT_COSTO, CONS_COST_GRUPO
  FROM CON_GLO_PERS_ACTIVO(:PE_FECH_INICIAL)
  INTO :VAR_CONS_UBIC_TIPO, :VAR_CONS_EMPRESA, :VAR_CONS_AREA, :VAR_CONS_PLANTA,
     :VAR_CONS_PLAN_LINEA, :VAR_CONS_LINE_SECCION, :VAR_CONS_BODEGA, :VAR_OTRA_UBICACION,
     :VAR_CONS_TURNO, :VAR_CONS_PERS_CARGO,
     :VAR_CONS_PERS_CENT_COSTO, :VAR_CONS_COST_GRUPO;

  /*  Insertar el traslado  */
  INSERT INTO GLO_PERS_MOVI_TRASLADOS(CONS_PERS_MOVIMIENTO,
        CONS_UBIC_TIPO, CONS_EMPRESA, CONS_AREA, CONS_PLANTA, CONS_PLAN_LINEA,
        CONS_LINE_SECCION, CONS_BODEGA, OTRA_UBICACION, CONS_TURNO, CONS_PERS_CARGO,
        CONS_PERS_CENT_COSTO, CONS_COST_GRUPO)
  VALUES (:VAR_SECUENCIA, :VAR_CONS_UBIC_TIPO, :VAR_CONS_EMPRESA,
        :VAR_CONS_AREA, :VAR_CONS_PLANTA, :VAR_CONS_PLAN_LINEA, :VAR_CONS_LINE_SECCION,
        :VAR_CONS_BODEGA, :VAR_OTRA_UBICACION, :VAR_CONS_TURNO, :VAR_CONS_PERS_CARGO,
        :VAR_CONS_PERS_CENT_COSTO, :VAR_CONS_COST_GRUPO);
END ^

ALTER PROCEDURE PRO_GLO_PERS_MODI_CONFIDENCIAL (
    PE_CONS_PERS_MOVI_TIPO_DOCU INTEGER,
    PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_CONS_PERSONAL INTEGER,
    PE_CONS_PERS_TIPO_CONTRATO INTEGER,
    PE_CONS_PERI_PAGO INTEGER,
    PE_CONS_PERS_NIVE_SALARIAL INTEGER,
    PE_VALO_SALARIO INTEGER,
    PE_INCR_SALARIO NUMERIC(15, 3),
    PE_INCR_NIVEL INTEGER,
    PE_NUME_CONTRATO VARCHAR(20) CHARACTER SET NONE,
    PE_AUXI_TRANSPORTE NUMERIC(15, 3),
    PE_AUXI_SALARIAL NUMERIC(15, 3),
    PE_DIAS_VENC_CONTRATO INTEGER,
    PE_APLI_INCENTIVO INTEGER,
    PE_CONS_SOLICITA INTEGER,
    PE_CONS_APROBO INTEGER)
AS 

DECLARE VARIABLE VAR_SECUENCIA INTEGER;

BEGIN
  /* Incremento Salarial */
  IF (:PE_INCR_SALARIO > 0) THEN BEGIN

    /* Incrementa el valor mínimo y máximo del nivel salarial */
    IF (:PE_INCR_NIVEL = 1) THEN

      UPDATE GLO_PERS_NIVE_SALARIALES
      SET VALO_MINIMO = (VALO_MINIMO + ((VALO_MINIMO * :PE_INCR_SALARIO) / 100)),
        VALO_MAXIMO = (VALO_MAXIMO + ((VALO_MAXIMO * :PE_INCR_SALARIO) / 100))
      WHERE CONS_PERS_NIVE_SALARIAL = :PE_CONS_PERS_NIVE_SALARIAL;

    /* Incrementa el valor del salario */
    PE_VALO_SALARIO = (:PE_VALO_SALARIO +
      ((:PE_VALO_SALARIO * :PE_INCR_SALARIO) / 100));

  END

  /* Buscamos el consecutivo de la tabla de movimientos de personal */
  SELECT SECUENCIA
  FROM FUN_GLO_GENE_SECUENCIA('GLO_PERS_MOVIMIENTOS','CONS_PERS_MOVIMIENTO')
  INTO :VAR_SECUENCIA;

  /* Inserto el Movimiento */

  INSERT INTO GLO_PERS_MOVIMIENTOS
   (CONS_PERS_MOVIMIENTO, CONS_PERSONAL, CONS_PERS_TIPO_MOVIMIENTO,
    FECH_INICIAL, FECH_FINAL, CONS_PERS_MOVI_TIPO_DOCUMENTO, NUME_DOCUMENTO,
    OBSERVACIONES, CONS_SOLICITA, CONS_APROBO)
   VALUES(:VAR_SECUENCIA, :PE_CONS_PERSONAL, 2,
    :PE_FECH_INICIAL, :PE_FECH_FINAL, :PE_CONS_PERS_MOVI_TIPO_DOCU,
    :PE_NUME_DOCUMENTO, :PE_OBSERVACIONES, :PE_CONS_SOLICITA,
    :PE_CONS_APROBO);

  /* Inserto el cambio de Datos Confidenciales */

  INSERT INTO GLO_PERS_MOVI_CONFIDENCIAL (CONS_PERS_MOVIMIENTO, /* CONS_PERS_CARGO, */ 
    CONS_PERS_NIVE_SALARIAL, CONS_PERS_TIPO_CONTRATO, NUME_CONTRATO, CONS_PERI_PAGO,
    AUXI_TRANSPORTE, AUXI_SALARIAL, VALO_SALARIO, DIAS_VENC_CONTRATO,
    APLI_INCENTIVO)
   VALUES (:VAR_SECUENCIA, /* :PE_CONS_PERS_CARGO, */ 
    :PE_CONS_PERS_NIVE_SALARIAL, :PE_CONS_PERS_TIPO_CONTRATO, :PE_NUME_CONTRATO, :PE_CONS_PERI_PAGO,
    :PE_AUXI_TRANSPORTE, :PE_AUXI_SALARIAL, :PE_VALO_SALARIO,
    :PE_DIAS_VENC_CONTRATO, :PE_APLI_INCENTIVO);
END ^

ALTER PROCEDURE PRO_GLO_PERS_MODI_TRASLADOS (
    PE_CONS_PERS_TIPO_MOVIMIENTO INTEGER,
    PE_CONS_PERS_MOVI_TIPO_DOCU INTEGER,
    PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_CONS_PERSONAL INTEGER,
    PE_CONS_UBIC_TIPO INTEGER,
    PE_CONS_EMPRESA INTEGER,
    PE_CONS_AREA INTEGER,
    PE_CONS_PLANTA INTEGER,
    PE_CONS_PLAN_LINEA INTEGER,
    PE_CONS_LINE_SECCION INTEGER,
    PE_CONS_BODEGA INTEGER,
    PE_OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE,
    PE_CONS_TURNO INTEGER,
    PE_CONS_SOLICITA INTEGER,
    PE_CONS_APROBO INTEGER,
    PE_CONS_PERS_CARGO INTEGER,
    PE_CONS_PERS_CENT_COSTO INTEGER,
    PE_CONS_COST_GRUPO INTEGER)
AS 

DECLARE VARIABLE VAR_SECUENCIA INTEGER;

BEGIN
  /* Buscamos el consecutivo de la tabla de movimientos de personal */
  SELECT SECUENCIA
  FROM FUN_GLO_GENE_SECUENCIA('GLO_PERS_MOVIMIENTOS','CONS_PERS_MOVIMIENTO')
  INTO :VAR_SECUENCIA;

  /* Inserto el Movimiento */
  INSERT INTO GLO_PERS_MOVIMIENTOS (CONS_PERS_MOVIMIENTO, CONS_PERSONAL, CONS_PERS_TIPO_MOVIMIENTO,
    FECH_INICIAL, FECH_FINAL, CONS_PERS_MOVI_TIPO_DOCUMENTO, NUME_DOCUMENTO,
    OBSERVACIONES, CONS_SOLICITA, CONS_APROBO)
   VALUES(:VAR_SECUENCIA, :PE_CONS_PERSONAL, :PE_CONS_PERS_TIPO_MOVIMIENTO,
    :PE_FECH_INICIAL, :PE_FECH_FINAL, :PE_CONS_PERS_MOVI_TIPO_DOCU,
    :PE_NUME_DOCUMENTO, :PE_OBSERVACIONES, :PE_CONS_SOLICITA,
    :PE_CONS_APROBO);

  /* Inserto el Traslado */
  INSERT INTO GLO_PERS_MOVI_TRASLADOS (CONS_PERS_MOVIMIENTO, CONS_UBIC_TIPO, CONS_EMPRESA, CONS_AREA,
    CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION, CONS_BODEGA,
    OTRA_UBICACION, CONS_TURNO, CONS_PERS_CARGO, CONS_PERS_CENT_COSTO,
    CONS_COST_GRUPO)
   VALUES (:VAR_SECUENCIA, :PE_CONS_UBIC_TIPO, :PE_CONS_EMPRESA, :PE_CONS_AREA,
    :PE_CONS_PLANTA, :PE_CONS_PLAN_LINEA, :PE_CONS_LINE_SECCION, :PE_CONS_BODEGA,
    :PE_OTRA_UBICACION, :PE_CONS_TURNO, :PE_CONS_PERS_CARGO, :PE_CONS_PERS_CENT_COSTO,
    :PE_CONS_COST_GRUPO);
END ^

ALTER PROCEDURE PRO_GLO_POST_EVENT (PE_NOMB_EVENTO VARCHAR(50) CHARACTER SET NONE)
AS 

BEGIN

    POST_EVENT :PE_NOMB_EVENTO;
END ^

ALTER PROCEDURE PRO_GLO_RECU_MODI_BAJAS (
    PE_CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    PE_CONS_TIPO_DOCUMENTO INTEGER,
    PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_CONS_SOLICITA INTEGER,
    PE_CONS_RECURSO INTEGER)
AS 

DECLARE VARIABLE VAR_SECUENCIA INTEGER;

BEGIN
  /* Buscamos el consecutivo de la tabla de movimientos de personal */
  SELECT SECUENCIA
  FROM FUN_GLO_GENE_SECUENCIA('GLO_RECU_MOVIMIENTOS','CONS_RECU_MOVIMIENTO')
  INTO :VAR_SECUENCIA;

  /* Inserto el Movimiento */
  INSERT INTO GLO_RECU_MOVIMIENTOS (
    CONS_RECU_MOVIMIENTO, CONS_RECU_TIPO_MOVIMIENTO, CONS_RECURSO,
    CONS_TIPO_DOCUMENTO, NUME_DOCUMENTO, CONS_SOLICITA, FECH_INICIAL,
    FECH_FINAL, OBSERVACIONES)
   VALUES(:VAR_SECUENCIA, :PE_CONS_RECU_TIPO_MOVIMIENTO, :PE_CONS_RECURSO,
    :PE_CONS_TIPO_DOCUMENTO, :PE_NUME_DOCUMENTO, :PE_CONS_SOLICITA,
    :PE_FECH_INICIAL, :PE_FECH_FINAL,  :PE_OBSERVACIONES);

  /* Inserto la Baja */
  INSERT INTO GLO_RECU_MOVI_BAJAS
   (CONS_RECU_MOVIMIENTO)
   VALUES (:VAR_SECUENCIA);
END ^

ALTER PROCEDURE PRO_GLO_RECU_MODI_TRASLADOS (
    PE_CONS_RECU_TIPO_MOVIMIENTO INTEGER,
    PE_CONS_RECURSO INTEGER,
    PE_CONS_TIPO_DOCUMENTO INTEGER,
    PE_NUME_DOCUMENTO VARCHAR(12) CHARACTER SET NONE,
    PE_CONS_SOLICITA INTEGER,
    PE_CONS_ENTREGA INTEGER,
    PE_CONS_RECIBE INTEGER,
    PE_FECH_INICIAL TIMESTAMP,
    PE_FECH_FINAL TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(240) CHARACTER SET NONE,
    PE_CONS_UBIC_TIPO INTEGER,
    PE_CONS_EMPRESA INTEGER,
    PE_CONS_AREA INTEGER,
    PE_CONS_PLANTA INTEGER,
    PE_CONS_PLAN_LINEA INTEGER,
    PE_CONS_LINE_SECCION INTEGER,
    PE_CONS_BODEGA INTEGER,
    PE_OTRA_UBICACION VARCHAR(60) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_SECUENCIA INTEGER;

BEGIN
  /* Buscamos el consecutivo de la tabla de movimientos de recursos */
  SELECT SECUENCIA
  FROM FUN_GLO_GENE_SECUENCIA('GLO_RECU_MOVIMIENTOS','CONS_RECU_MOVIMIENTO')
  INTO :VAR_SECUENCIA;

  /* Inserto el Movimiento */
  INSERT INTO GLO_RECU_MOVIMIENTOS (
    CONS_RECU_MOVIMIENTO, CONS_RECU_TIPO_MOVIMIENTO, CONS_RECURSO,
    CONS_TIPO_DOCUMENTO, NUME_DOCUMENTO, CONS_SOLICITA, CONS_ENTREGA,
    CONS_RECIBE, FECH_INICIAL, FECH_FINAL, OBSERVACIONES)
   VALUES(:VAR_SECUENCIA, :PE_CONS_RECU_TIPO_MOVIMIENTO, :PE_CONS_RECURSO,
    :PE_CONS_TIPO_DOCUMENTO, :PE_NUME_DOCUMENTO, :PE_CONS_SOLICITA,
    :PE_CONS_ENTREGA, :PE_CONS_RECIBE, :PE_FECH_INICIAL, :PE_FECH_FINAL,
    :PE_OBSERVACIONES);

  /* Inserto el Traslado */
  INSERT INTO GLO_RECU_MOVI_TRASLADOS (
    CONS_RECU_MOVIMIENTO, CONS_UBIC_TIPO, CONS_EMPRESA, CONS_AREA,
    CONS_PLANTA, CONS_PLAN_LINEA, CONS_LINE_SECCION, CONS_BODEGA,
    OTRA_UBICACION)
   VALUES (:VAR_SECUENCIA, :PE_CONS_UBIC_TIPO, :PE_CONS_EMPRESA, :PE_CONS_AREA,
    :PE_CONS_PLANTA, :PE_CONS_PLAN_LINEA, :PE_CONS_LINE_SECCION, :PE_CONS_BODEGA,
    :PE_OTRA_UBICACION);
END ^

ALTER PROCEDURE PRO_GLO_REFE_CAMB_ESTADO_INSERT (
    CONS_REFERENCIA INTEGER,
    CONS_ESTA_ANTERIOR INTEGER,
    CONS_ESTA_NUEVO INTEGER,
    OBSERVACIONES VARCHAR(240) CHARACTER SET NONE)
AS 

BEGIN
  INSERT INTO GLO_REFE_CAMB_ESTADO (
    CONS_REFERENCIA,
    CONS_ESTA_ANTERIOR,
    CONS_ESTA_NUEVO,
    OBSERVACIONES)
  VALUES (
    :CONS_REFERENCIA,
    :CONS_ESTA_ANTERIOR,
    :CONS_ESTA_NUEVO,
    :OBSERVACIONES);
END ^

ALTER PROCEDURE PRO_GLO_REFE_COLO_BAJAR (
    PE_CONS_REFE_COLOR INTEGER)
AS 

DECLARE VARIABLE VAR_SECU_COLOR INTEGER;
DECLARE VARIABLE VAR_SECU_COLOR2 INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_COLOR2 INTEGER;
DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_MAXI_SECU_COLOR INTEGER;

begin
    /*  BUSCAR LA REFERENCIA  */
    SELECT CONS_REFERENCIA, SECU_COLOR
    FROM GLO_REFE_COLORES
    WHERE CONS_REFE_COLOR = :PE_CONS_REFE_COLOR
    INTO :VAR_CONS_REFERENCIA, :VAR_SECU_COLOR;

    /*  BUSCAR LA SECUENCIA MAXIMA  */
    SELECT MAX(SECU_COLOR)
    FROM GLO_REFE_COLORES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA
    INTO :VAR_MAXI_SECU_COLOR;

    /*  SI ES EL ULTIMO COLOR GENERAR UNA EXCEPCIԎ  */
    IF (:VAR_SECU_COLOR = :VAR_MAXI_SECU_COLOR) THEN
        EXCEPTION EXC_PCP_0022;

    /*  SELECCIONAR EL COLOR SIGUIENTE  */
    SELECT MIN(SECU_COLOR)
    FROM GLO_REFE_COLORES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA AND 
            SECU_COLOR > :VAR_SECU_COLOR
    INTO :VAR_SECU_COLOR2;

    SELECT CONS_REFE_COLOR
    FROM GLO_REFE_COLORES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA AND 
            SECU_COLOR = :VAR_SECU_COLOR2
    INTO :VAR_CONS_REFE_COLOR2;

    /*  MOVER TEMPORALMENTE EL INICIAL A 9999  */
    UPDATE GLO_REFE_COLORES
    SET SECU_COLOR = 9999
    WHERE CONS_REFE_COLOR = :PE_CONS_REFE_COLOR;

    /*  MOVER EL  ANTERIOR A EL CODIGO DEL ACTUAL */
    UPDATE GLO_REFE_COLORES
    SET SECU_COLOR = :VAR_SECU_COLOR
    WHERE CONS_REFE_COLOR = :VAR_CONS_REFE_COLOR2;

    /*  MOVER EL TEMPORAL AL NUEVO  */
    UPDATE GLO_REFE_COLORES
    SET SECU_COLOR = :VAR_SECU_COLOR2
    WHERE CONS_REFE_COLOR = :PE_CONS_REFE_COLOR;
end ^

ALTER PROCEDURE PRO_GLO_REFE_COLO_SUBIR (PE_CONS_REFE_COLOR INTEGER)
AS 

DECLARE VARIABLE VAR_SECU_COLOR INTEGER;
DECLARE VARIABLE VAR_SECU_COLOR2 INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_COLOR2 INTEGER;
DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_MINI_SECU_COLOR INTEGER;

begin
    /*  BUSCAR LA REFERENCIA  */
    SELECT CONS_REFERENCIA, SECU_COLOR
    FROM GLO_REFE_COLORES
    WHERE CONS_REFE_COLOR = :PE_CONS_REFE_COLOR
    INTO :VAR_CONS_REFERENCIA, :VAR_SECU_COLOR;

    /*  BUSCAR LA SECUENCIA MAXIMA  */
    SELECT MIN(SECU_COLOR)
    FROM GLO_REFE_COLORES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA
    INTO :VAR_MINI_SECU_COLOR;

    /*  SI ES EL PRIMER COLOR GENERAR UNA EXCEPCIԎ  */
    IF (:VAR_SECU_COLOR = :VAR_MINI_SECU_COLOR) THEN
        EXCEPTION EXC_PCP_0021;

    /*  SELECCIONAR EL COLOR ANTERIOR  */
    SELECT MAX(SECU_COLOR)
    FROM GLO_REFE_COLORES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA AND 
            SECU_COLOR < :VAR_SECU_COLOR
    INTO :VAR_SECU_COLOR2;

    SELECT CONS_REFE_COLOR
    FROM GLO_REFE_COLORES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA AND 
            SECU_COLOR = :VAR_SECU_COLOR2
    INTO :VAR_CONS_REFE_COLOR2;

    /*  MOVER TEMPORALMENTE EL INICIAL A 9999  */
    UPDATE GLO_REFE_COLORES
    SET SECU_COLOR = 9999
    WHERE CONS_REFE_COLOR = :PE_CONS_REFE_COLOR;

    /*  MOVER EL  ANTERIOR A EL CODIGO DEL ACTUAL */
    UPDATE GLO_REFE_COLORES
    SET SECU_COLOR = :VAR_SECU_COLOR
    WHERE CONS_REFE_COLOR = :VAR_CONS_REFE_COLOR2;

    /*  MOVER EL TEMPORAL AL NUEVO  */
    UPDATE GLO_REFE_COLORES
    SET SECU_COLOR = :VAR_SECU_COLOR2
    WHERE CONS_REFE_COLOR = :PE_CONS_REFE_COLOR;
end ^

ALTER PROCEDURE PRO_GLO_REFE_DUPLICAR (
    PE_CONS_REFERENCIA INTEGER,
    PE_CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    PE_ES_PROTOTIPO INTEGER)
AS 
    DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
    DECLARE VARIABLE VAR_CONS_REFE_VARI_ESTANDAR INTEGER;
    DECLARE VARIABLE VAR_CONS_NUEV_VARI_ESTANDAR INTEGER;
    DECLARE VARIABLE VAR_CODI_REFERENCIA VARCHAR(12);
    DECLARE VARIABLE VAR_NOMB_REFERENCIA VARCHAR(60);

BEGIN
    /*  VALIDAR EL CODIGO DE LA REFERENCIA DE DESTINO  */
    if (EXISTS
        (SELECT CODI_REFERENCIA
            FROM GLO_REFERENCIAS
            WHERE CODI_REFERENCIA = :PE_CODI_REFERENCIA
            AND ES_PROTOTIPO = :PE_ES_PROTOTIPO)) then

            EXCEPTION EXC_BAS_0010;

    /*  GENERAR LA SECUENCIA PARA EL REGISTRO  */
    SELECT MAX(CONS_REFERENCIA)
    FROM GLO_REFERENCIAS
    INTO :VAR_CONS_REFERENCIA;

    if (:VAR_CONS_REFERENCIA IS NULL) then 
        VAR_CONS_REFERENCIA = 0;

    VAR_CONS_REFERENCIA = :VAR_CONS_REFERENCIA + 1;

    /*  COPIAR EL MAESTRO DE LA REFERENCIA  */
    INSERT INTO GLO_REFERENCIAS (
        CONS_REFERENCIA,    CODI_REFERENCIA,     NOMB_REFERENCIA,       ES_PROTOTIPO,       
        CONS_REFE_TEMPORADA, MOLDE,            CODI_INTE_REFERENCIA,    NOMB_REFERENCIA, 
        CODI_BARRAS,        CONS_REFE_MARCA,    CONS_REFE_LINEA,        CONS_REFE_EDAD,
        CONS_REFE_ESTILO,   CONS_REFE_GRUPO,    CONS_REFE_SEXO,         CONS_REFE_LAVADO, 
        CONS_REFE_BORDADO,  CONS_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, CONS_REFE_ESTADO, 
        IMAGEN,             AJUS_IMAGEN,        DESCRIPCION,            CON_ENTREPIERNAS, 
        FECH_SISTEMA,       USUA_SISTEMA)

    SELECT :VAR_CONS_REFERENCIA,    :PE_CODI_REFERENCIA, NOMB_REFERENCIA,   R.ES_PROTOTIPO,
        R.CONS_REFE_TEMPORADA,      R.MOLDE,            R.CODI_INTE_REFERENCIA, R.NOMB_REFERENCIA, 
        R.CODI_BARRAS,              R.CONS_REFE_MARCA,  R.CONS_REFE_LINEA,  R.CONS_REFE_EDAD, 
        R.CONS_REFE_ESTILO,         R.CONS_REFE_GRUPO,  R.CONS_REFE_SEXO,   R.CONS_REFE_LAVADO,
        R.CONS_REFE_BORDADO,        R.CONS_REFE_ESTAMPADO, R.CONS_REFE_GRUP_TALLAS, R.CONS_REFE_ESTADO, 
        R.IMAGEN,                   R.AJUS_IMAGEN,      R.DESCRIPCION,      R.CON_ENTREPIERNAS, 
        R.FECH_SISTEMA,             R.USUA_SISTEMA
    FROM GLO_REFERENCIAS REFE
    WHERE R.CONS_REFERENCIA = :PE_CONS_REFERENCIA;

    /*  COPIAR LA ASIGNACIÓN DE COLORES  */
    INSERT INTO GLO_REFE_COLORES
    (CONS_REFERENCIA, SECU_COLOR, CONS_COLOR, NUME_COLOR)
    SELECT :VAR_CONS_REFERENCIA, COLO.SECU_COLOR,
        COLO.CONS_COLOR, COLO.NUME_COLOR
        FROM GLO_REFE_COLORES COLO
        WHERE COLO.CONS_REFERENCIA = :PE_CONS_REFERENCIA;

    /*  BUSCAR EL CONSECUTIVO DE LA VARIACION ESTANDAR DE LA REFERENCIA DE ORIGEN */
    SELECT CONS_REFE_VARIACION
    FROM PCP_REFE_VARIACIONES
    WHERE CONS_REFERENCIA = :PE_CONS_REFERENCIA AND 
            CONS_REFE_TIPO_VARIACION = 0
    INTO :VAR_CONS_REFE_VARI_ESTANDAR;

    /*  BUSCAR EL CONSECUTIVO DE LA VARIACION ESTANDAR DE LA REFERENCIA DE DESTINO */
    SELECT CONS_REFE_VARIACION
    FROM PCP_REFE_VARIACIONES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA AND 
            CONS_REFE_TIPO_VARIACION = 0
    INTO :VAR_CONS_NUEV_VARI_ESTANDAR;

    /*  BUSCAR EL CODIGO Y EL NOMBRE DE LA REFERENCIA ORIGEN */
    SELECT CODI_REFERENCIA, NOMB_REFERENCIA
    FROM GLO_REFERENCIAS
    WHERE CONS_REFERENCIA = :PE_CONS_REFERENCIA
    INTO :VAR_CODI_REFERENCIA, :VAR_NOMB_REFERENCIA;

    /*  COPIAR EL LISTADO DE OPERACIONES  */
    INSERT INTO PCP_REFE_LIST_OPER_COSTURA
    (CONS_REFE_VARIACION, SECU_OPERACION, CODI_OPER_COSTURA, NOMB_OPER_COSTURA, TIEMPO,
    FRECUENCIA, ES_TITULO)

    SELECT :VAR_CONS_NUEV_VARI_ESTANDAR, OPER.SECU_OPERACION, OPER.CODI_OPER_COSTURA,
        OPER.NOMB_OPER_COSTURA, OPER.TIEMPO, OPER.FRECUENCIA, OPER.ES_TITULO
    FROM PCP_REFE_LIST_OPER_COSTURA OPER
    WHERE OPER.CONS_REFE_VARIACION = :VAR_CONS_REFE_VARI_ESTANDAR;

    /*  COPIAR EL LISTADO DE OPERACIONES DE CORTE (CUANDO SON REFERENCIAS)  */
    if (:PE_ES_PROTOTIPO = -1) then BEGIN

            INSERT INTO PCP_REFE_LIST_OPER_CORTE
            (CONS_REFE_VARIACION, CONS_REFE_MATERIAL, SECU_OPERACION, CONS_PROCESO,
            CODI_OPERACION, NOMB_OPERACION, CONS_CORT_UNID_MEDIDA, TIEM_OPERACION)

            SELECT :VAR_CONS_NUEV_VARI_ESTANDAR, OPER.CONS_REFE_MATERIAL,
            OPER.SECU_OPERACION, OPER.CONS_PROCESO, OPER.CODI_OPERACION,
            OPER.NOMB_OPERACION, OPER.CONS_CORT_UNID_MEDIDA, OPER.TIEM_OPERACION
            FROM PCP_REFE_LIST_OPER_CORTE OPER
            WHERE OPER.CONS_REFE_VARIACION = :VAR_CONS_REFE_VARI_ESTANDAR;

       END

    /*  COPIAR LA LISTA DE MATERIALES  */

    EXECUTE PROCEDURE PRO_PCP_REFE_MATE_IMPORTAR(:PE_CONS_REFERENCIA, :VAR_CONS_REFE_VARI_ESTANDAR,
        :VAR_CONS_REFERENCIA, :VAR_CONS_NUEV_VARI_ESTANDAR);

    /*  INSERTAR UNA ANOTACION EN EL HISTORIAL DE LA REFERENCIA  */
    INSERT INTO GLO_REFE_HISTORIAL
    (CONS_REFERENCIA, TEXT_ANOTACION, USUA_SISTEMA)
    VALUES
    (:VAR_CONS_REFERENCIA, 'Importado desde '|| :VAR_CODI_REFERENCIA || ' - ' ||
            :VAR_NOMB_REFERENCIA, 'PCP');

    /*  INSERTAR UNA ANOTACION EN EL HISTORIAL DE LA VARIACION ESTANDAR */
    INSERT INTO PCP_REFE_LIST_OPER_COST_HIST
    (CONS_REFE_VARIACION, TEXT_ANOTACION, USUA_SISTEMA)
    VALUES
    (:VAR_CONS_NUEV_VARI_ESTANDAR, 'Importado desde '|| :VAR_CODI_REFERENCIA || ' - ' ||
            :VAR_NOMB_REFERENCIA||'.  Usuario : '||USER, 'PCP');
END ^

ALTER PROCEDURE PRO_GLO_REFE_IMPO_PROTOTIPO (PE_CONS_PROTOTIPO INTEGER)
AS 

DECLARE VARIABLE VAR_CODI_PROTOTIPO VARCHAR(12);
DECLARE VARIABLE VAR_NOMB_PROTOTIPO VARCHAR(60);
DECLARE VARIABLE VAR_CONS_REFERENCIA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARI_ESTANDAR INTEGER;
DECLARE VARIABLE VAR_CONS_NUEV_VARI_ESTANDAR INTEGER;

BEGIN
    /*  BUSCAR EL CODIGO Y EL NOMBRE DEL PROTOTIPO DE ORIGEN */
    SELECT CODI_REFERENCIA, NOMB_REFERENCIA
    FROM GLO_REFERENCIAS
    WHERE CONS_REFERENCIA = :PE_CONS_PROTOTIPO
    INTO :VAR_CODI_PROTOTIPO, :VAR_NOMB_PROTOTIPO;

    /*  VALIDAR EL CODIGO DE LA REFERENCIA DE DESTINO (QUE NO EXISTA) */

    if (EXISTS
        (SELECT CODI_REFERENCIA
        FROM GLO_REFERENCIAS
        WHERE CODI_REFERENCIA = :VAR_CODI_PROTOTIPO AND 
            ES_PROTOTIPO = -1)) then
            EXCEPTION EXC_BAS_0010;

    /*  GENERAR LA SECUENCIA PARA EL REGISTRO  */
    SELECT MAX(CONS_REFERENCIA)
    FROM GLO_REFERENCIAS
    INTO :VAR_CONS_REFERENCIA;

    if (:VAR_CONS_REFERENCIA IS NULL) then VAR_CONS_REFERENCIA = 0;

    VAR_CONS_REFERENCIA = :VAR_CONS_REFERENCIA + 1;

    /*  COPIAR EL MAESTRO DE LA REFERENCIA  */
    INSERT INTO GLO_REFERENCIAS (CONS_REFERENCIA, CODI_REFERENCIA, NOMB_REFERENCIA, ES_PROTOTIPO, 
        CONS_REFE_TEMPORADA, MOLDE, CODI_INTE_REFERENCIA,
        NOMB_REFERENCIA, CODI_BARRAS, CONS_REFE_MARCA, 
        CONS_REFE_LINEA, CONS_REFE_EDAD,
        CONS_REFE_ESTILO, CONS_REFE_GRUPO, CONS_REFE_SEXO, CONS_REFE_LAVADO, 
        CONS_REFE_BORDADO, CONS_REFE_ESTAMPADO, CONS_REFE_GRUP_TALLAS, 
        CONS_REFE_ESTADO, IMAGEN, AJUS_IMAGEN,
        DESCRIPCION, CON_ENTREPIERNAS, FECH_SISTEMA, USUA_SISTEMA)
    SELECT :VAR_CONS_REFERENCIA, CODI_REFERENCIA , NOMB_REFERENCIA, -1,
        REFE.CONS_REFE_TEMPORADA, REFE.MOLDE, REFE.CODI_INTE_REFERENCIA,
        REFE.NOMB_REFERENCIA, REFE.CODI_BARRAS, REFE.CONS_REFE_MARCA, 
        REFE.CONS_REFE_LINEA, REFE.CONS_REFE_EDAD, 
        REFE.CONS_REFE_ESTILO, REFE.CONS_REFE_GRUPO, REFE.CONS_REFE_SEXO, REFE.CONS_REFE_LAVADO,
        REFE.CONS_REFE_BORDADO, REFE.CONS_REFE_ESTAMPADO, REFE.CONS_REFE_GRUP_TALLAS,
        REFE.CONS_REFE_ESTADO, REFE.IMAGEN, REFE.AJUS_IMAGEN,
        REFE.DESCRIPCION, REFE.CON_ENTREPIERNAS, REFE.FECH_SISTEMA, REFE.USUA_SISTEMA
    FROM GLO_REFERENCIAS REFE

    WHERE REFE.CONS_REFERENCIA = :PE_CONS_PROTOTIPO;

    /*  COPIAR LA ASIGNACIÓN DE COLORES  */
    INSERT INTO GLO_REFE_COLORES
    (CONS_REFERENCIA, SECU_COLOR, CONS_COLOR, NUME_COLOR)
    SELECT :VAR_CONS_REFERENCIA, COLO.SECU_COLOR,
        COLO.CONS_COLOR, COLO.NUME_COLOR
        FROM GLO_REFE_COLORES COLO
        WHERE COLO.CONS_REFERENCIA = :PE_CONS_PROTOTIPO;

    /*  BUSCAR EL CONSECUTIVO DE LA VARIACION ESTANDAR DE LA REFERENCIA DE ORIGEN */
    SELECT CONS_REFE_VARIACION
    FROM PCP_REFE_VARIACIONES
    WHERE CONS_REFERENCIA = :PE_CONS_PROTOTIPO AND 
            CONS_REFE_TIPO_VARIACION = 0
    INTO :VAR_CONS_REFE_VARI_ESTANDAR;

    /*  BUSCAR EL CONSECUTIVO DE LA VARIACION ESTANDAR DE LA REFERENCIA DE DESTINO */
    SELECT CONS_REFE_VARIACION
    FROM PCP_REFE_VARIACIONES
    WHERE CONS_REFERENCIA = :VAR_CONS_REFERENCIA AND 
        CONS_REFE_TIPO_VARIACION = 0
    INTO :VAR_CONS_NUEV_VARI_ESTANDAR;

    /*  COPIAR EL LISTADO DE OPERACIONES  */
    INSERT INTO PCP_REFE_LIST_OPER_COSTURA (CONS_REFE_VARIACION, SECU_OPERACION, CODI_OPER_COSTURA, 
        NOMB_OPER_COSTURA, TIEMPO, FRECUENCIA, ES_TITULO)

    SELECT :VAR_CONS_NUEV_VARI_ESTANDAR, OPER.SECU_OPERACION, OPER.CODI_OPER_COSTURA,
        OPER.NOMB_OPER_COSTURA, OPER.TIEMPO, OPER.FRECUENCIA, OPER.ES_TITULO
    FROM PCP_REFE_LIST_OPER_COSTURA OPER
    WHERE OPER.CONS_REFE_VARIACION = :VAR_CONS_REFE_VARI_ESTANDAR;

    /*  COPIAR LA LISTA DE MATERIALES  */
    EXECUTE PROCEDURE

    PRO_PCP_REFE_MATE_IMPORTAR(:PE_CONS_PROTOTIPO, :VAR_CONS_REFE_VARI_ESTANDAR,
        :VAR_CONS_REFERENCIA, :VAR_CONS_NUEV_VARI_ESTANDAR);

    /*  INSERTAR UNA ANOTACION EN EL HISTORIAL DE LA REFERENCIA  */
    INSERT INTO GLO_REFE_HISTORIAL (CONS_REFERENCIA, TEXT_ANOTACION, USUA_SISTEMA)
    VALUES
    (:VAR_CONS_REFERENCIA, 'Importado desde prototipo '|| :VAR_CODI_PROTOTIPO || ' - ' ||
            :VAR_NOMB_PROTOTIPO||'.  Usuario : '||USER, 'PCP');

    /*  INSERTAR UNA ANOTACION EN EL HISTORIAL DE LA VARIACION ESTANDAR */
    INSERT INTO PCP_REFE_LIST_OPER_COST_HIST (CONS_REFE_VARIACION, TEXT_ANOTACION, USUA_SISTEMA)
    VALUES
    (:VAR_CONS_NUEV_VARI_ESTANDAR, 'Importado desde prototipo '|| :VAR_CODI_PROTOTIPO || ' - ' ||
            :VAR_NOMB_PROTOTIPO||'.  Usuario : '||USER, 'PCP');
END ^

ALTER PROCEDURE PRO_PCP_CONF_OBJE_DUPLICAR (
    PE_CONS_CONF_OBJETO INTEGER,
    PE_NOMB_OBJETO VARCHAR(60) CHARACTER SET NONE,
    PE_MENU_PADRE VARCHAR(60) CHARACTER SET NONE)
RETURNS (
	CONS_CONF_OBJETO INTEGER)
AS 

BEGIN
     /*  GENERAR LA SECUENCIA DEL REGISTRO  */
     SELECT SECUENCIA

     FROM FUN_GLO_GENE_SECUENCIA('PCP_CONF_OBJETOS', 'CONS_CONF_OBJETO')
     INTO :CONS_CONF_OBJETO;

     /*  INSERTAR EL PADRE  */
     INSERT INTO PCP_CONF_OBJETOS (CONS_CONF_OBJETO, TIPO, NOMB_OBJETO,
            DESC_OBJETO, MENU_PADRE, NOMB_MENU_PADRE, ESTA_ACTIVO,
            BASE_DATOS, TEXT_SQL)

     SELECT :CONS_CONF_OBJETO, TIPO, :PE_NOMB_OBJETO,
            DESC_OBJETO, :PE_MENU_PADRE, NOMB_MENU_PADRE, ESTA_ACTIVO,
            BASE_DATOS, TEXT_SQL
     FROM PCP_CONF_OBJETOS
     WHERE CONS_CONF_OBJETO = :PE_CONS_CONF_OBJETO;

     /*  INSERTAR LOS PARAMETROS  */
     INSERT INTO PCP_CONF_OBJE_PARAMETROS
            (CONS_CONF_OBJETO, NOMB_PARAMETRO,
            TEXT_PARAMETRO, TIPO_PARAMETRO, LIST_DATOS, LIST_CONSULTA,
            LIST_CAMP_LLAVE, LIST_CAMP_MOSTRAR, REQUERIDO)
     SELECT :CONS_CONF_OBJETO, NOMB_PARAMETRO,
            TEXT_PARAMETRO, TIPO_PARAMETRO, LIST_DATOS, LIST_CONSULTA,
            LIST_CAMP_LLAVE, LIST_CAMP_MOSTRAR, REQUERIDO
     FROM PCP_CONF_OBJE_PARAMETROS
     WHERE CONS_CONF_OBJETO = :PE_CONS_CONF_OBJETO
     ORDER BY CONS_CONF_OBJE_PARAMETRO;

     /*  INSERTAR LOS CAMPOS  */
     INSERT INTO PCP_CONF_OBJE_CAMPOS (CONS_CONF_OBJETO, NOMB_CAMPO, TEXT_CAMPO, VISIBLE, FORMATO)

     SELECT :CONS_CONF_OBJETO, NOMB_CAMPO, TEXT_CAMPO, VISIBLE, FORMATO
     FROM PCP_CONF_OBJE_CAMPOS
     WHERE CONS_CONF_OBJETO = :PE_CONS_CONF_OBJETO
     ORDER BY CONS_CONF_OBJE_CAMPO;

     SUSPEND;
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_ABON_IU (
    CONS_CONT_NOVE_ABONADO INTEGER,
    CONS_CONT_NOVE_DIARIA INTEGER,
    CONS_ABONADO INTEGER,
    CONS_PROD_ORDEN INTEGER,
    MINU_TRABAJADOS INTEGER,
    MINU_ABONADOS NUMERIC(15, 5),
    TIQUETES INTEGER,
    VALO_HORA NUMERIC(15, 5))
AS 

BEGIN

  IF (EXISTS(SELECT CONS_CONT_NOVE_ABONADO 
            FROM PCP_CONT_NOVE_ABONADOS 
            WHERE (CONS_CONT_NOVE_ABONADO = :CONS_CONT_NOVE_ABONADO))) THEN
    UPDATE PCP_CONT_NOVE_ABONADOS
    SET CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA,
        CONS_ABONADO = :CONS_ABONADO,
        CONS_PROD_ORDEN = :CONS_PROD_ORDEN,
        MINU_TRABAJADOS = :MINU_TRABAJADOS,
        MINU_ABONADOS = :MINU_ABONADOS,
        TIQUETES = :TIQUETES,
        VALO_HORA = :VALO_HORA
    WHERE (CONS_CONT_NOVE_ABONADO = :CONS_CONT_NOVE_ABONADO);
  ELSE
    INSERT INTO PCP_CONT_NOVE_ABONADOS ( CONS_CONT_NOVE_ABONADO, CONS_CONT_NOVE_DIARIA,
        CONS_ABONADO, CONS_PROD_ORDEN, MINU_TRABAJADOS, MINU_ABONADOS,
        TIQUETES, VALO_HORA)
    VALUES (
        :CONS_CONT_NOVE_ABONADO, :CONS_CONT_NOVE_DIARIA, :CONS_ABONADO,
        :CONS_PROD_ORDEN, :MINU_TRABAJADOS, :MINU_ABONADOS,
        :TIQUETES, :VALO_HORA);
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_CURVA_IU (CONS_CONT_NOVE_DIARIA INTEGER,
MINU_CURVA INTEGER,
CURV_ESTANDAR INTEGER)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_CONT_NOVE_DIARIA 
        FROM PCP_CONT_NOVE_CURVA 
        WHERE (CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA))) THEN
    UPDATE PCP_CONT_NOVE_CURVA
    SET MINU_CURVA = :MINU_CURVA,
    CURV_ESTANDAR = :CURV_ESTANDAR
    WHERE (CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA);
  ELSE
    INSERT INTO PCP_CONT_NOVE_CURVA ( CONS_CONT_NOVE_DIARIA, MINU_CURVA, CURV_ESTANDAR)
    VALUES ( :CONS_CONT_NOVE_DIARIA, :MINU_CURVA, :CURV_ESTANDAR);
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_DEFE_FABR_I (
    CONS_CALI_DEFECTO INTEGER,
    CONS_PROD_LOTE INTEGER,
    CONS_PROCESO INTEGER,
    CONS_PROD_PAQU_TIPO INTEGER,
    NUME_PAQUETE INTEGER,
    SECU_OPERACION INTEGER,
    FECH_DEFECTO TIMESTAMP,
    CONS_CONT_NOVE_DIARIA INTEGER,
    CONS_PERS_ASIGNADO INTEGER,
    CANT_UNID_DEFECTUOSAS INTEGER)
AS 

BEGIN

  INSERT INTO PCP_CONT_NOVE_DEFE_FABRICACION ( CONS_CALI_DEFECTO, CONS_PROD_LOTE, CONS_PROCESO,
    CONS_PROD_PAQU_TIPO, NUME_PAQUETE, SECU_OPERACION, FECH_DEFECTO,
    CONS_CONT_NOVE_DIARIA, CONS_PERS_ASIGNADO, CANT_UNID_DEFECTUOSAS)
  VALUES (
    :CONS_CALI_DEFECTO, :CONS_PROD_LOTE, :CONS_PROCESO,
    :CONS_PROD_PAQU_TIPO, :NUME_PAQUETE, :SECU_OPERACION, :FECH_DEFECTO,
    :CONS_CONT_NOVE_DIARIA, :CONS_PERS_ASIGNADO, :CANT_UNID_DEFECTUOSAS);
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_DIARIAS_U (
    CONS_CONT_NOVE_DIARIA INTEGER,
    CONS_PERSONAL INTEGER,
    FECH_LECTURA TIMESTAMP,
    NUME_LECTURA INTEGER,
    CONS_EMPRESA INTEGER,
    CONS_PLANTA INTEGER,
    CONS_PLAN_LINEA INTEGER,
    CONS_LINE_SECCION INTEGER,
    CONS_TURNO INTEGER,
    HORA_INICIO TIMESTAMP,
    HORA_FINAL TIMESTAMP,
    MINU_CONTRATADOS INTEGER)
AS 

BEGIN
  UPDATE PCP_CONT_NOVE_DIARIAS
  SET CONS_PERSONAL = :CONS_PERSONAL,
      FECH_LECTURA = :FECH_LECTURA,
      NUME_LECTURA = :NUME_LECTURA,
      CONS_EMPRESA = :CONS_EMPRESA,
      CONS_PLANTA = :CONS_PLANTA,
      CONS_PLAN_LINEA = :CONS_PLAN_LINEA,
      CONS_LINE_SECCION = :CONS_LINE_SECCION,
      CONS_TURNO = :CONS_TURNO,
      HORA_INICIO = :HORA_INICIO,
      HORA_FINAL = :HORA_FINAL,
      MINU_CONTRATADOS = :MINU_CONTRATADOS
  WHERE (CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA);
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_HORA_EXTR_IU (
    CONS_CONT_NOVE_HORA_EXTRA INTEGER,
    CONS_CONT_NOVE_DIARIA INTEGER,
    CONS_HORA_EXTRA INTEGER,
    CONS_PROD_ORDEN INTEGER,
    MINU_EXTRAS INTEGER,
    ESTANDAR INTEGER)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_CONT_NOVE_HORA_EXTRA 
        FROM PCP_CONT_NOVE_HORA_EXTRAS
        WHERE (CONS_CONT_NOVE_HORA_EXTRA = :CONS_CONT_NOVE_HORA_EXTRA))) THEN

    UPDATE PCP_CONT_NOVE_HORA_EXTRAS
    SET CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA,
        CONS_HORA_EXTRA = :CONS_HORA_EXTRA,
        CONS_PROD_ORDEN = :CONS_PROD_ORDEN,
        MINU_EXTRAS = :MINU_EXTRAS,
        ESTANDAR = :ESTANDAR
    WHERE (CONS_CONT_NOVE_HORA_EXTRA = :CONS_CONT_NOVE_HORA_EXTRA);
  ELSE
    INSERT INTO PCP_CONT_NOVE_HORA_EXTRAS ( CONS_CONT_NOVE_HORA_EXTRA, CONS_CONT_NOVE_DIARIA,
        CONS_HORA_EXTRA, CONS_PROD_ORDEN, MINU_EXTRAS, ESTANDAR)
    VALUES (
        :CONS_CONT_NOVE_HORA_EXTRA, :CONS_CONT_NOVE_DIARIA,
        :CONS_HORA_EXTRA, :CONS_PROD_ORDEN, :MINU_EXTRAS, :ESTANDAR);
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_IMPR_IU (
    CONS_CONT_NOVE_IMPRODUCTIVO INTEGER,
    CONS_CONT_NOVE_DIARIA INTEGER,
    CONS_IMPRODUCTIVO INTEGER,
    CONS_SUB_IMPRODUCTIVO INTEGER,
    CONS_RECURSO INTEGER,
    CONS_PROD_ORDEN INTEGER,
    MINU_IMPRODUCTIVOS INTEGER,
    ESTANDAR INTEGER)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_CONT_NOVE_IMPRODUCTIVO 
             FROM PCP_CONT_NOVE_IMPRODUCTIVOS 
             WHERE (CONS_CONT_NOVE_IMPRODUCTIVO = :CONS_CONT_NOVE_IMPRODUCTIVO))) THEN
    UPDATE PCP_CONT_NOVE_IMPRODUCTIVOS
    SET CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA,
        CONS_IMPRODUCTIVO = :CONS_IMPRODUCTIVO,
        CONS_SUB_IMPRODUCTIVO = :CONS_SUB_IMPRODUCTIVO,
        CONS_RECURSO = :CONS_RECURSO,
        CONS_PROD_ORDEN = :CONS_PROD_ORDEN,
        MINU_IMPRODUCTIVOS = :MINU_IMPRODUCTIVOS,
        ESTANDAR = :ESTANDAR
    WHERE (CONS_CONT_NOVE_IMPRODUCTIVO = :CONS_CONT_NOVE_IMPRODUCTIVO);
  ELSE
    INSERT INTO PCP_CONT_NOVE_IMPRODUCTIVOS (
        CONS_CONT_NOVE_IMPRODUCTIVO, CONS_CONT_NOVE_DIARIA,
        CONS_IMPRODUCTIVO, CONS_SUB_IMPRODUCTIVO,
        CONS_RECURSO, CONS_PROD_ORDEN,
        MINU_IMPRODUCTIVOS, ESTANDAR)
    VALUES (
        :CONS_CONT_NOVE_IMPRODUCTIVO, :CONS_CONT_NOVE_DIARIA,
        :CONS_IMPRODUCTIVO, :CONS_SUB_IMPRODUCTIVO,
        :CONS_RECURSO, :CONS_PROD_ORDEN,
        :MINU_IMPRODUCTIVOS, :ESTANDAR);

END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_PAGO_IU (
    CONS_CONT_NOVE_DIARIA INTEGER,
    CONS_FORM_PAGO INTEGER,
    CODI_FORM_PAGO VARCHAR(12) CHARACTER SET NONE,
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    VALO_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_PAGO_MINIMO NUMERIC(15, 5),
    VALO_MINI_GARA_ESTANDAR NUMERIC(15, 5),
    VALO_MINI_GARA_NO_ESTANDAR NUMERIC(15, 5),
    VALO_GANA_ESTANDAR NUMERIC(15, 5),
    VALO_GANA_NO_ESTANDAR NUMERIC(15, 5),
    VALO_AJUS_AL_MINI_ESTANDAR NUMERIC(15, 5),
    VALO_AJUS_AL_MINI_NO_ESTANDAR NUMERIC(15, 5),
    VALO_BONO_HORA_EXTRAS NUMERIC(15, 5),
    VALO_BONO_PRODUCCION NUMERIC(15, 5),
    VALO_BONO_CURVA NUMERIC(15, 5),
    VALO_TOTA_DEVENGADO NUMERIC(15, 5),
    MINU_TRAB_ESTANDAR NUMERIC(15, 5),
    MINU_TRAB_NO_ESTANDAR NUMERIC(15, 5),
    MINU_TRAB_CURVA NUMERIC(15, 5),
    MINU_EXTR_ESTANDAR NUMERIC(15, 5),
    MINU_EXTR_NO_ESTANDAR NUMERIC(15, 5),
    MINU_AUSE_ESTANDAR NUMERIC(15, 5),
    MINU_AUSE_NO_ESTANDAR NUMERIC(15, 5),
    MINU_IMPR_ESTANDAR NUMERIC(15, 5),
    MINU_IMPR_NO_ESTANDAR NUMERIC(15, 5),
    MINU_PROD_ESTANDAR NUMERIC(15, 5),
    MINU_PROD_CORTE NUMERIC(15, 5),
    MINU_PROD_FABRICACION NUMERIC(15, 5),
    MINU_PROD_NO_ESTANDAR NUMERIC(15, 5),
    MINU_PROD_CURVA NUMERIC(15, 5),
    CURV_ESTANDAR INTEGER)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_CONT_NOVE_DIARIA 
            FROM PCP_CONT_NOVE_PAGO 
            WHERE (CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA))) THEN
    UPDATE PCP_CONT_NOVE_PAGO
    SET CONS_FORM_PAGO = :CONS_FORM_PAGO,
        CODI_FORM_PAGO = :CODI_FORM_PAGO,
        VALO_HORA_PRODUCCION = :VALO_HORA_PRODUCCION,
        VALO_MINI_GARANTIZADO = :VALO_MINI_GARANTIZADO,
        VALO_PAGO_MINIMO = :VALO_PAGO_MINIMO,
        VALO_MINI_GARA_ESTANDAR = :VALO_MINI_GARA_ESTANDAR,
        VALO_MINI_GARA_NO_ESTANDAR = :VALO_MINI_GARA_NO_ESTANDAR,
        VALO_GANA_ESTANDAR = :VALO_GANA_ESTANDAR,
        VALO_GANA_NO_ESTANDAR = :VALO_GANA_NO_ESTANDAR,
        VALO_AJUS_AL_MINI_ESTANDAR = :VALO_AJUS_AL_MINI_ESTANDAR,
        VALO_AJUS_AL_MINI_NO_ESTANDAR = :VALO_AJUS_AL_MINI_NO_ESTANDAR,
        VALO_BONO_HORA_EXTRAS = :VALO_BONO_HORA_EXTRAS,
        VALO_BONO_PRODUCCION = :VALO_BONO_PRODUCCION,
        VALO_BONO_CURVA = :VALO_BONO_CURVA,
        VALO_TOTA_DEVENGADO = :VALO_TOTA_DEVENGADO,
        MINU_TRAB_ESTANDAR = :MINU_TRAB_ESTANDAR,
        MINU_TRAB_NO_ESTANDAR = :MINU_TRAB_NO_ESTANDAR,
        MINU_TRAB_CURVA = :MINU_TRAB_CURVA,
        MINU_EXTR_ESTANDAR = :MINU_EXTR_ESTANDAR,
        MINU_EXTR_NO_ESTANDAR = :MINU_EXTR_NO_ESTANDAR,
        MINU_AUSE_ESTANDAR = :MINU_AUSE_ESTANDAR,
        MINU_AUSE_NO_ESTANDAR = :MINU_AUSE_NO_ESTANDAR,
        MINU_IMPR_ESTANDAR = :MINU_IMPR_ESTANDAR,
        MINU_IMPR_NO_ESTANDAR = :MINU_IMPR_NO_ESTANDAR,
        MINU_PROD_ESTANDAR = :MINU_PROD_ESTANDAR,
        MINU_PROD_CORTE = :MINU_PROD_CORTE,
        MINU_PROD_FABRICACION = :MINU_PROD_FABRICACION,
        MINU_PROD_NO_ESTANDAR = :MINU_PROD_NO_ESTANDAR,
        MINU_PROD_CURVA = :MINU_PROD_CURVA,
        CURV_ESTANDAR = :CURV_ESTANDAR
    WHERE (CONS_CONT_NOVE_DIARIA = :CONS_CONT_NOVE_DIARIA);
  ELSE
    INSERT INTO PCP_CONT_NOVE_PAGO (
        CONS_CONT_NOVE_DIARIA,  CONS_FORM_PAGO,         CODI_FORM_PAGO,
        VALO_HORA_PRODUCCION,   VALO_MINI_GARANTIZADO,  VALO_PAGO_MINIMO,
        VALO_MINI_GARA_ESTANDAR, VALO_MINI_GARA_NO_ESTANDAR, VALO_GANA_ESTANDAR,
        VALO_GANA_NO_ESTANDAR, VALO_AJUS_AL_MINI_ESTANDAR, VALO_AJUS_AL_MINI_NO_ESTANDAR,
        VALO_BONO_HORA_EXTRAS, VALO_BONO_PRODUCCION,    VALO_BONO_CURVA,
        VALO_TOTA_DEVENGADO,    MINU_TRAB_ESTANDAR,     MINU_TRAB_NO_ESTANDAR,
        MINU_TRAB_CURVA,        MINU_EXTR_ESTANDAR,     MINU_EXTR_NO_ESTANDAR,
        MINU_AUSE_ESTANDAR,     MINU_AUSE_NO_ESTANDAR,  MINU_IMPR_ESTANDAR,
        MINU_IMPR_NO_ESTANDAR, MINU_PROD_ESTANDAR, MINU_PROD_CORTE,
        MINU_PROD_FABRICACION, MINU_PROD_NO_ESTANDAR, MINU_PROD_CURVA,
        CURV_ESTANDAR)
    VALUES (
        :CONS_CONT_NOVE_DIARIA, :CONS_FORM_PAGO,        :CODI_FORM_PAGO,
        :VALO_HORA_PRODUCCION, :VALO_MINI_GARANTIZADO,  :VALO_PAGO_MINIMO,
        :VALO_MINI_GARA_ESTANDAR, :VALO_MINI_GARA_NO_ESTANDAR, :VALO_GANA_ESTANDAR,
        :VALO_GANA_NO_ESTANDAR, :VALO_AJUS_AL_MINI_ESTANDAR, :VALO_AJUS_AL_MINI_NO_ESTANDAR,
        :VALO_BONO_HORA_EXTRAS, :VALO_BONO_PRODUCCION,  :VALO_BONO_CURVA,
        :VALO_TOTA_DEVENGADO,   :MINU_TRAB_ESTANDAR,    :MINU_TRAB_NO_ESTANDAR,
        :MINU_TRAB_CURVA,       :MINU_EXTR_ESTANDAR,    :MINU_EXTR_NO_ESTANDAR,
        :MINU_AUSE_ESTANDAR,    :MINU_AUSE_NO_ESTANDAR, :MINU_IMPR_ESTANDAR,
        :MINU_IMPR_NO_ESTANDAR, :MINU_PROD_ESTANDAR,    :MINU_PROD_CORTE,
        :MINU_PROD_FABRICACION, :MINU_PROD_NO_ESTANDAR, :MINU_PROD_CURVA,
        :CURV_ESTANDAR);
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_TIQU_CORT_I (
    PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
    PE_CONS_CONT_NOVE_DIARIA INTEGER)
    RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
    CONS_CONT_NOVE_TIQU_CORTE INTEGER,
    CONS_TIQU_CONTROL INTEGER,
    CONS_PROD_ORDEN INTEGER,
    CONS_PROD_LOTE INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    NUME_LOTE INTEGER,
    NUME_PAQUETE INTEGER,
    SECU_OPERACION INTEGER,
    NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
    NOMB_MATE_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CANT_PAQUETES INTEGER,
    NOMB_CORT_UNID_MEDIDA VARCHAR(60) CHARACTER SET NONE,
    TIEM_PAQUETE NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    HUBO_ERROR INTEGER,
    MENS_ERROR VARCHAR(200) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CONS_REFE_MATERIAL INTEGER;

BEGIN
  /*  CODIGO DE BARRAS PARA ERRORES  */
  CODI_BARRAS = :PE_CODI_BARRAS;
  VALO_HORA_PRODUCCION = 0;

  /*  INTERPRTETAR (DESARMAR) EL CÓDIGO DE BARRAS EN VARIABLES  */
  CONS_TIQU_CONTROL = SUBSTRING(:PE_CODI_BARRAS FROM 2 FOR 6);
  NUME_PAQUETE = SUBSTRING(:PE_CODI_BARRAS FROM 8 FOR 4);
  SECU_OPERACION = SUBSTRING(:PE_CODI_BARRAS FROM 12 FOR 3);

  /*  BUSCAR INFORMACIÓN DEL TIQUETE DE CONTROL  */
  FOR SELECT CODI_BARRAS,   CONS_PROD_ORDEN,    CONS_PROD_LOTE,     NUME_PROD_ORDEN, 
            NUME_LOTE,      NUME_PAQUETE,       SECU_OPERACION,     NOMB_OPERACION, 
        CONS_REFE_MATERIAL, NOMB_MATE_REFERENCIA, NOMB_CORT_UNID_MEDIDA, UNID_POR_TIQUETE, TIEM_TOTAL
  FROM CON_PCP_PROD_DATO_BASI_TIQU_C(:PE_CODI_BARRAS)
  INTO :CODI_BARRAS, :CONS_PROD_ORDEN, :CONS_PROD_LOTE, :NUME_PROD_ORDEN, 
        :NUME_LOTE,  :NUME_PAQUETE,    :SECU_OPERACION, :NOMB_OPERACION, 
    :VAR_CONS_REFE_MATERIAL, :NOMB_MATE_REFERENCIA, :NOMB_CORT_UNID_MEDIDA, :CANT_PAQUETES, :TIEM_PAQUETE 
  DO BEGIN
      /*  INSERTAR EL REGISTRO  */
      INSERT INTO PCP_CONT_NOVE_TIQU_CORTE
        (CONS_CONT_NOVE_DIARIA, CODI_BARRAS, CONS_PROD_ORDEN,
        CONS_PROD_LOTE, CONS_REFE_MATERIAL, SECU_OPERACION, NUME_PAQUETE,
        TIEM_OPERACION, CANT_UNIDADES, CONS_TIQU_CONTROL)
      VALUES
        (:PE_CONS_CONT_NOVE_DIARIA, :CODI_BARRAS, :CONS_PROD_ORDEN,
        :CONS_PROD_LOTE, :VAR_CONS_REFE_MATERIAL, :SECU_OPERACION,
        :NUME_PAQUETE, :TIEM_PAQUETE, :CANT_PAQUETES, :CONS_TIQU_CONTROL);

      /*  GENERAR EL REGISTRO  */
      SUSPEND;
  END

  /*  ERRORES FATALES  */
  WHEN ANY DO
  BEGIN
      HUBO_ERROR = 1;
      MENS_ERROR = 'OCURRIÓ UN ERROR LEYENDO EL TIQUETE ('||:PE_CODI_BARRAS||').  ERROR DB :'||SQLCODE ;
      SUSPEND;
  END
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_TIQU_FABR_I (
    PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
    PE_CONS_CONT_NOVE_DIARIA INTEGER,
    PE_CONS_CONT_NOVE_ABONADO INTEGER)
    RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
    CONS_CONT_NOVE_TIQU_FABRICACION INTEGER,
    CONS_PROD_PAQU_TIPO INTEGER,
    NOMB_PROD_PAQU_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_PROD_ORDEN INTEGER,
    CONS_PROD_LOTE INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    NUME_LOTE INTEGER,
    CONS_PROCESO INTEGER,
    NUME_PAQUETE INTEGER,
    CONS_GRUP_TALL_DETALLE INTEGER,
    CONS_REFE_COLOR INTEGER,
    SECU_OPERACION INTEGER,
    NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
    TIEM_OPERACION NUMERIC(15, 5),
    CANT_UNIDADES INTEGER,
    TIEM_PAQUETE NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    HUBO_ERROR INTEGER,
    MENS_ERROR VARCHAR(200) CHARACTER SET NONE,
    ES_CURVA INTEGER)
AS 

DECLARE VARIABLE VAR_CANT_UNID_LEIDAS INTEGER;
DECLARE VARIABLE VAR_DISPONIBLE INTEGER;
DECLARE VARIABLE VAR_CODI_OPERACION VARCHAR(12);
DECLARE VARIABLE VAR_CONS_VALO_HORA INTEGER;
DECLARE VARIABLE VAR_NUME_DIAS_PROMEDIO INTEGER = 30;
DECLARE VARIABLE VAR_FECH_LECTURA DATE;
DECLARE VARIABLE VAR_CONS_PERSONAL INTEGER;
DECLARE VARIABLE VAR_CONS_ABONADO INTEGER;
DECLARE VARIABLE VAR_CONS_SIS_FORM_PAGO INTEGER;
DECLARE VARIABLE VAR_CONS_FORM_PAGO_APRENDIZAJE INTEGER;
DECLARE VARIABLE VAR_CODI_OPER_COSTURA VARCHAR(12);
DECLARE VARIABLE VAR_CONS_PUNT_CONTROL INTEGER;

BEGIN
  /*  CODIGO DE BARRAS PARA ERRORES  */
  CODI_BARRAS = :PE_CODI_BARRAS;

  /*  INTERPRTETAR (DESARMAR) EL CÓDIGO DE BARRAS EN VARIABLES  */
  CONS_PROD_PAQU_TIPO = SUBSTRING(:PE_CODI_BARRAS FROM 1 FOR 1);
  CONS_PROD_LOTE = SUBSTRING(:PE_CODI_BARRAS FROM 2 FOR 6);
  NUME_PAQUETE = SUBSTRING(:PE_CODI_BARRAS FROM 8 FOR 4);
  SECU_OPERACION = SUBSTRING(:PE_CODI_BARRAS FROM 12 FOR 3);

  /*  BUSCAR INFORMACIÓN DEL TIQUETE  */
  SELECT
    CONS_PROD_PAQU_TIPO, NOMB_PROD_PAQU_TIPO, CONS_PROD_ORDEN, NUME_PROD_ORDEN,
    CONS_PROD_LOTE ,NUME_LOTE,
    CONS_PROCESO, NUME_PAQUETE, CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR,
    SECU_OPERACION, CODI_OPERACION, NOMB_OPERACION, TIEM_OPERACION, CANT_UNIDADES,
    CONS_PUNT_CONTROL
  FROM CON_PCP_PROD_DATO_BASI_TIQU_F(:PE_CODI_BARRAS)
  INTO :CONS_PROD_PAQU_TIPO, :NOMB_PROD_PAQU_TIPO, :CONS_PROD_ORDEN, :NUME_PROD_ORDEN,
    :CONS_PROD_LOTE , :NUME_LOTE,
    :CONS_PROCESO, :NUME_PAQUETE, :CONS_GRUP_TALL_DETALLE, :CONS_REFE_COLOR,
    :SECU_OPERACION, :VAR_CODI_OPERACION, :NOMB_OPERACION, :TIEM_OPERACION, :CANT_UNIDADES,
    :VAR_CONS_PUNT_CONTROL;

  /*  SUMAR LAS UNIDADES QUE TIENE LEIDAS EL PAQUETE  */
  SELECT SUM(CANT_UNIDADES)
  FROM PCP_CONT_NOVE_TIQU_FABRICACION
  WHERE CODI_BARRAS = :PE_CODI_BARRAS
  INTO :VAR_CANT_UNID_LEIDAS;

  IF (:VAR_CANT_UNID_LEIDAS IS NULL) THEN VAR_CANT_UNID_LEIDAS = 0;
  /*  UNIDADES POR LAS CUALES SE EJECUTAR`EL TIQUETE (LAS DISPONIBLES)  */
  VAR_DISPONIBLE = :CANT_UNIDADES - :VAR_CANT_UNID_LEIDAS;
  /*  VALIDAR QUE LA CANTIDAD DISPONIBLE SEA MAYOR QUE CERO  */
  IF (:VAR_DISPONIBLE <= 0) THEN BEGIN
      HUBO_ERROR = 1;
      MENS_ERROR = 'LAS '||:CANT_UNIDADES||' UNIDADES DEL PAQUETE YA FUERON REPORTADAS.';
  END
  ELSE BEGIN
       /*  REEMPLAZAR LAS UNIDADES  */
       CANT_UNIDADES = :VAR_DISPONIBLE;
       /*  CALCULAR EL TIEMPO DEL TIQUETE  */
       TIEM_PAQUETE = :TIEM_OPERACION * :CANT_UNIDADES;
       /*  GENERAR LA SECUENCIA DEL REGISTRO  */
       SELECT MAX (CONS_CONT_NOVE_TIQU_FABRICACION) + 1
       FROM PCP_CONT_NOVE_TIQU_FABRICACION
       INTO :CONS_CONT_NOVE_TIQU_FABRICACION;

       IF (:CONS_CONT_NOVE_TIQU_FABRICACION IS NULL) THEN
          CONS_CONT_NOVE_TIQU_FABRICACION = 1;

       /*  FECHA DE LA LECTURA Y OPERARIO */
       SELECT DIAR.FECH_LECTURA, DIAR.CONS_PERSONAL
       FROM PCP_CONT_NOVE_DIARIAS DIAR
       WHERE DIAR.CONS_CONT_NOVE_DIARIA = :PE_CONS_CONT_NOVE_DIARIA
       INTO :VAR_FECH_LECTURA, :VAR_CONS_PERSONAL;

       /*  -- -- -- -- -- - FORMA DE PAGO -- -- -- -- -- -- -- --  */
       /*  VERIFICAR SI ES UN TIQUETE EN CURVA DE APRENDIZAJE  */
       VAR_CONS_FORM_PAGO_APRENDIZAJE = NULL;
       VAR_CODI_OPER_COSTURA = NULL;
       VAR_CONS_SIS_FORM_PAGO = NULL;

       SELECT CONS_SIS_FORM_PAGO, CONS_FORM_PAGO_APRENDIZAJE, CODI_OPER_COSTURA
       FROM CON_PCP_FORM_PAGO_PERS_FECH_UN(:VAR_FECH_LECTURA, :VAR_CONS_PERSONAL)
       INTO :VAR_CONS_SIS_FORM_PAGO, :VAR_CONS_FORM_PAGO_APRENDIZAJE,  :VAR_CODI_OPER_COSTURA;

       /*  SI TIENE  FORMA DE PAGO EN CURVA Y NO TIENE OPERACION, ES CURVA */
       ES_CURVA = -1;

       IF ((NOT :VAR_CONS_FORM_PAGO_APRENDIZAJE IS NULL) AND
           (:VAR_CODI_OPER_COSTURA IS NULL)) THEN
           ES_CURVA = 1;
       ELSE /*  SI TIENE FORMA DE PAGO EN CURVA Y EL CODIGO DE LA OP. ES IGUAL, ES CURVA  */
       IF ((NOT :VAR_CONS_FORM_PAGO_APRENDIZAJE IS NULL) AND
           (NOT :VAR_CODI_OPER_COSTURA IS NULL)) THEN
       BEGIN
           IF (:VAR_CODI_OPER_COSTURA = :VAR_CODI_OPERACION) THEN
              ES_CURVA = 1;
       END

       /*  -- -- -- -- -VALOR DE LA HORA DE PRODUCCIÓN -- -- -- -- -- -- --  */

       /*  ABONADOS  */
       IF (NOT :PE_CONS_CONT_NOVE_ABONADO IS NULL) THEN BEGIN
               /*  BUSCAR EL CONSECUTIVO DEL ABONADO  */
               SELECT CONS_ABONADO
               FROM PCP_CONT_NOVE_ABONADOS
               WHERE CONS_CONT_NOVE_ABONADO = :PE_CONS_CONT_NOVE_ABONADO
               INTO :VAR_CONS_ABONADO;

               /*  BUSCAR EL VALOR DEL PAGO POR HORA (ABONADO)  */
               SELECT CONS_VALO_HORA
               FROM GLO_ABONADOS
               WHERE CONS_ABONADO = :VAR_CONS_ABONADO
               INTO :VAR_CONS_VALO_HORA;

               IF (:VAR_CONS_VALO_HORA IS NULL) THEN VAR_CONS_VALO_HORA = 0;
               /*  EVALUAR LOS TIPOS DE PAGO  */

               /*  VALOR HORA MINIMO GARANTIZADO  */
               IF (:VAR_CONS_VALO_HORA = 1) THEN BEGIN
                   SELECT FIRST 1 VALO_HORA_MINI_GARANTIZADO
                   FROM PCP_FORM_PAGO_PARAMETROS
                   INTO :VALO_HORA_PRODUCCION;
               END
               ELSE /*  VALOR HORA PROMEDIO (INDIVIDUAL)  */
                   IF (:VAR_CONS_VALO_HORA = 2) THEN BEGIN
                       SELECT AVG(FABR.VALO_HORA_PRODUCCION)
                       FROM PCP_CONT_NOVE_TIQU_FABRICACION FABR
                       WHERE FABR.CONS_CONT_NOVE_DIARIA IN
                         (SELECT CONS_CONT_NOVE_DIARIA FROM
                          PCP_CONT_NOVE_DIARIAS
                          WHERE
                            (CONS_PERSONAL = :VAR_CONS_PERSONAL) AND 
                            (FECH_LECTURA BETWEEN :VAR_FECH_LECTURA - 1 AND
                              :VAR_FECH_LECTURA - 1 - :VAR_NUME_DIAS_PROMEDIO))
                       INTO :VALO_HORA_PRODUCCION;
                   END
               ELSE /*  VALOR HORA PROMEDIO (GENERAL)  */
                   IF (:VAR_CONS_VALO_HORA = 3) THEN BEGIN
                       /*  FECHA DE LA LECTURA Y OPERARIO */
                       SELECT DIAR.FECH_LECTURA
                       FROM PCP_CONT_NOVE_DIARIAS DIAR
                       WHERE DIAR.CONS_CONT_NOVE_DIARIA = :PE_CONS_CONT_NOVE_DIARIA
                       INTO :VAR_FECH_LECTURA;

                       SELECT AVG(FABR.VALO_HORA_PRODUCCION)
                       FROM PCP_CONT_NOVE_TIQU_FABRICACION FABR
                       WHERE FABR.CONS_CONT_NOVE_DIARIA IN
                         (SELECT CONS_CONT_NOVE_DIARIA FROM
                          PCP_CONT_NOVE_DIARIAS
                          WHERE
                          FECH_LECTURA BETWEEN :VAR_FECH_LECTURA - 1 AND
                              :VAR_FECH_LECTURA - 1 - :VAR_NUME_DIAS_PROMEDIO)
                       INTO :VALO_HORA_PRODUCCION;
                   END

               /*  VALOR GENERAL HORA PRODUCCION  */
               IF (:VAR_CONS_VALO_HORA = 4) THEN BEGIN
                   SELECT FIRST 1 VALO_HORA_PRODUCCION
                   FROM PCP_FORM_PAGO_PARAMETROS
                   INTO :VALO_HORA_PRODUCCION;
               END
       END
       ELSE
       BEGIN
              /*  EVALUAR LOS CASOS DE LA FORMA DE PAGO  */
              /*  PAGO POR HABILIDAD  */
              IF (:VAR_CONS_SIS_FORM_PAGO = 4) THEN BEGIN
                   /*  BUSCAR EL VALOR DE LA OPERACION (PARA PAGO POR HABILIDAD)  */
                   SELECT VALO.VALO_HORA_PRODUCCION
                   FROM VIS_PCP_OPER_COST_PAGO_HABI VALO
                   WHERE VALO.CODI_OPER_COSTURA = :VAR_CODI_OPERACION
                   INTO VALO_HORA_PRODUCCION;
              END
              ELSE /*  PAGO POR EL VALOR DE LA OPERACION  */
              IF (:VAR_CONS_SIS_FORM_PAGO = 8) THEN BEGIN
                   /*  BUSCAR EL VALOR DE LA OPERACION */
                   SELECT VALO.COST_OPERACION
                   FROM PCP_OPER_COSTURA VALO
                   WHERE VALO.CODI_OPER_COSTURA = :VAR_CODI_OPERACION
                   INTO VALO_HORA_PRODUCCION;
              END
       END
    
       /*  VALIDACIONES FINALES  */
       IF (:VALO_HORA_PRODUCCION IS NULL) THEN VALO_HORA_PRODUCCION = 0;
       IF (:ES_CURVA = -1) THEN  VAR_CONS_FORM_PAGO_APRENDIZAJE = NULL;

       /*  INSERTAR EL TIQUETE  */
       INSERT INTO PCP_CONT_NOVE_TIQU_FABRICACION(
            CONS_CONT_NOVE_TIQU_FABRICACION, CONS_CONT_NOVE_DIARIA,
            CODI_BARRAS, CONS_PROD_PAQU_TIPO, CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_PROCESO,
            NUME_PAQUETE, CONS_GRUP_TALL_DETALLE,CONS_REFE_COLOR, SECU_OPERACION, TIEM_OPERACION,
            CANT_UNIDADES, VALO_HORA_PRODUCCION, CONS_CONT_NOVE_ABONADO, 
            CONS_FORM_PAGO_CURVA, CONS_PUNT_CONTROL)
       VALUES
       (:CONS_CONT_NOVE_TIQU_FABRICACION, :PE_CONS_CONT_NOVE_DIARIA,
            :CODI_BARRAS, :CONS_PROD_PAQU_TIPO, :CONS_PROD_ORDEN, :CONS_PROD_LOTE, :CONS_PROCESO,
            :NUME_PAQUETE, :CONS_GRUP_TALL_DETALLE, :CONS_REFE_COLOR, :SECU_OPERACION, :TIEM_OPERACION,
            :CANT_UNIDADES, :VALO_HORA_PRODUCCION, :PE_CONS_CONT_NOVE_ABONADO, 
            :VAR_CONS_FORM_PAGO_APRENDIZAJE, :VAR_CONS_PUNT_CONTROL);
  END

  SUSPEND;

  /*  ERRORES FATALES  */
  WHEN ANY DO BEGIN
      HUBO_ERROR = 1;
      MENS_ERROR = 'OCURRIӠUN ERROR LEYENDO EL TIQUETE ('||:PE_CODI_BARRAS||').  ERROR DB :'||SQLCODE ;
      SUSPEND;
  END
END ^

ALTER PROCEDURE PRO_PCP_CONT_NOVE_TIQU_FABR_IP (
    PE_CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
    PE_CONS_CONT_NOVE_DIARIA INTEGER,
    PE_CANT_UNIDADES INTEGER)
    RETURNS (
	CODI_BARRAS VARCHAR(15) CHARACTER SET NONE,
    CONS_CONT_NOVE_TIQU_FABRICACION INTEGER,
    CONS_PROD_PAQU_TIPO INTEGER,
    NOMB_PROD_PAQU_TIPO VARCHAR(60) CHARACTER SET NONE,
    CONS_PROD_ORDEN INTEGER,
    CONS_PROD_LOTE INTEGER,
    NUME_PROD_ORDEN VARCHAR(12) CHARACTER SET NONE,
    NUME_LOTE INTEGER,
    CONS_PROCESO INTEGER,
    NUME_PAQUETE INTEGER,
    CONS_GRUP_TALL_DETALLE INTEGER,
    CONS_REFE_COLOR INTEGER,
    SECU_OPERACION INTEGER,
    NOMB_OPERACION VARCHAR(30) CHARACTER SET NONE,
    TIEM_OPERACION NUMERIC(15, 5),
    CANT_UNIDADES INTEGER,
    TIEM_PAQUETE NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    HUBO_ERROR INTEGER,
    MENS_ERROR VARCHAR(200) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CANT_UNID_LEIDAS INTEGER;
DECLARE VARIABLE VAR_DISPONIBLE INTEGER;
DECLARE VARIABLE VAR_CODI_OPERACION VARCHAR(12);
DECLARE VARIABLE VAR_CONS_PUNT_CONTROL INTEGER;

BEGIN
  /*  CODIGO DE BARRAS PARA ERRORES  */
  CODI_BARRAS = :PE_CODI_BARRAS;

  if ((:PE_CANT_UNIDADES IS NULL) OR (:PE_CANT_UNIDADES <= 0))  then
     /*  Asignar una cantidad absurda para que muestre error  */
     PE_CANT_UNIDADES = 0;

  /*  INTERPRTETAR (DESARMAR) EL CÓDIGO DE BARRAS EN VARIABLES  */
  CONS_PROD_PAQU_TIPO = SUBSTRING(:PE_CODI_BARRAS FROM 1 FOR 1);
  CONS_PROD_LOTE = SUBSTRING(:PE_CODI_BARRAS FROM 2 FOR 6);
  NUME_PAQUETE = SUBSTRING(:PE_CODI_BARRAS FROM 8 FOR 4);
  SECU_OPERACION = SUBSTRING(:PE_CODI_BARRAS FROM 12 FOR 3);

  /*  BUSCAR INFORMACIÓN DEL TIQUETE  */
  SELECT
    CONS_PROD_PAQU_TIPO, NOMB_PROD_PAQU_TIPO, CONS_PROD_ORDEN, NUME_PROD_ORDEN,
    CONS_PROD_LOTE ,NUME_LOTE,
    CONS_PROCESO, NUME_PAQUETE, CONS_GRUP_TALL_DETALLE, CONS_REFE_COLOR,
    SECU_OPERACION, CODI_OPERACION, NOMB_OPERACION, TIEM_OPERACION, CANT_UNIDADES,
    CONS_PUNT_CONTROL
  FROM CON_PCP_PROD_DATO_BASI_TIQU_F(:PE_CODI_BARRAS)
  INTO :CONS_PROD_PAQU_TIPO, :NOMB_PROD_PAQU_TIPO, :CONS_PROD_ORDEN, :NUME_PROD_ORDEN,
    :CONS_PROD_LOTE , :NUME_LOTE,
    :CONS_PROCESO, :NUME_PAQUETE, :CONS_GRUP_TALL_DETALLE, :CONS_REFE_COLOR,
    :SECU_OPERACION, :VAR_CODI_OPERACION, :NOMB_OPERACION, :TIEM_OPERACION, :CANT_UNIDADES,
    :VAR_CONS_PUNT_CONTROL;

  /*  SUMAR LAS UNIDADES QUE TIENE LEIDAS EL PAQUETE  */
  SELECT SUM(CANT_UNIDADES)
  FROM PCP_CONT_NOVE_TIQU_FABRICACION
  WHERE CODI_BARRAS = :PE_CODI_BARRAS
  INTO :VAR_CANT_UNID_LEIDAS;

  IF (:VAR_CANT_UNID_LEIDAS IS NULL) THEN VAR_CANT_UNID_LEIDAS = 0;

  /*  UNIDADES POR LAS CUALES SE EJECUTAR`EL TIQUETE (LAS DISPONIBLES)  */
  VAR_DISPONIBLE = :CANT_UNIDADES - :VAR_CANT_UNID_LEIDAS;

  /*  VALIDAR QUE LA CANTIDAD DISPONIBLE SEA MAYOR QUE CERO  */
  IF (:VAR_DISPONIBLE <= 0) THEN BEGIN
      HUBO_ERROR = 1;
      MENS_ERROR = 'LAS '||:CANT_UNIDADES||' UNIDADES DEL PAQUETE YA FUERON REPORTADAS.';
  END
  ELSE
  BEGIN
       /*  REEMPLAZAR LAS UNIDADES  */
       CANT_UNIDADES = :VAR_DISPONIBLE;

       /*  Verificar que el disponible sea mayor o igual que la cantidad a partir  */
       if (:cant_unidades < :pe_cant_unidades) then Begin
          HUBO_ERROR = 1;
          MENS_ERROR = 'INTENTӠREPORTAR '||:PE_CANT_UNIDADES||' UNIDADES DEL PAQUETE Y SOLAMENTE FALTAN '||:CANT_UNIDADES||' POR REPORTAR.';
       End

       if (:cant_unidades >= :pe_cant_unidades) then Begin
             if (:pe_cant_unidades = 0) then Begin
                  HUBO_ERROR = 1;
                  MENS_ERROR = 'NO SE PUEDEN REPORTAR PAQUETES SIN UNIDADES.';
             End
             Else Begin
               /*  ASIGNAR LA CANTIDAD DE UNIDADES  */
               CANT_UNIDADES = :PE_CANT_UNIDADES;

               /*  CALCULAR EL TIEMPO DEL TIQUETE  */
               TIEM_PAQUETE = :TIEM_OPERACION * :CANT_UNIDADES;

               /*  GENERAR LA SECUENCIA DEL REGISTRO  */
               SELECT MAX (CONS_CONT_NOVE_TIQU_FABRICACION) + 1
               FROM PCP_CONT_NOVE_TIQU_FABRICACION
               INTO :CONS_CONT_NOVE_TIQU_FABRICACION;

               IF (:CONS_CONT_NOVE_TIQU_FABRICACION IS NULL) THEN
                  CONS_CONT_NOVE_TIQU_FABRICACION = 1;

               /*  BUSCAR EL VALOR DE LA OPERACION (PARA PAGO POR HABILIDAD)  */
               SELECT VALO.VALO_HORA_PRODUCCION
               FROM VIS_PCP_OPER_COST_PAGO_HABI VALO
               WHERE VALO.CODI_OPER_COSTURA = :VAR_CODI_OPERACION
               INTO VALO_HORA_PRODUCCION;

               IF (:VALO_HORA_PRODUCCION IS NULL) THEN VALO_HORA_PRODUCCION = 0;

               /*  INSERTAR EL TIQUETE  */
               INSERT INTO PCP_CONT_NOVE_TIQU_FABRICACION()
                    CONS_CONT_NOVE_TIQU_FABRICACION, CONS_CONT_NOVE_DIARIA ,
                    CODI_BARRAS, CONS_PROD_PAQU_TIPO, CONS_PROD_ORDEN, CONS_PROD_LOTE, CONS_PROCESO,
                    NUME_PAQUETE, CONS_GRUP_TALL_DETALLE,CONS_REFE_COLOR, SECU_OPERACION, 
                    TIEM_OPERACION, CANT_UNIDADES, VALO_HORA_PRODUCCION, CONS_PUNT_CONTROL)
               VALUES ()
                    :CONS_CONT_NOVE_TIQU_FABRICACION, :PE_CONS_CONT_NOVE_DIARIA ,
                    :CODI_BARRAS, :CONS_PROD_PAQU_TIPO, :CONS_PROD_ORDEN, :CONS_PROD_LOTE, :CONS_PROCESO,
                    :NUME_PAQUETE, :CONS_GRUP_TALL_DETALLE, :CONS_REFE_COLOR, :SECU_OPERACION, 
                    :TIEM_OPERACION, :CANT_UNIDADES, :VALO_HORA_PRODUCCION, :VAR_CONS_PUNT_CONTROL);
            End
       END
  END

  SUSPEND;

  /*  ERRORES FATALES  */
  WHEN ANY DO BEGIN
      HUBO_ERROR = 1;
      MENS_ERROR = 'OCURRIӠUN ERROR LEYENDO EL TIQUETE ('||:PE_CODI_BARRAS||').  ERROR DB :'||SQLCODE ;
      SUSPEND;
  END
END ^

ALTER PROCEDURE PRO_PCP_FILT_USUA_E (PE_TAG_FILTRO INTEGER)
AS 

BEGIN
    /*  ELIMINAR EL FILTRO DEL TAG (CUANDO LO HAY)  */
    IF ((:PE_TAG_FILTRO >= 0) OR (NOT :PE_TAG_FILTRO IS NULL))  THEN
        DELETE FROM PCP$FILT_USUARIO
        WHERE USUARIO = USER AND 
                TAG_FILTRO = :PE_TAG_FILTRO;
    /*  ELIMINAR TODOS LOS FILTROS DEL USUARIO  */
    ELSE
        DELETE FROM PCP$FILT_USUARIO
        WHERE USUARIO = USER;
END ^

ALTER PROCEDURE PRO_PCP_FORM_PAGO_DIFE_DETA_IU (
    CONS_FORM_PAGO_DIFERENCIAL INTEGER,
    RANG_INICIAL NUMERIC(15, 5),
    RANG_FINAL NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5))
AS 

BEGIN

  IF (EXISTS(SELECT CONS_FORM_PAGO_DIFERENCIAL 
        FROM PCP_FORM_PAGO_DIFE_DETALLE 
        WHERE (CONS_FORM_PAGO_DIFERENCIAL = :CONS_FORM_PAGO_DIFERENCIAL) AND  
        (RANG_INICIAL = :RANG_INICIAL))) THEN
    UPDATE PCP_FORM_PAGO_DIFE_DETALLE

    SET RANG_INICIAL = :RANG_INICIAL,
        RANG_FINAL = :RANG_FINAL,
        VALO_HORA_PRODUCCION = :VALO_HORA_PRODUCCION
    WHERE (CONS_FORM_PAGO_DIFERENCIAL = :CONS_FORM_PAGO_DIFERENCIAL) AND 
            (RANG_INICIAL = :RANG_INICIAL);
  ELSE
    INSERT INTO PCP_FORM_PAGO_DIFE_DETALLE (
        CONS_FORM_PAGO_DIFERENCIAL,      RANG_INICIAL,      RANG_FINAL,     VALO_HORA_PRODUCCION)
    VALUES (
        :CONS_FORM_PAGO_DIFERENCIAL,    :RANG_INICIAL,      :RANG_FINAL,    :VALO_HORA_PRODUCCION);
END ^

ALTER PROCEDURE PRO_PCP_FORM_PAGO_PERSONAL_IU (
    CONS_PERSONAL INTEGER,
    FECH_INICIAL TIMESTAMP,
    VALO_HORA_MINI_GARANTIZADO NUMERIC(15, 5),
    VALO_HORA_PRODUCCION NUMERIC(15, 5),
    CONS_SIS_FORM_PAGO INTEGER,
    PARA_1 VARCHAR(60) CHARACTER SET NONE,
    PARA_2 VARCHAR(60) CHARACTER SET NONE,
    PARA_3 VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_PERSONAL 
        FROM PCP_FORM_PAGO_PERSONAL WHERE (CONS_PERSONAL = :CONS_PERSONAL) AND  
        (FECH_INICIAL = :FECH_INICIAL))) THEN
    UPDATE PCP_FORM_PAGO_PERSONAL
    SET VALO_HORA_MINI_GARANTIZADO = :VALO_HORA_MINI_GARANTIZADO,
        VALO_HORA_PRODUCCION = :VALO_HORA_PRODUCCION,
        CONS_SIS_FORM_PAGO = :CONS_SIS_FORM_PAGO,
        PARA_1 = :PARA_1,
        PARA_2 = :PARA_2,
        PARA_3 = :PARA_3
    WHERE (CONS_PERSONAL = :CONS_PERSONAL) AND 
            (FECH_INICIAL = :FECH_INICIAL);
  ELSE
    INSERT INTO PCP_FORM_PAGO_PERSONAL (
        CONS_PERSONAL,          FECH_INICIAL,       VALO_HORA_MINI_GARANTIZADO,
        VALO_HORA_PRODUCCION,   CONS_SIS_FORM_PAGO,
        PARA_1,                 PARA_2,             PARA_3)
    VALUES (
        :CONS_PERSONAL,         :FECH_INICIAL,      :VALO_HORA_MINI_GARANTIZADO,
        :VALO_HORA_PRODUCCION,  :CONS_SIS_FORM_PAGO,
        :PARA_1,                :PARA_2,            :PARA_3);
END ^

ALTER PROCEDURE PRO_PCP_PROD_GENE_RESPONSABLES (PE_CONS_PROD_LOTE INTEGER,
PE_FECH_INICIAL TIMESTAMP)
AS 

DECLARE VARIABLE VAR_CONS_PROCESO INTEGER;
DECLARE VARIABLE VAR_VALO_DURA_ESTIMADA INTEGER;
DECLARE VARIABLE VAR_RESPONSABLE VARCHAR(20);
DECLARE VARIABLE VAR_FECHA  DATE;

BEGIN
  IF ((:PE_FECH_INICIAL IS NULL) OR 
        (:PE_FECH_INICIAL < '01/01/1900')) THEN
      PE_FECH_INICIAL = 'NOW';

  VAR_FECHA = :PE_FECH_INICIAL;

  /*  CREAR LOS RESPONSABLES DE LAS ETAPAS DEFINIDAS EXCLUYENDO PLANEADA Y ANULADA  */ 
    FOR SELECT CONS.CONS_PROCESO,     CONS.RESPONSABLE,   CONS.VALO_DURA_ESTIMADA
        FROM CON_PCP_PROCESOS CONS
        ORDER BY CONS_CONSULTA
        INTO :VAR_CONS_PROCESO,       :VAR_RESPONSABLE,   :VAR_VALO_DURA_ESTIMADA 
    DO BEGIN
       /*  VALIDAR  */
       IF (:VAR_RESPONSABLE IS NULL) THEN VAR_RESPONSABLE = USER;

       IF (:VAR_VALO_DURA_ESTIMADA IS NULL) THEN 
            VAR_VALO_DURA_ESTIMADA = 1;
       ELSE
       IF (:VAR_VALO_DURA_ESTIMADA = 0) THEN 
            VAR_VALO_DURA_ESTIMADA = 1;

       /*  INCREMENTAR LA DURACIÓN A LA FECHA ESPERADA  */
       VAR_FECHA = :VAR_FECHA + VAR_VALO_DURA_ESTIMADA;

       /*  BUSCAR LA FECHA HABIL PARA EL PROCESO  */
        /* $$IBEC$$        SELECT RESULTADO
       FROM FUN_PCP_PLAN_SIGU_DIA_HABIL(:VAR_FECHA)
       INTO :VAR_FECHA; $$IBEC$$ */

       INSERT INTO PCP_PROD_ORDE_RESPONSABLES
            (CONS_PROD_LOTE,    CONS_PROCESO,       USUA_RESPONSABLE, FECH_ESTIMADA)
       VALUES
            (:PE_CONS_PROD_LOTE, :VAR_CONS_PROCESO, :VAR_RESPONSABLE, :VAR_FECHA);
  END
END ^

ALTER PROCEDURE PRO_PCP_PROD_IMPO_RUTA_CORTE (PE_CONS_PROD_ORDEN INTEGER)
AS 

declare variable VAR_CONS_REFE_VARIACION INTEGER;
declare variable VAR_CONS_REFE_MATERIAL INTEGER;
declare variable VAR_SECU_OPERACION INTEGER;
declare variable VAR_CONS_PROCESO INTEGER;
declare variable VAR_CODI_OPERACION VARCHAR(12);
declare variable VAR_NOMB_OPERACION VARCHAR(60);
declare variable VAR_CONS_CORT_UNID_MEDIDA INTEGER;
declare variable VAR_TIEM_OPERACION DECIMAL(15,5);
Declare Variable VAR_NUME_LOTE INTEGER;
Declare Variable VAR_REFE_VARIACION INTEGER;

BEGIN

/*  Eliminar las etapas existentes  */ /* $$IBEC$$ 
  Delete from pcp_prod_list_oper_corte
  where cons_prod_orden = :Pe_Cons_Prod_Orden;
   $$IBEC$$ */ /*  Consultar la referencia de la orden  */ /* $$IBEC$$ 
  Select cons_Refe_variacion
  from con_pcp_prod_orde_referencia(:pe_cons_prod_orden)
  into :var_refe_variacion;
   $$IBEC$$ */ /*  Consultar los lotes en la etapa de trazo  */ /* $$IBEC$$ 
  For Select cast(nume_lote as integer)
  from CON_PCP_PROD_ORDE_LOTE_ETAPA(:pe_cons_prod_orden, 1)
  order by nume_lote
  into :VAR_NUME_LOTE do

  Begin
               $$IBEC$$ */ /* Consultar las operaciones del listado  */ /* $$IBEC$$ 
              FOR SELECT OPE.CONS_REFE_MATERIAL,
                OPE.SECU_OPERACION, OPE.CONS_PROCESO, OPE.CODI_OPERACION,
                OPE.NOMB_OPERACION, OPE.CONS_CORT_UNID_MEDIDA, OPE.TIEM_OPERACION
                FROM PCP_REFE_LIST_OPER_CORTE OPE
                WHERE CONS_REFE_VARIACION = :VAR_CONS_REFE_VARIACION
                ORDER BY CONS_REFE_MATERIAL, SECU_OPERACION
                INTO :VAR_CONS_REFE_MATERIAL,
                     :VAR_SECU_OPERACION,
                     :VAR_CONS_PROCESO,
                     :VAR_CODI_OPERACION,
                     :VAR_NOMB_OPERACION,
                     :VAR_CONS_CORT_UNID_MEDIDA,
                     :VAR_TIEM_OPERACION
              DO BEGIN
                   Insert Into Pcp_Prod_List_Oper_Corte
                   (CONS_PROD_ORDEN, CONS_REFE_MATERIAL, NUME_LOTE,
                   SECU_OPERACION, CONS_PROCESO, CODI_OPERACION, NOMB_OPERACION,
                   CONS_CORT_UNID_MEDIDA, PUESTOS, UNID_POR_TIQUETE, TIEM_OPERACION)
                   Values
                   (:PE_CONS_PROD_ORDEN, :VAR_CONS_REFE_MATERIAL, :VAR_NUME_LOTE,
                   :VAR_SECU_OPERACION, :VAR_CONS_PROCESO, :VAR_CODI_OPERACION, :VAR_NOMB_OPERACION,
                   :VAR_CONS_CORT_UNID_MEDIDA, 1, 1, :VAR_TIEM_OPERACION);
              END
  End $$IBEC$$ */
  Exit;
END ^

ALTER PROCEDURE PRO_PCP_PROD_LOTE_CORTE_IU (
    CONS_PROD_LOTE INTEGER,
    CONS_REFE_MATERIAL INTEGER,
    AGRU_PAQUETE INTEGER)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_PROD_LOTE FROM 
        PCP_PROD_LOTE_CORTE WHERE 
        (CONS_PROD_LOTE = :CONS_PROD_LOTE) AND  
        (CONS_REFE_MATERIAL = :CONS_REFE_MATERIAL))) THEN

    UPDATE PCP_PROD_LOTE_CORTE
    SET AGRU_PAQUETE = :AGRU_PAQUETE
    WHERE (CONS_PROD_LOTE = :CONS_PROD_LOTE) AND (CONS_REFE_MATERIAL = :CONS_REFE_MATERIAL);
  ELSE
    INSERT INTO PCP_PROD_LOTE_CORTE (
        CONS_PROD_LOTE,     CONS_REFE_MATERIAL,     AGRU_PAQUETE)
    VALUES (
        :CONS_PROD_LOTE,    :CONS_REFE_MATERIAL,    :AGRU_PAQUETE);
END ^

ALTER PROCEDURE PRO_PCP_PROD_ORDE_ELIM_LOTEO (
    CONS_PROD_ORDEN INTEGER,
    ETAPA INTEGER)
AS 

begin
    /*  Eliminar el loteo de la orden de producción en la etapa dada  */

/* $$IBEC$$     Delete from Pcp_Prod_Lotes
    where cons_prod_orden = :cons_prod_orden
    and etapa = :etapa;

     $$IBEC$$ */ /*  Eliminar el loteo adicional (capas) de la orden de producción en la etapa dada  */ /* $$IBEC$$ 
    Delete from Pcp_Prod_Lote_Adicional
    where cons_prod_orden = :cons_prod_orden
    and etapa = :etapa; $$IBEC$$ */
    Exit;
end ^

ALTER PROCEDURE PRO_PCP_PROD_ORDE_LOTE_ELIMINAR (PE_CONS_PROD_LOTE INTEGER,
PE_ELIM_ORDEN INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_PROD_ORDEN INTEGER;

BEGIN
    IF (:PE_ELIM_ORDEN IS NULL) THEN PE_ELIM_ORDEN = -1;
    /*  SI SE INTENTA ELIMINAR LA ORDEN, BUSCAR EL CONSECUTIVO ANTES DE ELIMINAR EL LOTE  */

    IF (:PE_ELIM_ORDEN = 1) THEN
       SELECT CONS_PROD_ORDEN
       FROM PCP_PROD_LOTES
       WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE
       INTO :VAR_CONS_PROD_ORDEN;

    /*  ELIMINAR EL LOTE  */
    DELETE
    FROM PCP_PROD_LOTES
    WHERE CONS_PROD_LOTE = :PE_CONS_PROD_LOTE;

    /*  SI PE_ELIM_ORDEN = 1 INDICA QUE SE DEBE INTENTAR ELIMINAR LA ORDEN, SI ESTA NO TIENE LOTES  */

    IF (NOT EXISTS(SELECT CONS_PROD_LOTE FROM PCP_PROD_LOTES
        WHERE CONS_PROD_ORDEN = :VAR_CONS_PROD_ORDEN)) THEN
           DELETE
           FROM PCP_PROD_ORDENES
           WHERE CONS_PROD_ORDEN = :VAR_CONS_PROD_ORDEN;
END ^

ALTER PROCEDURE PRO_PCP_PROD_ORDE_RESP_UPDATE (
    PE_CONS_PROD_ORDE_RESPONSABLE INTEGER,
    PE_USUA_RESPONSABLE VARCHAR(20) CHARACTER SET NONE,
    PE_PORC_AVANCE INTEGER,
    PE_FECH_ESTIMADA TIMESTAMP,
    PE_FECH_SISTEMA TIMESTAMP,
    PE_OBSERVACIONES VARCHAR(1000) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_HECHO INTEGER;
DECLARE VARIABLE VAR_CONS_PROD_LOTE INTEGER;

BEGIN
   /*  VERIFICAR SI ESTÁ HECHO  */
   IF (:PE_PORC_AVANCE = 100) THEN 
        VAR_HECHO = 1;
   ELSE 
        VAR_HECHO = -1;

   IF (:VAR_HECHO = -1) THEN 
        PE_FECH_SISTEMA = 'NOW';
   ELSE IF (:PE_FECH_SISTEMA < '01/01/1900') THEN PE_FECH_SISTEMA = 'NOW';

    /*  VALIDAR LA FECHA DE FIN  */
   /*  CONSULTAR EL CONSECUTIVO DEL LOTE DE PRODUCCION  */

   SELECT CONS_PROD_LOTE
   FROM PCP_PROD_ORDE_RESPONSABLES
   WHERE CONS_PROD_ORDE_RESPONSABLE = :PE_CONS_PROD_ORDE_RESPONSABLE
   INTO :VAR_CONS_PROD_LOTE;

    /*  VERIFICAR QUE SE PUEDA ACTUALIZAR  */ 
   IF (EXISTS(SELECT CONS_PROCESO
   FROM PCP_PROD_ORDE_RESPONSABLES
   WHERE CONS_PROD_LOTE = :VAR_CONS_PROD_LOTE AND 
        CONS_PROD_ORDE_RESPONSABLE > :PE_CONS_PROD_ORDE_RESPONSABLE AND 
        HECHO = 1)) THEN

       EXCEPTION EXC_TEXTO 'EXISTEN PROCESOS POSTERIORES YA FINALIZADOS.';

   /*  VALIDAR LAS FECHAS  */
   IF (:PE_FECH_ESTIMADA IS NULL) THEN
       EXCEPTION EXC_PCP_0013;

   /*  ACTUALIZAR  */
   UPDATE PCP_PROD_ORDE_RESPONSABLES
   SET USUA_RESPONSABLE = :PE_USUA_RESPONSABLE,
       PORC_AVANCE = :PE_PORC_AVANCE,
       FECH_ESTIMADA = :PE_FECH_ESTIMADA,
       FECH_SISTEMA = :PE_FECH_SISTEMA,
       OBSERVACIONES = :PE_OBSERVACIONES,
       HECHO = :VAR_HECHO
       WHERE CONS_PROD_ORDE_RESPONSABLE = :PE_CONS_PROD_ORDE_RESPONSABLE;
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_02_HOJA_IU (
    CONS_REFE_FICHA INTEGER,
    IMAG_1 BLOB,
    IMAG_1_SMALL BLOB,
    OBSE_1 VARCHAR(5000) CHARACTER SET NONE,
    IMAG_2 BLOB,
    IMAG_2_SMALL BLOB,
    OBSE_2 VARCHAR(5000) CHARACTER SET NONE)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_REFE_FICHA 
    FROM PCP_REFE_FICH_02_HOJA_DISENO WHERE 
        (CONS_REFE_FICHA = :CONS_REFE_FICHA))) THEN
    UPDATE PCP_REFE_FICH_02_HOJA_DISENO
    SET IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL,
        OBSE_1 = :OBSE_1,
        IMAG_2 = :IMAG_2,
        IMAG_2_SMALL = :IMAG_2_SMALL,
        OBSE_2 = :OBSE_2
    WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA);
  ELSE
    INSERT INTO PCP_REFE_FICH_02_HOJA_DISENO (
        CONS_REFE_FICHA,   IMAG_1,      IMAG_1_SMALL,   OBSE_1,
        IMAG_2,            IMAG_2_SMALL, OBSE_2)
    VALUES (
        :CONS_REFE_FICHA,   :IMAG_1,    :IMAG_1_SMALL, :OBSE_1,
        :IMAG_2,            :IMAG_2_SMALL, :OBSE_2);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_03_ESPE_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_REFE_FICHA 
            FROM PCP_REFE_FICH_03_ESPE_DISENO 
            WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA))) THEN
    UPDATE PCP_REFE_FICH_03_ESPE_DISENO
    SET IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL
    WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA);
  ELSE
    INSERT INTO PCP_REFE_FICH_03_ESPE_DISENO (
        CONS_REFE_FICHA, IMAG_1, IMAG_1_SMALL)
    VALUES (
        :CONS_REFE_FICHA, :IMAG_1, :IMAG_1_SMALL);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_04_ESPE_IU (CONS_REFE_FICHA INTEGER,
IMAG_1 BLOB,
IMAG_1_SMALL BLOB)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_REFE_FICHA 
             FROM PCP_REFE_FICH_04_ESPE_DISENO 
            WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA))) THEN
    UPDATE PCP_REFE_FICH_04_ESPE_DISENO
    SET IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL
    WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA);
  ELSE
    INSERT INTO PCP_REFE_FICH_04_ESPE_DISENO (
        CONS_REFE_FICHA, IMAG_1, IMAG_1_SMALL)
    VALUES (
        :CONS_REFE_FICHA, :IMAG_1, :IMAG_1_SMALL);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_05_ESPE_IU (
    CONS_REFE_FICHA INTEGER,
    IMAG_1 BLOB,
    IMAG_1_SMALL BLOB)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_REFE_FICHA 
            FROM PCP_REFE_FICH_05_ESPE_EMPAQUE 
            WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA))) THEN
    UPDATE PCP_REFE_FICH_05_ESPE_EMPAQUE
    SET IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL
    WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA);
  ELSE
    INSERT INTO PCP_REFE_FICH_05_ESPE_EMPAQUE (
        CONS_REFE_FICHA, IMAG_1, IMAG_1_SMALL)
    VALUES (
        :CONS_REFE_FICHA, :IMAG_1, :IMAG_1_SMALL);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_06_ESPE_IU (
    CONS_REFE_FICH_DETALLE INTEGER,
    CONS_REFE_FICHA INTEGER,
    IMAG_1 BLOB,
    IMAG_1_SMALL BLOB,
    OBSE_1 VARCHAR(5000) CHARACTER SET NONE)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_REFE_FICH_DETALLE FROM PCP_REFE_FICH_06_ESPE_CONS WHERE (CONS_REFE_FICH_DETALLE = :CONS_REFE_FICH_DETALLE))) THEN

    UPDATE PCP_REFE_FICH_06_ESPE_CONS
    SET CONS_REFE_FICHA = :CONS_REFE_FICHA,
        IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL,
        OBSE_1 = :OBSE_1
    WHERE (CONS_REFE_FICH_DETALLE = :CONS_REFE_FICH_DETALLE);
  ELSE
    INSERT INTO PCP_REFE_FICH_06_ESPE_CONS (
        CONS_REFE_FICH_DETALLE, CONS_REFE_FICHA, IMAG_1, IMAG_1_SMALL, OBSE_1)
    VALUES (
        :CONS_REFE_FICH_DETALLE, :CONS_REFE_FICHA, :IMAG_1, :IMAG_1_SMALL, :OBSE_1);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_07_MEDI_IU (
    CONS_REFE_FICHA INTEGER,
    IMAG_1 BLOB,
    IMAG_1_SMALL BLOB)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_REFE_FICHA 
                FROM PCP_REFE_FICH_07_MEDI_ESPECIAL 
                WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA))) THEN
    UPDATE PCP_REFE_FICH_07_MEDI_ESPECIAL
    SET IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL
    WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA);
  ELSE
    INSERT INTO PCP_REFE_FICH_07_MEDI_ESPECIAL (
        CONS_REFE_FICHA, IMAG_1, IMAG_1_SMALL)
    VALUES (
        :CONS_REFE_FICHA, :IMAG_1, :IMAG_1_SMALL);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_08_MEDI_IU (
    CONS_REFE_FICHA INTEGER,
    IMAG_1 BLOB,
    IMAG_1_SMALL BLOB,
    COMENTARIOS VARCHAR(5000) CHARACTER SET NONE)
AS 

BEGIN

  IF (EXISTS(SELECT CONS_REFE_FICHA 
             FROM PCP_REFE_FICH_08_MEDI_PREN 
            WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA))) THEN
    UPDATE PCP_REFE_FICH_08_MEDI_PREN
    SET IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL,
        COMENTARIOS = :COMENTARIOS
    WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA);
  ELSE
    INSERT INTO PCP_REFE_FICH_08_MEDI_PREN (
        CONS_REFE_FICHA, IMAG_1, IMAG_1_SMALL, COMENTARIOS)
    VALUES (
        :CONS_REFE_FICHA, :IMAG_1, :IMAG_1_SMALL, :COMENTARIOS);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_09_ESPE_IU (
    CONS_REFE_FICH_DETALLE INTEGER,
    CONS_REFE_FICHA INTEGER,
    IMAG_1 BLOB,
    IMAG_1_SMALL BLOB,
    NOMB_IMAGEN VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_REFE_FICH_DETALLE 
                FROM PCP_REFE_FICH_09_ESPE_PRES 
                WHERE (CONS_REFE_FICH_DETALLE = :CONS_REFE_FICH_DETALLE))) THEN
    UPDATE PCP_REFE_FICH_09_ESPE_PRES
    SET CONS_REFE_FICHA = :CONS_REFE_FICHA,
        IMAG_1 = :IMAG_1,
        IMAG_1_SMALL = :IMAG_1_SMALL,
        NOMB_IMAGEN = :NOMB_IMAGEN
    WHERE (CONS_REFE_FICH_DETALLE = :CONS_REFE_FICH_DETALLE);
  ELSE
    INSERT INTO PCP_REFE_FICH_09_ESPE_PRES (
        CONS_REFE_FICH_DETALLE, CONS_REFE_FICHA, IMAG_1, IMAG_1_SMALL, NOMB_IMAGEN)
    VALUES (
        :CONS_REFE_FICH_DETALLE, :CONS_REFE_FICHA, :IMAG_1, :IMAG_1_SMALL, :NOMB_IMAGEN);
END ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_PRED (PE_CONS_REFE_FICHA INTEGER)
AS 

DECLARE VARIABLE VAR_CONS_REFE_TIPO_FICHA INTEGER;
DECLARE VARIABLE VAR_CONS_REFE_VARIACION INTEGER;

begin
  /*  BUSCAR EL TIPO DE FICHA Y VARIACIÓN DE LA FICHA SELECCIONADA  */
  SELECT CONS_REFE_TIPO_FICHA, CONS_REFE_VARIACION
  FROM PCP_REFE_FICH_TECNICAS
  WHERE CONS_REFE_FICHA = :PE_CONS_REFE_FICHA
  INTO :VAR_CONS_REFE_TIPO_FICHA,  :VAR_CONS_REFE_VARIACION;

  /*  ELIMINAR LA PREDETERMINADA  */
  UPDATE PCP_REFE_FICH_TECNICAS
  SET PREDETERMINADA = -1
  WHERE CONS_REFE_TIPO_FICHA = :VAR_CONS_REFE_TIPO_FICHA AND 
            CONS_REFE_VARIACION = :VAR_CONS_REFE_VARIACION;

  /*  ASIGNAR LA PREDETERMINADA  */
  UPDATE PCP_REFE_FICH_TECNICAS
  SET PREDETERMINADA = 1
  WHERE CONS_REFE_FICHA = :PE_CONS_REFE_FICHA;
end ^

ALTER PROCEDURE PRO_PCP_REFE_FICH_TECNICAS_IU (
    CONS_REFE_FICHA INTEGER,
    CONS_REFE_TIPO_FICHA INTEGER,
    ANULADA INTEGER,
    CONS_REFE_VARIACION INTEGER,
    CODI_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    CODI_INTE_REFERENCIA VARCHAR(12) CHARACTER SET NONE,
    CONS_REFE_LINEA INTEGER,
    CONS_REFE_EDAD INTEGER,
    CONS_REFE_ESTILO INTEGER,
    CONS_REFE_GRUPO INTEGER,
    CONS_REFE_TEMPORADA INTEGER,
    CONS_REFE_MARCA INTEGER,
    NOMB_REFERENCIA VARCHAR(60) CHARACTER SET NONE,
    CONS_REFE_GRUP_TALLAS INTEGER,
    TALLAS VARCHAR(240) CHARACTER SET NONE,
    TALL_MUESTRA VARCHAR(12) CHARACTER SET NONE,
    DESCRIPCION VARCHAR(240) CHARACTER SET NONE)
AS 

BEGIN
  IF (EXISTS(SELECT CONS_REFE_FICHA FROM PCP_REFE_FICH_TECNICAS WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA))) THEN
    UPDATE PCP_REFE_FICH_TECNICAS
    SET CONS_REFE_TIPO_FICHA = :CONS_REFE_TIPO_FICHA,
        ANULADA = :ANULADA,
        CONS_REFE_VARIACION = :CONS_REFE_VARIACION,
        CODI_REFERENCIA = :CODI_REFERENCIA,
        CODI_INTE_REFERENCIA = :CODI_INTE_REFERENCIA,
        CONS_REFE_LINEA = :CONS_REFE_LINEA,
        CONS_REFE_EDAD = :CONS_REFE_EDAD,
        CONS_REFE_ESTILO = :CONS_REFE_ESTILO,
        CONS_REFE_GRUPO = :CONS_REFE_GRUPO,
        CONS_REFE_TEMPORADA = :CONS_REFE_TEMPORADA,
        CONS_REFE_MARCA = :CONS_REFE_MARCA,
        NOMB_REFERENCIA = :NOMB_REFERENCIA,
        CONS_REFE_GRUP_TALLAS = :CONS_REFE_GRUP_TALLAS,
        TALLAS = :TALLAS,
        TALL_MUESTRA = :TALL_MUESTRA,
        DESCRIPCION = :DESCRIPCION
    WHERE (CONS_REFE_FICHA = :CONS_REFE_FICHA);
  ELSE
    INSERT INTO PCP_REFE_FICH_TECNICAS (
        CONS_REFE_FICHA,        CONS_REFE_TIPO_FICHA,       ANULADA,            CONS_REFE_VARIACION,
        CODI_REFERENCIA,        CODI_INTE_REFERENCIA,       CONS_REFE_LINEA,    CONS_REFE_EDAD,
        CONS_REFE_ESTILO,       CONS_REFE_GRUPO,            CONS_REFE_TEMPORADA, CONS_REFE_MARCA,
        NOMB_REFERENCIA,        CONS_REFE_GRUP_TALLAS,      TALLAS,             TALL_MUESTRA,
        DESCRIPCION)
    VALUES (
        :CONS_REFE_FICHA,   :CONS_REFE_TIPO_FICHA,  :ANULADA,           :CONS_REFE_VARIACION,
        :CODI_REFERENCIA,   :CODI_INTE_REFERENCIA,  :CONS_REFE_LINEA,   :CONS_REFE_EDAD,
        :CONS_REFE_ESTILO,  :CONS_REFE_GRUPO,       :CONS_REFE_TEMPORADA, :CONS_REFE_MARCA,
        :NOMB_REFERENCIA,   :CONS_REFE_GRUP_TALLAS, :TALLAS,            :TALL_MUESTRA,
        :DESCRIPCION);
END ^

ALTER PROCEDURE PRO_PCP_REFE_INSU_TRASLADAR (PE_CONS_REFE_INSUMO INTEGER)
AS 

DECLARE VARIABLE VAR_ES_FABRICACION INTEGER;

BEGIN
    /*  CONSULTAR SI ES UN INSUMO DE FABRICACION O DE EMPAQUE */
    SELECT ES_FABRICACION
    FROM PCP_REFE_INSUMOS
    WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO
    INTO :VAR_ES_FABRICACION;

    /*  CAMBIAR EL VALOR  */
    IF (:VAR_ES_FABRICACION = 1) THEN 
        VAR_ES_FABRICACION = -1;
    ELSE 
        VAR_ES_FABRICACION = 1;

    /*  ACTUALIZAR EL REGISTRO (EFECTUAR EL MOVIMIENTO)  */
    UPDATE PCP_REFE_INSUMOS
    SET ES_FABRICACION = :VAR_ES_FABRICACION
    WHERE CONS_REFE_INSUMO = :PE_CONS_REFE_INSUMO;
END ^

ALTER PROCEDURE PRO_PCP_REFE_MATE_COLO_ELIM (PE_CONS_REFE_VARIACION INTEGER)
AS 

begin
     /*  Eliminar la asignación de de materiales  */
     Delete
     from Pcp_Refe_Mate_Colores
     Where cons_refe_material In
        (Select cons_refe_material
         from Pcp_Refe_Materiales
         where cons_refe_variacion = :pe_cons_refe_variacion);

     /*  Eliminar la asignación de insumos  */
     Delete
     from Pcp_Refe_Insu_Colores
     Where cons_refe_insumo In
        (Select cons_refe_insumo
         from Pcp_Refe_insumos
         where cons_refe_variacion = :pe_cons_refe_variacion);
end ^

ALTER PROCEDURE PRO_PCP_REFE_MATE_COLO_INSE (PE_TIPO_MATERIAL INTEGER,
    PE_CONS_REFE_MATERIAL INTEGER,
    PE_CONS_REFE_COLOR INTEGER,
    PE_CONS_COLO_COMBINADO INTEGER,
    PE_CONSUMO NUMERIC(15, 5))
AS 

begin
     /*  -- -- -- -- -- -- Tipo material 1-2 : Tejidos y Forros -- -- -- -- -*/

     if (:PE_TIPO_MATERIAL IN (1,2)) then Begin
         Insert Into PCP_REFE_MATE_COLORES
         (cons_refe_material, cons_refe_color, cons_colo_combinado, consumo)
         Values
         (:pe_cons_refe_material, :pe_cons_refe_color, :pe_cons_colo_combinado, :pe_consumo);
     End
     else
     /*  -- -- -- -- -- -- Tipo material 3-4 : Insumos fabric. y empaque -- -- -- -- -*/
     if (:PE_TIPO_MATERIAL IN (3,4)) then Begin
         Insert Into PCP_REFE_INSU_COLORES
         (cons_refe_insumo, cons_refe_color, cons_colo_combinado, consumo)
         Values
         (:pe_cons_refe_material, :pe_cons_refe_color, :pe_cons_colo_combinado, :pe_consumo);
     End
end ^

ALTER PROCEDURE PRO_PCP_REFE_MATE_IMPORTAR (
    PE_CONS_REFE_ORIGEN INTEGER,
    PE_CONS_REFE_VARI_ORIGEN INTEGER,
    PE_CONS_REFE_DESTINO INTEGER,
    PE_CONS_REFE_VARI_DESTINO INTEGER)
AS 

Declare Variable var_cons_refe_mate_origen integer;
Declare Variable var_cons_refe_mate_destino integer;
Declare Variable var_cons_mate_referencia integer;
Declare Variable var_cons_tercero integer;
Declare Variable var_consumo DECIMAL(15,5);
Declare Variable var_tall_promedio Varchar(12);
Declare Variable var_cost_estimado DECIMAL(15,5);
Declare Variable var_combinacion integer;
Declare Variable var_tallaje integer;
Declare Variable var_observacíones varchar(240) ;
Declare Variable var_cons_refe_colo_origen integer;
Declare Variable var_cons_refe_colo_destino integer;
Declare Variable var_cons_colo_combinado integer;
Declare Variable var_cons_colo_origen integer;
Declare Variable var_nume_colo_origen Varchar(6) ;
Declare Variable var_cons_refe_grup_tall_origen integer;
Declare Variable var_cons_refe_grup_tall_destino integer;
Declare Variable var_cons_grup_tall_detalle integer;
Declare Variable var_cons_refe_variacion integer;
Declare Variable var_es_principal integer;
DECLARE VARIABLE var_cons_moneda integer;

begin
     /*  Validar las referencias de origen y destino  */
     if (:Pe_Cons_Refe_Origen is null) then
        /*  Campo no puede ser nulo  */
        Exception EXC_TEXTO 'No se indic󠵮a referencia de origen.';

     /*  Validar variación origen no nula y variación destino nula  */
     if ((Not :pe_cons_refe_origen is null) and 
        (:pe_cons_refe_destino is null))  then
        Exception EXC_PCP_0010;

     if (:Pe_Cons_Refe_Destino is null) then
        /*  Campo no puede ser nulo  */
        Exception EXC_TEXTO 'No se indic󠵮a referencia de destino.';

     /*  Validar que los datos de origen sean diferentes que los de destino  */
     if (((:pe_cons_refe_vari_origen is null) and 
        (:pe_cons_refe_origen = :pe_cons_refe_origen)) Or
         ((:Pe_Cons_Refe_Origen = :pe_cons_Refe_destino) and 
         (:Pe_Cons_Refe_Vari_Destino = :Pe_Cons_Refe_Vari_Origen))) then

        Exception EXC_TEXTO 'Los datos del destino son iguales a los datos de origen.';

     /*  Si tiene variación de la referencia, copiar solamente la variación  */
     If (Not :pe_cons_refe_vari_origen is null) then Begin

          /*   -- -- -- MATERIALES -- -- -- -- -- -- -- -- -  */

          /*  Eliminar los MATERIALES que existan  */
          Delete from pcp_Refe_materiales
          where cons_Refe_variacion = :pe_cons_Refe_vari_destino;

          /*  Copiar los MATERIALES  */
          For Select
                  cons_refe_material, cons_mate_referencia, es_principal,
                  cons_tercero, consumo,
                  tall_promedio, cost_estimado, combinacion,
                  tallaje, observacíones, cons_moneda
              From pcp_refe_materiales
              where cons_refe_variacion = :pe_cons_refe_vari_origen
              Order by cons_refe_variacion, cons_refe_material
              Into
                  :var_cons_refe_mate_origen, :var_cons_mate_referencia, :var_es_principal,
                  :var_cons_tercero, :var_consumo,
                  :var_tall_promedio, :var_cost_estimado, :var_combinacion,
                  :var_tallaje, :var_observacíones, :var_cons_moneda do
              Begin
                   /*  Generar la secuencia  */
                   Select secuencia
                   from FUN_GLO_GENE_SECUENCIA('PCP_REFE_MATERIALES', 'CONS_REFE_MATERIAL')
                   Into :var_cons_refe_mate_destino;

                   /*  Insertar el Maestro de la asignación */
                   Insert Into pcp_refe_materiales
                       (cons_refe_material, Cons_refe_Variacion,
                       cons_mate_referencia, es_principal, cons_tercero, consumo,
                       tall_promedio, cost_estimado, cons_moneda, combinacion,
                       tallaje, observacíones)
                   Values
                   (:var_cons_refe_mate_destino, :pe_cons_refe_vari_destino,
                   :var_cons_mate_referencia, :var_es_principal, :var_cons_tercero, :var_consumo,
                   :var_tall_promedio, :var_cost_estimado, :var_cons_moneda, :var_combinacion,
                   :var_tallaje, :var_observacíones);

                   /*  Buscar la asignación der colores  */ 
                   For Select cons_refe_color, cons_colo_combinado, consumo
                   from pcp_refe_mate_colores
                   Where cons_refe_material = :var_cons_refe_mate_origen
                   Order by cons_refe_material
                   into :var_cons_refe_colo_origen, :var_cons_colo_combinado,
                   :var_consumo 
                    do Begin

                         /*  Buscar el consecutivo del color asignado  */ 
                        Select cons_color, nume_color
                        from glo_Refe_colores
                        where cons_Refe_color = :var_cons_refe_colo_origen
                        into :var_cons_colo_origen, :var_nume_colo_origen ;

                         /*  Verificar que el color exista en la referencia de destino  */ 
                        if (Exists(
                           Select cons_color
                           from Glo_Refe_Colores b
                           where
                               cons_referencia = :pe_cons_Refe_destino and
                               Cons_Color = :var_cons_colo_origen and
                               nume_color = :var_nume_colo_origen)
                           ) then Begin

                                 /*  Seleccionar el consecutivo del color destino  */ 
                                Select cons_refe_color
                                from glo_refe_colores
                                where
                                    cons_referencia = :pe_cons_Refe_destino and
                                    Cons_Color = :var_cons_colo_origen and
                                    nume_color = :var_nume_colo_origen
                                Into :var_cons_refe_colo_destino;

                                 /*  Insertar el registro  */ 
                                Insert Into pcp_refe_mate_colores
                                    (cons_refe_material, cons_Refe_color, 
                                        cons_colo_combinado, consumo)
                                 Values
                                    (:var_cons_refe_mate_destino, :var_cons_refe_colo_destino,  
                                    :var_cons_colo_combinado, :var_consumo);
                           End

                   End  /*  Fin de la asignación de de colores  */

                   /*  Asignación de tallas  */
                   /*  Verificar que el grupo de tallas de origen sea igual al de destino  */ 

                   Select cons_refe_grup_tallas
                   from glo_referencias
                   where cons_referencia = :pe_cons_refe_origen
                   into :var_cons_refe_grup_tall_origen;

                   Select cons_refe_grup_tallas
                   from glo_referencias
                   where cons_referencia = :pe_cons_refe_destino
                   into :var_cons_refe_grup_tall_destino;

                   if (:var_cons_refe_grup_tall_origen = :var_cons_refe_grup_tall_destino) then Begin
                         /*  Seleccionar la asignación der tallas  */ 
                        For Select cons_grup_tall_detalle, consumo
                        from pcp_refe_mate_tallas
                        where cons_refe_material = :var_cons_refe_mate_origen
                        order by cons_refe_material
                        into :var_cons_grup_tall_detalle, :var_consumo

                        do Begin
                           Insert Into pcp_refe_mate_tallas
                           (cons_refe_material, cons_grup_tall_Detalle, consumo)
                           Values
                           (:var_cons_refe_mate_destino, :var_cons_grup_tall_detalle, :var_consumo);
                        End
                   End
              End

          /*   -- -- --  INUSMOS -- -- -- -- -- -- -- -  */

          /*  Eliminar los INSUMOS que existan  */

          Delete from pcp_Refe_Insumos
          where cons_Refe_variacion = :pe_cons_Refe_vari_destino;

          /*  Copiar los INSUMOS  */
          For Select
                  cons_refe_insumo, cons_insu_referencia, cons_tercero, consumo, es_fabricacion,
                  tall_promedio, cost_estimado, combinacion,
                  tallaje, observacíones, cons_moneda
              From pcp_refe_insumos
              where cons_refe_variacion = :pe_cons_refe_vari_origen
              Order by cons_refe_variacion, cons_refe_insumo
              Into
                :var_cons_refe_mate_origen, :var_cons_mate_referencia, :var_cons_tercero, :var_consumo, :var_es_principal,

              :var_tall_promedio, :var_cost_estimado, :var_combinacion,
              :var_tallaje, :var_observacíones, :var_cons_moneda 
            do Begin

                   /*  Generar la secuencia  */
                   Select secuencia
                   from FUN_GLO_GENE_SECUENCIA('PCP_REFE_INSUMOS', 'CONS_REFE_INSUMO')
                   Into :var_cons_refe_mate_destino;

                   /*  Insertar el Maestro de la asignación */

                   Insert Into pcp_refe_insumos
                   (cons_refe_insumo, Cons_refe_Variacion,
                   cons_insu_referencia, cons_tercero, consumo, es_fabricacion,
                   tall_promedio, cost_estimado, cons_moneda, combinacion,
                   tallaje, observacíones)
                   Values
                   (:var_cons_refe_mate_destino, :pe_cons_refe_vari_destino,
                   :var_cons_mate_referencia, :var_cons_tercero, :var_consumo, :var_es_principal,
                   :var_tall_promedio, :var_cost_estimado, :var_cons_moneda, :var_combinacion,
                   :var_tallaje, :var_observacíones);

                   /*  Buscar la asignación der colores  */ 
                   For Select cons_refe_color, cons_colo_combinado, consumo
                   from pcp_refe_insu_colores
                   Where cons_refe_insumo = :var_cons_refe_mate_origen
                   Order by cons_refe_insumo
                   into :var_cons_refe_colo_origen, :var_cons_colo_combinado,
                   :var_consumo 
                do Begin
                         /*  Buscar el consecutivo del color asignado  */ 
                        Select cons_color, nume_color
                        from glo_Refe_colores
                        where cons_Refe_color = :var_cons_refe_colo_origen
                        into :var_cons_colo_origen, :var_nume_colo_origen ;

                         /*  Verificar que el color exista en la referencia de destino  */ 
                        if (Exists(
                           Select cons_color
                           from Glo_Refe_Colores b
                           where
                               cons_referencia = :pe_cons_Refe_destino and
                               Cons_Color = :var_cons_colo_origen and
                               nume_color = :var_nume_colo_origen)
                           ) then
                           Begin
                                 /*  Seleccionar el consecutivo del color destino  */ 
                                Select cons_refe_color
                                from glo_refe_colores
                                where
                                cons_referencia = :pe_cons_Refe_destino and
                                Cons_Color = :var_cons_colo_origen and
                                nume_color = :var_nume_colo_origen
                                Into :var_cons_refe_colo_destino;

                                 /*  Insertar el registro  */ 
                                Insert Into pcp_refe_insu_colores

                                (cons_refe_insumo, cons_Refe_color, cons_colo_combinado,
                                 consumo)

                                 Values
                                 (:var_cons_refe_mate_destino, :var_cons_refe_colo_destino,  :var_cons_colo_combinado,
                                 :var_consumo);
                           End

                   End  /*  Fin de la asignación de de colores  */

                   /*  Verificar que el grupo de tallas de origen sea igual al de destino  */ 

                   Select cons_refe_grup_tallas
                   from glo_referencias
                   where cons_referencia = :pe_cons_refe_origen
                   into :var_cons_refe_grup_tall_origen;

                   Select cons_refe_grup_tallas
                   from glo_referencias
                   where cons_referencia = :pe_cons_refe_destino
                   into :var_cons_refe_grup_tall_destino;

                   if (:var_cons_refe_grup_tall_origen = :var_cons_refe_grup_tall_destino) then Begin
                         /*  Seleccionar la asignación der tallas  */ 
                        For Select cons_grup_tall_detalle, consumo
                        from pcp_refe_insu_tallas
                        where cons_refe_insumo = :var_cons_refe_mate_origen
                        order by cons_refe_insumo
                        into :var_cons_grup_tall_detalle, :var_consumo

                        do Begin
                           Insert Into pcp_refe_insu_tallas
                           (cons_refe_insumo, cons_grup_tall_Detalle, consumo)
                           Values
                           (:var_cons_refe_mate_destino, :var_cons_grup_tall_detalle, :var_consumo);
                        End
                   End
              End
     End
     Else
     /*  Si solamente se envio la referencia, seleccionar todas las variaciones  */
     Begin
          For Select cons_refe_variacion
          from pcp_Refe_variaciones
          where cons_referencia = :pe_cons_Refe_origen
          order by cons_refe_variacion
          into :var_cons_Refe_variacion do
             Execute Procedure PRO_PCP_REFE_MATE_IMPORTAR(pe_cons_Refe_origen, :var_cons_refe_variacion,
                     :pe_cons_Refe_destino, :var_cons_Refe_variacion);
     End
end ^

ALTER PROCEDURE PRO_PCP_REFE_MATE_TALL_ELIM (PE_CONS_REFE_VARIACION INTEGER)
AS 

begin
     /*  Eliminar la asignación de materiales  */
     Delete
     from Pcp_Refe_Mate_Tallas
     Where cons_refe_material In
        (Select cons_refe_material
         from Pcp_Refe_Materiales
         where cons_refe_variacion = :pe_cons_refe_variacion);

     /*  Eliminar la asignación de insumos  */
     Delete
     from Pcp_Refe_Insu_Tallas
     Where cons_refe_insumo In
        (Select cons_refe_insumo
         from Pcp_Refe_insumos
         where cons_refe_variacion = :pe_cons_refe_variacion);
end ^

ALTER PROCEDURE PRO_PCP_REFE_MATE_TALL_INSE (
    PE_TIPO_MATERIAL INTEGER,
    PE_CONS_REFE_MATERIAL INTEGER,
    PE_CONS_GRUP_TALL_DETALLE INTEGER,
    PE_CONSUMO NUMERIC(15, 5))
AS 

begin
     /*  -- -- -- -- -- -- Tipo material 1-2 : Tejidos y Forros -- -- -- -- -*/

     if (:PE_TIPO_MATERIAL IN (1,2)) then Begin
         Insert Into PCP_REFE_MATE_TALLAS
         (cons_refe_material, cons_grup_tall_detalle, consumo)
         Values
         (:pe_cons_refe_material, :pe_cons_grup_tall_detalle, :pe_consumo);
     End
     else

     /*  -- -- -- -- -- -- Tipo material 3-4 : Insumos fabric. y empaque -- -- -- -- -*/

     if (:PE_TIPO_MATERIAL IN (3,4)) then Begin
         Insert Into PCP_REFE_INSU_TALLAS
         (cons_refe_insumo, cons_grup_tall_detalle, consumo)
         Values
         (:pe_cons_refe_material, :pe_cons_grup_tall_detalle, :pe_consumo);
     End
end ^

ALTER PROCEDURE PRO_PCP_REFE_MATE_TRASLADAR (PE_CONS_REFE_MATERIAL INTEGER)
AS 

DECLARE VARIABLE VAR_ES_PRINCIPAL INTEGER;

BEGIN
    /*  CONSULTAR SI ES UN MATERIAL PRINCIPAL O NO  */
    SELECT ES_PRINCIPAL
    FROM PCP_REFE_MATERIALES
    WHERE CONS_REFE_MATERIAL = :PE_CONS_REFE_MATERIAL
    INTO :VAR_ES_PRINCIPAL;

    /*  CAMBIAR EL VALOR  */
    IF (:VAR_ES_PRINCIPAL = 1) THEN VAR_ES_PRINCIPAL = -1;
    ELSE VAR_ES_PRINCIPAL = 1;

    /*  ACTUALIZAR EL REGISTRO (EFECTUAR EL MOVIMIENTO)  */
    UPDATE PCP_REFE_MATERIALES
    SET ES_PRINCIPAL = :VAR_ES_PRINCIPAL
    WHERE CONS_REFE_MATERIAL = :PE_CONS_REFE_MATERIAL;
END ^

ALTER PROCEDURE PRO_PCP_TURN_MINU_DISP_DIA (
    PECONS_TURNO INTEGER,
    PEDIA_SEMANA INTEGER)
RETURNS (
	MINU_DISPONIBLES INTEGER)
AS 

DECLARE VARIABLE VAR_LUNES INTEGER;
DECLARE VARIABLE VAR_MARTES INTEGER;
DECLARE VARIABLE VAR_MIERCOLES INTEGER;
DECLARE VARIABLE VAR_JUEVES INTEGER;
DECLARE VARIABLE VAR_VIERNES INTEGER;
DECLARE VARIABLE VAR_SABADO INTEGER;
DECLARE VARIABLE VAR_DOMINGO INTEGER;

BEGIN
   SELECT LUNE_MINUTOS, MART_MINUTOS, MIER_MINUTOS,
      JUEV_MINUTOS, VIER_MINUTOS, SABA_MINUTOS, DOMI_MINUTOS
   FROM GLO_TURNOS
   WHERE CONS_TURNO = :PECONS_TURNO
   INTO :VAR_LUNES, :VAR_MARTES, :VAR_MIERCOLES,
      :VAR_JUEVES, :VAR_VIERNES, :VAR_SABADO, :VAR_DOMINGO;

   IF (:PEDIA_SEMANA = 1) THEN MINU_DISPONIBLES = :VAR_DOMINGO;
   IF (:PEDIA_SEMANA = 2) THEN MINU_DISPONIBLES = :VAR_LUNES;
   IF (:PEDIA_SEMANA = 3) THEN MINU_DISPONIBLES = :VAR_MARTES;
   IF (:PEDIA_SEMANA = 4) THEN MINU_DISPONIBLES = :VAR_MIERCOLES;
   IF (:PEDIA_SEMANA = 5) THEN MINU_DISPONIBLES = :VAR_JUEVES;
   IF (:PEDIA_SEMANA = 6) THEN MINU_DISPONIBLES = :VAR_VIERNES;
   IF (:PEDIA_SEMANA = 7) THEN MINU_DISPONIBLES = :VAR_SABADO;
   IF (:MINU_DISPONIBLES IS NULL) THEN MINU_DISPONIBLES = 0;
   
    SUSPEND;
END ^

ALTER PROCEDURE PRO_SIST_INSER_FRASE (PE_FRASE VARCHAR(240) CHARACTER SET NONE)
AS 

BEGIN

  /* Verificar que la frase no este vacía */
  IF (:PE_FRASE <> '' AND :PE_FRASE IS NOT NULL) THEN

    /* Verificar que no exista la frase en el tipo de lenguaje */
    IF (NOT EXISTS(SELECT CONS_FRASE
                          FROM SIS_FRASES
                          WHERE FRASE = :PE_FRASE)) THEN

      /* Insertar la frase con el tipo de lenguaje */
      INSERT INTO SIS_FRASES
       (FRASE)
      VALUES(:PE_FRASE);
END ^

ALTER PROCEDURE PRO_SIS_PCP_LOG_I (
    NOMB_MODU_MENSAJE VARCHAR(60) CHARACTER SET NONE,
    TIPO_MENSAJE INTEGER,
    TEXT_MENSAJE VARCHAR(500) CHARACTER SET NONE,
    ADIC_1 VARCHAR(60) CHARACTER SET NONE,
    ADIC_2 VARCHAR(60) CHARACTER SET NONE,
    ADIC_3 VARCHAR(60) CHARACTER SET NONE)
AS 

BEGIN
  INSERT INTO SIS_PCP_LOG (
    NOMB_MODU_MENSAJE, TIPO_MENSAJE, TEXT_MENSAJE,
    ADIC_1, ADIC_2, ADIC_3)
  VALUES (
    :NOMB_MODU_MENSAJE, :TIPO_MENSAJE, :TEXT_MENSAJE,
    :ADIC_1, :ADIC_2, :ADIC_3);
END ^

ALTER PROCEDURE PRO_VINC_COME_PEDIDOS (PE_CONS_PEDIDO INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CUSTNMBR VARCHAR(15);
DECLARE VARIABLE VAR_PACONTNUMBER VARCHAR(15);
DECLARE VARIABLE VAR_PABBEGINDATE DATE;
DECLARE VARIABLE VAR_PABENDDATE DATE;
DECLARE VARIABLE VAR_CNTCPRSN VARCHAR(31);
DECLARE VARIABLE VAR_TIPO_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_CONS_TERCERO INTEGER;
DECLARE VARIABLE VAR_PABQUANTITY FLOAT;
DECLARE VARIABLE VAR_PACOSTCATID VARCHAR(15);
DECLARE VARIABLE VAR_PATU INTEGER;
DECLARE VARIABLE VAR_PABASE_QTY FLOAT;
DECLARE VARIABLE VAR_NOMB_EVENTO VARCHAR(30) = 'EVEN_C08_PEDIDO';
DECLARE VARIABLE VAR_CANTIDAD FLOAT;
DECLARE VARIABLE VAR_REFE_LAVADO VARCHAR(51);
DECLARE VARIABLE VAR_UNIDADES VARCHAR(51);
DECLARE VARIABLE VAR_UNIDADES_I INTEGER;

begin
    /*  EJECUTAR EL EVENTO PARA QUE EL MONITOR REACCIONE Y LIBERE TRABAJO EN COLA  */
   /* $$IBEC$$  EXECUTE PROCEDURE PRO_GLO_POST_EVENT(:VAR_NOMB_EVENTO); $$IBEC$$ */

    /*  INICIALIZAR EL RESULTADO  */
    RESULTADO = '';

    /*  -- -- -   BUSCAR LOS VALORES DE LAS VARIABLES DEL PROCEDIMIENTO -- -- --   */
    /*  INFORMACIÓN GENERAL DEL PEDIDO  */

    SELECT CONS_TERCERO, NUME_PEDIDO,
        FECH_PEDIDO, FECH_ENTREGA,
    FROM PCP_PEDIDOS
    WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
    INTO :VAR_CONS_TERCERO, :VAR_PACONTNUMBER,
        :VAR_PABBEGINDATE, :VAR_PABENDDATE;

    /*  CLIENTE  */
    SELECT CODI_TERCERO
    FROM GLO_TERCEROS
    WHERE CONS_TERCERO = :VAR_CONS_TERCERO
    INTO :VAR_CUSTNMBR;

    SELECT FIRST 1 NOMB_CONTACTO
    FROM GLO_TERC_CONTACTOS
    WHERE CONS_TERCERO = :VAR_CONS_TERCERO
    INTO :VAR_CNTCPRSN;

    /*  VALIDAR  */
    IF (:VAR_CUSTNMBR IS NULL) THEN VAR_CUSTNMBR = 'NA';
    IF (:VAR_CNTCPRSN IS NULL) THEN VAR_CNTCPRSN = 'No asignado';

    /*  VERIFICAR EL TIPO DE MOVIMIENTO  */
    IF (EXISTS (SELECT PAPROJNUMBER FROM C08_GP_PROYECTOS
        WHERE PAPROJNUMBER = :VAR_PACONTNUMBER)) THEN
        VAR_TIPO_MOVIMIENTO = 1;
    ELSE
        VAR_TIPO_MOVIMIENTO = 0;

    /*  BUSCAR EL LAVADO  */
    SELECT FIRST 1
        REFE.CODI_REFERENCIA
    FROM VIS_PCP_PEDI_REFERENCIAS REFE
    WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
    INTO :VAR_REFE_LAVADO;

    IF (:VAR_REFE_LAVADO IS NULL) THEN VAR_REFE_LAVADO = 'No asignado';
    /*  CANTIDAD TOTAL  */
    SELECT SUM(UNID.UNIDADES)
    FROM VIS_PCP_PEDI_UNIDADES UNID
    WHERE CONS_PEDIDO = :PE_CONS_PEDIDO
    INTO :VAR_UNIDADES_I;

    IF (:VAR_UNIDADES_I IS NULL) THEN VAR_UNIDADES = 0;
    VAR_UNIDADES = :VAR_UNIDADES_I;

    /*  CREAR EL CONTRATO  */
    INSERT INTO
    C08_GP_PACONTRATO
    (CUSTNMBR, PACONTNUMBER, PABBEGINDATE, PABENDDATE,
    CNTCPRSN, TIPO_MOVIMIENTO, PAUD1_CONT, PAUD2_CONT)
    VALUES
    (:VAR_CUSTNMBR, :VAR_PACONTNUMBER, :VAR_PABBEGINDATE, :VAR_PABENDDATE,
    :VAR_CNTCPRSN, :VAR_TIPO_MOVIMIENTO, :VAR_REFE_LAVADO, :VAR_UNIDADES);

    /*  CREAR EL REGISTRO PARA INDICAR QUE SE DEBE ENVIAR A GP */
    INSERT INTO   C08_GP_PROYECTOS
    (PAPROJNUMBER, TIPO_MOVIMIENTO, EJECUTADO, OBSERVACIONES)
    VALUES
    (:VAR_PACONTNUMBER, :VAR_TIPO_MOVIMIENTO, -1, '');
    
    /*  CREAR EL PROYECTO  */
    VAR_PABQUANTITY = 0;
    INSERT INTO
    C08_GP_PAPROYECTO
    (CUSTNMBR, PACONTNUMBER, PAPROJNUMBER, PAPROJNAME,
    PABBEGINDATE, PABENDDATE, PABQUANTITY)
    VALUES
    (:VAR_CUSTNMBR, :VAR_PACONTNUMBER, :VAR_PACONTNUMBER, :VAR_PACONTNUMBER,
    :VAR_PABBEGINDATE, :VAR_PABENDDATE, :VAR_PABQUANTITY);

    /*  CREAR LOS ITEMS DE COSTOS  */
    FOR SELECT PACOSTCATID, PATU
    FROM C08_GP_PACOSTCAT
    ORDER BY PACOSTCATID
    INTO :VAR_PACOSTCATID, :VAR_PATU DO BEGIN
            VAR_PABASE_QTY = 0;

            /*  CREAR EL REGISTRO MAESTRO  */
            INSERT INTO C08_GP_PACOSTOSPROYECTO
            (PAPROJNUMBER, PACOSTCATID, PATU, PABASE_QTY,
            PABBEGINDATE, PABENDDATE)
            VALUES
            (:VAR_PACONTNUMBER, :VAR_PACOSTCATID, :VAR_PATU,  :VAR_PABASE_QTY,
             :VAR_PABBEGINDATE, :VAR_PABENDDATE);

            /*  CREAR EL DETALLE DEL REGISTRO (ITEMS)  */
            /*  -- -DESHABILITADO PARA COMERCIAL -- - */
/* $$IBEC$$             EXECUTE PROCEDURE
            PRO_C08_GP_PROY_ITEM_COSTOS(:PE_CONS_PEDIDO, :VAR_PACONTNUMBER,
                :VAR_PACOSTCATID);
 $$IBEC$$ */            /*  ACTUALIZAR LA CANTIDAD EN EL MAESTRO DEL PEDIDO  */

            SELECT SUM(PABASE_QTY)
            FROM C08_GP_PACOSTOSPROYECTO
            WHERE PAPROJNUMBER = :VAR_PACONTNUMBER
            INTO :VAR_CANTIDAD;

            IF (:VAR_CANTIDAD IS NULL) THEN VAR_CANTIDAD = 0;
            UPDATE C08_GP_PAPROYECTO
            SET PABQUANTITY = :VAR_CANTIDAD
            WHERE PAPROJNUMBER = :VAR_PACONTNUMBER;
       END

    /*  EJECUTAR EL EVENTO PARA QUE EL MONITOR REACCIONE  */

   /* $$IBEC$$  EXECUTE PROCEDURE PRO_GLO_POST_EVENT(:VAR_NOMB_EVENTO); $$IBEC$$ */

    /*  GENERAR EL RESULTADO  */

    SUSPEND;

    /*  -- -- -- -- -- -- --   CAPTURAR LOS ERRORES DEL PROCEDIMIENTO -- -- -- -- -- -- */

    WHEN ANY DO BEGIN

       /*  BUSCAR LA FECHA Y HORA DE OCURRENCIA  */
       SELECT '('||
          CAST(CAST('NOW' AS DATE)
AS VARCHAR(30)) || ').  Imposible exportar el contrato '||:VAR_PACONTNUMBER||'. SQLCODE (' || SQLCODE ||')'

       FROM RDB$DATABASE
       INTO :RESULTADO;
       /* $$IBEC$$ SUSPEND; $$IBEC$$ */
    END
end ^

ALTER PROCEDURE PRO_VINC_PROD_ORDENES (PE_CONS_PROD_ORDEN INTEGER)
RETURNS (
	RESULTADO VARCHAR(240) CHARACTER SET NONE)
AS 

DECLARE VARIABLE VAR_CUSTNMBR VARCHAR(15);
DECLARE VARIABLE VAR_PACONTNUMBER VARCHAR(15);
DECLARE VARIABLE VAR_PABBEGINDATE DATE;
DECLARE VARIABLE VAR_PABENDDATE DATE;
DECLARE VARIABLE VAR_CNTCPRSN VARCHAR(31);
DECLARE VARIABLE VAR_TIPO_MOVIMIENTO INTEGER;
DECLARE VARIABLE VAR_CONS_TERCERO INTEGER;
DECLARE VARIABLE VAR_PABQUANTITY FLOAT;
DECLARE VARIABLE VAR_PACOSTCATID VARCHAR(15);
DECLARE VARIABLE VAR_PATU INTEGER;
DECLARE VARIABLE VAR_PABASE_QTY FLOAT;
DECLARE VARIABLE VAR_NOMB_EVENTO VARCHAR(30) = 'EVEN_C08_PROD_ORDENES';
DECLARE VARIABLE VAR_REFE_LAVADO VARCHAR(51);
DECLARE VARIABLE VAR_UNIDADES VARCHAR(51);
DECLARE VARIABLE VAR_UNIDADES_I INTEGER;

BEGIN
    /*  EJECUTAR EL EVENTO PARA QUE EL MONITOR REACCIONE Y LIBERE TRABAJO EN COLA  */
    /* $$IBEC$$ EXECUTE PROCEDURE PRO_GLO_POST_EVENT(:VAR_NOMB_EVENTO); $$IBEC$$ */

    RESULTADO = '';

    /*  -- -- -   BUSCAR LOS VALORES DE LAS VARIABLES DEL PROCEDIMIENTO -- -- --   */

    /*  INFORMACIÓN GENERAL DE LA ORDEN DE PRODUCCION  */

    SELECT CONS_TERCERO, NUME_PROD_ORDEN||'P'
    FROM CON_PCP_PROD_ORDE_TERCERO(:PE_CONS_PROD_ORDEN)
    INTO :VAR_CONS_TERCERO, :VAR_PACONTNUMBER;

    SELECT CAST(CAST(PROD.FECH_SISTEMA AS VARCHAR(12))
AS DATE),
       CAST(CAST(PROD.FECH_SISTEMA AS VARCHAR(12))
AS DATE)
    FROM PCP_PROD_ORDENES PROD
    WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
    INTO :VAR_PABBEGINDATE, :VAR_PABENDDATE;

    /*  CLIENTE  */
    SELECT CODI_TERCERO
    FROM GLO_TERCEROS
    WHERE CONS_TERCERO = :VAR_CONS_TERCERO
    INTO :VAR_CUSTNMBR;

    SELECT FIRST 1 NOMB_CONTACTO
    FROM GLO_TERC_CONTACTOS
    WHERE CONS_TERCERO = :VAR_CONS_TERCERO
    INTO :VAR_CNTCPRSN;

    /*  VALIDAR  */
    IF (:VAR_CUSTNMBR IS NULL) THEN VAR_CUSTNMBR = 'NA';
    IF (:VAR_CNTCPRSN IS NULL) THEN VAR_CNTCPRSN = 'NO ASIGNADO';

    /*  VERIFICAR EL TIPO DE MOVIMIENTO  */
    IF (EXISTS (SELECT PAPROJNUMBER FROM C08_GP_PROYECTOS
        WHERE PAPROJNUMBER = :VAR_PACONTNUMBER)) THEN
        VAR_TIPO_MOVIMIENTO = 1;
    ELSE
        VAR_TIPO_MOVIMIENTO = 0;

    /*  BUSCAR EL LAVADO  */
    SELECT FIRST 1
    REFE.CODI_REFERENCIA
    FROM VIS_PCP_PROD_ORDE_REFERENCIAS REFE
    WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
    INTO :VAR_REFE_LAVADO;

    IF (:VAR_REFE_LAVADO IS NULL) THEN VAR_REFE_LAVADO = 'No asignado';

    /*  CANTIDAD TOTAL  */
    SELECT SUM(UNID.UNIDADES)
    FROM VIS_PCP_PROD_ORDE_UNID_PEDIDAS UNID
    WHERE CONS_PROD_ORDEN = :PE_CONS_PROD_ORDEN
    INTO :VAR_UNIDADES_I;

    IF (:VAR_UNIDADES_I IS NULL) THEN VAR_UNIDADES = 0;
    VAR_UNIDADES = :VAR_UNIDADES_I;

    /*  CREAR EL CONTRATO  */
    INSERT INTO
        C08_GP_PACONTRATO
        (CUSTNMBR, PACONTNUMBER, PABBEGINDATE, PABENDDATE,
        CNTCPRSN, TIPO_MOVIMIENTO, PAUD1_CONT, PAUD2_CONT)
    VALUES
        (:VAR_CUSTNMBR, :VAR_PACONTNUMBER, :VAR_PABBEGINDATE, :VAR_PABENDDATE,
        :VAR_CNTCPRSN, :VAR_TIPO_MOVIMIENTO, :VAR_REFE_LAVADO, :VAR_UNIDADES);

    /*  CREAR EL REGISTRO PARA INDICAR QUE SE DEBE ENVIAR A GP */

    INSERT INTO   C08_GP_PROYECTOS
    (PAPROJNUMBER, TIPO_MOVIMIENTO, EJECUTADO, OBSERVACIONES)
    VALUES
    (:VAR_PACONTNUMBER, :VAR_TIPO_MOVIMIENTO, -1, '');

    /*  CREAR EL PROYECTO  */

    VAR_PABQUANTITY = 0;

    INSERT INTO
    C08_GP_PAPROYECTO
    (CUSTNMBR, PACONTNUMBER, PAPROJNUMBER, PAPROJNAME,
    PABBEGINDATE, PABENDDATE, PABQUANTITY)
    VALUES
    (:VAR_CUSTNMBR, :VAR_PACONTNUMBER, :VAR_PACONTNUMBER, :VAR_PACONTNUMBER,
    :VAR_PABBEGINDATE, :VAR_PABENDDATE, :VAR_PABQUANTITY);

    /*  CREAR LOS ITEMS DE COSTOS  */
    FOR SELECT PACOSTCATID, PATU
    FROM C08_GP_PACOSTCAT
    ORDER BY PACOSTCATID
    INTO :VAR_PACOSTCATID, :VAR_PATU 
    DO BEGIN
            VAR_PABASE_QTY = 0;

            /*  CREAR EL REGISTRO MAESTRO  */
            INSERT INTO C08_GP_PACOSTOSPROYECTO
            (PAPROJNUMBER, PACOSTCATID, PATU, PABASE_QTY,
            PABBEGINDATE, PABENDDATE)
            VALUES
            (:VAR_PACONTNUMBER, :VAR_PACOSTCATID, :VAR_PATU,  :VAR_PABASE_QTY,
             :VAR_PABBEGINDATE, :VAR_PABENDDATE);

            /*  CREAR EL DETALLE DEL REGISTRO (ITEMS)  */

            EXECUTE PROCEDURE

            PRO_C08_GP_PROD_ITEM_COSTOS(:PE_CONS_PROD_ORDEN, :VAR_PACONTNUMBER,
                :VAR_PACOSTCATID);

       END

    /*  EJECUTAR EL EVENTO PARA QUE EL MONITOR REACCIONE  */

    /* $$IBEC$$ EXECUTE PROCEDURE PRO_GLO_POST_EVENT(:VAR_NOMB_EVENTO); $$IBEC$$ */

    /*  GENERAR EL RESULTADO  */

    SUSPEND;

    /*  -- -- -- -- -- -- --   CAPTURAR LOS ERRORES DEL PROCEDIMIENTO -- -- -- -- -- -- */

    WHEN ANY DO BEGIN

       /*  BUSCAR LA FECHA Y HORA DE OCURRENCIA  */
       SELECT '('||
          CAST(CAST('NOW' AS DATE)
AS VARCHAR(30)) || ').  IMPOSIBLE EXPORTAR EL CONTRATO '||:VAR_PACONTNUMBER||'. SQLCODE (' || SQLCODE ||')'

       FROM RDB$DATABASE
       INTO :RESULTADO;

     /* $$IBEC$$   SUSPEND; $$IBEC$$ */
    END

END ^
SET TERM ; ^
COMMIT WORK ;
SET AUTODDL ON;
SET TERM ^ ;

/*  Triggers only will work for SQL triggers  */
CREATE TRIGGER C08_GP_INSUMOS_AI0 FOR C08_GP_INSUMOS 
ACTIVE AFTER INSERT POSITION 0 
as

DECLARE VARIABLE VAR_RESULTADO VARCHAR(240);

begin
  /*  EJECUTAR EL PROCEDIMIENTO ALMACENADO  */
  SELECT RESULTADO
  FROM PRO_C08_GP_INSUMOS(
      NEW.CODI_INSU_GRUPO, NEW.CODI_INSU_SUBGRUPO,
      NEW.CODI_UNID_MEDIDA, NEW.CODI_UNI_MEDI_PLAN,
      NEW.CODI_INSU_REFERENCIA, NEW.NOMB_INSU_REFERENCIA,
      NEW.OBSERVACIONES, NEW.DESC_BREVE,
      NEW.TIPO_MOVIMIENTO)
  INTO :VAR_RESULTADO;

  /*  SI FUE EXITOSO, ELIMINAR EL REGISTRO  */
  IF (:VAR_RESULTADO = '') THEN BEGIN
          NEW.RESULTADO = '-1';
          DELETE FROM C08_GP_INSUMOS
          WHERE NEW.RESULTADO = '-1';
    END
  ELSE
    NEW.RESULTADO = :VAR_RESULTADO;
END ^

CREATE TRIGGER C08_GP_MATERIALES_AI0 FOR C08_GP_MATERIALES 
ACTIVE AFTER INSERT POSITION 0 
AS

DECLARE VARIABLE VAR_RESULTADO VARCHAR(240);

begin

  /*  EJECUTAR EL PROCEDIMIENTO ALMACENADO  */

  SELECT RESULTADO

  FROM PRO_C08_GP_MATERIALES(
      NEW.CODI_MATE_GRUPO, NEW.CODI_MATE_SUBGRUPO,
      NEW.CODI_UNID_MEDIDA, NEW.CODI_UNID_MEDI_PLAN,
      NEW.CODI_MATE_REFERENCIA, NEW.NOMB_MATE_REFERENCIA,
      NEW.OBSERVACIONES,
      NEW.DESC_BREVE,
      NEW.TIPO_MOVIMIENTO)

  INTO :VAR_RESULTADO;

  /*  SI FUE EXITOSO, ELIMINAR EL REGISTRO  */
  IF (:VAR_RESULTADO = '') THEN BEGIN
          NEW.RESULTADO = '-1';
          DELETE FROM C08_GP_MATERIALES
          WHERE NEW.RESULTADO = '-1';
    END
  ELSE
    NEW.RESULTADO = :VAR_RESULTADO;
END ^

CREATE TRIGGER C08_GP_PROYECTOS_AU0 FOR C08_GP_PROYECTOS 
ACTIVE AFTER INSERT POSITION 0 
AS

BEGIN
    /*  EVEN_C08_PEDIDO  */
    EXECUTE PROCEDURE PRO_GLO_POST_EVENT('EVEN_C08_PEDIDO');
END ^

CREATE TRIGGER C08_MIDA_NVD_PCP_BIU0 FOR C08_MIDA_NVD_PCP 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
   if (NEW.CONS_MIDA_NVD_PCP IS NULL) then
     Select secuencia
      from fun_glo_gene_secuencia('C08_MIDA_NVD_PCP','CONS_MIDA_NVD_PCP')
      into new.CONS_MIDA_NVD_PCP;
end ^

CREATE TRIGGER C08_MIDA_PERSONAL_AIU0 FOR C08_MIDA_PERSONAL 
ACTIVE AFTER INSERT OR UPDATE POSITION 0 
AS

begin
/*      IF (NEW.EJECUTADO = -1) THEN
     EXECUTE PROCEDURE PRO_C08_MIDA_INGRESO; */
end ^

CREATE TRIGGER GLO_ABONADOS_BIU0 FOR GLO_ABONADOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ABONADO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */

    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ABONADOS','CONS_ABONADO')
    INTO NEW.CONS_ABONADO;

  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_ABONADO IS NULL) OR (NEW.CODI_ABONADO = '')) THEN
     NEW.CODI_ABONADO = CAST(NEW.CONS_ABONADO AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_ACCESORIOS_BIU0 FOR GLO_ACCESORIOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCESORIO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCESORIOS','CONS_ACCESORIO')
    INTO NEW.CONS_ACCESORIO;

end ^

CREATE TRIGGER GLO_ACCE_CARACTERISTICAS_BIU0 FOR GLO_ACCE_CARACTERISTICAS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_CARACTERISTICA IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_CARACTERISTICAS','CONS_ACCE_CARACTERISTICA')
    INTO NEW.CONS_ACCE_CARACTERISTICA;
end ^

CREATE TRIGGER GLO_ACCE_CARA_TIPOS_BIU0 FOR GLO_ACCE_CARA_TIPOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_CARA_TIPO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_CARA_TIPOS','CONS_ACCE_CARA_TIPO')
    INTO NEW.CONS_ACCE_CARA_TIPO;
end ^

CREATE TRIGGER GLO_ACCE_GRUPOS_BIU0 FOR GLO_ACCE_GRUPOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_GRUPO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_GRUPOS','CONS_ACCE_GRUPO')
    INTO NEW.CONS_ACCE_GRUPO;

  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_ACCE_GRUPO IS NULL) OR (NEW.CODI_ACCE_GRUPO = '')) THEN
     NEW.CODI_ACCE_GRUPO = CAST(NEW.CONS_ACCE_GRUPO AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_ACCE_GRUPOS_BUD0 FOR GLO_ACCE_GRUPOS 
ACTIVE BEFORE UPDATE OR DELETE POSITION 0 
as

begin
  IF (OLD.CONS_ACCE_GRUPO = 0) THEN
    /* El registro que está intentando modificar es del sistema. */
    EXCEPTION EXC_BAS_0001;
end ^

CREATE TRIGGER GLO_ACCE_MOVIMIENTOS_BIU0 FOR GLO_ACCE_MOVIMIENTOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_MOVIMIENTO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_MOVIMIENTOS','CONS_ACCE_MOVIMIENTO')
    INTO NEW.CONS_ACCE_MOVIMIENTO;
end ^

CREATE TRIGGER GLO_ACCE_MOVI_ANULADOS_BIU0 FOR GLO_ACCE_MOVI_ANULADOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_MOVI_ANULADO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_MOVI_ANULADOS','CONS_ACCE_MOVI_ANULADO')
    INTO NEW.CONS_ACCE_MOVI_ANULADO;
end ^

CREATE TRIGGER GLO_ACCE_RECURSOS_BIU0 FOR GLO_ACCE_RECURSOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_RECURSO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_RECURSOS','CONS_ACCE_RECURSO')
    INTO NEW.CONS_ACCE_RECURSO;
end ^

CREATE TRIGGER GLO_ACCE_TIPOS_BIU0 FOR GLO_ACCE_TIPOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_TIPO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_TIPOS','CONS_ACCE_TIPO')
    INTO NEW.CONS_ACCE_TIPO;

  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_ACCE_TIPO IS NULL) OR (NEW.CODI_ACCE_TIPO = '')) THEN
     /* Asignamos el consecutivo al c󤩧o */
     NEW.CODI_ACCE_TIPO = CAST(NEW.CONS_ACCE_TIPO AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_ACCE_TIPOS_BUD0 FOR GLO_ACCE_TIPOS 
ACTIVE BEFORE UPDATE OR DELETE POSITION 0 
as

begin
  IF (OLD.CONS_ACCE_TIPO = 0) THEN
    /* El registro que está intentando modificar es del sistema. */
    EXCEPTION EXC_BAS_0001;
end ^

CREATE TRIGGER GLO_ACCE_TIPO_CARACTERISTI_BIU0 FOR GLO_ACCE_TIPO_CARACTERISTICAS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_TIPO_CARACTERISTICA IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_TIPO_CARACTERISTICAS','CONS_ACCE_TIPO_CARACTERISTICA')
    INTO NEW.CONS_ACCE_TIPO_CARACTERISTICA;

  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_ACCE_TIPO_CARACTERISTICA IS NULL) OR (NEW.CODI_ACCE_TIPO_CARACTERISTICA = '')) THEN
     /* Asignamos el consecutivo al c󤩧o */
     NEW.CODI_ACCE_TIPO_CARACTERISTICA = CAST(NEW.CONS_ACCE_TIPO_CARACTERISTICA AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_ACCE_TIPO_MOVIMIENTO_BIU0 FOR GLO_ACCE_TIPO_MOVIMIENTO 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_ACCE_TIPO_MOVIMIENTO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_ACCE_TIPO_MOVIMIENTO','CONS_ACCE_TIPO_MOVIMIENTO')
    INTO NEW.CONS_ACCE_TIPO_MOVIMIENTO;
  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_ACCE_TIPO_MOVIMIENTO IS NULL) OR (NEW.CODI_ACCE_TIPO_MOVIMIENTO = '')) THEN
     /* Asignamos el consecutivo al c󤩧o */
     NEW.CODI_ACCE_TIPO_MOVIMIENTO = CAST(NEW.CONS_ACCE_TIPO_MOVIMIENTO AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_ACCE_TIPO_MOVIMIENTO_BUD0 FOR GLO_ACCE_TIPO_MOVIMIENTO 
ACTIVE BEFORE UPDATE OR DELETE POSITION 0 
as

begin
  IF (OLD.CONS_ACCE_TIPO_MOVIMIENTO < 6) THEN
    /* El registro que está intentando modificar es del sistema. */
    EXCEPTION EXC_BAS_0001;
end ^

CREATE TRIGGER GLO_AREAS_BIU0 FOR GLO_AREAS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_AREA IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_AREAS','CONS_AREA')
    INTO NEW.CONS_AREA;
  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_AREA IS NULL) OR (NEW.CODI_AREA = '')) THEN
     /* Asignamos el consecutivo al c󤩧o */
     NEW.CODI_AREA = CAST(NEW.CONS_AREA AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_AREAS_BUD0 FOR GLO_AREAS 
ACTIVE BEFORE UPDATE OR DELETE POSITION 0 
as

begin
  /* Si el registro es 'NA' 'No Aplica' no se deja eliminar ni actualizar */
  IF (OLD.CONS_AREA = 0) THEN
    /* El registro que está intentando modificar es del sistema. */
    EXCEPTION EXC_BAS_0001;
end ^

CREATE TRIGGER GLO_BODEGAS_BIU0 FOR GLO_BODEGAS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_BODEGA IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_BODEGAS','CONS_BODEGA')
    INTO NEW.CONS_BODEGA;
  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_BODEGA IS NULL) OR (NEW.CODI_BODEGA = '')) THEN
     /* Asignamos el consecutivo al c󤩧o */
     NEW.CODI_BODEGA = CAST(NEW.CONS_BODEGA AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_BODEGAS_BUD0 FOR GLO_BODEGAS 
ACTIVE BEFORE UPDATE OR DELETE POSITION 0 
as

begin
  /* Si el registro es 'NA' 'No Aplica' no se deja eliminar ni actualizar */
  IF (OLD.CONS_BODEGA = 0) THEN
    /* El registro que está intentando modificar es del sistema. */
    EXCEPTION EXC_BAS_0001;
end ^

CREATE TRIGGER GLO_CIUDADES_BIU0 FOR GLO_CIUDADES 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_CIUDAD IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_CIUDADES','CONS_CIUDAD')
    INTO NEW.CONS_CIUDAD;
  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_CIUDAD IS NULL) OR (NEW.CODI_CIUDAD = '')) THEN
     /* Asignamos el consecutivo al c󤩧o */
     NEW.CODI_CIUDAD = CAST(NEW.CONS_CIUDAD AS VARCHAR(12));
end ^

CREATE TRIGGER GLO_CIUDADES_BUD0 FOR GLO_CIUDADES 
ACTIVE AFTER UPDATE OR DELETE POSITION 0 
as

begin
  /* Si el registro es 'NA' 'No Aplica' no se deja eliminar ni actualizar */
  IF (OLD.CONS_CIUDAD = 0) THEN
    /* El registro que está intentando modificar es del sistema. */
    EXCEPTION EXC_BAS_0001;
end ^

CREATE TRIGGER GLO_COLORES_BIU0 FOR GLO_COLORES 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_COLOR IS NULL) THEN

    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('GLO_COLORES','CONS_COLOR')
    INTO NEW.CONS_COLOR;

  /* Consultamos si el código está vacío */
  IF ((NEW.CODI_COLOR IS NULL) OR (NEW.CODI_COLOR = '')) THEN

  BEGIN
     IF (NEW.es_entrepierna = 1) then
             /* Asignamos la entrepierna  */
             NEW.CODI_COLOR = 'E'||NEW.NOMB_COLOR;
     ELSE
             /* Asignamos el consecutivo  */
             NEW.CODI_COLOR = CAST(NEW.CONS_COLOR AS VARCHAR(12));
  END
end ^

CREATE TRIGGER GLO_COLO_GRUPOS_BIU0 FOR GLO_COLO_GRUPOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
/* Asignamos el consecutivo  */
    NEW.CODI_UBIC_TIPO = CAST(NEW.CONS_UBIC_TIPO AS VARCHAR(12));    
end ^

CREATE TRIGGER SIS_UNID_MEDI_TIEMPO_BIU0 FOR SIS_UNID_MEDI_TIEMPO 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_UNID_MEDI_TIEMPO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('SIS_UNID_MEDI_TIEMPO','CONS_UNID_MEDI_TIEMPO')
    INTO NEW.CONS_UNID_MEDI_TIEMPO;

  IF ((NEW.CODI_UNID_MEDI_TIEMPO IS NULL) OR (NEW.CODI_UNID_MEDI_TIEMPO = '')) THEN
    NEW.CODI_UNID_MEDI_TIEMPO = CAST(NEW.CONS_UNID_MEDI_TIEMPO AS VARCHAR(12));
end ^

CREATE TRIGGER SIS_UNID_MEDI_TIEMPO_BUD0 FOR SIS_UNID_MEDI_TIEMPO 
ACTIVE BEFORE UPDATE OR DELETE POSITION 0 
as

begin
  /* Si el registro es 'NA' 'No Aplica' no se deja eliminar ni actualizar */
  IF (OLD.CONS_UNID_MEDI_TIEMPO = 0) THEN
    /* El registro que está intentando modificar es del sistema. */
    EXCEPTION EXC_BAS_0001;
end ^

CREATE TRIGGER SIS_USUA_INFORMES_BIU0 FOR SIS_USUA_INFORMES 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_USUA_INFORME IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('SIS_USUA_INFORMES','CONS_USUA_INFORME')
    INTO NEW.CONS_USUA_INFORME;
end ^

CREATE TRIGGER SIS_USUA_MODULOS_BIU0 FOR SIS_USUA_MODULOS 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_USUA_MODULO IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('SIS_USUA_MODULOS','CONS_USUA_MODULO')
    INTO NEW.CONS_USUA_MODULO;
end ^

CREATE TRIGGER SIS_USUA_OPCIONES_BIU0 FOR SIS_USUA_OPCIONES 
ACTIVE BEFORE INSERT OR UPDATE POSITION 0 
as

begin
  /* Consultamos si el consecutivo está vacío */
  IF (NEW.CONS_USUA_OPCION IS NULL) THEN
    /* Buscamos el último consecutivo de la tabla */
    SELECT SECUENCIA
    FROM FUN_GLO_GENE_SECUENCIA('SIS_USUA_OPCIONES','CONS_USUA_OPCION')
    INTO NEW.CONS_USUA_OPCION;
end ^

COMMIT WORK ^
SET TERM ; ^

/*  Grant permissions for this database  */
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON IBE$PARAMS_HISTORY TO PUBLIC;
GRANT INSERT ON IBE$VERSION_HISTORY TO TRIGGER IBE$VERSION_HISTORY_BI;
GRANT SELECT ON PCP_OPCIONES TO PUBLIC;
